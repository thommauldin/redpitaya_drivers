// Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2017.4 (win64) Build 2086221 Fri Dec 15 20:55:39 MST 2017
// Date        : Fri May 25 13:20:20 2018
// Host        : Thomas-Laptop running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               D:/NextLab/Vivado/redpitaya_Practice/redpitaya_Practice.srcs/sources_1/bd/ADC/ip/ADC_axi_smc_0/ADC_axi_smc_0_sim_netlist.v
// Design      : ADC_axi_smc_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7z010clg400-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "ADC_axi_smc_0,bd_61e3,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "bd_61e3,Vivado 2017.4" *) 
(* NotValidForBitStream *)
module ADC_axi_smc_0
   (aclk,
    aresetn,
    S00_AXI_awaddr,
    S00_AXI_awlen,
    S00_AXI_awsize,
    S00_AXI_awburst,
    S00_AXI_awlock,
    S00_AXI_awcache,
    S00_AXI_awprot,
    S00_AXI_awqos,
    S00_AXI_awvalid,
    S00_AXI_awready,
    S00_AXI_wdata,
    S00_AXI_wstrb,
    S00_AXI_wlast,
    S00_AXI_wvalid,
    S00_AXI_wready,
    S00_AXI_bresp,
    S00_AXI_bvalid,
    S00_AXI_bready,
    S00_AXI_araddr,
    S00_AXI_arlen,
    S00_AXI_arsize,
    S00_AXI_arburst,
    S00_AXI_arlock,
    S00_AXI_arcache,
    S00_AXI_arprot,
    S00_AXI_arqos,
    S00_AXI_arvalid,
    S00_AXI_arready,
    S00_AXI_rdata,
    S00_AXI_rresp,
    S00_AXI_rlast,
    S00_AXI_rvalid,
    S00_AXI_rready,
    S01_AXI_araddr,
    S01_AXI_arlen,
    S01_AXI_arsize,
    S01_AXI_arburst,
    S01_AXI_arlock,
    S01_AXI_arcache,
    S01_AXI_arprot,
    S01_AXI_arqos,
    S01_AXI_arvalid,
    S01_AXI_arready,
    S01_AXI_rdata,
    S01_AXI_rresp,
    S01_AXI_rlast,
    S01_AXI_rvalid,
    S01_AXI_rready,
    S02_AXI_awaddr,
    S02_AXI_awlen,
    S02_AXI_awsize,
    S02_AXI_awburst,
    S02_AXI_awlock,
    S02_AXI_awcache,
    S02_AXI_awprot,
    S02_AXI_awqos,
    S02_AXI_awvalid,
    S02_AXI_awready,
    S02_AXI_wdata,
    S02_AXI_wstrb,
    S02_AXI_wlast,
    S02_AXI_wvalid,
    S02_AXI_wready,
    S02_AXI_bresp,
    S02_AXI_bvalid,
    S02_AXI_bready,
    M00_AXI_awaddr,
    M00_AXI_awlen,
    M00_AXI_awsize,
    M00_AXI_awburst,
    M00_AXI_awlock,
    M00_AXI_awcache,
    M00_AXI_awprot,
    M00_AXI_awqos,
    M00_AXI_awvalid,
    M00_AXI_awready,
    M00_AXI_wdata,
    M00_AXI_wstrb,
    M00_AXI_wlast,
    M00_AXI_wvalid,
    M00_AXI_wready,
    M00_AXI_bresp,
    M00_AXI_bvalid,
    M00_AXI_bready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.aclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.aclk, FREQ_HZ 125000000, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, ASSOCIATED_BUSIF M00_AXI:S00_AXI:S01_AXI:S02_AXI, ASSOCIATED_CLKEN m_sc_aclken" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.aresetn RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.aresetn, POLARITY ACTIVE_LOW" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWADDR" *) input [31:0]S00_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLEN" *) input [7:0]S00_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWSIZE" *) input [2:0]S00_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWBURST" *) input [1:0]S00_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLOCK" *) input [0:0]S00_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWCACHE" *) input [3:0]S00_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWPROT" *) input [2:0]S00_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWQOS" *) input [3:0]S00_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWVALID" *) input S00_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWREADY" *) output S00_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WDATA" *) input [31:0]S00_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WSTRB" *) input [3:0]S00_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WLAST" *) input S00_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WVALID" *) input S00_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WREADY" *) output S00_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BRESP" *) output [1:0]S00_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BVALID" *) output S00_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BREADY" *) input S00_AXI_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARADDR" *) input [31:0]S00_AXI_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLEN" *) input [7:0]S00_AXI_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARSIZE" *) input [2:0]S00_AXI_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARBURST" *) input [1:0]S00_AXI_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLOCK" *) input [0:0]S00_AXI_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARCACHE" *) input [3:0]S00_AXI_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARPROT" *) input [2:0]S00_AXI_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARQOS" *) input [3:0]S00_AXI_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARVALID" *) input S00_AXI_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARREADY" *) output S00_AXI_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RDATA" *) output [31:0]S00_AXI_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RRESP" *) output [1:0]S00_AXI_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RLAST" *) output S00_AXI_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RVALID" *) output S00_AXI_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S00_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 16, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input S00_AXI_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARADDR" *) input [31:0]S01_AXI_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARLEN" *) input [7:0]S01_AXI_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARSIZE" *) input [2:0]S01_AXI_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARBURST" *) input [1:0]S01_AXI_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARLOCK" *) input [0:0]S01_AXI_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARCACHE" *) input [3:0]S01_AXI_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARPROT" *) input [2:0]S01_AXI_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARQOS" *) input [3:0]S01_AXI_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARVALID" *) input S01_AXI_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARREADY" *) output S01_AXI_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RDATA" *) output [31:0]S01_AXI_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RRESP" *) output [1:0]S01_AXI_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RLAST" *) output S01_AXI_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RVALID" *) output S01_AXI_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S01_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_ONLY, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 0, HAS_BRESP 0, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 16, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input S01_AXI_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWADDR" *) input [31:0]S02_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWLEN" *) input [7:0]S02_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWSIZE" *) input [2:0]S02_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWBURST" *) input [1:0]S02_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWLOCK" *) input [0:0]S02_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWCACHE" *) input [3:0]S02_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWPROT" *) input [2:0]S02_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWQOS" *) input [3:0]S02_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWVALID" *) input S02_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWREADY" *) output S02_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WDATA" *) input [31:0]S02_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WSTRB" *) input [3:0]S02_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WLAST" *) input S02_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WVALID" *) input S02_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WREADY" *) output S02_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BRESP" *) output [1:0]S02_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BVALID" *) output S02_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S02_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE WRITE_ONLY, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 0, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 16, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input S02_AXI_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWADDR" *) output [31:0]M00_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLEN" *) output [3:0]M00_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWSIZE" *) output [2:0]M00_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWBURST" *) output [1:0]M00_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLOCK" *) output [1:0]M00_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWCACHE" *) output [3:0]M00_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWPROT" *) output [2:0]M00_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWQOS" *) output [3:0]M00_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWVALID" *) output M00_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWREADY" *) input M00_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WDATA" *) output [63:0]M00_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WSTRB" *) output [7:0]M00_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WLAST" *) output M00_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WVALID" *) output M00_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WREADY" *) input M00_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BRESP" *) input [1:0]M00_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BVALID" *) input M00_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M00_AXI, DATA_WIDTH 64, PROTOCOL AXI3, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE WRITE_ONLY, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 0, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 8, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output M00_AXI_bready;

  wire [31:0]M00_AXI_awaddr;
  wire [1:0]M00_AXI_awburst;
  wire [3:0]M00_AXI_awcache;
  wire [3:0]M00_AXI_awlen;
  wire [1:0]M00_AXI_awlock;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire [2:0]M00_AXI_awsize;
  wire M00_AXI_awvalid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire [31:0]S00_AXI_araddr;
  wire [1:0]S00_AXI_arburst;
  wire [3:0]S00_AXI_arcache;
  wire [7:0]S00_AXI_arlen;
  wire [0:0]S00_AXI_arlock;
  wire [2:0]S00_AXI_arprot;
  wire [3:0]S00_AXI_arqos;
  wire S00_AXI_arready;
  wire [2:0]S00_AXI_arsize;
  wire S00_AXI_arvalid;
  wire [31:0]S00_AXI_awaddr;
  wire [1:0]S00_AXI_awburst;
  wire [3:0]S00_AXI_awcache;
  wire [7:0]S00_AXI_awlen;
  wire [0:0]S00_AXI_awlock;
  wire [2:0]S00_AXI_awprot;
  wire [3:0]S00_AXI_awqos;
  wire S00_AXI_awready;
  wire [2:0]S00_AXI_awsize;
  wire S00_AXI_awvalid;
  wire S00_AXI_bready;
  wire [1:0]S00_AXI_bresp;
  wire S00_AXI_bvalid;
  wire [31:0]S00_AXI_rdata;
  wire S00_AXI_rlast;
  wire S00_AXI_rready;
  wire [1:0]S00_AXI_rresp;
  wire S00_AXI_rvalid;
  wire [31:0]S00_AXI_wdata;
  wire S00_AXI_wlast;
  wire S00_AXI_wready;
  wire [3:0]S00_AXI_wstrb;
  wire S00_AXI_wvalid;
  wire [31:0]S01_AXI_araddr;
  wire [1:0]S01_AXI_arburst;
  wire [3:0]S01_AXI_arcache;
  wire [7:0]S01_AXI_arlen;
  wire [0:0]S01_AXI_arlock;
  wire [2:0]S01_AXI_arprot;
  wire [3:0]S01_AXI_arqos;
  wire S01_AXI_arready;
  wire [2:0]S01_AXI_arsize;
  wire S01_AXI_arvalid;
  wire [31:0]S01_AXI_rdata;
  wire S01_AXI_rlast;
  wire S01_AXI_rready;
  wire [1:0]S01_AXI_rresp;
  wire S01_AXI_rvalid;
  wire [31:0]S02_AXI_awaddr;
  wire [1:0]S02_AXI_awburst;
  wire [3:0]S02_AXI_awcache;
  wire [7:0]S02_AXI_awlen;
  wire [0:0]S02_AXI_awlock;
  wire [2:0]S02_AXI_awprot;
  wire [3:0]S02_AXI_awqos;
  wire S02_AXI_awready;
  wire [2:0]S02_AXI_awsize;
  wire S02_AXI_awvalid;
  wire S02_AXI_bready;
  wire [1:0]S02_AXI_bresp;
  wire S02_AXI_bvalid;
  wire [31:0]S02_AXI_wdata;
  wire S02_AXI_wlast;
  wire S02_AXI_wready;
  wire [3:0]S02_AXI_wstrb;
  wire S02_AXI_wvalid;
  wire aclk;
  wire aresetn;

  (* HW_HANDOFF = "ADC_axi_smc_0.hwdef" *) 
  ADC_axi_smc_0_bd_61e3 inst
       (.M00_AXI_awaddr(M00_AXI_awaddr),
        .M00_AXI_awburst(M00_AXI_awburst),
        .M00_AXI_awcache(M00_AXI_awcache),
        .M00_AXI_awlen(M00_AXI_awlen),
        .M00_AXI_awlock(M00_AXI_awlock),
        .M00_AXI_awprot(M00_AXI_awprot),
        .M00_AXI_awqos(M00_AXI_awqos),
        .M00_AXI_awready(M00_AXI_awready),
        .M00_AXI_awsize(M00_AXI_awsize),
        .M00_AXI_awvalid(M00_AXI_awvalid),
        .M00_AXI_bready(M00_AXI_bready),
        .M00_AXI_bresp(M00_AXI_bresp),
        .M00_AXI_bvalid(M00_AXI_bvalid),
        .M00_AXI_wdata(M00_AXI_wdata),
        .M00_AXI_wlast(M00_AXI_wlast),
        .M00_AXI_wready(M00_AXI_wready),
        .M00_AXI_wstrb(M00_AXI_wstrb),
        .M00_AXI_wvalid(M00_AXI_wvalid),
        .S00_AXI_araddr(S00_AXI_araddr),
        .S00_AXI_arburst(S00_AXI_arburst),
        .S00_AXI_arcache(S00_AXI_arcache),
        .S00_AXI_arlen(S00_AXI_arlen),
        .S00_AXI_arlock(S00_AXI_arlock),
        .S00_AXI_arprot(S00_AXI_arprot),
        .S00_AXI_arqos(S00_AXI_arqos),
        .S00_AXI_arready(S00_AXI_arready),
        .S00_AXI_arsize(S00_AXI_arsize),
        .S00_AXI_arvalid(S00_AXI_arvalid),
        .S00_AXI_awaddr(S00_AXI_awaddr),
        .S00_AXI_awburst(S00_AXI_awburst),
        .S00_AXI_awcache(S00_AXI_awcache),
        .S00_AXI_awlen(S00_AXI_awlen),
        .S00_AXI_awlock(S00_AXI_awlock),
        .S00_AXI_awprot(S00_AXI_awprot),
        .S00_AXI_awqos(S00_AXI_awqos),
        .S00_AXI_awready(S00_AXI_awready),
        .S00_AXI_awsize(S00_AXI_awsize),
        .S00_AXI_awvalid(S00_AXI_awvalid),
        .S00_AXI_bready(S00_AXI_bready),
        .S00_AXI_bresp(S00_AXI_bresp),
        .S00_AXI_bvalid(S00_AXI_bvalid),
        .S00_AXI_rdata(S00_AXI_rdata),
        .S00_AXI_rlast(S00_AXI_rlast),
        .S00_AXI_rready(S00_AXI_rready),
        .S00_AXI_rresp(S00_AXI_rresp),
        .S00_AXI_rvalid(S00_AXI_rvalid),
        .S00_AXI_wdata(S00_AXI_wdata),
        .S00_AXI_wlast(S00_AXI_wlast),
        .S00_AXI_wready(S00_AXI_wready),
        .S00_AXI_wstrb(S00_AXI_wstrb),
        .S00_AXI_wvalid(S00_AXI_wvalid),
        .S01_AXI_araddr(S01_AXI_araddr),
        .S01_AXI_arburst(S01_AXI_arburst),
        .S01_AXI_arcache(S01_AXI_arcache),
        .S01_AXI_arlen(S01_AXI_arlen),
        .S01_AXI_arlock(S01_AXI_arlock),
        .S01_AXI_arprot(S01_AXI_arprot),
        .S01_AXI_arqos(S01_AXI_arqos),
        .S01_AXI_arready(S01_AXI_arready),
        .S01_AXI_arsize(S01_AXI_arsize),
        .S01_AXI_arvalid(S01_AXI_arvalid),
        .S01_AXI_rdata(S01_AXI_rdata),
        .S01_AXI_rlast(S01_AXI_rlast),
        .S01_AXI_rready(S01_AXI_rready),
        .S01_AXI_rresp(S01_AXI_rresp),
        .S01_AXI_rvalid(S01_AXI_rvalid),
        .S02_AXI_awaddr(S02_AXI_awaddr),
        .S02_AXI_awburst(S02_AXI_awburst),
        .S02_AXI_awcache(S02_AXI_awcache),
        .S02_AXI_awlen(S02_AXI_awlen),
        .S02_AXI_awlock(S02_AXI_awlock),
        .S02_AXI_awprot(S02_AXI_awprot),
        .S02_AXI_awqos(S02_AXI_awqos),
        .S02_AXI_awready(S02_AXI_awready),
        .S02_AXI_awsize(S02_AXI_awsize),
        .S02_AXI_awvalid(S02_AXI_awvalid),
        .S02_AXI_bready(S02_AXI_bready),
        .S02_AXI_bresp(S02_AXI_bresp),
        .S02_AXI_bvalid(S02_AXI_bvalid),
        .S02_AXI_wdata(S02_AXI_wdata),
        .S02_AXI_wlast(S02_AXI_wlast),
        .S02_AXI_wready(S02_AXI_wready),
        .S02_AXI_wstrb(S02_AXI_wstrb),
        .S02_AXI_wvalid(S02_AXI_wvalid),
        .aclk(aclk),
        .aresetn(aresetn));
endmodule

(* HW_HANDOFF = "ADC_axi_smc_0.hwdef" *) (* ORIG_REF_NAME = "bd_61e3" *) 
module ADC_axi_smc_0_bd_61e3
   (M00_AXI_awaddr,
    M00_AXI_awburst,
    M00_AXI_awcache,
    M00_AXI_awlen,
    M00_AXI_awlock,
    M00_AXI_awprot,
    M00_AXI_awqos,
    M00_AXI_awready,
    M00_AXI_awsize,
    M00_AXI_awvalid,
    M00_AXI_bready,
    M00_AXI_bresp,
    M00_AXI_bvalid,
    M00_AXI_wdata,
    M00_AXI_wlast,
    M00_AXI_wready,
    M00_AXI_wstrb,
    M00_AXI_wvalid,
    S00_AXI_araddr,
    S00_AXI_arburst,
    S00_AXI_arcache,
    S00_AXI_arlen,
    S00_AXI_arlock,
    S00_AXI_arprot,
    S00_AXI_arqos,
    S00_AXI_arready,
    S00_AXI_arsize,
    S00_AXI_arvalid,
    S00_AXI_awaddr,
    S00_AXI_awburst,
    S00_AXI_awcache,
    S00_AXI_awlen,
    S00_AXI_awlock,
    S00_AXI_awprot,
    S00_AXI_awqos,
    S00_AXI_awready,
    S00_AXI_awsize,
    S00_AXI_awvalid,
    S00_AXI_bready,
    S00_AXI_bresp,
    S00_AXI_bvalid,
    S00_AXI_rdata,
    S00_AXI_rlast,
    S00_AXI_rready,
    S00_AXI_rresp,
    S00_AXI_rvalid,
    S00_AXI_wdata,
    S00_AXI_wlast,
    S00_AXI_wready,
    S00_AXI_wstrb,
    S00_AXI_wvalid,
    S01_AXI_araddr,
    S01_AXI_arburst,
    S01_AXI_arcache,
    S01_AXI_arlen,
    S01_AXI_arlock,
    S01_AXI_arprot,
    S01_AXI_arqos,
    S01_AXI_arready,
    S01_AXI_arsize,
    S01_AXI_arvalid,
    S01_AXI_rdata,
    S01_AXI_rlast,
    S01_AXI_rready,
    S01_AXI_rresp,
    S01_AXI_rvalid,
    S02_AXI_awaddr,
    S02_AXI_awburst,
    S02_AXI_awcache,
    S02_AXI_awlen,
    S02_AXI_awlock,
    S02_AXI_awprot,
    S02_AXI_awqos,
    S02_AXI_awready,
    S02_AXI_awsize,
    S02_AXI_awvalid,
    S02_AXI_bready,
    S02_AXI_bresp,
    S02_AXI_bvalid,
    S02_AXI_wdata,
    S02_AXI_wlast,
    S02_AXI_wready,
    S02_AXI_wstrb,
    S02_AXI_wvalid,
    aclk,
    aresetn);
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M00_AXI, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, DATA_WIDTH 64, FREQ_HZ 125000000, HAS_BRESP 1, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 0, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 8, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI3, READ_WRITE_MODE WRITE_ONLY, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) output [31:0]M00_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWBURST" *) output [1:0]M00_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWCACHE" *) output [3:0]M00_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLEN" *) output [3:0]M00_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLOCK" *) output [1:0]M00_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWPROT" *) output [2:0]M00_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWQOS" *) output [3:0]M00_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWREADY" *) input M00_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWSIZE" *) output [2:0]M00_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWVALID" *) output M00_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BREADY" *) output M00_AXI_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BRESP" *) input [1:0]M00_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BVALID" *) input M00_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WDATA" *) output [63:0]M00_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WLAST" *) output M00_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WREADY" *) input M00_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WSTRB" *) output [7:0]M00_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WVALID" *) output M00_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S00_AXI, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, DATA_WIDTH 32, FREQ_HZ 125000000, HAS_BRESP 1, HAS_BURST 1, HAS_CACHE 1, HAS_LOCK 1, HAS_PROT 1, HAS_QOS 1, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 16, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [31:0]S00_AXI_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARBURST" *) input [1:0]S00_AXI_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARCACHE" *) input [3:0]S00_AXI_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLEN" *) input [7:0]S00_AXI_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLOCK" *) input [0:0]S00_AXI_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARPROT" *) input [2:0]S00_AXI_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARQOS" *) input [3:0]S00_AXI_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARREADY" *) output S00_AXI_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARSIZE" *) input [2:0]S00_AXI_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARVALID" *) input S00_AXI_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWADDR" *) input [31:0]S00_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWBURST" *) input [1:0]S00_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWCACHE" *) input [3:0]S00_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLEN" *) input [7:0]S00_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLOCK" *) input [0:0]S00_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWPROT" *) input [2:0]S00_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWQOS" *) input [3:0]S00_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWREADY" *) output S00_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWSIZE" *) input [2:0]S00_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWVALID" *) input S00_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BREADY" *) input S00_AXI_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BRESP" *) output [1:0]S00_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BVALID" *) output S00_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RDATA" *) output [31:0]S00_AXI_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RLAST" *) output S00_AXI_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RREADY" *) input S00_AXI_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RRESP" *) output [1:0]S00_AXI_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RVALID" *) output S00_AXI_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WDATA" *) input [31:0]S00_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WLAST" *) input S00_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WREADY" *) output S00_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WSTRB" *) input [3:0]S00_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WVALID" *) input S00_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S01_AXI, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, DATA_WIDTH 32, FREQ_HZ 125000000, HAS_BRESP 0, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 0, ID_WIDTH 0, MAX_BURST_LENGTH 16, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_ONLY, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [31:0]S01_AXI_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARBURST" *) input [1:0]S01_AXI_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARCACHE" *) input [3:0]S01_AXI_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARLEN" *) input [7:0]S01_AXI_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARLOCK" *) input [0:0]S01_AXI_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARPROT" *) input [2:0]S01_AXI_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARQOS" *) input [3:0]S01_AXI_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARREADY" *) output S01_AXI_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARSIZE" *) input [2:0]S01_AXI_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI ARVALID" *) input S01_AXI_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RDATA" *) output [31:0]S01_AXI_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RLAST" *) output S01_AXI_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RREADY" *) input S01_AXI_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RRESP" *) output [1:0]S01_AXI_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI RVALID" *) output S01_AXI_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S02_AXI, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, DATA_WIDTH 32, FREQ_HZ 125000000, HAS_BRESP 1, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 0, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 16, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE WRITE_ONLY, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [31:0]S02_AXI_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWBURST" *) input [1:0]S02_AXI_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWCACHE" *) input [3:0]S02_AXI_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWLEN" *) input [7:0]S02_AXI_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWLOCK" *) input [0:0]S02_AXI_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWPROT" *) input [2:0]S02_AXI_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWQOS" *) input [3:0]S02_AXI_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWREADY" *) output S02_AXI_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWSIZE" *) input [2:0]S02_AXI_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI AWVALID" *) input S02_AXI_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE WRITE_ONLY, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 0, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 16, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input S02_AXI_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BRESP" *) output [1:0]S02_AXI_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI BVALID" *) output S02_AXI_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WDATA" *) input [31:0]S02_AXI_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WLAST" *) input S02_AXI_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WREADY" *) output S02_AXI_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WSTRB" *) input [3:0]S02_AXI_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S02_AXI WVALID" *) input S02_AXI_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME clock, ASSOCIATED_RESET mb_reset:bus_struct_reset:interconnect_aresetn:peripheral_aresetn:peripheral_reset, FREQ_HZ 125000000, PHASE 0.000, CLK_DOMAIN ADC_processing_system7_0_0_FCLK_CLK0" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 aux_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME aux_reset, POLARITY ACTIVE_LOW" *) input aresetn;

  wire \<const0> ;
  wire \<const1> ;
  wire [31:0]M00_AXI_awaddr;
  wire [3:0]M00_AXI_awcache;
  wire [3:0]M00_AXI_awlen;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire M00_AXI_awvalid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire [31:0]S02_AXI_awaddr;
  wire [1:0]S02_AXI_awburst;
  wire [3:0]S02_AXI_awcache;
  wire [7:0]S02_AXI_awlen;
  wire [0:0]S02_AXI_awlock;
  wire [2:0]S02_AXI_awprot;
  wire [3:0]S02_AXI_awqos;
  wire S02_AXI_awready;
  wire S02_AXI_awvalid;
  wire S02_AXI_bready;
  wire [1:0]S02_AXI_bresp;
  wire S02_AXI_bvalid;
  wire [31:0]S02_AXI_wdata;
  wire S02_AXI_wlast;
  wire S02_AXI_wready;
  wire [3:0]S02_AXI_wstrb;
  wire S02_AXI_wvalid;
  wire S_SC_AW_1_RECV;
  wire [139:1]S_SC_AW_2_PAYLD;
  wire [2:2]S_SC_AW_2_RECV;
  wire [7:1]S_SC_B_1_PAYLD;
  wire S_SC_B_1_RECV;
  wire S_SC_B_2_RECV;
  wire S_SC_W_1_RECV;
  wire [87:1]S_SC_W_2_PAYLD;
  wire [2:2]S_SC_W_2_RECV;
  wire aclk;
  wire aresetn;
  wire [139:1]m00_nodes_M_SC_AW_PAYLD;
  wire m00_nodes_M_SC_AW_SEND;
  wire [7:1]m00_nodes_M_SC_B_PAYLD;
  wire [2:2]m00_nodes_M_SC_B_SEND;
  wire [87:16]m00_nodes_M_SC_W_PAYLD;
  wire m00_nodes_M_SC_W_SEND;
  wire m00_sc2axi_M_AXI_AWREADY;
  wire [1:0]m00_sc2axi_M_AXI_BID;
  wire [1:0]m00_sc2axi_M_AXI_BRESP;
  wire [2:2]m00_sc2axi_M_AXI_BUSER;
  wire m00_sc2axi_M_AXI_BVALID;
  wire m00_sc2axi_M_AXI_WREADY;
  wire m_axi_aresetn_1;
  wire [31:0]s02_entry_pipeline_m_axi_AWADDR;
  wire [3:0]s02_entry_pipeline_m_axi_AWCACHE;
  wire [7:0]s02_entry_pipeline_m_axi_AWLEN;
  wire s02_entry_pipeline_m_axi_AWLOCK;
  wire [2:0]s02_entry_pipeline_m_axi_AWPROT;
  wire [3:0]s02_entry_pipeline_m_axi_AWQOS;
  wire [185:64]s02_entry_pipeline_m_axi_AWUSER;
  wire s02_entry_pipeline_m_axi_AWVALID;
  wire s02_entry_pipeline_m_axi_BREADY;
  wire [31:0]s02_entry_pipeline_m_axi_WDATA;
  wire s02_entry_pipeline_m_axi_WLAST;
  wire [3:0]s02_entry_pipeline_m_axi_WSTRB;
  wire [77:64]s02_entry_pipeline_m_axi_WUSER;
  wire s02_entry_pipeline_m_axi_WVALID;
  wire [139:1]s02_nodes_M_SC_AW_PAYLD;
  wire s02_nodes_M_SC_AW_REQ;
  wire s02_nodes_M_SC_AW_SEND;
  wire [7:6]s02_nodes_M_SC_B_PAYLD;
  wire s02_nodes_M_SC_B_SEND;
  wire s02_nodes_M_SC_W_INFO;
  wire [87:1]s02_nodes_M_SC_W_PAYLD;
  wire s02_nodes_M_SC_W_REQ;
  wire s02_nodes_M_SC_W_SEND;

  assign M00_AXI_awburst[1] = \<const0> ;
  assign M00_AXI_awburst[0] = \<const1> ;
  assign M00_AXI_awlock[1] = \<const0> ;
  assign M00_AXI_awlock[0] = \<const0> ;
  assign M00_AXI_awsize[2] = \<const0> ;
  assign M00_AXI_awsize[1] = \<const1> ;
  assign M00_AXI_awsize[0] = \<const1> ;
  assign S00_AXI_arready = \<const0> ;
  assign S00_AXI_awready = \<const0> ;
  assign S00_AXI_bresp[1] = \<const0> ;
  assign S00_AXI_bresp[0] = \<const0> ;
  assign S00_AXI_bvalid = \<const0> ;
  assign S00_AXI_rdata[31] = \<const0> ;
  assign S00_AXI_rdata[30] = \<const0> ;
  assign S00_AXI_rdata[29] = \<const0> ;
  assign S00_AXI_rdata[28] = \<const0> ;
  assign S00_AXI_rdata[27] = \<const0> ;
  assign S00_AXI_rdata[26] = \<const0> ;
  assign S00_AXI_rdata[25] = \<const0> ;
  assign S00_AXI_rdata[24] = \<const0> ;
  assign S00_AXI_rdata[23] = \<const0> ;
  assign S00_AXI_rdata[22] = \<const0> ;
  assign S00_AXI_rdata[21] = \<const0> ;
  assign S00_AXI_rdata[20] = \<const0> ;
  assign S00_AXI_rdata[19] = \<const0> ;
  assign S00_AXI_rdata[18] = \<const0> ;
  assign S00_AXI_rdata[17] = \<const0> ;
  assign S00_AXI_rdata[16] = \<const0> ;
  assign S00_AXI_rdata[15] = \<const0> ;
  assign S00_AXI_rdata[14] = \<const0> ;
  assign S00_AXI_rdata[13] = \<const0> ;
  assign S00_AXI_rdata[12] = \<const0> ;
  assign S00_AXI_rdata[11] = \<const0> ;
  assign S00_AXI_rdata[10] = \<const0> ;
  assign S00_AXI_rdata[9] = \<const0> ;
  assign S00_AXI_rdata[8] = \<const0> ;
  assign S00_AXI_rdata[7] = \<const0> ;
  assign S00_AXI_rdata[6] = \<const0> ;
  assign S00_AXI_rdata[5] = \<const0> ;
  assign S00_AXI_rdata[4] = \<const0> ;
  assign S00_AXI_rdata[3] = \<const0> ;
  assign S00_AXI_rdata[2] = \<const0> ;
  assign S00_AXI_rdata[1] = \<const0> ;
  assign S00_AXI_rdata[0] = \<const0> ;
  assign S00_AXI_rlast = \<const0> ;
  assign S00_AXI_rresp[1] = \<const0> ;
  assign S00_AXI_rresp[0] = \<const0> ;
  assign S00_AXI_rvalid = \<const0> ;
  assign S00_AXI_wready = \<const0> ;
  assign S01_AXI_arready = \<const0> ;
  assign S01_AXI_rdata[31] = \<const0> ;
  assign S01_AXI_rdata[30] = \<const0> ;
  assign S01_AXI_rdata[29] = \<const0> ;
  assign S01_AXI_rdata[28] = \<const0> ;
  assign S01_AXI_rdata[27] = \<const0> ;
  assign S01_AXI_rdata[26] = \<const0> ;
  assign S01_AXI_rdata[25] = \<const0> ;
  assign S01_AXI_rdata[24] = \<const0> ;
  assign S01_AXI_rdata[23] = \<const0> ;
  assign S01_AXI_rdata[22] = \<const0> ;
  assign S01_AXI_rdata[21] = \<const0> ;
  assign S01_AXI_rdata[20] = \<const0> ;
  assign S01_AXI_rdata[19] = \<const0> ;
  assign S01_AXI_rdata[18] = \<const0> ;
  assign S01_AXI_rdata[17] = \<const0> ;
  assign S01_AXI_rdata[16] = \<const0> ;
  assign S01_AXI_rdata[15] = \<const0> ;
  assign S01_AXI_rdata[14] = \<const0> ;
  assign S01_AXI_rdata[13] = \<const0> ;
  assign S01_AXI_rdata[12] = \<const0> ;
  assign S01_AXI_rdata[11] = \<const0> ;
  assign S01_AXI_rdata[10] = \<const0> ;
  assign S01_AXI_rdata[9] = \<const0> ;
  assign S01_AXI_rdata[8] = \<const0> ;
  assign S01_AXI_rdata[7] = \<const0> ;
  assign S01_AXI_rdata[6] = \<const0> ;
  assign S01_AXI_rdata[5] = \<const0> ;
  assign S01_AXI_rdata[4] = \<const0> ;
  assign S01_AXI_rdata[3] = \<const0> ;
  assign S01_AXI_rdata[2] = \<const0> ;
  assign S01_AXI_rdata[1] = \<const0> ;
  assign S01_AXI_rdata[0] = \<const0> ;
  assign S01_AXI_rlast = \<const0> ;
  assign S01_AXI_rresp[1] = \<const0> ;
  assign S01_AXI_rresp[0] = \<const0> ;
  assign S01_AXI_rvalid = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  ADC_axi_smc_0_clk_map_imp_YEMQ1G clk_map
       (.aclk(aclk),
        .aresetn(aresetn),
        .interconnect_aresetn(m_axi_aresetn_1));
  ADC_axi_smc_0_m00_exit_pipeline_imp_10TDHU7 m00_exit_pipeline
       (.M00_AXI_awaddr(M00_AXI_awaddr),
        .M00_AXI_awcache(M00_AXI_awcache),
        .M00_AXI_awlen(M00_AXI_awlen),
        .M00_AXI_awprot(M00_AXI_awprot),
        .M00_AXI_awqos(M00_AXI_awqos),
        .M00_AXI_awready(M00_AXI_awready),
        .M00_AXI_awvalid(M00_AXI_awvalid),
        .M00_AXI_bready(M00_AXI_bready),
        .M00_AXI_bresp(M00_AXI_bresp),
        .M00_AXI_bvalid(M00_AXI_bvalid),
        .M00_AXI_wdata(M00_AXI_wdata),
        .M00_AXI_wlast(M00_AXI_wlast),
        .M00_AXI_wready(M00_AXI_wready),
        .M00_AXI_wstrb(M00_AXI_wstrb),
        .M00_AXI_wvalid(M00_AXI_wvalid),
        .M_SC_AW_payld({m00_nodes_M_SC_AW_PAYLD[139:129],m00_nodes_M_SC_AW_PAYLD[127:94],m00_nodes_M_SC_AW_PAYLD[8:1]}),
        .M_SC_AW_recv(m00_sc2axi_M_AXI_AWREADY),
        .M_SC_AW_send(m00_nodes_M_SC_AW_SEND),
        .M_SC_W_payld(m00_nodes_M_SC_W_PAYLD),
        .M_SC_W_recv(m00_sc2axi_M_AXI_WREADY),
        .M_SC_W_send(m00_nodes_M_SC_W_SEND),
        .S_SC_B_payld({m00_sc2axi_M_AXI_BRESP,m00_sc2axi_M_AXI_BID,m00_sc2axi_M_AXI_BUSER}),
        .S_SC_B_recv(S_SC_B_2_RECV),
        .S_SC_B_send(m00_sc2axi_M_AXI_BVALID),
        .aclk(aclk),
        .interconnect_aresetn(m_axi_aresetn_1));
  ADC_axi_smc_0_m00_nodes_imp_1MZN0KJ m00_nodes
       (.M_SC_AW_payld({m00_nodes_M_SC_AW_PAYLD[139:129],m00_nodes_M_SC_AW_PAYLD[127:94],m00_nodes_M_SC_AW_PAYLD[8:1]}),
        .M_SC_AW_recv(m00_sc2axi_M_AXI_AWREADY),
        .M_SC_AW_req(s02_nodes_M_SC_AW_REQ),
        .M_SC_AW_send(m00_nodes_M_SC_AW_SEND),
        .M_SC_B_payld(m00_nodes_M_SC_B_PAYLD),
        .M_SC_B_send(m00_nodes_M_SC_B_SEND),
        .M_SC_W_info(s02_nodes_M_SC_W_INFO),
        .M_SC_W_payld(m00_nodes_M_SC_W_PAYLD),
        .M_SC_W_recv(m00_sc2axi_M_AXI_WREADY),
        .M_SC_W_req(s02_nodes_M_SC_W_REQ),
        .M_SC_W_send(m00_nodes_M_SC_W_SEND),
        .S_SC_AW_payld(S_SC_AW_2_PAYLD),
        .S_SC_AW_recv(S_SC_AW_2_RECV),
        .S_SC_B_payld({m00_sc2axi_M_AXI_BRESP,m00_sc2axi_M_AXI_BID,m00_sc2axi_M_AXI_BUSER}),
        .S_SC_B_recv(S_SC_B_2_RECV),
        .S_SC_B_send(m00_sc2axi_M_AXI_BVALID),
        .S_SC_W_payld(S_SC_W_2_PAYLD),
        .S_SC_W_recv(S_SC_W_2_RECV),
        .aclk(aclk),
        .\gen_AB_reg_slice.payld_o_reg[0] (s02_nodes_M_SC_AW_SEND),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (s02_nodes_M_SC_W_SEND),
        .\gen_pipe[1].pipe_reg[1][0] (S_SC_B_1_RECV),
        .interconnect_aresetn(m_axi_aresetn_1));
  ADC_axi_smc_0_s02_entry_pipeline_imp_1SY0NZ9 s02_entry_pipeline
       (.M_SC_B_payld(s02_nodes_M_SC_B_PAYLD),
        .M_SC_B_recv(s02_entry_pipeline_m_axi_BREADY),
        .M_SC_B_send(s02_nodes_M_SC_B_SEND),
        .S02_AXI_awaddr(S02_AXI_awaddr),
        .S02_AXI_awburst(S02_AXI_awburst),
        .S02_AXI_awcache(S02_AXI_awcache),
        .S02_AXI_awlen(S02_AXI_awlen),
        .S02_AXI_awlock(S02_AXI_awlock),
        .S02_AXI_awprot(S02_AXI_awprot),
        .S02_AXI_awqos(S02_AXI_awqos),
        .S02_AXI_awready(S02_AXI_awready),
        .S02_AXI_awvalid(S02_AXI_awvalid),
        .S02_AXI_bready(S02_AXI_bready),
        .S02_AXI_bresp(S02_AXI_bresp),
        .S02_AXI_bvalid(S02_AXI_bvalid),
        .S02_AXI_wdata(S02_AXI_wdata),
        .S02_AXI_wlast(S02_AXI_wlast),
        .S02_AXI_wready(S02_AXI_wready),
        .S02_AXI_wstrb(S02_AXI_wstrb),
        .S02_AXI_wvalid(S02_AXI_wvalid),
        .S_SC_AW_payld({s02_entry_pipeline_m_axi_AWCACHE,s02_entry_pipeline_m_axi_AWQOS,s02_entry_pipeline_m_axi_AWPROT,s02_entry_pipeline_m_axi_AWLOCK,s02_entry_pipeline_m_axi_AWADDR,s02_entry_pipeline_m_axi_AWUSER[185:181],s02_entry_pipeline_m_axi_AWLEN,s02_entry_pipeline_m_axi_AWUSER[71:64]}),
        .S_SC_AW_recv(S_SC_AW_1_RECV),
        .S_SC_AW_send(s02_entry_pipeline_m_axi_AWVALID),
        .S_SC_W_payld({s02_entry_pipeline_m_axi_WDATA[31:24],s02_entry_pipeline_m_axi_WSTRB[3],s02_entry_pipeline_m_axi_WDATA[23:16],s02_entry_pipeline_m_axi_WSTRB[2],s02_entry_pipeline_m_axi_WDATA[15:8],s02_entry_pipeline_m_axi_WSTRB[1],s02_entry_pipeline_m_axi_WDATA[7:0],s02_entry_pipeline_m_axi_WSTRB[0],s02_entry_pipeline_m_axi_WLAST,s02_entry_pipeline_m_axi_WUSER}),
        .S_SC_W_recv(S_SC_W_1_RECV),
        .S_SC_W_send(s02_entry_pipeline_m_axi_WVALID),
        .aclk(aclk),
        .interconnect_aresetn(m_axi_aresetn_1));
  ADC_axi_smc_0_s02_nodes_imp_1VIFTIZ s02_nodes
       (.M_SC_AW_payld(s02_nodes_M_SC_AW_PAYLD),
        .M_SC_AW_recv(S_SC_AW_2_RECV),
        .M_SC_AW_req(s02_nodes_M_SC_AW_REQ),
        .M_SC_AW_send(s02_nodes_M_SC_AW_SEND),
        .M_SC_B_payld(s02_nodes_M_SC_B_PAYLD),
        .M_SC_B_recv(s02_entry_pipeline_m_axi_BREADY),
        .M_SC_B_send(s02_nodes_M_SC_B_SEND),
        .M_SC_W_info(s02_nodes_M_SC_W_INFO),
        .M_SC_W_payld(s02_nodes_M_SC_W_PAYLD),
        .M_SC_W_recv(S_SC_W_2_RECV),
        .M_SC_W_req(s02_nodes_M_SC_W_REQ),
        .M_SC_W_send(s02_nodes_M_SC_W_SEND),
        .S_SC_AW_payld({s02_entry_pipeline_m_axi_AWCACHE,s02_entry_pipeline_m_axi_AWQOS,s02_entry_pipeline_m_axi_AWPROT,s02_entry_pipeline_m_axi_AWLOCK,s02_entry_pipeline_m_axi_AWADDR,s02_entry_pipeline_m_axi_AWUSER[185:181],s02_entry_pipeline_m_axi_AWLEN,s02_entry_pipeline_m_axi_AWUSER[71:64]}),
        .S_SC_AW_recv(S_SC_AW_1_RECV),
        .S_SC_AW_send(s02_entry_pipeline_m_axi_AWVALID),
        .S_SC_B_payld(S_SC_B_1_PAYLD),
        .S_SC_B_recv(S_SC_B_1_RECV),
        .S_SC_B_send(m00_nodes_M_SC_B_SEND),
        .S_SC_W_payld({s02_entry_pipeline_m_axi_WDATA[31:24],s02_entry_pipeline_m_axi_WSTRB[3],s02_entry_pipeline_m_axi_WDATA[23:16],s02_entry_pipeline_m_axi_WSTRB[2],s02_entry_pipeline_m_axi_WDATA[15:8],s02_entry_pipeline_m_axi_WSTRB[1],s02_entry_pipeline_m_axi_WDATA[7:0],s02_entry_pipeline_m_axi_WSTRB[0],s02_entry_pipeline_m_axi_WLAST,s02_entry_pipeline_m_axi_WUSER}),
        .S_SC_W_recv(S_SC_W_1_RECV),
        .S_SC_W_send(s02_entry_pipeline_m_axi_WVALID),
        .aclk(aclk),
        .interconnect_aresetn(m_axi_aresetn_1));
  ADC_axi_smc_0_switchboards_imp_XSGWHU switchboards
       (.M_SC_AW_payld(s02_nodes_M_SC_AW_PAYLD),
        .M_SC_B_payld(m00_nodes_M_SC_B_PAYLD),
        .M_SC_W_payld(s02_nodes_M_SC_W_PAYLD),
        .S_SC_AW_recv(S_SC_AW_2_RECV),
        .S_SC_W_recv(S_SC_W_2_RECV),
        .aclk(aclk),
        .m_sc_payld(S_SC_AW_2_PAYLD),
        .\skid_buffer_reg[1057] (S_SC_B_1_PAYLD),
        .\skid_buffer_reg[1086] (S_SC_W_2_PAYLD));
endmodule

(* ORIG_REF_NAME = "bd_61e3_arsw_0" *) 
module ADC_axi_smc_0_bd_61e3_arsw_0
   ();

  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [1853:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_send_UNCONNECTED;
  wire [2:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_CONNECTIVITY = "3'b100" *) 
  (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "3" *) 
  (* C_PAYLD_WIDTH = "1854" *) 
  (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
  (* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) 
  (* C_TESTING_MODE = "0" *) 
  (* K_MAX_INFO_WIDTH = "1" *) 
  (* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) 
  (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) 
  (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
  ADC_axi_smc_0_sc_switchboard_v1_0_4_top inst
       (.aclk(1'b0),
        .aclken(1'b0),
        .connectivity({1'b0,1'b0,1'b0}),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld(NLW_inst_m_sc_payld_UNCONNECTED[1853:0]),
        .m_sc_recv({1'b0,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send(NLW_inst_m_sc_send_UNCONNECTED[2:0]),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_sc_recv(NLW_inst_s_sc_recv_UNCONNECTED[2:0]),
        .s_sc_req({1'b0,1'b0,1'b0}),
        .s_sc_send({1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_awsw_0" *) 
module ADC_axi_smc_0_bd_61e3_awsw_0
   (m_sc_payld,
    aclk,
    M_SC_AW_payld,
    S_SC_AW_recv);
  output [138:0]m_sc_payld;
  input aclk;
  input [138:0]M_SC_AW_payld;
  input [0:0]S_SC_AW_recv;

  wire [138:0]M_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire aclk;
  wire [138:0]m_sc_payld;
  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_send_UNCONNECTED;
  wire [2:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_CONNECTIVITY = "3'b100" *) 
  (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "3" *) 
  (* C_PAYLD_WIDTH = "140" *) 
  (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
  (* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) 
  (* C_TESTING_MODE = "0" *) 
  (* K_MAX_INFO_WIDTH = "1" *) 
  (* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) 
  (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) 
  (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
  ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized0 inst
       (.aclk(aclk),
        .aclken(1'b0),
        .connectivity({1'b1,1'b0,1'b0}),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld({m_sc_payld,NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv({S_SC_AW_recv,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send(NLW_inst_m_sc_send_UNCONNECTED[2:0]),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({M_SC_AW_payld,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_sc_recv(NLW_inst_s_sc_recv_UNCONNECTED[2:0]),
        .s_sc_req({1'b0,1'b0,1'b0}),
        .s_sc_send({1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_bsw_0" *) 
module ADC_axi_smc_0_bd_61e3_bsw_0
   (\skid_buffer_reg[1057] ,
    aclk,
    M_SC_B_payld);
  output [6:0]\skid_buffer_reg[1057] ;
  input aclk;
  input [6:0]M_SC_B_payld;

  wire [6:0]M_SC_B_payld;
  wire aclk;
  wire [6:0]\skid_buffer_reg[1057] ;
  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [16:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_send_UNCONNECTED;
  wire [2:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_CONNECTIVITY = "3'b100" *) 
  (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) 
  (* C_NUM_MI = "3" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "8" *) 
  (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
  (* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) 
  (* C_TESTING_MODE = "0" *) 
  (* K_MAX_INFO_WIDTH = "1" *) 
  (* LP_LOG_NUM_SI = "32'b00000000000000000000000000000001" *) 
  (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) 
  (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
  ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized1 inst
       (.aclk(aclk),
        .aclken(1'b0),
        .connectivity({1'b1,1'b0,1'b0}),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld({\skid_buffer_reg[1057] ,NLW_inst_m_sc_payld_UNCONNECTED[16:0]}),
        .m_sc_recv({1'b0,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send(NLW_inst_m_sc_send_UNCONNECTED[2:0]),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({M_SC_B_payld,1'b0}),
        .s_sc_recv(NLW_inst_s_sc_recv_UNCONNECTED[2:0]),
        .s_sc_req({1'b0,1'b0,1'b0}),
        .s_sc_send({1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_m00awn_0" *) 
module ADC_axi_smc_0_bd_61e3_m00awn_0
   (S_SC_AW_recv,
    M_SC_AW_send,
    M_SC_AW_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tdata,
    aclk,
    interconnect_aresetn,
    M_SC_AW_req,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    S_SC_AW_payld,
    M_SC_AW_recv,
    s_axis_arb_tready);
  output [0:0]S_SC_AW_recv;
  output [0:0]M_SC_AW_send;
  output [52:0]M_SC_AW_payld;
  output m_axis_arb_tvalid;
  output [0:0]m_axis_arb_tdata;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]M_SC_AW_req;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  input [138:0]S_SC_AW_payld;
  input [0:0]M_SC_AW_recv;
  input s_axis_arb_tready;

  wire [52:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_req;
  wire [0:0]M_SC_AW_send;
  wire [138:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire aclk;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  wire [0:0]interconnect_aresetn;
  wire [0:0]m_axis_arb_tdata;
  wire m_axis_arb_tvalid;
  wire s_axis_arb_tready;
  wire NLW_inst_s_axis_arb_tready_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [128:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [1:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "3" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "8" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "0" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "3" *) 
  (* C_PAYLD_WIDTH = "140" *) 
  (* C_SC_ROUTE_WIDTH = "1" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "1" *) 
  (* C_S_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "0" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "1" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "1" *) 
  (* LP_LOG_NUM_SI = "2" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_M_MAX_NUM_BYTES = "8" *) 
  (* LP_M_MIN_NUM_BYTES = "8" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "1" *) 
  (* LP_NODE_USER_WIDTH = "0" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "8" *) 
  (* LP_S_MIN_NUM_BYTES = "8" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "1" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top inst
       (.m_axis_arb_tdata({NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:3],m_axis_arb_tdata,NLW_inst_m_axis_arb_tdata_UNCONNECTED[1:0]}),
        .m_axis_arb_tready(s_axis_arb_tready),
        .m_axis_arb_tvalid(m_axis_arb_tvalid),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[0]),
        .m_sc_payld({M_SC_AW_payld[52:42],NLW_inst_m_sc_payld_UNCONNECTED[128],M_SC_AW_payld[41:8],NLW_inst_m_sc_payld_UNCONNECTED[93:9],M_SC_AW_payld[7:0],NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv(M_SC_AW_recv),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[0]),
        .m_sc_send(M_SC_AW_send),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_arb_tready(NLW_inst_s_axis_arb_tready_UNCONNECTED),
        .s_axis_arb_tvalid(1'b0),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({S_SC_AW_payld,1'b0}),
        .s_sc_recv({S_SC_AW_recv,NLW_inst_s_sc_recv_UNCONNECTED[1:0]}),
        .s_sc_req({M_SC_AW_req,1'b0,1'b0}),
        .s_sc_send({\gen_AB_reg_slice.payld_o_reg[0] ,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_m00bn_0" *) 
module ADC_axi_smc_0_bd_61e3_m00bn_0
   (S_SC_B_recv,
    M_SC_B_send,
    M_SC_B_payld,
    aclk,
    interconnect_aresetn,
    S_SC_B_send,
    S_SC_B_payld,
    \gen_pipe[1].pipe_reg[1][0] );
  output [0:0]S_SC_B_recv;
  output [0:0]M_SC_B_send;
  output [6:0]M_SC_B_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]S_SC_B_send;
  input [4:0]S_SC_B_payld;
  input [0:0]\gen_pipe[1].pipe_reg[1][0] ;

  wire [6:0]M_SC_B_payld;
  wire [0:0]M_SC_B_send;
  wire [4:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire aclk;
  wire [0:0]\gen_pipe[1].pipe_reg[1][0] ;
  wire [0:0]interconnect_aresetn;
  wire NLW_inst_m_axis_arb_tvalid_UNCONNECTED;
  wire NLW_inst_s_axis_arb_tready_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [1:0]NLW_inst_m_sc_send_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "4" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "1" *) 
  (* C_NUM_MI = "3" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "8" *) 
  (* C_SC_ROUTE_WIDTH = "3" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "0" *) 
  (* C_S_NUM_BYTES_ARRAY = "8" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "0" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "1" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "2" *) 
  (* LP_LOG_NUM_SI = "1" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_M_MAX_NUM_BYTES = "8" *) 
  (* LP_M_MIN_NUM_BYTES = "8" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "3" *) 
  (* LP_NODE_USER_WIDTH = "0" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "8" *) 
  (* LP_S_MIN_NUM_BYTES = "8" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "1" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized0 inst
       (.m_axis_arb_tdata(NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:0]),
        .m_axis_arb_tready(1'b1),
        .m_axis_arb_tvalid(NLW_inst_m_axis_arb_tvalid_UNCONNECTED),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld({M_SC_B_payld,NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv({\gen_pipe[1].pipe_reg[1][0] ,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send({M_SC_B_send,NLW_inst_m_sc_send_UNCONNECTED[1:0]}),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_arb_tready(NLW_inst_s_axis_arb_tready_UNCONNECTED),
        .s_axis_arb_tvalid(1'b0),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info(1'b0),
        .s_sc_payld({S_SC_B_payld[4:1],1'b0,S_SC_B_payld[0],1'b0,1'b0}),
        .s_sc_recv(S_SC_B_recv),
        .s_sc_req(1'b0),
        .s_sc_send(S_SC_B_send));
endmodule

(* ORIG_REF_NAME = "bd_61e3_m00e_0" *) 
module ADC_axi_smc_0_bd_61e3_m00e_0
   (M_SC_AW_recv,
    M_SC_W_recv,
    S_SC_B_payld,
    S_SC_B_send,
    M00_AXI_awaddr,
    M00_AXI_awlen,
    M00_AXI_awcache,
    M00_AXI_awprot,
    M00_AXI_awqos,
    M00_AXI_awvalid,
    M00_AXI_wdata,
    M00_AXI_wstrb,
    M00_AXI_wlast,
    M00_AXI_wvalid,
    M00_AXI_bready,
    aclk,
    interconnect_aresetn,
    M_SC_AW_payld,
    M_SC_AW_send,
    M_SC_W_payld,
    M_SC_W_send,
    S_SC_B_recv,
    M00_AXI_awready,
    M00_AXI_wready,
    M00_AXI_bresp,
    M00_AXI_bvalid);
  output [0:0]M_SC_AW_recv;
  output [0:0]M_SC_W_recv;
  output [4:0]S_SC_B_payld;
  output [0:0]S_SC_B_send;
  output [31:0]M00_AXI_awaddr;
  output [3:0]M00_AXI_awlen;
  output [3:0]M00_AXI_awcache;
  output [2:0]M00_AXI_awprot;
  output [3:0]M00_AXI_awqos;
  output M00_AXI_awvalid;
  output [63:0]M00_AXI_wdata;
  output [7:0]M00_AXI_wstrb;
  output M00_AXI_wlast;
  output M00_AXI_wvalid;
  output M00_AXI_bready;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [52:0]M_SC_AW_payld;
  input [0:0]M_SC_AW_send;
  input [71:0]M_SC_W_payld;
  input [0:0]M_SC_W_send;
  input [0:0]S_SC_B_recv;
  input M00_AXI_awready;
  input M00_AXI_wready;
  input [1:0]M00_AXI_bresp;
  input M00_AXI_bvalid;

  wire [31:0]M00_AXI_awaddr;
  wire [3:0]M00_AXI_awcache;
  wire [3:0]M00_AXI_awlen;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire M00_AXI_awvalid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire [52:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_send;
  wire [71:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_send;
  wire [4:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire NLW_inst_m_axi_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_rready_UNCONNECTED;
  wire NLW_inst_s_axi_arready_UNCONNECTED;
  wire NLW_inst_s_axi_rlast_UNCONNECTED;
  wire NLW_inst_s_axi_rvalid_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arlen_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arqos_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_aruser_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_awburst_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awid_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awuser_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_wid_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_wuser_UNCONNECTED;
  wire [1023:0]NLW_inst_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_inst_s_axi_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rresp_UNCONNECTED;
  wire [1023:0]NLW_inst_s_axi_ruser_UNCONNECTED;

  (* C_ADDR_WIDTH = "32" *) 
  (* C_ENABLE_PIPELINING = "1'b1" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_HAS_LOCK = "0" *) 
  (* C_IS_CASCADED = "0" *) 
  (* C_MAX_RUSER_BITS_PER_BYTE = "0" *) 
  (* C_MAX_WUSER_BITS_PER_BYTE = "0" *) 
  (* C_MEP_IDENTIFIER_WIDTH = "2" *) 
  (* C_M_ARUSER_WIDTH = "0" *) 
  (* C_M_AWUSER_WIDTH = "0" *) 
  (* C_M_BUSER_WIDTH = "0" *) 
  (* C_M_ID_WIDTH = "0" *) 
  (* C_M_LIMIT_READ_LENGTH = "8" *) 
  (* C_M_LIMIT_WRITE_LENGTH = "8" *) 
  (* C_M_PROTOCOL = "1" *) 
  (* C_M_RUSER_BITS_PER_BYTE = "0" *) 
  (* C_M_RUSER_WIDTH = "0" *) 
  (* C_M_WUSER_BITS_PER_BYTE = "0" *) 
  (* C_M_WUSER_WIDTH = "0" *) 
  (* C_NUM_MSC = "1" *) 
  (* C_RDATA_WIDTH = "64" *) 
  (* C_READ_ACCEPTANCE = "1" *) 
  (* C_SINGLE_ISSUING = "0" *) 
  (* C_SSC_ROUTE_ARRAY = "12'b000100000000" *) 
  (* C_SSC_ROUTE_WIDTH = "3" *) 
  (* C_S_ID_WIDTH = "2" *) 
  (* C_WDATA_WIDTH = "64" *) 
  (* C_WRITE_ACCEPTANCE = "1" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* P_BYPASS = "0" *) 
  (* P_FULLY_PIPELINED = "2" *) 
  (* P_ZERO_LATENCY = "1" *) 
  ADC_axi_smc_0_sc_exit_v1_0_6_top inst
       (.aclk(aclk),
        .aclken(1'b0),
        .aresetn(interconnect_aresetn),
        .m_axi_araddr(NLW_inst_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_inst_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_inst_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_inst_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_inst_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_inst_m_axi_arlock_UNCONNECTED[1:0]),
        .m_axi_arprot(NLW_inst_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_inst_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arsize(NLW_inst_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_inst_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_inst_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(M00_AXI_awaddr),
        .m_axi_awburst(NLW_inst_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(M00_AXI_awcache),
        .m_axi_awid(NLW_inst_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(M00_AXI_awlen),
        .m_axi_awlock(NLW_inst_m_axi_awlock_UNCONNECTED[1:0]),
        .m_axi_awprot(M00_AXI_awprot),
        .m_axi_awqos(M00_AXI_awqos),
        .m_axi_awready(M00_AXI_awready),
        .m_axi_awsize(NLW_inst_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_inst_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(M00_AXI_awvalid),
        .m_axi_bid(1'b0),
        .m_axi_bready(M00_AXI_bready),
        .m_axi_bresp(M00_AXI_bresp),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(M00_AXI_bvalid),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_inst_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(M00_AXI_wdata),
        .m_axi_wid(NLW_inst_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(M00_AXI_wlast),
        .m_axi_wready(M00_AXI_wready),
        .m_axi_wstrb(M00_AXI_wstrb),
        .m_axi_wuser(NLW_inst_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(M00_AXI_wvalid),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_inst_s_axi_arready_UNCONNECTED),
        .s_axi_aruser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr(M_SC_AW_payld[41:10]),
        .s_axi_awcache(M_SC_AW_payld[52:49]),
        .s_axi_awid(M_SC_AW_payld[9:8]),
        .s_axi_awlen(M_SC_AW_payld[7:0]),
        .s_axi_awlock(1'b0),
        .s_axi_awprot(M_SC_AW_payld[44:42]),
        .s_axi_awqos(M_SC_AW_payld[48:45]),
        .s_axi_awready(M_SC_AW_recv),
        .s_axi_awuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awvalid(M_SC_AW_send),
        .s_axi_bid(S_SC_B_payld[2:1]),
        .s_axi_bready(S_SC_B_recv),
        .s_axi_bresp(S_SC_B_payld[4:3]),
        .s_axi_buser({NLW_inst_s_axi_buser_UNCONNECTED[1023:3],S_SC_B_payld[0],NLW_inst_s_axi_buser_UNCONNECTED[1:0]}),
        .s_axi_bvalid(S_SC_B_send),
        .s_axi_rdata(NLW_inst_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_inst_s_axi_rid_UNCONNECTED[1:0]),
        .s_axi_rlast(NLW_inst_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_inst_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_inst_s_axi_ruser_UNCONNECTED[1023:0]),
        .s_axi_rvalid(NLW_inst_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({M_SC_W_payld[71:64],M_SC_W_payld[62:55],M_SC_W_payld[53:46],M_SC_W_payld[44:37],M_SC_W_payld[35:28],M_SC_W_payld[26:19],M_SC_W_payld[17:10],M_SC_W_payld[8:1]}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(M_SC_W_recv),
        .s_axi_wstrb({M_SC_W_payld[63],M_SC_W_payld[54],M_SC_W_payld[45],M_SC_W_payld[36],M_SC_W_payld[27],M_SC_W_payld[18],M_SC_W_payld[9],M_SC_W_payld[0]}),
        .s_axi_wuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wvalid(M_SC_W_send));
endmodule

(* ORIG_REF_NAME = "bd_61e3_m00wn_0" *) 
module ADC_axi_smc_0_bd_61e3_m00wn_0
   (S_SC_W_recv,
    M_SC_W_send,
    M_SC_W_payld,
    s_axis_arb_tready,
    aclk,
    interconnect_aresetn,
    M_SC_W_req,
    M_SC_W_info,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    S_SC_W_payld,
    M_SC_W_recv,
    m_axis_arb_tvalid,
    m_axis_arb_tdata);
  output [0:0]S_SC_W_recv;
  output [0:0]M_SC_W_send;
  output [71:0]M_SC_W_payld;
  output s_axis_arb_tready;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]M_SC_W_req;
  input [0:0]M_SC_W_info;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  input [86:0]S_SC_W_payld;
  input [0:0]M_SC_W_recv;
  input m_axis_arb_tvalid;
  input [0:0]m_axis_arb_tdata;

  wire [0:0]M_SC_W_info;
  wire [71:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_req;
  wire [0:0]M_SC_W_send;
  wire [86:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire aclk;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  wire [0:0]interconnect_aresetn;
  wire [0:0]m_axis_arb_tdata;
  wire m_axis_arb_tvalid;
  wire s_axis_arb_tready;
  wire NLW_inst_m_axis_arb_tvalid_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [15:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [1:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "1" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "8" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "0" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "3" *) 
  (* C_PAYLD_WIDTH = "88" *) 
  (* C_SC_ROUTE_WIDTH = "1" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "1" *) 
  (* C_S_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "0" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "2" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "1" *) 
  (* LP_LOG_NUM_SI = "2" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_M_MAX_NUM_BYTES = "8" *) 
  (* LP_M_MIN_NUM_BYTES = "8" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "1" *) 
  (* LP_NODE_USER_WIDTH = "1" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "8" *) 
  (* LP_S_MIN_NUM_BYTES = "8" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "1" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized1 inst
       (.m_axis_arb_tdata(NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:0]),
        .m_axis_arb_tready(1'b1),
        .m_axis_arb_tvalid(NLW_inst_m_axis_arb_tvalid_UNCONNECTED),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[0]),
        .m_sc_payld({M_SC_W_payld,NLW_inst_m_sc_payld_UNCONNECTED[15:0]}),
        .m_sc_recv(M_SC_W_recv),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[0]),
        .m_sc_send(M_SC_W_send),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,m_axis_arb_tdata,1'b0,1'b0}),
        .s_axis_arb_tready(s_axis_arb_tready),
        .s_axis_arb_tvalid(m_axis_arb_tvalid),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info({M_SC_W_info,1'b0,1'b0}),
        .s_sc_payld({S_SC_W_payld,1'b0}),
        .s_sc_recv({S_SC_W_recv,NLW_inst_s_sc_recv_UNCONNECTED[1:0]}),
        .s_sc_req({M_SC_W_req,1'b0,1'b0}),
        .s_sc_send({\gen_AB_reg_slice.payld_o_reg[0] ,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_psr_aclk_0" *) 
module ADC_axi_smc_0_bd_61e3_psr_aclk_0
   (interconnect_aresetn,
    aclk,
    aresetn);
  output [0:0]interconnect_aresetn;
  input aclk;
  input aresetn;

  wire aclk;
  wire aresetn;
  wire [0:0]interconnect_aresetn;

  ADC_axi_smc_0_proc_sys_reset U0
       (.aclk(aclk),
        .aresetn(aresetn),
        .interconnect_aresetn(interconnect_aresetn));
endmodule

(* ORIG_REF_NAME = "bd_61e3_rsw_0" *) 
module ADC_axi_smc_0_bd_61e3_rsw_0
   ();

  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [5561:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_send_UNCONNECTED;
  wire [2:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_CONNECTIVITY = "3'b100" *) 
  (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) 
  (* C_NUM_MI = "3" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "1854" *) 
  (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
  (* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) 
  (* C_TESTING_MODE = "0" *) 
  (* K_MAX_INFO_WIDTH = "1" *) 
  (* LP_LOG_NUM_SI = "32'b00000000000000000000000000000001" *) 
  (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) 
  (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
  ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized2 inst
       (.aclk(1'b0),
        .aclken(1'b0),
        .connectivity({1'b0,1'b0,1'b0}),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld(NLW_inst_m_sc_payld_UNCONNECTED[5561:0]),
        .m_sc_recv({1'b0,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send(NLW_inst_m_sc_send_UNCONNECTED[2:0]),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_sc_recv(NLW_inst_s_sc_recv_UNCONNECTED[2:0]),
        .s_sc_req({1'b0,1'b0,1'b0}),
        .s_sc_send({1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "bd_61e3_s02mmu_0" *) 
module ADC_axi_smc_0_bd_61e3_s02mmu_0
   (S02_AXI_awready,
    S02_AXI_wready,
    S02_AXI_bresp,
    S02_AXI_bvalid,
    S_SC_AW_payld,
    m_axi_awvalid,
    S_SC_W_payld,
    m_axi_wvalid,
    M_SC_B_recv,
    aclk,
    interconnect_aresetn,
    S02_AXI_awaddr,
    S02_AXI_awlen,
    S02_AXI_awburst,
    S02_AXI_awlock,
    S02_AXI_awcache,
    S02_AXI_awprot,
    S02_AXI_awqos,
    S02_AXI_awvalid,
    S02_AXI_wdata,
    S02_AXI_wstrb,
    S02_AXI_wlast,
    S02_AXI_wvalid,
    S02_AXI_bready,
    s_axi_awready,
    s_axi_wready,
    M_SC_B_payld,
    M_SC_B_send);
  output S02_AXI_awready;
  output S02_AXI_wready;
  output [1:0]S02_AXI_bresp;
  output S02_AXI_bvalid;
  output [51:0]S_SC_AW_payld;
  output m_axi_awvalid;
  output [36:0]S_SC_W_payld;
  output m_axi_wvalid;
  output [0:0]M_SC_B_recv;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [31:0]S02_AXI_awaddr;
  input [7:0]S02_AXI_awlen;
  input [1:0]S02_AXI_awburst;
  input [0:0]S02_AXI_awlock;
  input [3:0]S02_AXI_awcache;
  input [2:0]S02_AXI_awprot;
  input [3:0]S02_AXI_awqos;
  input S02_AXI_awvalid;
  input [31:0]S02_AXI_wdata;
  input [3:0]S02_AXI_wstrb;
  input S02_AXI_wlast;
  input S02_AXI_wvalid;
  input S02_AXI_bready;
  input s_axi_awready;
  input s_axi_wready;
  input [1:0]M_SC_B_payld;
  input [0:0]M_SC_B_send;

  wire [1:0]M_SC_B_payld;
  wire [0:0]M_SC_B_recv;
  wire [0:0]M_SC_B_send;
  wire [31:0]S02_AXI_awaddr;
  wire [1:0]S02_AXI_awburst;
  wire [3:0]S02_AXI_awcache;
  wire [7:0]S02_AXI_awlen;
  wire [0:0]S02_AXI_awlock;
  wire [2:0]S02_AXI_awprot;
  wire [3:0]S02_AXI_awqos;
  wire S02_AXI_awready;
  wire S02_AXI_awvalid;
  wire S02_AXI_bready;
  wire [1:0]S02_AXI_bresp;
  wire S02_AXI_bvalid;
  wire [31:0]S02_AXI_wdata;
  wire S02_AXI_wlast;
  wire S02_AXI_wready;
  wire [3:0]S02_AXI_wstrb;
  wire S02_AXI_wvalid;
  wire [51:0]S_SC_AW_payld;
  wire [36:0]S_SC_W_payld;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire m_axi_awvalid;
  wire m_axi_wvalid;
  wire s_axi_awready;
  wire s_axi_wready;
  wire NLW_inst_m_axi_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_rready_UNCONNECTED;
  wire NLW_inst_s_axi_arready_UNCONNECTED;
  wire NLW_inst_s_axi_rlast_UNCONNECTED;
  wire NLW_inst_s_axi_rvalid_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arqos_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arsize_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_aruser_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_awburst_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awid_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_awsize_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_awuser_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_bid_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_buser_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_ruser_UNCONNECTED;

  (* C_ADDR_WIDTH = "32" *) 
  (* C_ENABLE_PIPELINING = "1'b1" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_ID_WIDTH = "0" *) 
  (* C_IS_CASCADED = "0" *) 
  (* C_MSC_ROUTE_ARRAY = "1'b1" *) 
  (* C_MSC_ROUTE_WIDTH = "1" *) 
  (* C_NUM_MSC = "1" *) 
  (* C_NUM_SEG = "1" *) 
  (* C_RDATA_WIDTH = "32" *) 
  (* C_READ_ACCEPTANCE = "32" *) 
  (* C_SEG_BASE_ADDR_ARRAY = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_SEG_SECURE_READ_ARRAY = "1'b0" *) 
  (* C_SEG_SECURE_WRITE_ARRAY = "1'b0" *) 
  (* C_SEG_SEP_ROUTE_ARRAY = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_SEG_SIZE_ARRAY = "29" *) 
  (* C_SEG_SUPPORTS_READ_ARRAY = "1'b1" *) 
  (* C_SEG_SUPPORTS_WRITE_ARRAY = "1'b1" *) 
  (* C_SINGLE_ISSUING = "0" *) 
  (* C_SUPPORTS_READ_DECERR = "1" *) 
  (* C_SUPPORTS_WRAP = "1" *) 
  (* C_SUPPORTS_WRITE_DECERR = "1" *) 
  (* C_S_ARUSER_WIDTH = "0" *) 
  (* C_S_AWUSER_WIDTH = "0" *) 
  (* C_S_BUSER_WIDTH = "0" *) 
  (* C_S_PROTOCOL = "0" *) 
  (* C_S_RUSER_WIDTH = "0" *) 
  (* C_S_WUSER_WIDTH = "0" *) 
  (* C_WDATA_WIDTH = "32" *) 
  (* C_WRITE_ACCEPTANCE = "32" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* P_AXI3 = "1" *) 
  (* P_AXI4 = "0" *) 
  (* P_AXILITE = "2" *) 
  (* P_BYPASS = "0" *) 
  (* P_DECERR = "2'b11" *) 
  (* P_FIXED = "2'b00" *) 
  (* P_FULLY_PIPELINED = "2" *) 
  (* P_INCR = "2'b01" *) 
  (* P_NUM_MSC_LOG = "1" *) 
  (* P_NUM_SEG_LOG = "1" *) 
  (* P_QUEUE_SIZE = "5" *) 
  (* P_R_DWBYTES = "4" *) 
  (* P_R_DWSIZE = "2" *) 
  (* P_WRAP = "2'b10" *) 
  (* P_W_DWBYTES = "4" *) 
  (* P_W_DWSIZE = "2" *) 
  (* P_ZERO_LATENCY = "1" *) 
  ADC_axi_smc_0_sc_mmu_v1_0_5_top inst
       (.aclk(aclk),
        .aclken(1'b0),
        .aresetn(interconnect_aresetn),
        .m_axi_araddr(NLW_inst_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_inst_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_inst_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_inst_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_inst_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_inst_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_inst_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_inst_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arsize(NLW_inst_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_inst_m_axi_aruser_UNCONNECTED[1023:0]),
        .m_axi_arvalid(NLW_inst_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(S_SC_AW_payld[39:8]),
        .m_axi_awburst(NLW_inst_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(S_SC_AW_payld[51:48]),
        .m_axi_awid(NLW_inst_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(S_SC_AW_payld[7:0]),
        .m_axi_awlock(S_SC_AW_payld[40]),
        .m_axi_awprot(S_SC_AW_payld[43:41]),
        .m_axi_awqos(S_SC_AW_payld[47:44]),
        .m_axi_awready(s_axi_awready),
        .m_axi_awsize(NLW_inst_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_inst_m_axi_awuser_UNCONNECTED[1023:0]),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(1'b0),
        .m_axi_bready(M_SC_B_recv),
        .m_axi_bresp(M_SC_B_payld),
        .m_axi_buser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bvalid(M_SC_B_send),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_inst_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata({S_SC_W_payld[36:29],S_SC_W_payld[27:20],S_SC_W_payld[18:11],S_SC_W_payld[9:2]}),
        .m_axi_wlast(S_SC_W_payld[0]),
        .m_axi_wready(s_axi_wready),
        .m_axi_wstrb({S_SC_W_payld[28],S_SC_W_payld[19],S_SC_W_payld[10],S_SC_W_payld[1]}),
        .m_axi_wuser(NLW_inst_m_axi_wuser_UNCONNECTED[1023:0]),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_inst_s_axi_arready_UNCONNECTED),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr(S02_AXI_awaddr),
        .s_axi_awburst(S02_AXI_awburst),
        .s_axi_awcache(S02_AXI_awcache),
        .s_axi_awid(1'b0),
        .s_axi_awlen(S02_AXI_awlen),
        .s_axi_awlock(S02_AXI_awlock),
        .s_axi_awprot(S02_AXI_awprot),
        .s_axi_awqos(S02_AXI_awqos),
        .s_axi_awready(S02_AXI_awready),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(S02_AXI_awvalid),
        .s_axi_bid(NLW_inst_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(S02_AXI_bready),
        .s_axi_bresp(S02_AXI_bresp),
        .s_axi_buser(NLW_inst_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(S02_AXI_bvalid),
        .s_axi_rdata(NLW_inst_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_inst_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_inst_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_inst_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_inst_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_inst_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata(S02_AXI_wdata),
        .s_axi_wid(1'b0),
        .s_axi_wlast(S02_AXI_wlast),
        .s_axi_wready(S02_AXI_wready),
        .s_axi_wstrb(S02_AXI_wstrb),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(S02_AXI_wvalid));
endmodule

(* ORIG_REF_NAME = "bd_61e3_s02sic_0" *) 
module ADC_axi_smc_0_bd_61e3_s02sic_0
   (s_axi_awready,
    s_axi_wready,
    S_SC_AW_payld,
    S_SC_AW_send,
    S_SC_W_payld,
    S_SC_W_send,
    aclk,
    interconnect_aresetn,
    \m_vector_i_reg[1067] ,
    m_axi_awvalid,
    \m_vector_i_reg[1024] ,
    m_axi_wvalid,
    S_SC_AW_recv,
    S_SC_W_recv);
  output s_axi_awready;
  output s_axi_wready;
  output [12:0]S_SC_AW_payld;
  output [0:0]S_SC_AW_send;
  output [13:0]S_SC_W_payld;
  output [0:0]S_SC_W_send;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [14:0]\m_vector_i_reg[1067] ;
  input m_axi_awvalid;
  input [0:0]\m_vector_i_reg[1024] ;
  input m_axi_wvalid;
  input [0:0]S_SC_AW_recv;
  input [0:0]S_SC_W_recv;

  wire [12:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire [0:0]S_SC_AW_send;
  wire [13:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire [0:0]S_SC_W_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire m_axi_awvalid;
  wire m_axi_wvalid;
  wire [0:0]\m_vector_i_reg[1024] ;
  wire [14:0]\m_vector_i_reg[1067] ;
  wire s_axi_awready;
  wire s_axi_wready;
  wire NLW_inst_m_axi_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_bready_UNCONNECTED;
  wire NLW_inst_m_axi_rready_UNCONNECTED;
  wire NLW_inst_m_axi_wlast_UNCONNECTED;
  wire NLW_inst_s_axi_arready_UNCONNECTED;
  wire NLW_inst_s_axi_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_rlast_UNCONNECTED;
  wire NLW_inst_s_axi_rvalid_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_araddr_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arcache_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_arqos_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_awaddr_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_awcache_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_inst_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_inst_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_awqos_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_awuser_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_wstrb_UNCONNECTED;
  wire [1023:0]NLW_inst_m_axi_wuser_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_bresp_UNCONNECTED;
  wire [1023:0]NLW_inst_s_axi_buser_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rresp_UNCONNECTED;
  wire [1023:0]NLW_inst_s_axi_ruser_UNCONNECTED;

  (* C_ADDR_WIDTH = "32" *) 
  (* C_ENABLE_PIPELINING = "1'b1" *) 
  (* C_HAS_BURST = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_IS_CASCADED = "0" *) 
  (* C_LIMIT_READ_LENGTH = "0" *) 
  (* C_LIMIT_WRITE_LENGTH = "0" *) 
  (* C_MAX_RUSER_BITS_PER_BYTE = "0" *) 
  (* C_MAX_WUSER_BITS_PER_BYTE = "0" *) 
  (* C_MEP_IDENTIFIER_WIDTH = "2" *) 
  (* C_MSC_RDATA_WIDTH_ARRAY = "64" *) 
  (* C_MSC_WDATA_WIDTH_ARRAY = "64" *) 
  (* C_NUM_MSC = "1" *) 
  (* C_NUM_READ_THREADS = "1" *) 
  (* C_NUM_SEG = "1" *) 
  (* C_NUM_WRITE_THREADS = "1" *) 
  (* C_RDATA_WIDTH = "32" *) 
  (* C_READ_ACCEPTANCE = "32" *) 
  (* C_READ_WATERMARK = "0" *) 
  (* C_SEP_PROTOCOL_ARRAY = "1" *) 
  (* C_SEP_RDATA_WIDTH_ARRAY = "64" *) 
  (* C_SEP_WDATA_WIDTH_ARRAY = "64" *) 
  (* C_SINGLE_ISSUING = "0" *) 
  (* C_SUPPORTS_NARROW = "0" *) 
  (* C_S_RUSER_BITS_PER_BYTE = "0" *) 
  (* C_S_WUSER_BITS_PER_BYTE = "0" *) 
  (* C_WDATA_WIDTH = "32" *) 
  (* C_WRITE_ACCEPTANCE = "32" *) 
  (* C_WRITE_WATERMARK = "0" *) 
  (* P_EXOK = "2'b01" *) 
  (* P_FULLY_PIPELINED = "2" *) 
  (* P_ID_WIDTH = "2" *) 
  (* P_MAX_RUSER_BITS_PER_BYTE = "1" *) 
  (* P_MAX_WUSER_BITS_PER_BYTE = "1" *) 
  (* P_R_DWBYTES = "4" *) 
  (* P_R_DWSIZE = "2" *) 
  (* P_S_RUSER_BITS_PER_BYTE = "1" *) 
  (* P_S_WUSER_BITS_PER_BYTE = "1" *) 
  (* P_W_DWBYTES = "4" *) 
  (* P_W_DWSIZE = "2" *) 
  (* P_ZERO_LATENCY = "1" *) 
  ADC_axi_smc_0_sc_si_converter_v1_0_5_top inst
       (.aclk(aclk),
        .aclken(1'b0),
        .aresetn(interconnect_aresetn),
        .m_axi_araddr(NLW_inst_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arcache(NLW_inst_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_inst_m_axi_arid_UNCONNECTED[1:0]),
        .m_axi_arlen(NLW_inst_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_inst_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_inst_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_inst_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_aruser(NLW_inst_m_axi_aruser_UNCONNECTED[1023:0]),
        .m_axi_arvalid(NLW_inst_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_inst_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awcache(NLW_inst_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_inst_m_axi_awid_UNCONNECTED[1:0]),
        .m_axi_awlen(NLW_inst_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_inst_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_inst_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_inst_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(S_SC_AW_recv),
        .m_axi_awuser({NLW_inst_m_axi_awuser_UNCONNECTED[1023:186],S_SC_AW_payld[12:8],NLW_inst_m_axi_awuser_UNCONNECTED[180:72],S_SC_AW_payld[7:0],NLW_inst_m_axi_awuser_UNCONNECTED[63:0]}),
        .m_axi_awvalid(S_SC_AW_send),
        .m_axi_bid({1'b0,1'b0}),
        .m_axi_bready(NLW_inst_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0}),
        .m_axi_rlast(1'b1),
        .m_axi_rready(NLW_inst_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_inst_m_axi_wdata_UNCONNECTED[31:0]),
        .m_axi_wlast(NLW_inst_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(S_SC_W_recv),
        .m_axi_wstrb(NLW_inst_m_axi_wstrb_UNCONNECTED[3:0]),
        .m_axi_wuser({NLW_inst_m_axi_wuser_UNCONNECTED[1023:78],S_SC_W_payld,NLW_inst_m_axi_wuser_UNCONNECTED[63:0]}),
        .m_axi_wvalid(S_SC_W_send),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b1}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_inst_s_axi_arready_UNCONNECTED),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\m_vector_i_reg[1067] [14:8]}),
        .s_axi_awburst({1'b0,1'b1}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b1,1'b0}),
        .s_axi_awlen(\m_vector_i_reg[1067] [7:0]),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(s_axi_awready),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awvalid(m_axi_awvalid),
        .s_axi_bid(NLW_inst_s_axi_bid_UNCONNECTED[1:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_inst_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_inst_s_axi_buser_UNCONNECTED[1023:0]),
        .s_axi_bvalid(NLW_inst_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_inst_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_inst_s_axi_rid_UNCONNECTED[1:0]),
        .s_axi_rlast(NLW_inst_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_inst_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_inst_s_axi_ruser_UNCONNECTED[1023:0]),
        .s_axi_rvalid(NLW_inst_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(\m_vector_i_reg[1024] ),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wvalid(m_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "bd_61e3_sawn_0" *) 
module ADC_axi_smc_0_bd_61e3_sawn_0
   (S_SC_AW_recv,
    M_SC_AW_send,
    M_SC_AW_req,
    M_SC_AW_payld,
    aclk,
    interconnect_aresetn,
    S_SC_AW_send,
    S_SC_AW_payld,
    M_SC_AW_recv);
  output [0:0]S_SC_AW_recv;
  output [0:0]M_SC_AW_send;
  output [0:0]M_SC_AW_req;
  output [138:0]M_SC_AW_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]S_SC_AW_send;
  input [64:0]S_SC_AW_payld;
  input [0:0]M_SC_AW_recv;

  wire [138:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_req;
  wire [0:0]M_SC_AW_send;
  wire [64:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire [0:0]S_SC_AW_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire NLW_inst_m_axis_arb_tvalid_UNCONNECTED;
  wire NLW_inst_s_axis_arb_tready_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_payld_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "3" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "8" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "1" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "140" *) 
  (* C_SC_ROUTE_WIDTH = "1" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "0" *) 
  (* C_S_NUM_BYTES_ARRAY = "4" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "0" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "1" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "1" *) 
  (* LP_LOG_NUM_SI = "1" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_M_MAX_NUM_BYTES = "8" *) 
  (* LP_M_MIN_NUM_BYTES = "8" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "1" *) 
  (* LP_NODE_USER_WIDTH = "0" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "4" *) 
  (* LP_S_MIN_NUM_BYTES = "4" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "1" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized2 inst
       (.m_axis_arb_tdata(NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:0]),
        .m_axis_arb_tready(1'b1),
        .m_axis_arb_tvalid(NLW_inst_m_axis_arb_tvalid_UNCONNECTED),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[0]),
        .m_sc_payld({M_SC_AW_payld,NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv(M_SC_AW_recv),
        .m_sc_req(M_SC_AW_req),
        .m_sc_send(M_SC_AW_send),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_arb_tready(NLW_inst_s_axis_arb_tready_UNCONNECTED),
        .s_axis_arb_tvalid(1'b0),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info(1'b0),
        .s_sc_payld({S_SC_AW_payld[64:21],1'b0,1'b0,1'b0,S_SC_AW_payld[20:16],1'b0,1'b0,1'b0,1'b0,S_SC_AW_payld[15:8],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,S_SC_AW_payld[7:0],1'b0}),
        .s_sc_recv(S_SC_AW_recv),
        .s_sc_req(1'b0),
        .s_sc_send(S_SC_AW_send));
endmodule

(* ORIG_REF_NAME = "bd_61e3_sbn_0" *) 
module ADC_axi_smc_0_bd_61e3_sbn_0
   (S_SC_B_recv,
    M_SC_B_send,
    M_SC_B_payld,
    aclk,
    interconnect_aresetn,
    S_SC_B_send,
    S_SC_B_payld,
    M_SC_B_recv);
  output [0:0]S_SC_B_recv;
  output [0:0]M_SC_B_send;
  output [1:0]M_SC_B_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]S_SC_B_send;
  input [6:0]S_SC_B_payld;
  input [0:0]M_SC_B_recv;

  wire [1:0]M_SC_B_payld;
  wire [0:0]M_SC_B_recv;
  wire [0:0]M_SC_B_send;
  wire [6:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire NLW_inst_m_axis_arb_tvalid_UNCONNECTED;
  wire NLW_inst_s_axis_arb_tready_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [5:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_req_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "4" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "4" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "0" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "8" *) 
  (* C_SC_ROUTE_WIDTH = "3" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "1" *) 
  (* C_S_NUM_BYTES_ARRAY = "8" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "0" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "1" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "1" *) 
  (* LP_LOG_NUM_SI = "1" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_M_MAX_NUM_BYTES = "4" *) 
  (* LP_M_MIN_NUM_BYTES = "4" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "3" *) 
  (* LP_NODE_USER_WIDTH = "0" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "8" *) 
  (* LP_S_MIN_NUM_BYTES = "8" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "0" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized3 inst
       (.m_axis_arb_tdata(NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:0]),
        .m_axis_arb_tready(1'b1),
        .m_axis_arb_tvalid(NLW_inst_m_axis_arb_tvalid_UNCONNECTED),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[0]),
        .m_sc_payld({M_SC_B_payld,NLW_inst_m_sc_payld_UNCONNECTED[5:0]}),
        .m_sc_recv(M_SC_B_recv),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[0]),
        .m_sc_send(M_SC_B_send),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_arb_tready(NLW_inst_s_axis_arb_tready_UNCONNECTED),
        .s_axis_arb_tvalid(1'b0),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info(1'b0),
        .s_sc_payld({S_SC_B_payld,1'b0}),
        .s_sc_recv(S_SC_B_recv),
        .s_sc_req(1'b0),
        .s_sc_send(S_SC_B_send));
endmodule

(* ORIG_REF_NAME = "bd_61e3_swn_0" *) 
module ADC_axi_smc_0_bd_61e3_swn_0
   (S_SC_W_recv,
    M_SC_W_send,
    M_SC_W_req,
    M_SC_W_info,
    M_SC_W_payld,
    aclk,
    interconnect_aresetn,
    S_SC_W_send,
    S_SC_W_payld,
    M_SC_W_recv);
  output [0:0]S_SC_W_recv;
  output [0:0]M_SC_W_send;
  output [0:0]M_SC_W_req;
  output [0:0]M_SC_W_info;
  output [86:0]M_SC_W_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]S_SC_W_send;
  input [50:0]S_SC_W_payld;
  input [0:0]M_SC_W_recv;

  wire [0:0]M_SC_W_info;
  wire [86:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_req;
  wire [0:0]M_SC_W_send;
  wire [50:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire [0:0]S_SC_W_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire NLW_inst_m_axis_arb_tvalid_UNCONNECTED;
  wire NLW_inst_s_axis_arb_tready_UNCONNECTED;
  wire [15:0]NLW_inst_m_axis_arb_tdata_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_payld_UNCONNECTED;

  (* C_ACLKEN_CONVERSION = "0" *) 
  (* C_ACLK_RELATIONSHIP = "1" *) 
  (* C_ADDR_WIDTH = "32" *) 
  (* C_ARBITER_MODE = "1" *) 
  (* C_CHANNEL = "1" *) 
  (* C_DISABLE_IP = "0" *) 
  (* C_ENABLE_PIPELINING = "8'b00000001" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FIFO_IP = "0" *) 
  (* C_FIFO_SIZE = "5" *) 
  (* C_FIFO_TYPE = "0" *) 
  (* C_ID_WIDTH = "2" *) 
  (* C_MAX_PAYLD_BYTES = "8" *) 
  (* C_M_NUM_BYTES_ARRAY = "8" *) 
  (* C_M_PIPELINE = "0" *) 
  (* C_M_SEND_PIPELINE = "1" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "1" *) 
  (* C_PAYLD_WIDTH = "88" *) 
  (* C_SC_ROUTE_WIDTH = "1" *) 
  (* C_SYNCHRONIZATION_STAGES = "3" *) 
  (* C_S_LATENCY = "0" *) 
  (* C_S_NUM_BYTES_ARRAY = "4" *) 
  (* C_S_PIPELINE = "0" *) 
  (* C_USER_BITS_PER_BYTE = "0" *) 
  (* C_USER_WIDTH = "512" *) 
  (* LP_ACLK_RELATIONSHIP = "1" *) 
  (* LP_ARBITER_MODE = "2" *) 
  (* LP_DT_REG = "false" *) 
  (* LP_FIFO_OUTPUT_REG = "0" *) 
  (* LP_FIFO_TYPE = "0" *) 
  (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
  (* LP_LOG_NUM_MI = "1" *) 
  (* LP_LOG_NUM_SI = "1" *) 
  (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
  (* LP_MAX_FANOUT = "200" *) 
  (* LP_MAX_NUM_BYTES = "8" *) 
  (* LP_MAX_UPSIZER_RATIO = "2" *) 
  (* LP_M_MAX_NUM_BYTES = "8" *) 
  (* LP_M_MIN_NUM_BYTES = "8" *) 
  (* LP_M_STATIC_DWIDTH = "1" *) 
  (* LP_NODE_ADDR_WIDTH = "32" *) 
  (* LP_NODE_ID_WIDTH = "2" *) 
  (* LP_NODE_ROUTE_WIDTH = "1" *) 
  (* LP_NODE_USER_WIDTH = "1" *) 
  (* LP_SYNCHRONIZATION_STAGES = "2" *) 
  (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
  (* LP_S_MAX_NUM_BYTES = "4" *) 
  (* LP_S_MIN_NUM_BYTES = "4" *) 
  (* LP_S_PIPELINE = "0" *) 
  (* LP_S_STATIC_DWIDTH = "1" *) 
  (* LP_ZERO_ROUTE_WIDTH = "1" *) 
  ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized4 inst
       (.m_axis_arb_tdata(NLW_inst_m_axis_arb_tdata_UNCONNECTED[15:0]),
        .m_axis_arb_tready(1'b1),
        .m_axis_arb_tvalid(NLW_inst_m_axis_arb_tvalid_UNCONNECTED),
        .m_sc_aclk(1'b0),
        .m_sc_aclken(1'b1),
        .m_sc_aresetn(1'b0),
        .m_sc_info(M_SC_W_info),
        .m_sc_payld({M_SC_W_payld,NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv(M_SC_W_recv),
        .m_sc_req(M_SC_W_req),
        .m_sc_send(M_SC_W_send),
        .s_axis_arb_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_arb_tready(NLW_inst_s_axis_arb_tready_UNCONNECTED),
        .s_axis_arb_tvalid(1'b0),
        .s_sc_aclk(aclk),
        .s_sc_aclken(1'b0),
        .s_sc_aresetn(interconnect_aresetn),
        .s_sc_info(1'b0),
        .s_sc_payld({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,S_SC_W_payld,1'b0}),
        .s_sc_recv(S_SC_W_recv),
        .s_sc_req(1'b0),
        .s_sc_send(S_SC_W_send));
endmodule

(* ORIG_REF_NAME = "bd_61e3_wsw_0" *) 
module ADC_axi_smc_0_bd_61e3_wsw_0
   (\skid_buffer_reg[1086] ,
    aclk,
    M_SC_W_payld,
    S_SC_W_recv);
  output [86:0]\skid_buffer_reg[1086] ;
  input aclk;
  input [86:0]M_SC_W_payld;
  input [0:0]S_SC_W_recv;

  wire [86:0]M_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire aclk;
  wire [86:0]\skid_buffer_reg[1086] ;
  wire [2:0]NLW_inst_m_sc_info_UNCONNECTED;
  wire [0:0]NLW_inst_m_sc_payld_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_req_UNCONNECTED;
  wire [2:0]NLW_inst_m_sc_send_UNCONNECTED;
  wire [2:0]NLW_inst_s_sc_recv_UNCONNECTED;

  (* C_CONNECTIVITY = "3'b100" *) 
  (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) 
  (* C_NUM_MI = "1" *) 
  (* C_NUM_SI = "3" *) 
  (* C_PAYLD_WIDTH = "88" *) 
  (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
  (* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) 
  (* C_TESTING_MODE = "0" *) 
  (* K_MAX_INFO_WIDTH = "1" *) 
  (* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) 
  (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) 
  (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
  ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized3 inst
       (.aclk(aclk),
        .aclken(1'b0),
        .connectivity({1'b1,1'b0,1'b0}),
        .m_sc_info(NLW_inst_m_sc_info_UNCONNECTED[2:0]),
        .m_sc_payld({\skid_buffer_reg[1086] ,NLW_inst_m_sc_payld_UNCONNECTED[0]}),
        .m_sc_recv({S_SC_W_recv,1'b0,1'b0}),
        .m_sc_req(NLW_inst_m_sc_req_UNCONNECTED[2:0]),
        .m_sc_send(NLW_inst_m_sc_send_UNCONNECTED[2:0]),
        .s_sc_info({1'b0,1'b0,1'b0}),
        .s_sc_payld({M_SC_W_payld,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_sc_recv(NLW_inst_s_sc_recv_UNCONNECTED[2:0]),
        .s_sc_req({1'b0,1'b0,1'b0}),
        .s_sc_send({1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module ADC_axi_smc_0_cdc_sync
   (scndry_out,
    aresetn,
    aclk);
  output scndry_out;
  input aresetn;
  input aclk;

  wire aclk;
  wire aresetn;
  wire asr_d1;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(aclk),
        .CE(1'b1),
        .D(asr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(aresetn),
        .O(asr_d1));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "clk_map_imp_YEMQ1G" *) 
module ADC_axi_smc_0_clk_map_imp_YEMQ1G
   (interconnect_aresetn,
    aclk,
    aresetn);
  output [0:0]interconnect_aresetn;
  input aclk;
  input aresetn;

  wire aclk;
  wire aresetn;
  wire [0:0]interconnect_aresetn;

  ADC_axi_smc_0_bd_61e3_psr_aclk_0 psr_aclk
       (.aclk(aclk),
        .aresetn(aresetn),
        .interconnect_aresetn(interconnect_aresetn));
endmodule

(* ORIG_REF_NAME = "lpf" *) 
module ADC_axi_smc_0_lpf
   (lpf_int,
    aclk,
    aresetn);
  output lpf_int;
  input aclk;
  input aresetn;

  wire Q;
  wire aclk;
  wire aresetn;
  wire lpf_asr;
  wire lpf_int;
  wire lpf_int0;
  wire p_0_in;

  ADC_axi_smc_0_cdc_sync \ACTIVE_LOW_AUX.ACT_LO_AUX 
       (.aclk(aclk),
        .aresetn(aresetn),
        .scndry_out(p_0_in));
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "inst/\clk_map/psr_aclk/U0/EXT_LPF/POR_SRL_I " *) 
  SRL16E #(
    .INIT(16'hFFFF)) 
    POR_SRL_I
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(aclk),
        .D(1'b0),
        .Q(Q));
  FDRE #(
    .INIT(1'b0)) 
    lpf_asr_reg
       (.C(aclk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(lpf_asr),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    lpf_int_i_1
       (.I0(Q),
        .I1(lpf_asr),
        .O(lpf_int0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_int_reg
       (.C(aclk),
        .CE(1'b1),
        .D(lpf_int0),
        .Q(lpf_int),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "m00_exit_pipeline_imp_10TDHU7" *) 
module ADC_axi_smc_0_m00_exit_pipeline_imp_10TDHU7
   (M_SC_AW_recv,
    M_SC_W_recv,
    S_SC_B_payld,
    S_SC_B_send,
    M00_AXI_awaddr,
    M00_AXI_awlen,
    M00_AXI_awcache,
    M00_AXI_awprot,
    M00_AXI_awqos,
    M00_AXI_awvalid,
    M00_AXI_wdata,
    M00_AXI_wstrb,
    M00_AXI_wlast,
    M00_AXI_wvalid,
    M00_AXI_bready,
    aclk,
    interconnect_aresetn,
    M_SC_AW_payld,
    M_SC_AW_send,
    M_SC_W_payld,
    M_SC_W_send,
    S_SC_B_recv,
    M00_AXI_awready,
    M00_AXI_wready,
    M00_AXI_bresp,
    M00_AXI_bvalid);
  output [0:0]M_SC_AW_recv;
  output [0:0]M_SC_W_recv;
  output [4:0]S_SC_B_payld;
  output [0:0]S_SC_B_send;
  output [31:0]M00_AXI_awaddr;
  output [3:0]M00_AXI_awlen;
  output [3:0]M00_AXI_awcache;
  output [2:0]M00_AXI_awprot;
  output [3:0]M00_AXI_awqos;
  output M00_AXI_awvalid;
  output [63:0]M00_AXI_wdata;
  output [7:0]M00_AXI_wstrb;
  output M00_AXI_wlast;
  output M00_AXI_wvalid;
  output M00_AXI_bready;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [52:0]M_SC_AW_payld;
  input [0:0]M_SC_AW_send;
  input [71:0]M_SC_W_payld;
  input [0:0]M_SC_W_send;
  input [0:0]S_SC_B_recv;
  input M00_AXI_awready;
  input M00_AXI_wready;
  input [1:0]M00_AXI_bresp;
  input M00_AXI_bvalid;

  wire [31:0]M00_AXI_awaddr;
  wire [3:0]M00_AXI_awcache;
  wire [3:0]M00_AXI_awlen;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire M00_AXI_awvalid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire [52:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_send;
  wire [71:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_send;
  wire [4:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;

  (* X_CORE_INFO = "sc_exit_v1_0_6_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_m00e_0 m00_exit
       (.M00_AXI_awaddr(M00_AXI_awaddr),
        .M00_AXI_awcache(M00_AXI_awcache),
        .M00_AXI_awlen(M00_AXI_awlen),
        .M00_AXI_awprot(M00_AXI_awprot),
        .M00_AXI_awqos(M00_AXI_awqos),
        .M00_AXI_awready(M00_AXI_awready),
        .M00_AXI_awvalid(M00_AXI_awvalid),
        .M00_AXI_bready(M00_AXI_bready),
        .M00_AXI_bresp(M00_AXI_bresp),
        .M00_AXI_bvalid(M00_AXI_bvalid),
        .M00_AXI_wdata(M00_AXI_wdata),
        .M00_AXI_wlast(M00_AXI_wlast),
        .M00_AXI_wready(M00_AXI_wready),
        .M00_AXI_wstrb(M00_AXI_wstrb),
        .M00_AXI_wvalid(M00_AXI_wvalid),
        .M_SC_AW_payld(M_SC_AW_payld),
        .M_SC_AW_recv(M_SC_AW_recv),
        .M_SC_AW_send(M_SC_AW_send),
        .M_SC_W_payld(M_SC_W_payld),
        .M_SC_W_recv(M_SC_W_recv),
        .M_SC_W_send(M_SC_W_send),
        .S_SC_B_payld(S_SC_B_payld),
        .S_SC_B_recv(S_SC_B_recv),
        .S_SC_B_send(S_SC_B_send),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn));
endmodule

(* ORIG_REF_NAME = "m00_nodes_imp_1MZN0KJ" *) 
module ADC_axi_smc_0_m00_nodes_imp_1MZN0KJ
   (S_SC_AW_recv,
    M_SC_AW_send,
    M_SC_AW_payld,
    S_SC_B_recv,
    M_SC_B_send,
    M_SC_B_payld,
    S_SC_W_recv,
    M_SC_W_send,
    M_SC_W_payld,
    aclk,
    interconnect_aresetn,
    M_SC_AW_req,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    S_SC_AW_payld,
    M_SC_AW_recv,
    S_SC_B_send,
    S_SC_B_payld,
    \gen_pipe[1].pipe_reg[1][0] ,
    M_SC_W_req,
    M_SC_W_info,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    S_SC_W_payld,
    M_SC_W_recv);
  output [0:0]S_SC_AW_recv;
  output [0:0]M_SC_AW_send;
  output [52:0]M_SC_AW_payld;
  output [0:0]S_SC_B_recv;
  output [0:0]M_SC_B_send;
  output [6:0]M_SC_B_payld;
  output [0:0]S_SC_W_recv;
  output [0:0]M_SC_W_send;
  output [71:0]M_SC_W_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]M_SC_AW_req;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  input [138:0]S_SC_AW_payld;
  input [0:0]M_SC_AW_recv;
  input [0:0]S_SC_B_send;
  input [4:0]S_SC_B_payld;
  input [0:0]\gen_pipe[1].pipe_reg[1][0] ;
  input [0:0]M_SC_W_req;
  input [0:0]M_SC_W_info;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [86:0]S_SC_W_payld;
  input [0:0]M_SC_W_recv;

  wire [52:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_req;
  wire [0:0]M_SC_AW_send;
  wire [6:0]M_SC_B_payld;
  wire [0:0]M_SC_B_send;
  wire [0:0]M_SC_W_info;
  wire [71:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_req;
  wire [0:0]M_SC_W_send;
  wire [138:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire [4:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire [86:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire aclk;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0] ;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire [0:0]\gen_pipe[1].pipe_reg[1][0] ;
  wire [0:0]interconnect_aresetn;
  wire [2:2]m00_aw_node_M_AXIS_ARB_TDATA;
  wire m00_aw_node_M_AXIS_ARB_TREADY;
  wire m00_aw_node_M_AXIS_ARB_TVALID;

  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_m00awn_0 m00_aw_node
       (.M_SC_AW_payld(M_SC_AW_payld),
        .M_SC_AW_recv(M_SC_AW_recv),
        .M_SC_AW_req(M_SC_AW_req),
        .M_SC_AW_send(M_SC_AW_send),
        .S_SC_AW_payld(S_SC_AW_payld),
        .S_SC_AW_recv(S_SC_AW_recv),
        .aclk(aclk),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .interconnect_aresetn(interconnect_aresetn),
        .m_axis_arb_tdata(m00_aw_node_M_AXIS_ARB_TDATA),
        .m_axis_arb_tvalid(m00_aw_node_M_AXIS_ARB_TVALID),
        .s_axis_arb_tready(m00_aw_node_M_AXIS_ARB_TREADY));
  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_m00bn_0 m00_b_node
       (.M_SC_B_payld(M_SC_B_payld),
        .M_SC_B_send(M_SC_B_send),
        .S_SC_B_payld(S_SC_B_payld),
        .S_SC_B_recv(S_SC_B_recv),
        .S_SC_B_send(S_SC_B_send),
        .aclk(aclk),
        .\gen_pipe[1].pipe_reg[1][0] (\gen_pipe[1].pipe_reg[1][0] ),
        .interconnect_aresetn(interconnect_aresetn));
  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_m00wn_0 m00_w_node
       (.M_SC_W_info(M_SC_W_info),
        .M_SC_W_payld(M_SC_W_payld),
        .M_SC_W_recv(M_SC_W_recv),
        .M_SC_W_req(M_SC_W_req),
        .M_SC_W_send(M_SC_W_send),
        .S_SC_W_payld(S_SC_W_payld),
        .S_SC_W_recv(S_SC_W_recv),
        .aclk(aclk),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .interconnect_aresetn(interconnect_aresetn),
        .m_axis_arb_tdata(m00_aw_node_M_AXIS_ARB_TDATA),
        .m_axis_arb_tvalid(m00_aw_node_M_AXIS_ARB_TVALID),
        .s_axis_arb_tready(m00_aw_node_M_AXIS_ARB_TREADY));
endmodule

(* ORIG_REF_NAME = "proc_sys_reset" *) 
module ADC_axi_smc_0_proc_sys_reset
   (interconnect_aresetn,
    aclk,
    aresetn);
  output [0:0]interconnect_aresetn;
  input aclk;
  input aresetn;

  wire SEQ_n_0;
  wire aclk;
  wire aresetn;
  wire [0:0]interconnect_aresetn;
  wire lpf_int;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N 
       (.C(aclk),
        .CE(1'b1),
        .D(SEQ_n_0),
        .Q(interconnect_aresetn),
        .R(1'b0));
  ADC_axi_smc_0_lpf EXT_LPF
       (.aclk(aclk),
        .aresetn(aresetn),
        .lpf_int(lpf_int));
  ADC_axi_smc_0_sequence_psr SEQ
       (.\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N (SEQ_n_0),
        .aclk(aclk),
        .lpf_int(lpf_int));
endmodule

(* ORIG_REF_NAME = "s02_entry_pipeline_imp_1SY0NZ9" *) 
module ADC_axi_smc_0_s02_entry_pipeline_imp_1SY0NZ9
   (S02_AXI_awready,
    S02_AXI_wready,
    S02_AXI_bresp,
    S02_AXI_bvalid,
    S_SC_AW_payld,
    S_SC_W_payld,
    M_SC_B_recv,
    S_SC_AW_send,
    S_SC_W_send,
    aclk,
    interconnect_aresetn,
    S02_AXI_awaddr,
    S02_AXI_awlen,
    S02_AXI_awburst,
    S02_AXI_awlock,
    S02_AXI_awcache,
    S02_AXI_awprot,
    S02_AXI_awqos,
    S02_AXI_awvalid,
    S02_AXI_wdata,
    S02_AXI_wstrb,
    S02_AXI_wlast,
    S02_AXI_wvalid,
    S02_AXI_bready,
    M_SC_B_payld,
    M_SC_B_send,
    S_SC_AW_recv,
    S_SC_W_recv);
  output S02_AXI_awready;
  output S02_AXI_wready;
  output [1:0]S02_AXI_bresp;
  output S02_AXI_bvalid;
  output [64:0]S_SC_AW_payld;
  output [50:0]S_SC_W_payld;
  output [0:0]M_SC_B_recv;
  output [0:0]S_SC_AW_send;
  output [0:0]S_SC_W_send;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [31:0]S02_AXI_awaddr;
  input [7:0]S02_AXI_awlen;
  input [1:0]S02_AXI_awburst;
  input [0:0]S02_AXI_awlock;
  input [3:0]S02_AXI_awcache;
  input [2:0]S02_AXI_awprot;
  input [3:0]S02_AXI_awqos;
  input S02_AXI_awvalid;
  input [31:0]S02_AXI_wdata;
  input [3:0]S02_AXI_wstrb;
  input S02_AXI_wlast;
  input S02_AXI_wvalid;
  input S02_AXI_bready;
  input [1:0]M_SC_B_payld;
  input [0:0]M_SC_B_send;
  input [0:0]S_SC_AW_recv;
  input [0:0]S_SC_W_recv;

  wire [1:0]M_SC_B_payld;
  wire [0:0]M_SC_B_recv;
  wire [0:0]M_SC_B_send;
  wire [31:0]S02_AXI_awaddr;
  wire [1:0]S02_AXI_awburst;
  wire [3:0]S02_AXI_awcache;
  wire [7:0]S02_AXI_awlen;
  wire [0:0]S02_AXI_awlock;
  wire [2:0]S02_AXI_awprot;
  wire [3:0]S02_AXI_awqos;
  wire S02_AXI_awready;
  wire S02_AXI_awvalid;
  wire S02_AXI_bready;
  wire [1:0]S02_AXI_bresp;
  wire S02_AXI_bvalid;
  wire [31:0]S02_AXI_wdata;
  wire S02_AXI_wlast;
  wire S02_AXI_wready;
  wire [3:0]S02_AXI_wstrb;
  wire S02_AXI_wvalid;
  wire [64:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire [0:0]S_SC_AW_send;
  wire [50:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire [0:0]S_SC_W_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;
  wire s02_mmu_M_AXI_AWVALID;
  wire s02_mmu_M_AXI_WVALID;
  wire s02_transaction_regulator_M_AXI_AWREADY;
  wire s02_transaction_regulator_M_AXI_WREADY;

  (* X_CORE_INFO = "sc_mmu_v1_0_5_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_s02mmu_0 s02_mmu
       (.M_SC_B_payld(M_SC_B_payld),
        .M_SC_B_recv(M_SC_B_recv),
        .M_SC_B_send(M_SC_B_send),
        .S02_AXI_awaddr(S02_AXI_awaddr),
        .S02_AXI_awburst(S02_AXI_awburst),
        .S02_AXI_awcache(S02_AXI_awcache),
        .S02_AXI_awlen(S02_AXI_awlen),
        .S02_AXI_awlock(S02_AXI_awlock),
        .S02_AXI_awprot(S02_AXI_awprot),
        .S02_AXI_awqos(S02_AXI_awqos),
        .S02_AXI_awready(S02_AXI_awready),
        .S02_AXI_awvalid(S02_AXI_awvalid),
        .S02_AXI_bready(S02_AXI_bready),
        .S02_AXI_bresp(S02_AXI_bresp),
        .S02_AXI_bvalid(S02_AXI_bvalid),
        .S02_AXI_wdata(S02_AXI_wdata),
        .S02_AXI_wlast(S02_AXI_wlast),
        .S02_AXI_wready(S02_AXI_wready),
        .S02_AXI_wstrb(S02_AXI_wstrb),
        .S02_AXI_wvalid(S02_AXI_wvalid),
        .S_SC_AW_payld({S_SC_AW_payld[64:21],S_SC_AW_payld[15:8]}),
        .S_SC_W_payld(S_SC_W_payld[50:14]),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn),
        .m_axi_awvalid(s02_mmu_M_AXI_AWVALID),
        .m_axi_wvalid(s02_mmu_M_AXI_WVALID),
        .s_axi_awready(s02_transaction_regulator_M_AXI_AWREADY),
        .s_axi_wready(s02_transaction_regulator_M_AXI_WREADY));
  (* X_CORE_INFO = "sc_si_converter_v1_0_5_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_s02sic_0 s02_si_converter
       (.S_SC_AW_payld({S_SC_AW_payld[20:16],S_SC_AW_payld[7:0]}),
        .S_SC_AW_recv(S_SC_AW_recv),
        .S_SC_AW_send(S_SC_AW_send),
        .S_SC_W_payld(S_SC_W_payld[13:0]),
        .S_SC_W_recv(S_SC_W_recv),
        .S_SC_W_send(S_SC_W_send),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn),
        .m_axi_awvalid(s02_mmu_M_AXI_AWVALID),
        .m_axi_wvalid(s02_mmu_M_AXI_WVALID),
        .\m_vector_i_reg[1024] (S_SC_W_payld[14]),
        .\m_vector_i_reg[1067] ({S_SC_AW_payld[27:21],S_SC_AW_payld[15:8]}),
        .s_axi_awready(s02_transaction_regulator_M_AXI_AWREADY),
        .s_axi_wready(s02_transaction_regulator_M_AXI_WREADY));
endmodule

(* ORIG_REF_NAME = "s02_nodes_imp_1VIFTIZ" *) 
module ADC_axi_smc_0_s02_nodes_imp_1VIFTIZ
   (S_SC_AW_recv,
    M_SC_AW_send,
    M_SC_AW_req,
    M_SC_AW_payld,
    S_SC_B_recv,
    M_SC_B_send,
    M_SC_B_payld,
    S_SC_W_recv,
    M_SC_W_send,
    M_SC_W_req,
    M_SC_W_info,
    M_SC_W_payld,
    aclk,
    interconnect_aresetn,
    S_SC_AW_send,
    S_SC_AW_payld,
    M_SC_AW_recv,
    S_SC_B_send,
    S_SC_B_payld,
    M_SC_B_recv,
    S_SC_W_send,
    S_SC_W_payld,
    M_SC_W_recv);
  output [0:0]S_SC_AW_recv;
  output [0:0]M_SC_AW_send;
  output [0:0]M_SC_AW_req;
  output [138:0]M_SC_AW_payld;
  output [0:0]S_SC_B_recv;
  output [0:0]M_SC_B_send;
  output [1:0]M_SC_B_payld;
  output [0:0]S_SC_W_recv;
  output [0:0]M_SC_W_send;
  output [0:0]M_SC_W_req;
  output [0:0]M_SC_W_info;
  output [86:0]M_SC_W_payld;
  input aclk;
  input [0:0]interconnect_aresetn;
  input [0:0]S_SC_AW_send;
  input [64:0]S_SC_AW_payld;
  input [0:0]M_SC_AW_recv;
  input [0:0]S_SC_B_send;
  input [6:0]S_SC_B_payld;
  input [0:0]M_SC_B_recv;
  input [0:0]S_SC_W_send;
  input [50:0]S_SC_W_payld;
  input [0:0]M_SC_W_recv;

  wire [138:0]M_SC_AW_payld;
  wire [0:0]M_SC_AW_recv;
  wire [0:0]M_SC_AW_req;
  wire [0:0]M_SC_AW_send;
  wire [1:0]M_SC_B_payld;
  wire [0:0]M_SC_B_recv;
  wire [0:0]M_SC_B_send;
  wire [0:0]M_SC_W_info;
  wire [86:0]M_SC_W_payld;
  wire [0:0]M_SC_W_recv;
  wire [0:0]M_SC_W_req;
  wire [0:0]M_SC_W_send;
  wire [64:0]S_SC_AW_payld;
  wire [0:0]S_SC_AW_recv;
  wire [0:0]S_SC_AW_send;
  wire [6:0]S_SC_B_payld;
  wire [0:0]S_SC_B_recv;
  wire [0:0]S_SC_B_send;
  wire [50:0]S_SC_W_payld;
  wire [0:0]S_SC_W_recv;
  wire [0:0]S_SC_W_send;
  wire aclk;
  wire [0:0]interconnect_aresetn;

  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_sawn_0 s02_aw_node
       (.M_SC_AW_payld(M_SC_AW_payld),
        .M_SC_AW_recv(M_SC_AW_recv),
        .M_SC_AW_req(M_SC_AW_req),
        .M_SC_AW_send(M_SC_AW_send),
        .S_SC_AW_payld(S_SC_AW_payld),
        .S_SC_AW_recv(S_SC_AW_recv),
        .S_SC_AW_send(S_SC_AW_send),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn));
  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_sbn_0 s02_b_node
       (.M_SC_B_payld(M_SC_B_payld),
        .M_SC_B_recv(M_SC_B_recv),
        .M_SC_B_send(M_SC_B_send),
        .S_SC_B_payld(S_SC_B_payld),
        .S_SC_B_recv(S_SC_B_recv),
        .S_SC_B_send(S_SC_B_send),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn));
  (* X_CORE_INFO = "sc_node_v1_0_7_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_swn_0 s02_w_node
       (.M_SC_W_info(M_SC_W_info),
        .M_SC_W_payld(M_SC_W_payld),
        .M_SC_W_recv(M_SC_W_recv),
        .M_SC_W_req(M_SC_W_req),
        .M_SC_W_send(M_SC_W_send),
        .S_SC_W_payld(S_SC_W_payld),
        .S_SC_W_recv(S_SC_W_recv),
        .S_SC_W_send(S_SC_W_send),
        .aclk(aclk),
        .interconnect_aresetn(interconnect_aresetn));
endmodule

(* ORIG_REF_NAME = "sequence_psr" *) 
module ADC_axi_smc_0_sequence_psr
   (\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ,
    lpf_int,
    aclk);
  output \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  input lpf_int;
  input aclk;

  wire \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  wire Bsr_out;
  wire Core_i_1_n_0;
  wire MB_out;
  wire aclk;
  wire \bsr_dec_reg_n_0_[0] ;
  wire \bsr_dec_reg_n_0_[1] ;
  wire \bsr_dec_reg_n_0_[2] ;
  wire bsr_i_1_n_0;
  wire \core_dec[0]_i_1_n_0 ;
  wire \core_dec[2]_i_1_n_0 ;
  wire \core_dec_reg_n_0_[0] ;
  wire from_sys_i_1_n_0;
  wire lpf_int;
  wire p_0_in;
  wire [2:0]p_5_out;
  wire pr_dec0__0;
  wire seq_clr;
  wire [5:0]seq_cnt;
  wire seq_cnt_en;

  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N_i_1 
       (.I0(Bsr_out),
        .O(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Core_i_1
       (.I0(MB_out),
        .I1(p_0_in),
        .O(Core_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Core_reg
       (.C(aclk),
        .CE(1'b1),
        .D(Core_i_1_n_0),
        .Q(MB_out),
        .S(lpf_int));
  ADC_axi_smc_0_upcnt_n SEQ_COUNTER
       (.Q(seq_cnt),
        .aclk(aclk),
        .seq_clr(seq_clr),
        .seq_cnt_en(seq_cnt_en));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0804)) 
    \bsr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt[4]),
        .O(p_5_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bsr_dec[2]_i_1 
       (.I0(\bsr_dec_reg_n_0_[1] ),
        .I1(\bsr_dec_reg_n_0_[0] ),
        .O(p_5_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(p_5_out[0]),
        .Q(\bsr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(pr_dec0__0),
        .Q(\bsr_dec_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(p_5_out[2]),
        .Q(\bsr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h2)) 
    bsr_i_1
       (.I0(Bsr_out),
        .I1(\bsr_dec_reg_n_0_[2] ),
        .O(bsr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    bsr_reg
       (.C(aclk),
        .CE(1'b1),
        .D(bsr_i_1_n_0),
        .Q(Bsr_out),
        .S(lpf_int));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h8040)) 
    \core_dec[0]_i_1 
       (.I0(seq_cnt[4]),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt_en),
        .O(\core_dec[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \core_dec[2]_i_1 
       (.I0(\bsr_dec_reg_n_0_[1] ),
        .I1(\core_dec_reg_n_0_[0] ),
        .O(\core_dec[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\core_dec[0]_i_1_n_0 ),
        .Q(\core_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\core_dec[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h8)) 
    from_sys_i_1
       (.I0(MB_out),
        .I1(seq_cnt_en),
        .O(from_sys_i_1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    from_sys_reg
       (.C(aclk),
        .CE(1'b1),
        .D(from_sys_i_1_n_0),
        .Q(seq_cnt_en),
        .S(lpf_int));
  LUT4 #(
    .INIT(16'h0210)) 
    pr_dec0
       (.I0(seq_cnt[0]),
        .I1(seq_cnt[1]),
        .I2(seq_cnt[2]),
        .I3(seq_cnt_en),
        .O(pr_dec0__0));
  FDRE #(
    .INIT(1'b0)) 
    seq_clr_reg
       (.C(aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(seq_clr),
        .R(lpf_int));
endmodule

(* ORIG_REF_NAME = "switchboards_imp_XSGWHU" *) 
module ADC_axi_smc_0_switchboards_imp_XSGWHU
   (m_sc_payld,
    \skid_buffer_reg[1086] ,
    \skid_buffer_reg[1057] ,
    aclk,
    M_SC_AW_payld,
    S_SC_AW_recv,
    M_SC_W_payld,
    S_SC_W_recv,
    M_SC_B_payld);
  output [138:0]m_sc_payld;
  output [86:0]\skid_buffer_reg[1086] ;
  output [6:0]\skid_buffer_reg[1057] ;
  input aclk;
  input [138:0]M_SC_AW_payld;
  input [0:0]S_SC_AW_recv;
  input [86:0]M_SC_W_payld;
  input [0:0]S_SC_W_recv;
  input [6:0]M_SC_B_payld;

  wire [138:0]M_SC_AW_payld;
  wire [6:0]M_SC_B_payld;
  wire [86:0]M_SC_W_payld;
  wire [0:0]S_SC_AW_recv;
  wire [0:0]S_SC_W_recv;
  wire aclk;
  wire [138:0]m_sc_payld;
  wire [6:0]\skid_buffer_reg[1057] ;
  wire [86:0]\skid_buffer_reg[1086] ;

  (* X_CORE_INFO = "sc_switchboard_v1_0_4_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_awsw_0 aw_switchboard
       (.M_SC_AW_payld(M_SC_AW_payld),
        .S_SC_AW_recv(S_SC_AW_recv),
        .aclk(aclk),
        .m_sc_payld(m_sc_payld));
  (* X_CORE_INFO = "sc_switchboard_v1_0_4_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_bsw_0 b_switchboard
       (.M_SC_B_payld(M_SC_B_payld),
        .aclk(aclk),
        .\skid_buffer_reg[1057] (\skid_buffer_reg[1057] ));
  (* X_CORE_INFO = "sc_switchboard_v1_0_4_top,Vivado 2017.4" *) 
  ADC_axi_smc_0_bd_61e3_wsw_0 w_switchboard
       (.M_SC_W_payld(M_SC_W_payld),
        .S_SC_W_recv(S_SC_W_recv),
        .aclk(aclk),
        .\skid_buffer_reg[1086] (\skid_buffer_reg[1086] ));
endmodule

(* ORIG_REF_NAME = "upcnt_n" *) 
module ADC_axi_smc_0_upcnt_n
   (Q,
    seq_clr,
    seq_cnt_en,
    aclk);
  output [5:0]Q;
  input seq_clr;
  input seq_cnt_en;
  input aclk;

  wire [5:0]Q;
  wire aclk;
  wire clear;
  wire [5:0]q_int0;
  wire seq_clr;
  wire seq_cnt_en;

  LUT1 #(
    .INIT(2'h1)) 
    \q_int[0]_i_1 
       (.I0(Q[0]),
        .O(q_int0[0]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \q_int[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(q_int0[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \q_int[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(q_int0[2]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \q_int[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(q_int0[3]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \q_int[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(q_int0[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \q_int[5]_i_1 
       (.I0(seq_clr),
        .O(clear));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \q_int[5]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(q_int0[5]));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[0] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[0]),
        .Q(Q[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[1] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[1]),
        .Q(Q[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[2] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[2]),
        .Q(Q[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[3] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[3]),
        .Q(Q[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[4] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[4]),
        .Q(Q[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[5] 
       (.C(aclk),
        .CE(seq_cnt_en),
        .D(q_int0[5]),
        .Q(Q[5]),
        .R(clear));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "32" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(addra[4]),
        .D(1'b1),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(addrb[2]),
        .DPRA3(addrb[3]),
        .DPRA4(addrb[4]),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "32" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__3
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(addra[4]),
        .D(1'b1),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(addrb[2]),
        .DPRA3(addrb[3]),
        .DPRA4(addrb[4]),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "32" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(addra[2]),
        .A3(addra[3]),
        .A4(addra[4]),
        .D(1'b1),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(addrb[2]),
        .DPRA3(addrb[3]),
        .DPRA4(addrb[4]),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "159" *) (* BYTE_WRITE_WIDTH_B = "159" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "5088" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "159" *) 
(* P_MIN_WIDTH_DATA_A = "159" *) (* P_MIN_WIDTH_DATA_B = "159" *) (* P_MIN_WIDTH_DATA_ECC = "159" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "159" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "159" *) 
(* P_WIDTH_COL_WRITE_B = "159" *) (* READ_DATA_WIDTH_A = "159" *) (* READ_DATA_WIDTH_B = "159" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "159" *) 
(* WRITE_DATA_WIDTH_B = "159" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [158:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [158:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [158:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [158:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [158:0]dina;
  wire [158:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_143_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_144_149_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_150_155_DOD_UNCONNECTED ;
  wire [1:1]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[158] = \<const0> ;
  assign douta[157] = \<const0> ;
  assign douta[156] = \<const0> ;
  assign douta[155] = \<const0> ;
  assign douta[154] = \<const0> ;
  assign douta[153] = \<const0> ;
  assign douta[152] = \<const0> ;
  assign douta[151] = \<const0> ;
  assign douta[150] = \<const0> ;
  assign douta[149] = \<const0> ;
  assign douta[148] = \<const0> ;
  assign douta[147] = \<const0> ;
  assign douta[146] = \<const0> ;
  assign douta[145] = \<const0> ;
  assign douta[144] = \<const0> ;
  assign douta[143] = \<const0> ;
  assign douta[142] = \<const0> ;
  assign douta[141] = \<const0> ;
  assign douta[140] = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[103:102]),
        .DIB(dina[105:104]),
        .DIC(dina[107:106]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[103:102]),
        .DOB(doutb[105:104]),
        .DOC(doutb[107:106]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[109:108]),
        .DIB(dina[111:110]),
        .DIC(dina[113:112]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[109:108]),
        .DOB(doutb[111:110]),
        .DOC(doutb[113:112]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[115:114]),
        .DIB(dina[117:116]),
        .DIC(dina[119:118]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[115:114]),
        .DOB(doutb[117:116]),
        .DOC(doutb[119:118]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[121:120]),
        .DIB(dina[123:122]),
        .DIC(dina[125:124]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[121:120]),
        .DOB(doutb[123:122]),
        .DOC(doutb[125:124]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[127:126]),
        .DOB(doutb[129:128]),
        .DOC(doutb[131:130]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[133:132]),
        .DIB(dina[135:134]),
        .DIC(dina[137:136]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[133:132]),
        .DOB(doutb[135:134]),
        .DOC(doutb[137:136]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_138_143 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[139:138]),
        .DIB(dina[141:140]),
        .DIC(dina[143:142]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[139:138]),
        .DOB(doutb[141:140]),
        .DOC(doutb[143:142]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_143_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_144_149 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[145:144]),
        .DIB(dina[147:146]),
        .DIC(dina[149:148]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[145:144]),
        .DOB(doutb[147:146]),
        .DOC(doutb[149:148]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_144_149_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_150_155 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[151:150]),
        .DIB(dina[153:152]),
        .DIC(dina[155:154]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[151:150]),
        .DOB(doutb[153:152]),
        .DOC(doutb[155:154]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_150_155_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[157:156]),
        .DIB({1'b0,dina[158]}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[157:156]),
        .DOB({\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOB_UNCONNECTED [1],doutb[158]}),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_156_158_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB(dina[21:20]),
        .DIC(dina[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(doutb[21:20]),
        .DOC(doutb[23:22]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[25:24]),
        .DIB(dina[27:26]),
        .DIC(dina[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[25:24]),
        .DOB(doutb[27:26]),
        .DOC(doutb[29:28]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[31:30]),
        .DIB(dina[33:32]),
        .DIC(dina[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[31:30]),
        .DOB(doutb[33:32]),
        .DOC(doutb[35:34]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[37:36]),
        .DIB(dina[39:38]),
        .DIC(dina[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[37:36]),
        .DOB(doutb[39:38]),
        .DOC(doutb[41:40]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[43:42]),
        .DOB(doutb[45:44]),
        .DOC(doutb[47:46]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[49:48]),
        .DIB(dina[51:50]),
        .DIC(dina[53:52]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[49:48]),
        .DOB(doutb[51:50]),
        .DOC(doutb[53:52]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[55:54]),
        .DIB(dina[57:56]),
        .DIC(dina[59:58]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[55:54]),
        .DOB(doutb[57:56]),
        .DOC(doutb[59:58]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[61:60]),
        .DIB(dina[63:62]),
        .DIC(dina[65:64]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[61:60]),
        .DOB(doutb[63:62]),
        .DOC(doutb[65:64]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[67:66]),
        .DIB(dina[69:68]),
        .DIC(dina[71:70]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[67:66]),
        .DOB(doutb[69:68]),
        .DOC(doutb[71:70]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[73:72]),
        .DIB(dina[75:74]),
        .DIC(dina[77:76]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[73:72]),
        .DOB(doutb[75:74]),
        .DOC(doutb[77:76]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[79:78]),
        .DIB(dina[81:80]),
        .DIC(dina[83:82]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[79:78]),
        .DOB(doutb[81:80]),
        .DOC(doutb[83:82]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[85:84]),
        .DOB(doutb[87:86]),
        .DOC(doutb[89:88]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[91:90]),
        .DIB(dina[93:92]),
        .DIC(dina[95:94]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[91:90]),
        .DOB(doutb[93:92]),
        .DOC(doutb[95:94]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[97:96]),
        .DIB(dina[99:98]),
        .DIC(dina[101:100]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[97:96]),
        .DOB(doutb[99:98]),
        .DOC(doutb[101:100]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "20" *) (* BYTE_WRITE_WIDTH_B = "20" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "640" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "20" *) 
(* P_MIN_WIDTH_DATA_A = "20" *) (* P_MIN_WIDTH_DATA_B = "20" *) (* P_MIN_WIDTH_DATA_ECC = "20" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "20" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "20" *) 
(* P_WIDTH_COL_WRITE_B = "20" *) (* READ_DATA_WIDTH_A = "20" *) (* READ_DATA_WIDTH_B = "20" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "20" *) 
(* WRITE_DATA_WIDTH_B = "20" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [19:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [19:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [19:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [19:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [19:0]dina;
  wire [19:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_19_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* BYTE_WRITE_WIDTH_B = "8" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "256" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "8" *) 
(* P_MIN_WIDTH_DATA_A = "8" *) (* P_MIN_WIDTH_DATA_B = "8" *) (* P_MIN_WIDTH_DATA_ECC = "8" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "8" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "8" *) 
(* P_WIDTH_COL_WRITE_B = "8" *) (* READ_DATA_WIDTH_A = "8" *) (* READ_DATA_WIDTH_B = "8" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "8" *) 
(* WRITE_DATA_WIDTH_B = "8" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [7:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [7:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [7:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [7:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [7:0]dina;
  wire [7:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_7_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "4" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "4" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "2" *) (* P_WIDTH_ADDR_READ_B = "2" *) 
(* P_WIDTH_ADDR_WRITE_A = "2" *) (* P_WIDTH_ADDR_WRITE_B = "2" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized3
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [1:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(1'b0),
        .A3(1'b0),
        .A4(1'b0),
        .D(1'b0),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(1'b0),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "4" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "4" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "2" *) (* P_WIDTH_ADDR_READ_B = "2" *) 
(* P_WIDTH_ADDR_WRITE_A = "2" *) (* P_WIDTH_ADDR_WRITE_B = "2" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized3__3
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [1:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]dina;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(1'b0),
        .A3(1'b0),
        .A4(1'b0),
        .D(dina),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(1'b0),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* BYTE_WRITE_WIDTH_B = "1" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "4" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "4" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "1" *) 
(* P_MIN_WIDTH_DATA_A = "1" *) (* P_MIN_WIDTH_DATA_B = "1" *) (* P_MIN_WIDTH_DATA_ECC = "1" *) 
(* P_MIN_WIDTH_DATA_LDW = "1" *) (* P_MIN_WIDTH_DATA_SHFT = "5" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "2" *) (* P_WIDTH_ADDR_READ_B = "2" *) 
(* P_WIDTH_ADDR_WRITE_A = "2" *) (* P_WIDTH_ADDR_WRITE_B = "2" *) (* P_WIDTH_COL_WRITE_A = "1" *) 
(* P_WIDTH_COL_WRITE_B = "1" *) (* READ_DATA_WIDTH_A = "1" *) (* READ_DATA_WIDTH_B = "1" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) 
(* WRITE_DATA_WIDTH_B = "1" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized3__4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [0:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [1:0]addrb;
  input [0:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0 
       (.A0(addra[0]),
        .A1(addra[1]),
        .A2(1'b0),
        .A3(1'b0),
        .A4(1'b0),
        .D(1'b0),
        .DPO(doutb),
        .DPRA0(addrb[0]),
        .DPRA1(addrb[1]),
        .DPRA2(1'b0),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_SPO_UNCONNECTED ),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_3_0_0_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "107" *) (* BYTE_WRITE_WIDTH_B = "107" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "3424" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "107" *) 
(* P_MIN_WIDTH_DATA_A = "107" *) (* P_MIN_WIDTH_DATA_B = "107" *) (* P_MIN_WIDTH_DATA_ECC = "107" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "107" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "107" *) 
(* P_WIDTH_COL_WRITE_B = "107" *) (* READ_DATA_WIDTH_A = "107" *) (* READ_DATA_WIDTH_B = "107" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "107" *) 
(* WRITE_DATA_WIDTH_B = "107" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [106:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [106:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [106:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [106:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [106:0]dina;
  wire [106:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:1]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[103:102]),
        .DIB(dina[105:104]),
        .DIC({1'b0,dina[106]}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[103:102]),
        .DOB(doutb[105:104]),
        .DOC({\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106_DOC_UNCONNECTED [1],doutb[106]}),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_102_106_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB(dina[21:20]),
        .DIC(dina[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(doutb[21:20]),
        .DOC(doutb[23:22]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[25:24]),
        .DIB(dina[27:26]),
        .DIC(dina[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[25:24]),
        .DOB(doutb[27:26]),
        .DOC(doutb[29:28]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[31:30]),
        .DIB(dina[33:32]),
        .DIC(dina[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[31:30]),
        .DOB(doutb[33:32]),
        .DOC(doutb[35:34]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[37:36]),
        .DIB(dina[39:38]),
        .DIC(dina[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[37:36]),
        .DOB(doutb[39:38]),
        .DOC(doutb[41:40]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[43:42]),
        .DOB(doutb[45:44]),
        .DOC(doutb[47:46]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[49:48]),
        .DIB(dina[51:50]),
        .DIC(dina[53:52]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[49:48]),
        .DOB(doutb[51:50]),
        .DOC(doutb[53:52]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[55:54]),
        .DIB(dina[57:56]),
        .DIC(dina[59:58]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[55:54]),
        .DOB(doutb[57:56]),
        .DOC(doutb[59:58]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[61:60]),
        .DIB(dina[63:62]),
        .DIC(dina[65:64]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[61:60]),
        .DOB(doutb[63:62]),
        .DOC(doutb[65:64]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[67:66]),
        .DIB(dina[69:68]),
        .DIC(dina[71:70]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[67:66]),
        .DOB(doutb[69:68]),
        .DOC(doutb[71:70]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[73:72]),
        .DIB(dina[75:74]),
        .DIC(dina[77:76]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[73:72]),
        .DOB(doutb[75:74]),
        .DOC(doutb[77:76]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[79:78]),
        .DIB(dina[81:80]),
        .DIC(dina[83:82]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[79:78]),
        .DOB(doutb[81:80]),
        .DOC(doutb[83:82]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[85:84]),
        .DOB(doutb[87:86]),
        .DOC(doutb[89:88]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[91:90]),
        .DIB(dina[93:92]),
        .DIC(dina[95:94]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[91:90]),
        .DOB(doutb[93:92]),
        .DOC(doutb[95:94]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[97:96]),
        .DIB(dina[99:98]),
        .DIC(dina[101:100]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[97:96]),
        .DOB(doutb[99:98]),
        .DOC(doutb[101:100]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "18" *) (* BYTE_WRITE_WIDTH_B = "18" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "576" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "18" *) 
(* P_MIN_WIDTH_DATA_A = "18" *) (* P_MIN_WIDTH_DATA_B = "18" *) (* P_MIN_WIDTH_DATA_ECC = "18" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "18" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "18" *) 
(* P_WIDTH_COL_WRITE_B = "18" *) (* READ_DATA_WIDTH_A = "18" *) (* READ_DATA_WIDTH_B = "18" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "18" *) 
(* WRITE_DATA_WIDTH_B = "18" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized5
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [17:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [17:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [17:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [17:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [17:0]dina;
  wire [17:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "18" *) (* BYTE_WRITE_WIDTH_B = "18" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "576" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "18" *) 
(* P_MIN_WIDTH_DATA_A = "18" *) (* P_MIN_WIDTH_DATA_B = "18" *) (* P_MIN_WIDTH_DATA_ECC = "18" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "18" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "18" *) 
(* P_WIDTH_COL_WRITE_B = "18" *) (* READ_DATA_WIDTH_A = "18" *) (* READ_DATA_WIDTH_B = "18" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "18" *) 
(* WRITE_DATA_WIDTH_B = "18" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized5__1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [17:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [17:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [17:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [17:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [17:0]dina;
  wire [17:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "140" *) (* BYTE_WRITE_WIDTH_B = "140" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "4480" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "140" *) 
(* P_MIN_WIDTH_DATA_A = "140" *) (* P_MIN_WIDTH_DATA_B = "140" *) (* P_MIN_WIDTH_DATA_ECC = "140" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "140" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "140" *) 
(* P_WIDTH_COL_WRITE_B = "140" *) (* READ_DATA_WIDTH_A = "140" *) (* READ_DATA_WIDTH_B = "140" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "140" *) 
(* WRITE_DATA_WIDTH_B = "140" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized6
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [139:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [139:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [139:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [139:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [139:0]dina;
  wire [139:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[139] = \<const0> ;
  assign douta[138] = \<const0> ;
  assign douta[137] = \<const0> ;
  assign douta[136] = \<const0> ;
  assign douta[135] = \<const0> ;
  assign douta[134] = \<const0> ;
  assign douta[133] = \<const0> ;
  assign douta[132] = \<const0> ;
  assign douta[131] = \<const0> ;
  assign douta[130] = \<const0> ;
  assign douta[129] = \<const0> ;
  assign douta[128] = \<const0> ;
  assign douta[127] = \<const0> ;
  assign douta[126] = \<const0> ;
  assign douta[125] = \<const0> ;
  assign douta[124] = \<const0> ;
  assign douta[123] = \<const0> ;
  assign douta[122] = \<const0> ;
  assign douta[121] = \<const0> ;
  assign douta[120] = \<const0> ;
  assign douta[119] = \<const0> ;
  assign douta[118] = \<const0> ;
  assign douta[117] = \<const0> ;
  assign douta[116] = \<const0> ;
  assign douta[115] = \<const0> ;
  assign douta[114] = \<const0> ;
  assign douta[113] = \<const0> ;
  assign douta[112] = \<const0> ;
  assign douta[111] = \<const0> ;
  assign douta[110] = \<const0> ;
  assign douta[109] = \<const0> ;
  assign douta[108] = \<const0> ;
  assign douta[107] = \<const0> ;
  assign douta[106] = \<const0> ;
  assign douta[105] = \<const0> ;
  assign douta[104] = \<const0> ;
  assign douta[103] = \<const0> ;
  assign douta[102] = \<const0> ;
  assign douta[101] = \<const0> ;
  assign douta[100] = \<const0> ;
  assign douta[99] = \<const0> ;
  assign douta[98] = \<const0> ;
  assign douta[97] = \<const0> ;
  assign douta[96] = \<const0> ;
  assign douta[95] = \<const0> ;
  assign douta[94] = \<const0> ;
  assign douta[93] = \<const0> ;
  assign douta[92] = \<const0> ;
  assign douta[91] = \<const0> ;
  assign douta[90] = \<const0> ;
  assign douta[89] = \<const0> ;
  assign douta[88] = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[103:102]),
        .DIB(dina[105:104]),
        .DIC(dina[107:106]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[103:102]),
        .DOB(doutb[105:104]),
        .DOC(doutb[107:106]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_102_107_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[109:108]),
        .DIB(dina[111:110]),
        .DIC(dina[113:112]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[109:108]),
        .DOB(doutb[111:110]),
        .DOC(doutb[113:112]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_108_113_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[115:114]),
        .DIB(dina[117:116]),
        .DIC(dina[119:118]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[115:114]),
        .DOB(doutb[117:116]),
        .DOC(doutb[119:118]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_114_119_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[121:120]),
        .DIB(dina[123:122]),
        .DIC(dina[125:124]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[121:120]),
        .DOB(doutb[123:122]),
        .DOC(doutb[125:124]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_120_125_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[127:126]),
        .DIB(dina[129:128]),
        .DIC(dina[131:130]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[127:126]),
        .DOB(doutb[129:128]),
        .DOC(doutb[131:130]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_126_131_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[133:132]),
        .DIB(dina[135:134]),
        .DIC(dina[137:136]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[133:132]),
        .DOB(doutb[135:134]),
        .DOC(doutb[137:136]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_132_137_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[139:138]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[139:138]),
        .DOB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_138_139_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB(dina[21:20]),
        .DIC(dina[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(doutb[21:20]),
        .DOC(doutb[23:22]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[25:24]),
        .DIB(dina[27:26]),
        .DIC(dina[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[25:24]),
        .DOB(doutb[27:26]),
        .DOC(doutb[29:28]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[31:30]),
        .DIB(dina[33:32]),
        .DIC(dina[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[31:30]),
        .DOB(doutb[33:32]),
        .DOC(doutb[35:34]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[37:36]),
        .DIB(dina[39:38]),
        .DIC(dina[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[37:36]),
        .DOB(doutb[39:38]),
        .DOC(doutb[41:40]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[43:42]),
        .DOB(doutb[45:44]),
        .DOC(doutb[47:46]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[49:48]),
        .DIB(dina[51:50]),
        .DIC(dina[53:52]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[49:48]),
        .DOB(doutb[51:50]),
        .DOC(doutb[53:52]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[55:54]),
        .DIB(dina[57:56]),
        .DIC(dina[59:58]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[55:54]),
        .DOB(doutb[57:56]),
        .DOC(doutb[59:58]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[61:60]),
        .DIB(dina[63:62]),
        .DIC(dina[65:64]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[61:60]),
        .DOB(doutb[63:62]),
        .DOC(doutb[65:64]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[67:66]),
        .DIB(dina[69:68]),
        .DIC(dina[71:70]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[67:66]),
        .DOB(doutb[69:68]),
        .DOC(doutb[71:70]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[73:72]),
        .DIB(dina[75:74]),
        .DIC(dina[77:76]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[73:72]),
        .DOB(doutb[75:74]),
        .DOC(doutb[77:76]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[79:78]),
        .DIB(dina[81:80]),
        .DIC(dina[83:82]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[79:78]),
        .DOB(doutb[81:80]),
        .DOC(doutb[83:82]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC(dina[89:88]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[85:84]),
        .DOB(doutb[87:86]),
        .DOC(doutb[89:88]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_89_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[91:90]),
        .DIB(dina[93:92]),
        .DIC(dina[95:94]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[91:90]),
        .DOB(doutb[93:92]),
        .DOC(doutb[95:94]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_90_95_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[97:96]),
        .DIB(dina[99:98]),
        .DIC(dina[101:100]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[97:96]),
        .DOB(doutb[99:98]),
        .DOC(doutb[101:100]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_96_101_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "26" *) (* BYTE_WRITE_WIDTH_B = "26" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "832" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "26" *) 
(* P_MIN_WIDTH_DATA_A = "26" *) (* P_MIN_WIDTH_DATA_B = "26" *) (* P_MIN_WIDTH_DATA_ECC = "26" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "26" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "26" *) 
(* P_WIDTH_COL_WRITE_B = "26" *) (* READ_DATA_WIDTH_A = "26" *) (* READ_DATA_WIDTH_B = "26" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "26" *) 
(* WRITE_DATA_WIDTH_B = "26" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized7
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [25:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [25:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [25:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [25:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [25:0]dina;
  wire [25:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB(dina[21:20]),
        .DIC(dina[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(doutb[21:20]),
        .DOC(doutb[23:22]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[25:24]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[25:24]),
        .DOB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_25_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "88" *) (* BYTE_WRITE_WIDTH_B = "88" *) (* CLOCKING_MODE = "0" *) 
(* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) (* MEMORY_INIT_FILE = "none" *) 
(* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) (* MEMORY_PRIMITIVE = "1" *) 
(* MEMORY_SIZE = "2816" *) (* MEMORY_TYPE = "1" *) (* MESSAGE_CONTROL = "0" *) 
(* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) (* P_ECC_MODE = "no_ecc" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "distributed" *) (* P_MIN_WIDTH_DATA = "88" *) 
(* P_MIN_WIDTH_DATA_A = "88" *) (* P_MIN_WIDTH_DATA_B = "88" *) (* P_MIN_WIDTH_DATA_ECC = "88" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "88" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "88" *) 
(* P_WIDTH_COL_WRITE_B = "88" *) (* READ_DATA_WIDTH_A = "88" *) (* READ_DATA_WIDTH_B = "88" *) 
(* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "0" *) (* READ_RESET_VALUE_A = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "88" *) 
(* WRITE_DATA_WIDTH_B = "88" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_base__parameterized8
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [87:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [87:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [87:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [87:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [87:0]dina;
  wire [87:0]doutb;
  wire ena;
  wire p_0_in;
  wire sleep;
  wire [0:0]wea;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87_DOC_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87_DOD_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[87] = \<const0> ;
  assign douta[86] = \<const0> ;
  assign douta[85] = \<const0> ;
  assign douta[84] = \<const0> ;
  assign douta[83] = \<const0> ;
  assign douta[82] = \<const0> ;
  assign douta[81] = \<const0> ;
  assign douta[80] = \<const0> ;
  assign douta[79] = \<const0> ;
  assign douta[78] = \<const0> ;
  assign douta[77] = \<const0> ;
  assign douta[76] = \<const0> ;
  assign douta[75] = \<const0> ;
  assign douta[74] = \<const0> ;
  assign douta[73] = \<const0> ;
  assign douta[72] = \<const0> ;
  assign douta[71] = \<const0> ;
  assign douta[70] = \<const0> ;
  assign douta[69] = \<const0> ;
  assign douta[68] = \<const0> ;
  assign douta[67] = \<const0> ;
  assign douta[66] = \<const0> ;
  assign douta[65] = \<const0> ;
  assign douta[64] = \<const0> ;
  assign douta[63] = \<const0> ;
  assign douta[62] = \<const0> ;
  assign douta[61] = \<const0> ;
  assign douta[60] = \<const0> ;
  assign douta[59] = \<const0> ;
  assign douta[58] = \<const0> ;
  assign douta[57] = \<const0> ;
  assign douta[56] = \<const0> ;
  assign douta[55] = \<const0> ;
  assign douta[54] = \<const0> ;
  assign douta[53] = \<const0> ;
  assign douta[52] = \<const0> ;
  assign douta[51] = \<const0> ;
  assign douta[50] = \<const0> ;
  assign douta[49] = \<const0> ;
  assign douta[48] = \<const0> ;
  assign douta[47] = \<const0> ;
  assign douta[46] = \<const0> ;
  assign douta[45] = \<const0> ;
  assign douta[44] = \<const0> ;
  assign douta[43] = \<const0> ;
  assign douta[42] = \<const0> ;
  assign douta[41] = \<const0> ;
  assign douta[40] = \<const0> ;
  assign douta[39] = \<const0> ;
  assign douta[38] = \<const0> ;
  assign douta[37] = \<const0> ;
  assign douta[36] = \<const0> ;
  assign douta[35] = \<const0> ;
  assign douta[34] = \<const0> ;
  assign douta[33] = \<const0> ;
  assign douta[32] = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[1:0]),
        .DIB(dina[3:2]),
        .DIC(dina[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[1:0]),
        .DOB(doutb[3:2]),
        .DOC(doutb[5:4]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[13:12]),
        .DIB(dina[15:14]),
        .DIC(dina[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[13:12]),
        .DOB(doutb[15:14]),
        .DOC(doutb[17:16]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[19:18]),
        .DIB(dina[21:20]),
        .DIC(dina[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[19:18]),
        .DOB(doutb[21:20]),
        .DOC(doutb[23:22]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[25:24]),
        .DIB(dina[27:26]),
        .DIC(dina[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[25:24]),
        .DOB(doutb[27:26]),
        .DOC(doutb[29:28]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[31:30]),
        .DIB(dina[33:32]),
        .DIC(dina[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[31:30]),
        .DOB(doutb[33:32]),
        .DOC(doutb[35:34]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_30_35_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[37:36]),
        .DIB(dina[39:38]),
        .DIC(dina[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[37:36]),
        .DOB(doutb[39:38]),
        .DOC(doutb[41:40]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_36_41_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[43:42]),
        .DIB(dina[45:44]),
        .DIC(dina[47:46]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[43:42]),
        .DOB(doutb[45:44]),
        .DOC(doutb[47:46]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_42_47_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[49:48]),
        .DIB(dina[51:50]),
        .DIC(dina[53:52]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[49:48]),
        .DOB(doutb[51:50]),
        .DOC(doutb[53:52]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_48_53_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[55:54]),
        .DIB(dina[57:56]),
        .DIC(dina[59:58]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[55:54]),
        .DOB(doutb[57:56]),
        .DOC(doutb[59:58]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_54_59_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[61:60]),
        .DIB(dina[63:62]),
        .DIC(dina[65:64]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[61:60]),
        .DOB(doutb[63:62]),
        .DOC(doutb[65:64]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_60_65_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[67:66]),
        .DIB(dina[69:68]),
        .DIC(dina[71:70]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[67:66]),
        .DOB(doutb[69:68]),
        .DOC(doutb[71:70]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_66_71_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[7:6]),
        .DIB(dina[9:8]),
        .DIC(dina[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[7:6]),
        .DOB(doutb[9:8]),
        .DOC(doutb[11:10]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[73:72]),
        .DIB(dina[75:74]),
        .DIC(dina[77:76]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[73:72]),
        .DOB(doutb[75:74]),
        .DOC(doutb[77:76]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_72_77_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[79:78]),
        .DIB(dina[81:80]),
        .DIC(dina[83:82]),
        .DID({1'b0,1'b0}),
        .DOA(doutb[79:78]),
        .DOB(doutb[81:80]),
        .DOC(doutb[83:82]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_78_83_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87 
       (.ADDRA(addrb),
        .ADDRB(addrb),
        .ADDRC(addrb),
        .ADDRD(addra),
        .DIA(dina[85:84]),
        .DIB(dina[87:86]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(doutb[85:84]),
        .DOB(doutb[87:86]),
        .DOC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87_DOD_UNCONNECTED [1:0]),
        .WCLK(clka),
        .WE(p_0_in));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_84_87_i_1 
       (.I0(wea),
        .I1(ena),
        .O(p_0_in));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "32" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(1'b0),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "32" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__3
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__3 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(1'b0),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "32" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__4
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__4 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(1'b0),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "159" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "5088" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "159" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "159" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized0
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [158:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [158:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [158:0]dina;
  wire [158:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [158:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "159" *) 
  (* BYTE_WRITE_WIDTH_B = "159" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "5088" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "159" *) 
  (* P_MIN_WIDTH_DATA_A = "159" *) 
  (* P_MIN_WIDTH_DATA_B = "159" *) 
  (* P_MIN_WIDTH_DATA_ECC = "159" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "159" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "159" *) 
  (* P_WIDTH_COL_WRITE_B = "159" *) 
  (* READ_DATA_WIDTH_A = "159" *) 
  (* READ_DATA_WIDTH_B = "159" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "159" *) 
  (* WRITE_DATA_WIDTH_B = "159" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized0 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[158:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "20" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "640" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "20" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "20" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized1
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [19:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [19:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [19:0]dina;
  wire [19:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [19:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "20" *) 
  (* BYTE_WRITE_WIDTH_B = "20" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "640" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "20" *) 
  (* P_MIN_WIDTH_DATA_A = "20" *) 
  (* P_MIN_WIDTH_DATA_B = "20" *) 
  (* P_MIN_WIDTH_DATA_ECC = "20" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "20" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "20" *) 
  (* P_WIDTH_COL_WRITE_B = "20" *) 
  (* READ_DATA_WIDTH_A = "20" *) 
  (* READ_DATA_WIDTH_B = "20" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "20" *) 
  (* WRITE_DATA_WIDTH_B = "20" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized1 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[19:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "8" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "256" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "8" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "8" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized2
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [7:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [7:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [7:0]dina;
  wire [7:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [7:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* BYTE_WRITE_WIDTH_B = "8" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "256" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "8" *) 
  (* P_MIN_WIDTH_DATA_A = "8" *) 
  (* P_MIN_WIDTH_DATA_B = "8" *) 
  (* P_MIN_WIDTH_DATA_ECC = "8" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "8" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "8" *) 
  (* P_WIDTH_COL_WRITE_B = "8" *) 
  (* READ_DATA_WIDTH_A = "8" *) 
  (* READ_DATA_WIDTH_B = "8" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "8" *) 
  (* WRITE_DATA_WIDTH_B = "8" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized2 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[7:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "4" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized3
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [1:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "4" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "2" *) 
  (* P_WIDTH_ADDR_READ_B = "2" *) 
  (* P_WIDTH_ADDR_WRITE_A = "2" *) 
  (* P_WIDTH_ADDR_WRITE_B = "2" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized3 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(1'b0),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "4" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized3__3
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [1:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]dina;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "4" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "2" *) 
  (* P_WIDTH_ADDR_READ_B = "2" *) 
  (* P_WIDTH_ADDR_WRITE_A = "2" *) 
  (* P_WIDTH_ADDR_WRITE_B = "2" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized3__3 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "2" *) (* ADDR_WIDTH_B = "2" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "1" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "4" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "1" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized3__4
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [1:0]addra;
  input [0:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [1:0]addrb;
  output [0:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [1:0]addra;
  wire [1:0]addrb;
  wire clka;
  wire [0:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [0:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* BYTE_WRITE_WIDTH_B = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "4" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "1" *) 
  (* P_MIN_WIDTH_DATA_A = "1" *) 
  (* P_MIN_WIDTH_DATA_B = "1" *) 
  (* P_MIN_WIDTH_DATA_ECC = "1" *) 
  (* P_MIN_WIDTH_DATA_LDW = "1" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "5" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "2" *) 
  (* P_WIDTH_ADDR_READ_B = "2" *) 
  (* P_WIDTH_ADDR_WRITE_A = "2" *) 
  (* P_WIDTH_ADDR_WRITE_B = "2" *) 
  (* P_WIDTH_COL_WRITE_A = "1" *) 
  (* P_WIDTH_COL_WRITE_B = "1" *) 
  (* READ_DATA_WIDTH_A = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_DATA_WIDTH_B = "1" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized3__4 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(1'b0),
        .dinb(1'b0),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "107" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "3424" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "107" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "107" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized4
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [106:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [106:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [106:0]dina;
  wire [106:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [106:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "107" *) 
  (* BYTE_WRITE_WIDTH_B = "107" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "3424" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "107" *) 
  (* P_MIN_WIDTH_DATA_A = "107" *) 
  (* P_MIN_WIDTH_DATA_B = "107" *) 
  (* P_MIN_WIDTH_DATA_ECC = "107" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "107" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "107" *) 
  (* P_WIDTH_COL_WRITE_B = "107" *) 
  (* READ_DATA_WIDTH_A = "107" *) 
  (* READ_DATA_WIDTH_B = "107" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "107" *) 
  (* WRITE_DATA_WIDTH_B = "107" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized4 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[106:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "18" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "576" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "18" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "18" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized5
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [17:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [17:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [17:0]dina;
  wire [17:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [17:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "18" *) 
  (* BYTE_WRITE_WIDTH_B = "18" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "576" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "18" *) 
  (* P_MIN_WIDTH_DATA_A = "18" *) 
  (* P_MIN_WIDTH_DATA_B = "18" *) 
  (* P_MIN_WIDTH_DATA_ECC = "18" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "18" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "18" *) 
  (* P_WIDTH_COL_WRITE_B = "18" *) 
  (* READ_DATA_WIDTH_A = "18" *) 
  (* READ_DATA_WIDTH_B = "18" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "18" *) 
  (* WRITE_DATA_WIDTH_B = "18" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized5 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[17:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "18" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "576" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "18" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "18" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized5__1
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [17:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [17:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [17:0]dina;
  wire [17:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [17:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "18" *) 
  (* BYTE_WRITE_WIDTH_B = "18" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "576" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "18" *) 
  (* P_MIN_WIDTH_DATA_A = "18" *) 
  (* P_MIN_WIDTH_DATA_B = "18" *) 
  (* P_MIN_WIDTH_DATA_ECC = "18" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "18" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "18" *) 
  (* P_WIDTH_COL_WRITE_B = "18" *) 
  (* READ_DATA_WIDTH_A = "18" *) 
  (* READ_DATA_WIDTH_B = "18" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "18" *) 
  (* WRITE_DATA_WIDTH_B = "18" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized5__1 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[17:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "140" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "4480" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "140" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "140" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized6
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [139:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [139:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [139:0]dina;
  wire [139:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [139:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "140" *) 
  (* BYTE_WRITE_WIDTH_B = "140" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4480" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "140" *) 
  (* P_MIN_WIDTH_DATA_A = "140" *) 
  (* P_MIN_WIDTH_DATA_B = "140" *) 
  (* P_MIN_WIDTH_DATA_ECC = "140" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "140" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "140" *) 
  (* P_WIDTH_COL_WRITE_B = "140" *) 
  (* READ_DATA_WIDTH_A = "140" *) 
  (* READ_DATA_WIDTH_B = "140" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "140" *) 
  (* WRITE_DATA_WIDTH_B = "140" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized6 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[139:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "26" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "832" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "26" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "26" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized7
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [25:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [25:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [25:0]dina;
  wire [25:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [25:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "26" *) 
  (* BYTE_WRITE_WIDTH_B = "26" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "832" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "26" *) 
  (* P_MIN_WIDTH_DATA_A = "26" *) 
  (* P_MIN_WIDTH_DATA_B = "26" *) 
  (* P_MIN_WIDTH_DATA_ECC = "26" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "26" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "26" *) 
  (* P_WIDTH_COL_WRITE_B = "26" *) 
  (* READ_DATA_WIDTH_A = "26" *) 
  (* READ_DATA_WIDTH_B = "26" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "26" *) 
  (* WRITE_DATA_WIDTH_B = "26" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized7 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[25:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "88" *) (* CLOCKING_MODE = "0" *) (* ECC_MODE = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "1" *) (* MEMORY_SIZE = "2816" *) (* MESSAGE_CONTROL = "0" *) 
(* ORIG_REF_NAME = "xpm_memory_sdpram" *) (* P_CLOCKING_MODE = "0" *) (* P_ECC_MODE = "0" *) 
(* P_MEMORY_OPTIMIZATION = "1" *) (* P_MEMORY_PRIMITIVE = "1" *) (* P_WAKEUP_TIME = "0" *) 
(* P_WRITE_MODE_B = "1" *) (* READ_DATA_WIDTH_B = "88" *) (* READ_LATENCY_B = "0" *) 
(* READ_RESET_VALUE_B = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "88" *) (* WRITE_MODE_B = "1" *) 
(* XPM_MODULE = "TRUE" *) 
module ADC_axi_smc_0_xpm_memory_sdpram__parameterized8
   (sleep,
    clka,
    ena,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    addrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input ena;
  input [0:0]wea;
  input [4:0]addra;
  input [87:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [4:0]addrb;
  output [87:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire [4:0]addrb;
  wire clka;
  wire [87:0]dina;
  wire [87:0]doutb;
  wire ena;
  wire sleep;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [87:0]NLW_xpm_memory_base_inst_douta_UNCONNECTED;

  assign dbiterrb = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "88" *) 
  (* BYTE_WRITE_WIDTH_B = "88" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2816" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "distributed" *) 
  (* P_MIN_WIDTH_DATA = "88" *) 
  (* P_MIN_WIDTH_DATA_A = "88" *) 
  (* P_MIN_WIDTH_DATA_B = "88" *) 
  (* P_MIN_WIDTH_DATA_ECC = "88" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "88" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "88" *) 
  (* P_WIDTH_COL_WRITE_B = "88" *) 
  (* READ_DATA_WIDTH_A = "88" *) 
  (* READ_DATA_WIDTH_B = "88" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "88" *) 
  (* WRITE_DATA_WIDTH_B = "88" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_base__parameterized8 xpm_memory_base_inst
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(dina),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(NLW_xpm_memory_base_inst_douta_UNCONNECTED[87:0]),
        .doutb(doutb),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(sleep),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_a_axi3_conv" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_a_axi3_conv
   (D,
    \m_vector_i_reg[1064] ,
    \S_AXI_ALEN_Q_reg[0]_0 ,
    split_ongoing_reg_0,
    \m_vector_i_reg[1064]_0 ,
    \m_vector_i_reg[1092] ,
    \gen_pipelined.mesg_reg_reg[3] ,
    \gen_pipelined.state_reg[1] ,
    \fifoaddr_reg[1] ,
    cmd_push_block_reg_0,
    \gen_pipelined.mesg_reg_reg[3]_0 ,
    \gen_pipelined.mesg_reg_reg[3]_1 ,
    Q,
    first_mi_word_reg,
    \gen_pipelined.mesg_reg_reg[2] ,
    \length_counter_1_reg[3] ,
    aclk,
    s_axi_awlen,
    areset,
    \skid_buffer_reg[1092] ,
    \state_reg[m_valid_i] ,
    \state_reg[m_valid_i]_0 ,
    \length_counter_1_reg[0] ,
    mr_axi_awready,
    s_write_cmd_vacancy,
    s_axi_awvalid,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awcache);
  output [46:0]D;
  output \m_vector_i_reg[1064] ;
  output \S_AXI_ALEN_Q_reg[0]_0 ;
  output split_ongoing_reg_0;
  output \m_vector_i_reg[1064]_0 ;
  output [28:0]\m_vector_i_reg[1092] ;
  output \gen_pipelined.mesg_reg_reg[3] ;
  output \gen_pipelined.state_reg[1] ;
  output \fifoaddr_reg[1] ;
  output cmd_push_block_reg_0;
  output [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  output \gen_pipelined.mesg_reg_reg[3]_1 ;
  output [2:0]Q;
  output [4:0]first_mi_word_reg;
  output [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  output [3:0]\length_counter_1_reg[3] ;
  input aclk;
  input [7:0]s_axi_awlen;
  input areset;
  input [28:0]\skid_buffer_reg[1092] ;
  input \state_reg[m_valid_i] ;
  input \state_reg[m_valid_i]_0 ;
  input \length_counter_1_reg[0] ;
  input mr_axi_awready;
  input s_write_cmd_vacancy;
  input s_axi_awvalid;
  input [1:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awcache;

  wire [46:0]D;
  wire [2:0]Q;
  wire [31:3]S_AXI_AADDR_Q;
  wire \S_AXI_ALEN_Q_reg[0]_0 ;
  wire \USE_BURSTS.cmd_queue_n_11 ;
  wire \USE_BURSTS.cmd_queue_n_12 ;
  wire \USE_BURSTS.cmd_queue_n_8 ;
  wire \USE_BURSTS.cmd_queue_n_9 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_2 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_5 ;
  wire \USE_B_CHANNEL.s_b_ready ;
  wire aclk;
  wire areset;
  wire [1:0]areset_d;
  wire cmd_b_push_block;
  wire cmd_b_split_i;
  wire cmd_push_block;
  wire cmd_push_block_reg_0;
  wire command_ongoing;
  wire [6:2]data2;
  wire \fifoaddr_reg[1] ;
  wire [4:0]first_mi_word_reg;
  wire [7:3]first_step_q;
  wire [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_pipelined.mesg_reg_reg[3] ;
  wire [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  wire \gen_pipelined.mesg_reg_reg[3]_1 ;
  wire \gen_pipelined.state_reg[1] ;
  wire incr_need_to_split__0;
  wire \length_counter_1_reg[0] ;
  wire [3:0]\length_counter_1_reg[3] ;
  wire \m_vector_i_reg[1064] ;
  wire \m_vector_i_reg[1064]_0 ;
  wire [28:0]\m_vector_i_reg[1092] ;
  wire mr_axi_awready;
  wire [31:3]next_mi_addr;
  wire \next_mi_addr[10]_i_2_n_0 ;
  wire \next_mi_addr[10]_i_3_n_0 ;
  wire \next_mi_addr[10]_i_4_n_0 ;
  wire \next_mi_addr[10]_i_5_n_0 ;
  wire \next_mi_addr[10]_i_6_n_0 ;
  wire \next_mi_addr[10]_i_7_n_0 ;
  wire \next_mi_addr[10]_i_8_n_0 ;
  wire \next_mi_addr[14]_i_2_n_0 ;
  wire \next_mi_addr[14]_i_3_n_0 ;
  wire \next_mi_addr[14]_i_4_n_0 ;
  wire \next_mi_addr[14]_i_5_n_0 ;
  wire \next_mi_addr[14]_i_6_n_0 ;
  wire \next_mi_addr[14]_i_7_n_0 ;
  wire \next_mi_addr[14]_i_8_n_0 ;
  wire \next_mi_addr[14]_i_9_n_0 ;
  wire \next_mi_addr[18]_i_2_n_0 ;
  wire \next_mi_addr[18]_i_3_n_0 ;
  wire \next_mi_addr[18]_i_4_n_0 ;
  wire \next_mi_addr[18]_i_5_n_0 ;
  wire \next_mi_addr[18]_i_6_n_0 ;
  wire \next_mi_addr[22]_i_2_n_0 ;
  wire \next_mi_addr[22]_i_3_n_0 ;
  wire \next_mi_addr[22]_i_4_n_0 ;
  wire \next_mi_addr[22]_i_5_n_0 ;
  wire \next_mi_addr[26]_i_2_n_0 ;
  wire \next_mi_addr[26]_i_3_n_0 ;
  wire \next_mi_addr[26]_i_4_n_0 ;
  wire \next_mi_addr[26]_i_5_n_0 ;
  wire \next_mi_addr[30]_i_2_n_0 ;
  wire \next_mi_addr[30]_i_3_n_0 ;
  wire \next_mi_addr[30]_i_4_n_0 ;
  wire \next_mi_addr[30]_i_5_n_0 ;
  wire \next_mi_addr[31]_i_2_n_0 ;
  wire \next_mi_addr[3]_i_1_n_0 ;
  wire \next_mi_addr[6]_i_2_n_0 ;
  wire \next_mi_addr[6]_i_3_n_0 ;
  wire \next_mi_addr[6]_i_4_n_0 ;
  wire \next_mi_addr[6]_i_5_n_0 ;
  wire \next_mi_addr_reg[10]_i_1_n_0 ;
  wire \next_mi_addr_reg[10]_i_1_n_1 ;
  wire \next_mi_addr_reg[10]_i_1_n_2 ;
  wire \next_mi_addr_reg[10]_i_1_n_3 ;
  wire \next_mi_addr_reg[10]_i_1_n_4 ;
  wire \next_mi_addr_reg[10]_i_1_n_5 ;
  wire \next_mi_addr_reg[10]_i_1_n_6 ;
  wire \next_mi_addr_reg[10]_i_1_n_7 ;
  wire \next_mi_addr_reg[14]_i_1_n_0 ;
  wire \next_mi_addr_reg[14]_i_1_n_1 ;
  wire \next_mi_addr_reg[14]_i_1_n_2 ;
  wire \next_mi_addr_reg[14]_i_1_n_3 ;
  wire \next_mi_addr_reg[14]_i_1_n_4 ;
  wire \next_mi_addr_reg[14]_i_1_n_5 ;
  wire \next_mi_addr_reg[14]_i_1_n_6 ;
  wire \next_mi_addr_reg[14]_i_1_n_7 ;
  wire \next_mi_addr_reg[18]_i_1_n_0 ;
  wire \next_mi_addr_reg[18]_i_1_n_1 ;
  wire \next_mi_addr_reg[18]_i_1_n_2 ;
  wire \next_mi_addr_reg[18]_i_1_n_3 ;
  wire \next_mi_addr_reg[18]_i_1_n_4 ;
  wire \next_mi_addr_reg[18]_i_1_n_5 ;
  wire \next_mi_addr_reg[18]_i_1_n_6 ;
  wire \next_mi_addr_reg[18]_i_1_n_7 ;
  wire \next_mi_addr_reg[22]_i_1_n_0 ;
  wire \next_mi_addr_reg[22]_i_1_n_1 ;
  wire \next_mi_addr_reg[22]_i_1_n_2 ;
  wire \next_mi_addr_reg[22]_i_1_n_3 ;
  wire \next_mi_addr_reg[22]_i_1_n_4 ;
  wire \next_mi_addr_reg[22]_i_1_n_5 ;
  wire \next_mi_addr_reg[22]_i_1_n_6 ;
  wire \next_mi_addr_reg[22]_i_1_n_7 ;
  wire \next_mi_addr_reg[26]_i_1_n_0 ;
  wire \next_mi_addr_reg[26]_i_1_n_1 ;
  wire \next_mi_addr_reg[26]_i_1_n_2 ;
  wire \next_mi_addr_reg[26]_i_1_n_3 ;
  wire \next_mi_addr_reg[26]_i_1_n_4 ;
  wire \next_mi_addr_reg[26]_i_1_n_5 ;
  wire \next_mi_addr_reg[26]_i_1_n_6 ;
  wire \next_mi_addr_reg[26]_i_1_n_7 ;
  wire \next_mi_addr_reg[30]_i_1_n_0 ;
  wire \next_mi_addr_reg[30]_i_1_n_1 ;
  wire \next_mi_addr_reg[30]_i_1_n_2 ;
  wire \next_mi_addr_reg[30]_i_1_n_3 ;
  wire \next_mi_addr_reg[30]_i_1_n_4 ;
  wire \next_mi_addr_reg[30]_i_1_n_5 ;
  wire \next_mi_addr_reg[30]_i_1_n_6 ;
  wire \next_mi_addr_reg[30]_i_1_n_7 ;
  wire \next_mi_addr_reg[31]_i_1_n_7 ;
  wire \next_mi_addr_reg[6]_i_1_n_0 ;
  wire \next_mi_addr_reg[6]_i_1_n_1 ;
  wire \next_mi_addr_reg[6]_i_1_n_2 ;
  wire \next_mi_addr_reg[6]_i_1_n_3 ;
  wire \next_mi_addr_reg[6]_i_1_n_4 ;
  wire \next_mi_addr_reg[6]_i_1_n_5 ;
  wire \next_mi_addr_reg[6]_i_1_n_6 ;
  wire [3:0]num_transactions_q;
  wire [3:0]p_0_in;
  wire \pushed_commands[3]_i_1_n_0 ;
  wire [3:0]pushed_commands_reg__0;
  wire pushed_new_cmd;
  wire [31:0]s_axi_awaddr;
  wire [3:0]s_axi_awcache;
  wire [1:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awvalid;
  wire s_ready;
  wire s_write_cmd_vacancy;
  wire [28:0]\skid_buffer_reg[1092] ;
  wire split_ongoing_reg_0;
  wire \state_reg[m_valid_i] ;
  wire \state_reg[m_valid_i]_0 ;
  wire [3:0]\NLW_next_mi_addr_reg[31]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_next_mi_addr_reg[31]_i_1_O_UNCONNECTED ;
  wire [0:0]\NLW_next_mi_addr_reg[6]_i_1_O_UNCONNECTED ;

  FDRE \S_AXI_AADDR_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[0]),
        .Q(Q[0]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[10] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[10]),
        .Q(S_AXI_AADDR_Q[10]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[11] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[11]),
        .Q(S_AXI_AADDR_Q[11]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[12] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[12]),
        .Q(S_AXI_AADDR_Q[12]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[13] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[13]),
        .Q(S_AXI_AADDR_Q[13]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[14] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[14]),
        .Q(S_AXI_AADDR_Q[14]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[15] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[15]),
        .Q(S_AXI_AADDR_Q[15]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[16] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[16]),
        .Q(S_AXI_AADDR_Q[16]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[17] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[17]),
        .Q(S_AXI_AADDR_Q[17]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[18] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[18]),
        .Q(S_AXI_AADDR_Q[18]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[19] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[19]),
        .Q(S_AXI_AADDR_Q[19]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[1]),
        .Q(Q[1]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[20] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[20]),
        .Q(S_AXI_AADDR_Q[20]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[21] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[21]),
        .Q(S_AXI_AADDR_Q[21]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[22] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[22]),
        .Q(S_AXI_AADDR_Q[22]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[23] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[23]),
        .Q(S_AXI_AADDR_Q[23]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[24] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[24]),
        .Q(S_AXI_AADDR_Q[24]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[25] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[25]),
        .Q(S_AXI_AADDR_Q[25]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[26] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[26]),
        .Q(S_AXI_AADDR_Q[26]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[27] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[27]),
        .Q(S_AXI_AADDR_Q[27]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[28] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[28]),
        .Q(S_AXI_AADDR_Q[28]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[29] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[29]),
        .Q(S_AXI_AADDR_Q[29]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[2]),
        .Q(Q[2]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[30] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[30]),
        .Q(S_AXI_AADDR_Q[30]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[31] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[31]),
        .Q(S_AXI_AADDR_Q[31]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[3]),
        .Q(S_AXI_AADDR_Q[3]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[4] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[4]),
        .Q(S_AXI_AADDR_Q[4]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[5] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[5]),
        .Q(S_AXI_AADDR_Q[5]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[6] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[6]),
        .Q(S_AXI_AADDR_Q[6]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[7] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[7]),
        .Q(S_AXI_AADDR_Q[7]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[8] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[8]),
        .Q(S_AXI_AADDR_Q[8]),
        .R(areset));
  FDRE \S_AXI_AADDR_Q_reg[9] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awaddr[9]),
        .Q(S_AXI_AADDR_Q[9]),
        .R(areset));
  FDRE \S_AXI_ACACHE_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awcache[0]),
        .Q(D[43]),
        .R(areset));
  FDRE \S_AXI_ACACHE_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awcache[1]),
        .Q(D[44]),
        .R(areset));
  FDRE \S_AXI_ACACHE_Q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awcache[2]),
        .Q(D[45]),
        .R(areset));
  FDRE \S_AXI_ACACHE_Q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awcache[3]),
        .Q(D[46]),
        .R(areset));
  FDRE \S_AXI_AID_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awid[0]),
        .Q(\gen_pipelined.mesg_reg_reg[2] [0]),
        .R(areset));
  FDRE \S_AXI_AID_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awid[1]),
        .Q(\gen_pipelined.mesg_reg_reg[2] [1]),
        .R(areset));
  FDRE \S_AXI_ALEN_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[0]),
        .Q(\gen_pipelined.mesg_reg_reg[3]_0 [0]),
        .R(areset));
  FDRE \S_AXI_ALEN_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[1]),
        .Q(\gen_pipelined.mesg_reg_reg[3]_0 [1]),
        .R(areset));
  FDRE \S_AXI_ALEN_Q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[2]),
        .Q(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .R(areset));
  FDRE \S_AXI_ALEN_Q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[3]),
        .Q(\gen_pipelined.mesg_reg_reg[3]_0 [3]),
        .R(areset));
  FDRE \S_AXI_APROT_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awprot[0]),
        .Q(D[36]),
        .R(areset));
  FDRE \S_AXI_APROT_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awprot[1]),
        .Q(D[37]),
        .R(areset));
  FDRE \S_AXI_APROT_Q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awprot[2]),
        .Q(D[38]),
        .R(areset));
  FDRE \S_AXI_AQOS_Q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awqos[0]),
        .Q(D[39]),
        .R(areset));
  FDRE \S_AXI_AQOS_Q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awqos[1]),
        .Q(D[40]),
        .R(areset));
  FDRE \S_AXI_AQOS_Q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awqos[2]),
        .Q(D[41]),
        .R(areset));
  FDRE \S_AXI_AQOS_Q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awqos[3]),
        .Q(D[42]),
        .R(areset));
  FDRE S_AXI_AREADY_I_reg
       (.C(aclk),
        .CE(1'b1),
        .D(\USE_BURSTS.cmd_queue_n_11 ),
        .Q(\S_AXI_ALEN_Q_reg[0]_0 ),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo \USE_BURSTS.cmd_queue 
       (.D(D[35:32]),
        .E(\S_AXI_ALEN_Q_reg[0]_0 ),
        .Q(pushed_commands_reg__0),
        .\S_AXI_ALEN_Q_reg[3] (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .S_AXI_AREADY_I_reg(\USE_BURSTS.cmd_queue_n_11 ),
        .\USE_B_CHANNEL.s_b_ready (\USE_B_CHANNEL.s_b_ready ),
        .access_is_incr_q_reg(\USE_B_CHANNEL.cmd_b_queue_n_5 ),
        .aclk(aclk),
        .areset(areset),
        .areset_d(areset_d),
        .cmd_b_push_block(cmd_b_push_block),
        .cmd_b_push_block_reg(\USE_BURSTS.cmd_queue_n_8 ),
        .cmd_b_push_block_reg_0(\USE_BURSTS.cmd_queue_n_9 ),
        .cmd_push_block(cmd_push_block),
        .command_ongoing(command_ongoing),
        .command_ongoing_reg(\USE_BURSTS.cmd_queue_n_12 ),
        .\fifoaddr_reg[1]_0 (\fifoaddr_reg[1] ),
        .\gen_pipelined.mesg_reg_reg[3]_0 (\gen_pipelined.mesg_reg_reg[3] ),
        .\gen_pipelined.mesg_reg_reg[3]_1 (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\gen_pipelined.state_reg[1]_0 (\gen_pipelined.state_reg[1] ),
        .incr_need_to_split_q_reg(split_ongoing_reg_0),
        .\length_counter_1_reg[0] (\length_counter_1_reg[0] ),
        .\length_counter_1_reg[3] (\length_counter_1_reg[3] ),
        .mr_axi_awready(mr_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_ready(s_ready),
        .s_write_cmd_vacancy(s_write_cmd_vacancy));
  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized0 \USE_B_CHANNEL.cmd_b_queue 
       (.E(pushed_new_cmd),
        .Q(pushed_commands_reg__0),
        .\USE_B_CHANNEL.s_b_ready (\USE_B_CHANNEL.s_b_ready ),
        .access_is_incr_q_reg(\m_vector_i_reg[1064] ),
        .aclk(aclk),
        .areset(areset),
        .cmd_b_push_block(cmd_b_push_block),
        .cmd_b_push_block_reg(\USE_BURSTS.cmd_queue_n_9 ),
        .cmd_b_split_i(cmd_b_split_i),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block_reg(\USE_B_CHANNEL.cmd_b_queue_n_2 ),
        .cmd_push_block_reg_0(cmd_push_block_reg_0),
        .command_ongoing(command_ongoing),
        .first_mi_word_reg(first_mi_word_reg),
        .\gen_pipelined.mesg_reg_reg[4]_0 (\USE_B_CHANNEL.cmd_b_queue_n_5 ),
        .incr_need_to_split_q_reg(split_ongoing_reg_0),
        .mr_axi_awready(mr_axi_awready),
        .num_transactions_q(num_transactions_q),
        .s_ready(s_ready),
        .s_write_cmd_vacancy(s_write_cmd_vacancy),
        .\state_reg[m_valid_i] (\state_reg[m_valid_i]_0 ));
  FDRE access_is_incr_q_reg
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(1'b1),
        .Q(\m_vector_i_reg[1064] ),
        .R(areset));
  FDRE \areset_d_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(areset),
        .Q(areset_d[0]),
        .R(1'b0));
  FDRE \areset_d_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(areset_d[0]),
        .Q(areset_d[1]),
        .R(1'b0));
  FDRE cmd_b_push_block_reg
       (.C(aclk),
        .CE(1'b1),
        .D(\USE_BURSTS.cmd_queue_n_8 ),
        .Q(cmd_b_push_block),
        .R(1'b0));
  FDRE cmd_push_block_reg
       (.C(aclk),
        .CE(1'b1),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_2 ),
        .Q(cmd_push_block),
        .R(1'b0));
  FDRE command_ongoing_reg
       (.C(aclk),
        .CE(1'b1),
        .D(\USE_BURSTS.cmd_queue_n_12 ),
        .Q(command_ongoing),
        .R(areset));
  LUT1 #(
    .INIT(2'h1)) 
    \first_step_q[3]_i_1 
       (.I0(s_axi_awlen[0]),
        .O(data2[2]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \first_step_q[4]_i_1 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awlen[1]),
        .O(data2[3]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \first_step_q[5]_i_1 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awlen[1]),
        .I2(s_axi_awlen[2]),
        .O(data2[4]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \first_step_q[6]_i_1 
       (.I0(s_axi_awlen[1]),
        .I1(s_axi_awlen[0]),
        .I2(s_axi_awlen[2]),
        .I3(s_axi_awlen[3]),
        .O(data2[5]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \first_step_q[7]_i_1 
       (.I0(s_axi_awlen[3]),
        .I1(s_axi_awlen[1]),
        .I2(s_axi_awlen[0]),
        .I3(s_axi_awlen[2]),
        .O(data2[6]));
  FDRE \first_step_q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(data2[2]),
        .Q(first_step_q[3]),
        .R(areset));
  FDRE \first_step_q_reg[4] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(data2[3]),
        .Q(first_step_q[4]),
        .R(areset));
  FDRE \first_step_q_reg[5] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(data2[4]),
        .Q(first_step_q[5]),
        .R(areset));
  FDRE \first_step_q_reg[6] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(data2[5]),
        .Q(first_step_q[6]),
        .R(areset));
  FDRE \first_step_q_reg[7] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(data2[6]),
        .Q(first_step_q[7]),
        .R(areset));
  LUT4 #(
    .INIT(16'hFFFE)) 
    incr_need_to_split
       (.I0(s_axi_awlen[7]),
        .I1(s_axi_awlen[6]),
        .I2(s_axi_awlen[4]),
        .I3(s_axi_awlen[5]),
        .O(incr_need_to_split__0));
  FDRE incr_need_to_split_q_reg
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(incr_need_to_split__0),
        .Q(split_ongoing_reg_0),
        .R(areset));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1064]_i_1 
       (.I0(\skid_buffer_reg[1092] [0]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[3]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[3]),
        .O(\m_vector_i_reg[1092] [0]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1065]_i_1 
       (.I0(\skid_buffer_reg[1092] [1]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[4]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[4]),
        .O(\m_vector_i_reg[1092] [1]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1066]_i_1 
       (.I0(\skid_buffer_reg[1092] [2]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[5]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[5]),
        .O(\m_vector_i_reg[1092] [2]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1067]_i_1 
       (.I0(\skid_buffer_reg[1092] [3]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[6]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[6]),
        .O(\m_vector_i_reg[1092] [3]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1068]_i_1 
       (.I0(\skid_buffer_reg[1092] [4]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[7]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[7]),
        .O(\m_vector_i_reg[1092] [4]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1069]_i_1 
       (.I0(\skid_buffer_reg[1092] [5]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[8]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[8]),
        .O(\m_vector_i_reg[1092] [5]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1070]_i_1 
       (.I0(\skid_buffer_reg[1092] [6]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[9]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[9]),
        .O(\m_vector_i_reg[1092] [6]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1071]_i_1 
       (.I0(\skid_buffer_reg[1092] [7]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[10]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[10]),
        .O(\m_vector_i_reg[1092] [7]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1072]_i_1 
       (.I0(\skid_buffer_reg[1092] [8]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[11]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[11]),
        .O(\m_vector_i_reg[1092] [8]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1073]_i_1 
       (.I0(\skid_buffer_reg[1092] [9]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[12]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[12]),
        .O(\m_vector_i_reg[1092] [9]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1074]_i_1 
       (.I0(\skid_buffer_reg[1092] [10]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[13]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[13]),
        .O(\m_vector_i_reg[1092] [10]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1075]_i_1 
       (.I0(\skid_buffer_reg[1092] [11]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[14]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[14]),
        .O(\m_vector_i_reg[1092] [11]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1076]_i_1 
       (.I0(\skid_buffer_reg[1092] [12]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[15]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[15]),
        .O(\m_vector_i_reg[1092] [12]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1077]_i_1 
       (.I0(\skid_buffer_reg[1092] [13]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[16]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[16]),
        .O(\m_vector_i_reg[1092] [13]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1078]_i_1 
       (.I0(\skid_buffer_reg[1092] [14]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[17]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[17]),
        .O(\m_vector_i_reg[1092] [14]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1079]_i_1 
       (.I0(\skid_buffer_reg[1092] [15]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[18]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[18]),
        .O(\m_vector_i_reg[1092] [15]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1080]_i_1 
       (.I0(\skid_buffer_reg[1092] [16]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[19]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[19]),
        .O(\m_vector_i_reg[1092] [16]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1081]_i_1 
       (.I0(\skid_buffer_reg[1092] [17]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[20]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[20]),
        .O(\m_vector_i_reg[1092] [17]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1082]_i_1 
       (.I0(\skid_buffer_reg[1092] [18]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[21]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[21]),
        .O(\m_vector_i_reg[1092] [18]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1083]_i_1 
       (.I0(\skid_buffer_reg[1092] [19]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[22]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[22]),
        .O(\m_vector_i_reg[1092] [19]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1084]_i_1 
       (.I0(\skid_buffer_reg[1092] [20]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[23]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[23]),
        .O(\m_vector_i_reg[1092] [20]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1085]_i_1 
       (.I0(\skid_buffer_reg[1092] [21]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[24]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[24]),
        .O(\m_vector_i_reg[1092] [21]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1086]_i_1 
       (.I0(\skid_buffer_reg[1092] [22]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[25]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[25]),
        .O(\m_vector_i_reg[1092] [22]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1087]_i_1 
       (.I0(\skid_buffer_reg[1092] [23]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[26]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[26]),
        .O(\m_vector_i_reg[1092] [23]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1088]_i_1 
       (.I0(\skid_buffer_reg[1092] [24]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[27]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[27]),
        .O(\m_vector_i_reg[1092] [24]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1089]_i_1 
       (.I0(\skid_buffer_reg[1092] [25]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[28]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[28]),
        .O(\m_vector_i_reg[1092] [25]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1090]_i_1 
       (.I0(\skid_buffer_reg[1092] [26]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[29]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[29]),
        .O(\m_vector_i_reg[1092] [26]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1091]_i_1 
       (.I0(\skid_buffer_reg[1092] [27]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[30]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[30]),
        .O(\m_vector_i_reg[1092] [27]));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \m_vector_i[1092]_i_2 
       (.I0(\skid_buffer_reg[1092] [28]),
        .I1(\state_reg[m_valid_i] ),
        .I2(next_mi_addr[31]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\m_vector_i_reg[1064]_0 ),
        .I5(S_AXI_AADDR_Q[31]),
        .O(\m_vector_i_reg[1092] [28]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_2 
       (.I0(next_mi_addr[10]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[10]),
        .O(\next_mi_addr[10]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_3 
       (.I0(next_mi_addr[9]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[9]),
        .O(\next_mi_addr[10]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_4 
       (.I0(next_mi_addr[8]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[8]),
        .O(\next_mi_addr[10]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_5 
       (.I0(next_mi_addr[10]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[10]),
        .O(\next_mi_addr[10]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_6 
       (.I0(next_mi_addr[9]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[9]),
        .O(\next_mi_addr[10]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[10]_i_7 
       (.I0(next_mi_addr[8]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[8]),
        .O(\next_mi_addr[10]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h1D551DAAE2AA1DAA)) 
    \next_mi_addr[10]_i_8 
       (.I0(S_AXI_AADDR_Q[7]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(next_mi_addr[7]),
        .I3(\m_vector_i_reg[1064] ),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[7]),
        .O(\next_mi_addr[10]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_2 
       (.I0(next_mi_addr[14]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[14]),
        .O(\next_mi_addr[14]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_3 
       (.I0(next_mi_addr[13]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[13]),
        .O(\next_mi_addr[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_4 
       (.I0(next_mi_addr[12]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[12]),
        .O(\next_mi_addr[14]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_5 
       (.I0(next_mi_addr[11]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[11]),
        .O(\next_mi_addr[14]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_6 
       (.I0(next_mi_addr[14]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[14]),
        .O(\next_mi_addr[14]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_7 
       (.I0(next_mi_addr[13]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[13]),
        .O(\next_mi_addr[14]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_8 
       (.I0(next_mi_addr[12]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[12]),
        .O(\next_mi_addr[14]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[14]_i_9 
       (.I0(next_mi_addr[11]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[11]),
        .O(\next_mi_addr[14]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[18]_i_2 
       (.I0(next_mi_addr[15]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[15]),
        .O(\next_mi_addr[18]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[18]_i_3 
       (.I0(next_mi_addr[18]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[18]),
        .O(\next_mi_addr[18]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[18]_i_4 
       (.I0(next_mi_addr[17]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[17]),
        .O(\next_mi_addr[18]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[18]_i_5 
       (.I0(next_mi_addr[16]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[16]),
        .O(\next_mi_addr[18]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[18]_i_6 
       (.I0(next_mi_addr[15]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[15]),
        .O(\next_mi_addr[18]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[22]_i_2 
       (.I0(next_mi_addr[22]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[22]),
        .O(\next_mi_addr[22]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[22]_i_3 
       (.I0(next_mi_addr[21]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[21]),
        .O(\next_mi_addr[22]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[22]_i_4 
       (.I0(next_mi_addr[20]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[20]),
        .O(\next_mi_addr[22]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[22]_i_5 
       (.I0(next_mi_addr[19]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[19]),
        .O(\next_mi_addr[22]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[26]_i_2 
       (.I0(next_mi_addr[26]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[26]),
        .O(\next_mi_addr[26]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[26]_i_3 
       (.I0(next_mi_addr[25]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[25]),
        .O(\next_mi_addr[26]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[26]_i_4 
       (.I0(next_mi_addr[24]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[24]),
        .O(\next_mi_addr[26]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[26]_i_5 
       (.I0(next_mi_addr[23]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[23]),
        .O(\next_mi_addr[26]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[30]_i_2 
       (.I0(next_mi_addr[30]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[30]),
        .O(\next_mi_addr[30]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[30]_i_3 
       (.I0(next_mi_addr[29]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[29]),
        .O(\next_mi_addr[30]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[30]_i_4 
       (.I0(next_mi_addr[28]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[28]),
        .O(\next_mi_addr[30]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[30]_i_5 
       (.I0(next_mi_addr[27]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[27]),
        .O(\next_mi_addr[30]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hBF80)) 
    \next_mi_addr[31]_i_2 
       (.I0(next_mi_addr[31]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[31]),
        .O(\next_mi_addr[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h15D5EA2AEA2AEA2A)) 
    \next_mi_addr[3]_i_1 
       (.I0(S_AXI_AADDR_Q[3]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .I3(next_mi_addr[3]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[3]),
        .O(\next_mi_addr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h15D5EA2AEA2AEA2A)) 
    \next_mi_addr[6]_i_2 
       (.I0(S_AXI_AADDR_Q[6]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .I3(next_mi_addr[6]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[6]),
        .O(\next_mi_addr[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h15D5EA2AEA2AEA2A)) 
    \next_mi_addr[6]_i_3 
       (.I0(S_AXI_AADDR_Q[5]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .I3(next_mi_addr[5]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[5]),
        .O(\next_mi_addr[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h15D5EA2AEA2AEA2A)) 
    \next_mi_addr[6]_i_4 
       (.I0(S_AXI_AADDR_Q[4]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .I3(next_mi_addr[4]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[4]),
        .O(\next_mi_addr[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h15D5EA2AEA2AEA2A)) 
    \next_mi_addr[6]_i_5 
       (.I0(S_AXI_AADDR_Q[3]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .I3(next_mi_addr[3]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_1 ),
        .I5(first_step_q[3]),
        .O(\next_mi_addr[6]_i_5_n_0 ));
  FDRE \next_mi_addr_reg[10] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[10]_i_1_n_4 ),
        .Q(next_mi_addr[10]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[10]_i_1 
       (.CI(\next_mi_addr_reg[6]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[10]_i_1_n_0 ,\next_mi_addr_reg[10]_i_1_n_1 ,\next_mi_addr_reg[10]_i_1_n_2 ,\next_mi_addr_reg[10]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\next_mi_addr[10]_i_2_n_0 ,\next_mi_addr[10]_i_3_n_0 ,\next_mi_addr[10]_i_4_n_0 ,D[7]}),
        .O({\next_mi_addr_reg[10]_i_1_n_4 ,\next_mi_addr_reg[10]_i_1_n_5 ,\next_mi_addr_reg[10]_i_1_n_6 ,\next_mi_addr_reg[10]_i_1_n_7 }),
        .S({\next_mi_addr[10]_i_5_n_0 ,\next_mi_addr[10]_i_6_n_0 ,\next_mi_addr[10]_i_7_n_0 ,\next_mi_addr[10]_i_8_n_0 }));
  FDRE \next_mi_addr_reg[11] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[14]_i_1_n_7 ),
        .Q(next_mi_addr[11]),
        .R(areset));
  FDRE \next_mi_addr_reg[12] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[14]_i_1_n_6 ),
        .Q(next_mi_addr[12]),
        .R(areset));
  FDRE \next_mi_addr_reg[13] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[14]_i_1_n_5 ),
        .Q(next_mi_addr[13]),
        .R(areset));
  FDRE \next_mi_addr_reg[14] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[14]_i_1_n_4 ),
        .Q(next_mi_addr[14]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[14]_i_1 
       (.CI(\next_mi_addr_reg[10]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[14]_i_1_n_0 ,\next_mi_addr_reg[14]_i_1_n_1 ,\next_mi_addr_reg[14]_i_1_n_2 ,\next_mi_addr_reg[14]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\next_mi_addr[14]_i_2_n_0 ,\next_mi_addr[14]_i_3_n_0 ,\next_mi_addr[14]_i_4_n_0 ,\next_mi_addr[14]_i_5_n_0 }),
        .O({\next_mi_addr_reg[14]_i_1_n_4 ,\next_mi_addr_reg[14]_i_1_n_5 ,\next_mi_addr_reg[14]_i_1_n_6 ,\next_mi_addr_reg[14]_i_1_n_7 }),
        .S({\next_mi_addr[14]_i_6_n_0 ,\next_mi_addr[14]_i_7_n_0 ,\next_mi_addr[14]_i_8_n_0 ,\next_mi_addr[14]_i_9_n_0 }));
  FDRE \next_mi_addr_reg[15] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[18]_i_1_n_7 ),
        .Q(next_mi_addr[15]),
        .R(areset));
  FDRE \next_mi_addr_reg[16] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[18]_i_1_n_6 ),
        .Q(next_mi_addr[16]),
        .R(areset));
  FDRE \next_mi_addr_reg[17] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[18]_i_1_n_5 ),
        .Q(next_mi_addr[17]),
        .R(areset));
  FDRE \next_mi_addr_reg[18] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[18]_i_1_n_4 ),
        .Q(next_mi_addr[18]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[18]_i_1 
       (.CI(\next_mi_addr_reg[14]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[18]_i_1_n_0 ,\next_mi_addr_reg[18]_i_1_n_1 ,\next_mi_addr_reg[18]_i_1_n_2 ,\next_mi_addr_reg[18]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\next_mi_addr[18]_i_2_n_0 }),
        .O({\next_mi_addr_reg[18]_i_1_n_4 ,\next_mi_addr_reg[18]_i_1_n_5 ,\next_mi_addr_reg[18]_i_1_n_6 ,\next_mi_addr_reg[18]_i_1_n_7 }),
        .S({\next_mi_addr[18]_i_3_n_0 ,\next_mi_addr[18]_i_4_n_0 ,\next_mi_addr[18]_i_5_n_0 ,\next_mi_addr[18]_i_6_n_0 }));
  FDRE \next_mi_addr_reg[19] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[22]_i_1_n_7 ),
        .Q(next_mi_addr[19]),
        .R(areset));
  FDRE \next_mi_addr_reg[20] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[22]_i_1_n_6 ),
        .Q(next_mi_addr[20]),
        .R(areset));
  FDRE \next_mi_addr_reg[21] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[22]_i_1_n_5 ),
        .Q(next_mi_addr[21]),
        .R(areset));
  FDRE \next_mi_addr_reg[22] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[22]_i_1_n_4 ),
        .Q(next_mi_addr[22]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[22]_i_1 
       (.CI(\next_mi_addr_reg[18]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[22]_i_1_n_0 ,\next_mi_addr_reg[22]_i_1_n_1 ,\next_mi_addr_reg[22]_i_1_n_2 ,\next_mi_addr_reg[22]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\next_mi_addr_reg[22]_i_1_n_4 ,\next_mi_addr_reg[22]_i_1_n_5 ,\next_mi_addr_reg[22]_i_1_n_6 ,\next_mi_addr_reg[22]_i_1_n_7 }),
        .S({\next_mi_addr[22]_i_2_n_0 ,\next_mi_addr[22]_i_3_n_0 ,\next_mi_addr[22]_i_4_n_0 ,\next_mi_addr[22]_i_5_n_0 }));
  FDRE \next_mi_addr_reg[23] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[26]_i_1_n_7 ),
        .Q(next_mi_addr[23]),
        .R(areset));
  FDRE \next_mi_addr_reg[24] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[26]_i_1_n_6 ),
        .Q(next_mi_addr[24]),
        .R(areset));
  FDRE \next_mi_addr_reg[25] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[26]_i_1_n_5 ),
        .Q(next_mi_addr[25]),
        .R(areset));
  FDRE \next_mi_addr_reg[26] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[26]_i_1_n_4 ),
        .Q(next_mi_addr[26]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[26]_i_1 
       (.CI(\next_mi_addr_reg[22]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[26]_i_1_n_0 ,\next_mi_addr_reg[26]_i_1_n_1 ,\next_mi_addr_reg[26]_i_1_n_2 ,\next_mi_addr_reg[26]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\next_mi_addr_reg[26]_i_1_n_4 ,\next_mi_addr_reg[26]_i_1_n_5 ,\next_mi_addr_reg[26]_i_1_n_6 ,\next_mi_addr_reg[26]_i_1_n_7 }),
        .S({\next_mi_addr[26]_i_2_n_0 ,\next_mi_addr[26]_i_3_n_0 ,\next_mi_addr[26]_i_4_n_0 ,\next_mi_addr[26]_i_5_n_0 }));
  FDRE \next_mi_addr_reg[27] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[30]_i_1_n_7 ),
        .Q(next_mi_addr[27]),
        .R(areset));
  FDRE \next_mi_addr_reg[28] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[30]_i_1_n_6 ),
        .Q(next_mi_addr[28]),
        .R(areset));
  FDRE \next_mi_addr_reg[29] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[30]_i_1_n_5 ),
        .Q(next_mi_addr[29]),
        .R(areset));
  FDRE \next_mi_addr_reg[30] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[30]_i_1_n_4 ),
        .Q(next_mi_addr[30]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[30]_i_1 
       (.CI(\next_mi_addr_reg[26]_i_1_n_0 ),
        .CO({\next_mi_addr_reg[30]_i_1_n_0 ,\next_mi_addr_reg[30]_i_1_n_1 ,\next_mi_addr_reg[30]_i_1_n_2 ,\next_mi_addr_reg[30]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\next_mi_addr_reg[30]_i_1_n_4 ,\next_mi_addr_reg[30]_i_1_n_5 ,\next_mi_addr_reg[30]_i_1_n_6 ,\next_mi_addr_reg[30]_i_1_n_7 }),
        .S({\next_mi_addr[30]_i_2_n_0 ,\next_mi_addr[30]_i_3_n_0 ,\next_mi_addr[30]_i_4_n_0 ,\next_mi_addr[30]_i_5_n_0 }));
  FDRE \next_mi_addr_reg[31] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[31]_i_1_n_7 ),
        .Q(next_mi_addr[31]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[31]_i_1 
       (.CI(\next_mi_addr_reg[30]_i_1_n_0 ),
        .CO(\NLW_next_mi_addr_reg[31]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_next_mi_addr_reg[31]_i_1_O_UNCONNECTED [3:1],\next_mi_addr_reg[31]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,\next_mi_addr[31]_i_2_n_0 }));
  FDRE \next_mi_addr_reg[3] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr[3]_i_1_n_0 ),
        .Q(next_mi_addr[3]),
        .R(areset));
  FDRE \next_mi_addr_reg[4] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[6]_i_1_n_6 ),
        .Q(next_mi_addr[4]),
        .R(areset));
  FDRE \next_mi_addr_reg[5] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[6]_i_1_n_5 ),
        .Q(next_mi_addr[5]),
        .R(areset));
  FDRE \next_mi_addr_reg[6] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[6]_i_1_n_4 ),
        .Q(next_mi_addr[6]),
        .R(areset));
  CARRY4 \next_mi_addr_reg[6]_i_1 
       (.CI(1'b0),
        .CO({\next_mi_addr_reg[6]_i_1_n_0 ,\next_mi_addr_reg[6]_i_1_n_1 ,\next_mi_addr_reg[6]_i_1_n_2 ,\next_mi_addr_reg[6]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(D[6:3]),
        .O({\next_mi_addr_reg[6]_i_1_n_4 ,\next_mi_addr_reg[6]_i_1_n_5 ,\next_mi_addr_reg[6]_i_1_n_6 ,\NLW_next_mi_addr_reg[6]_i_1_O_UNCONNECTED [0]}),
        .S({\next_mi_addr[6]_i_2_n_0 ,\next_mi_addr[6]_i_3_n_0 ,\next_mi_addr[6]_i_4_n_0 ,\next_mi_addr[6]_i_5_n_0 }));
  FDRE \next_mi_addr_reg[7] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[10]_i_1_n_7 ),
        .Q(next_mi_addr[7]),
        .R(areset));
  FDRE \next_mi_addr_reg[8] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[10]_i_1_n_6 ),
        .Q(next_mi_addr[8]),
        .R(areset));
  FDRE \next_mi_addr_reg[9] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(\next_mi_addr_reg[10]_i_1_n_5 ),
        .Q(next_mi_addr[9]),
        .R(areset));
  FDRE \num_transactions_q_reg[0] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[4]),
        .Q(num_transactions_q[0]),
        .R(areset));
  FDRE \num_transactions_q_reg[1] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[5]),
        .Q(num_transactions_q[1]),
        .R(areset));
  FDRE \num_transactions_q_reg[2] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[6]),
        .Q(num_transactions_q[2]),
        .R(areset));
  FDRE \num_transactions_q_reg[3] 
       (.C(aclk),
        .CE(\S_AXI_ALEN_Q_reg[0]_0 ),
        .D(s_axi_awlen[7]),
        .Q(num_transactions_q[3]),
        .R(areset));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \pushed_commands[0]_i_1 
       (.I0(pushed_commands_reg__0[0]),
        .O(p_0_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \pushed_commands[1]_i_1 
       (.I0(pushed_commands_reg__0[1]),
        .I1(pushed_commands_reg__0[0]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed_commands[2]_i_1 
       (.I0(pushed_commands_reg__0[2]),
        .I1(pushed_commands_reg__0[0]),
        .I2(pushed_commands_reg__0[1]),
        .O(p_0_in[2]));
  LUT2 #(
    .INIT(4'hE)) 
    \pushed_commands[3]_i_1 
       (.I0(\S_AXI_ALEN_Q_reg[0]_0 ),
        .I1(areset),
        .O(\pushed_commands[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \pushed_commands[3]_i_2 
       (.I0(pushed_commands_reg__0[3]),
        .I1(pushed_commands_reg__0[1]),
        .I2(pushed_commands_reg__0[0]),
        .I3(pushed_commands_reg__0[2]),
        .O(p_0_in[3]));
  FDRE \pushed_commands_reg[0] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(p_0_in[0]),
        .Q(pushed_commands_reg__0[0]),
        .R(\pushed_commands[3]_i_1_n_0 ));
  FDRE \pushed_commands_reg[1] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(p_0_in[1]),
        .Q(pushed_commands_reg__0[1]),
        .R(\pushed_commands[3]_i_1_n_0 ));
  FDRE \pushed_commands_reg[2] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(p_0_in[2]),
        .Q(pushed_commands_reg__0[2]),
        .R(\pushed_commands[3]_i_1_n_0 ));
  FDRE \pushed_commands_reg[3] 
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(p_0_in[3]),
        .Q(pushed_commands_reg__0[3]),
        .R(\pushed_commands[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \skid_buffer[1061]_i_1 
       (.I0(Q[0]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \skid_buffer[1062]_i_1 
       (.I0(Q[1]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \skid_buffer[1063]_i_1 
       (.I0(Q[2]),
        .I1(\m_vector_i_reg[1064]_0 ),
        .I2(\m_vector_i_reg[1064] ),
        .O(D[2]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1064]_i_1 
       (.I0(next_mi_addr[3]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[3]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1065]_i_1 
       (.I0(next_mi_addr[4]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[4]),
        .O(D[4]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1066]_i_1 
       (.I0(next_mi_addr[5]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[5]),
        .O(D[5]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1067]_i_1 
       (.I0(next_mi_addr[6]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[6]),
        .O(D[6]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1068]_i_1 
       (.I0(next_mi_addr[7]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[7]),
        .O(D[7]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1069]_i_1 
       (.I0(next_mi_addr[8]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[8]),
        .O(D[8]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1070]_i_1 
       (.I0(next_mi_addr[9]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[9]),
        .O(D[9]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1071]_i_1 
       (.I0(next_mi_addr[10]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[10]),
        .O(D[10]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1072]_i_1 
       (.I0(next_mi_addr[11]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[11]),
        .O(D[11]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1073]_i_1 
       (.I0(next_mi_addr[12]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[12]),
        .O(D[12]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1074]_i_1 
       (.I0(next_mi_addr[13]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[13]),
        .O(D[13]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1075]_i_1 
       (.I0(next_mi_addr[14]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[14]),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1076]_i_1 
       (.I0(next_mi_addr[15]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[15]),
        .O(D[15]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1077]_i_1 
       (.I0(next_mi_addr[16]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[16]),
        .O(D[16]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1078]_i_1 
       (.I0(next_mi_addr[17]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[17]),
        .O(D[17]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1079]_i_1 
       (.I0(next_mi_addr[18]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[18]),
        .O(D[18]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1080]_i_1 
       (.I0(next_mi_addr[19]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[19]),
        .O(D[19]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1081]_i_1 
       (.I0(next_mi_addr[20]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[20]),
        .O(D[20]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1082]_i_1 
       (.I0(next_mi_addr[21]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[21]),
        .O(D[21]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1083]_i_1 
       (.I0(next_mi_addr[22]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[22]),
        .O(D[22]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1084]_i_1 
       (.I0(next_mi_addr[23]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[23]),
        .O(D[23]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1085]_i_1 
       (.I0(next_mi_addr[24]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[24]),
        .O(D[24]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1086]_i_1 
       (.I0(next_mi_addr[25]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[25]),
        .O(D[25]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1087]_i_1 
       (.I0(next_mi_addr[26]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[26]),
        .O(D[26]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1088]_i_1 
       (.I0(next_mi_addr[27]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[27]),
        .O(D[27]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1089]_i_1 
       (.I0(next_mi_addr[28]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[28]),
        .O(D[28]));
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1090]_i_1 
       (.I0(next_mi_addr[29]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[29]),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1091]_i_1 
       (.I0(next_mi_addr[30]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[30]),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hBF80)) 
    \skid_buffer[1092]_i_1 
       (.I0(next_mi_addr[31]),
        .I1(\m_vector_i_reg[1064] ),
        .I2(\m_vector_i_reg[1064]_0 ),
        .I3(S_AXI_AADDR_Q[31]),
        .O(D[31]));
  FDRE split_ongoing_reg
       (.C(aclk),
        .CE(pushed_new_cmd),
        .D(cmd_b_split_i),
        .Q(\m_vector_i_reg[1064]_0 ),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_a_axi3_conv" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_a_axi3_conv__parameterized0
   (areset,
    aclk);
  input areset;
  input aclk;

  wire aclk;
  wire areset;

  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized1 \USE_R_CHANNEL.cmd_queue 
       (.aclk(aclk),
        .areset(areset));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_axi3_conv" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_axi3_conv
   (D,
    \m_vector_i_reg[1064] ,
    \S_AXI_ALEN_Q_reg[0] ,
    split_ongoing_reg,
    \m_vector_i_reg[1064]_0 ,
    first_mi_word_reg,
    \m_vector_i_reg[1092] ,
    \repeat_cnt_reg[3] ,
    \gen_pipelined.mesg_reg_reg[3] ,
    \gen_pipelined.state_reg[1] ,
    \fifoaddr_reg[1] ,
    cmd_push_block_reg,
    \gen_pipelined.mesg_reg_reg[3]_0 ,
    \gen_pipelined.mesg_reg_reg[3]_1 ,
    s_axi_bresp,
    Q,
    \gen_pipelined.mesg_reg_reg[2] ,
    aclk,
    s_axi_awlen,
    areset,
    E,
    \state_reg[s_ready_i] ,
    \skid_buffer_reg[1092] ,
    \state_reg[m_valid_i] ,
    \state_reg[m_valid_i]_0 ,
    mr_axi_awready,
    s_write_cmd_vacancy,
    s_axi_wvalid,
    mr_axi_wready,
    mr_bvector,
    s_axi_awvalid,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awcache);
  output [46:0]D;
  output \m_vector_i_reg[1064] ;
  output [0:0]\S_AXI_ALEN_Q_reg[0] ;
  output split_ongoing_reg;
  output \m_vector_i_reg[1064]_0 ;
  output [0:0]first_mi_word_reg;
  output [28:0]\m_vector_i_reg[1092] ;
  output \repeat_cnt_reg[3] ;
  output \gen_pipelined.mesg_reg_reg[3] ;
  output \gen_pipelined.state_reg[1] ;
  output \fifoaddr_reg[1] ;
  output cmd_push_block_reg;
  output [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  output \gen_pipelined.mesg_reg_reg[3]_1 ;
  output [1:0]s_axi_bresp;
  output [2:0]Q;
  output [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  input aclk;
  input [7:0]s_axi_awlen;
  input areset;
  input [0:0]E;
  input \state_reg[s_ready_i] ;
  input [28:0]\skid_buffer_reg[1092] ;
  input \state_reg[m_valid_i] ;
  input \state_reg[m_valid_i]_0 ;
  input mr_axi_awready;
  input s_write_cmd_vacancy;
  input s_axi_wvalid;
  input mr_axi_wready;
  input [1:0]mr_bvector;
  input s_axi_awvalid;
  input [1:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awcache;

  wire [46:0]D;
  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]\S_AXI_ALEN_Q_reg[0] ;
  wire \USE_WRITE.wr_cmd_b_split ;
  wire \USE_WRITE.write_addr_inst_n_100 ;
  wire \USE_WRITE.write_addr_inst_n_101 ;
  wire \USE_WRITE.write_addr_inst_n_102 ;
  wire \USE_WRITE.write_addr_inst_n_93 ;
  wire \USE_WRITE.write_addr_inst_n_94 ;
  wire \USE_WRITE.write_addr_inst_n_95 ;
  wire \USE_WRITE.write_addr_inst_n_96 ;
  wire \USE_WRITE.write_addr_inst_n_99 ;
  wire \USE_WRITE.write_data_inst_n_1 ;
  wire aclk;
  wire areset;
  wire cmd_push_block_reg;
  wire \fifoaddr_reg[1] ;
  wire [0:0]first_mi_word_reg;
  wire [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_pipelined.mesg_reg_reg[3] ;
  wire [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  wire \gen_pipelined.mesg_reg_reg[3]_1 ;
  wire \gen_pipelined.state_reg[1] ;
  wire \m_vector_i_reg[1064] ;
  wire \m_vector_i_reg[1064]_0 ;
  wire [28:0]\m_vector_i_reg[1092] ;
  wire mr_axi_awready;
  wire mr_axi_wready;
  wire [1:0]mr_bvector;
  wire \repeat_cnt_reg[3] ;
  wire [31:0]s_axi_awaddr;
  wire [3:0]s_axi_awcache;
  wire [1:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awvalid;
  wire [1:0]s_axi_bresp;
  wire s_axi_wvalid;
  wire s_write_cmd_vacancy;
  wire [28:0]\skid_buffer_reg[1092] ;
  wire split_ongoing_reg;
  wire \state_reg[m_valid_i] ;
  wire \state_reg[m_valid_i]_0 ;
  wire \state_reg[s_ready_i] ;

  ADC_axi_smc_0_sc_exit_v1_0_6_a_axi3_conv__parameterized0 \USE_READ.USE_SPLIT_R.read_addr_inst 
       (.aclk(aclk),
        .areset(areset));
  ADC_axi_smc_0_sc_exit_v1_0_6_b_downsizer \USE_WRITE.USE_SPLIT_W.write_resp_inst 
       (.E(E),
        .Q({\USE_WRITE.wr_cmd_b_split ,\USE_WRITE.write_addr_inst_n_93 ,\USE_WRITE.write_addr_inst_n_94 ,\USE_WRITE.write_addr_inst_n_95 ,\USE_WRITE.write_addr_inst_n_96 }),
        .aclk(aclk),
        .areset(areset),
        .mr_bvector(mr_bvector),
        .\repeat_cnt_reg[3]_0 (\repeat_cnt_reg[3] ),
        .s_axi_bresp(s_axi_bresp));
  ADC_axi_smc_0_sc_exit_v1_0_6_a_axi3_conv \USE_WRITE.write_addr_inst 
       (.D(D),
        .Q(Q),
        .\S_AXI_ALEN_Q_reg[0]_0 (\S_AXI_ALEN_Q_reg[0] ),
        .aclk(aclk),
        .areset(areset),
        .cmd_push_block_reg_0(cmd_push_block_reg),
        .\fifoaddr_reg[1] (\fifoaddr_reg[1] ),
        .first_mi_word_reg({\USE_WRITE.wr_cmd_b_split ,\USE_WRITE.write_addr_inst_n_93 ,\USE_WRITE.write_addr_inst_n_94 ,\USE_WRITE.write_addr_inst_n_95 ,\USE_WRITE.write_addr_inst_n_96 }),
        .\gen_pipelined.mesg_reg_reg[2] (\gen_pipelined.mesg_reg_reg[2] ),
        .\gen_pipelined.mesg_reg_reg[3] (\gen_pipelined.mesg_reg_reg[3] ),
        .\gen_pipelined.mesg_reg_reg[3]_0 (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .\gen_pipelined.mesg_reg_reg[3]_1 (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.state_reg[1] ),
        .\length_counter_1_reg[0] (\USE_WRITE.write_data_inst_n_1 ),
        .\length_counter_1_reg[3] ({\USE_WRITE.write_addr_inst_n_99 ,\USE_WRITE.write_addr_inst_n_100 ,\USE_WRITE.write_addr_inst_n_101 ,\USE_WRITE.write_addr_inst_n_102 }),
        .\m_vector_i_reg[1064] (\m_vector_i_reg[1064] ),
        .\m_vector_i_reg[1064]_0 (\m_vector_i_reg[1064]_0 ),
        .\m_vector_i_reg[1092] (\m_vector_i_reg[1092] ),
        .mr_axi_awready(mr_axi_awready),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awvalid(s_axi_awvalid),
        .s_write_cmd_vacancy(s_write_cmd_vacancy),
        .\skid_buffer_reg[1092] (\skid_buffer_reg[1092] ),
        .split_ongoing_reg_0(split_ongoing_reg),
        .\state_reg[m_valid_i] (\state_reg[m_valid_i] ),
        .\state_reg[m_valid_i]_0 (\state_reg[m_valid_i]_0 ));
  ADC_axi_smc_0_sc_exit_v1_0_6_w_axi3_conv \USE_WRITE.write_data_inst 
       (.aclk(aclk),
        .areset(areset),
        .first_mi_word_reg_0(first_mi_word_reg),
        .\gen_pipelined.mesg_reg_reg[3] (\USE_WRITE.write_data_inst_n_1 ),
        .\gen_pipelined.mesg_reg_reg[3]_0 ({\USE_WRITE.write_addr_inst_n_99 ,\USE_WRITE.write_addr_inst_n_100 ,\USE_WRITE.write_addr_inst_n_101 ,\USE_WRITE.write_addr_inst_n_102 }),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg_reg[3] ),
        .mr_axi_wready(mr_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .\state_reg[s_ready_i] (\state_reg[s_ready_i] ));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_b_downsizer" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_b_downsizer
   (\repeat_cnt_reg[3]_0 ,
    s_axi_bresp,
    areset,
    E,
    aclk,
    Q,
    mr_bvector);
  output \repeat_cnt_reg[3]_0 ;
  output [1:0]s_axi_bresp;
  input areset;
  input [0:0]E;
  input aclk;
  input [4:0]Q;
  input [1:0]mr_bvector;

  wire [0:0]E;
  wire [4:0]Q;
  wire [1:0]S_AXI_BRESP_ACC;
  wire aclk;
  wire areset;
  wire first_mi_word;
  wire last_word;
  wire [1:0]mr_bvector;
  wire [3:0]next_repeat_cnt;
  wire \repeat_cnt[1]_i_1_n_0 ;
  wire \repeat_cnt[2]_i_2_n_0 ;
  wire \repeat_cnt[3]_i_2_n_0 ;
  wire \repeat_cnt_reg[3]_0 ;
  wire [3:0]repeat_cnt_reg__0;
  wire [1:0]s_axi_bresp;

  FDRE \S_AXI_BRESP_ACC_reg[0] 
       (.C(aclk),
        .CE(E),
        .D(s_axi_bresp[0]),
        .Q(S_AXI_BRESP_ACC[0]),
        .R(areset));
  FDRE \S_AXI_BRESP_ACC_reg[1] 
       (.C(aclk),
        .CE(E),
        .D(s_axi_bresp[1]),
        .Q(S_AXI_BRESP_ACC[1]),
        .R(areset));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFF)) 
    first_mi_word_i_2
       (.I0(first_mi_word),
        .I1(repeat_cnt_reg__0[2]),
        .I2(repeat_cnt_reg__0[0]),
        .I3(repeat_cnt_reg__0[1]),
        .I4(repeat_cnt_reg__0[3]),
        .I5(Q[4]),
        .O(last_word));
  FDSE first_mi_word_reg
       (.C(aclk),
        .CE(E),
        .D(last_word),
        .Q(first_mi_word),
        .S(areset));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \repeat_cnt[0]_i_1 
       (.I0(repeat_cnt_reg__0[0]),
        .I1(first_mi_word),
        .I2(Q[0]),
        .O(next_repeat_cnt[0]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \repeat_cnt[1]_i_1 
       (.I0(repeat_cnt_reg__0[1]),
        .I1(Q[1]),
        .I2(repeat_cnt_reg__0[0]),
        .I3(first_mi_word),
        .I4(Q[0]),
        .O(\repeat_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \repeat_cnt[2]_i_1 
       (.I0(\repeat_cnt[2]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(repeat_cnt_reg__0[1]),
        .I3(repeat_cnt_reg__0[2]),
        .I4(first_mi_word),
        .I5(Q[2]),
        .O(next_repeat_cnt[2]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \repeat_cnt[2]_i_2 
       (.I0(Q[0]),
        .I1(first_mi_word),
        .I2(repeat_cnt_reg__0[0]),
        .O(\repeat_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[3]_i_1 
       (.I0(Q[2]),
        .I1(repeat_cnt_reg__0[2]),
        .I2(\repeat_cnt[3]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[3]),
        .I4(first_mi_word),
        .I5(Q[3]),
        .O(next_repeat_cnt[3]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \repeat_cnt[3]_i_2 
       (.I0(repeat_cnt_reg__0[1]),
        .I1(Q[1]),
        .I2(repeat_cnt_reg__0[0]),
        .I3(first_mi_word),
        .I4(Q[0]),
        .O(\repeat_cnt[3]_i_2_n_0 ));
  FDRE \repeat_cnt_reg[0] 
       (.C(aclk),
        .CE(E),
        .D(next_repeat_cnt[0]),
        .Q(repeat_cnt_reg__0[0]),
        .R(areset));
  FDRE \repeat_cnt_reg[1] 
       (.C(aclk),
        .CE(E),
        .D(\repeat_cnt[1]_i_1_n_0 ),
        .Q(repeat_cnt_reg__0[1]),
        .R(areset));
  FDRE \repeat_cnt_reg[2] 
       (.C(aclk),
        .CE(E),
        .D(next_repeat_cnt[2]),
        .Q(repeat_cnt_reg__0[2]),
        .R(areset));
  FDRE \repeat_cnt_reg[3] 
       (.C(aclk),
        .CE(E),
        .D(next_repeat_cnt[3]),
        .Q(repeat_cnt_reg__0[3]),
        .R(areset));
  LUT6 #(
    .INIT(64'hAAAAAAAAECAEAAAA)) 
    \s_axi_bresp[0]_INST_0 
       (.I0(mr_bvector[0]),
        .I1(S_AXI_BRESP_ACC[0]),
        .I2(mr_bvector[1]),
        .I3(S_AXI_BRESP_ACC[1]),
        .I4(Q[4]),
        .I5(first_mi_word),
        .O(s_axi_bresp[0]));
  LUT4 #(
    .INIT(16'hAEAA)) 
    \s_axi_bresp[1]_INST_0 
       (.I0(mr_bvector[1]),
        .I1(Q[4]),
        .I2(first_mi_word),
        .I3(S_AXI_BRESP_ACC[1]),
        .O(s_axi_bresp[1]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    s_axi_bvalid_INST_0_i_1
       (.I0(Q[4]),
        .I1(repeat_cnt_reg__0[3]),
        .I2(repeat_cnt_reg__0[1]),
        .I3(repeat_cnt_reg__0[0]),
        .I4(repeat_cnt_reg__0[2]),
        .I5(first_mi_word),
        .O(\repeat_cnt_reg[3]_0 ));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_exit" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_exit
   (s_axi_buser,
    s_axi_bid,
    s_write_cmd_vacancy,
    Q,
    aclk,
    areset,
    exit_bready,
    cmd_push_block_reg,
    cmd_push_block_reg_0);
  output [0:0]s_axi_buser;
  output [1:0]s_axi_bid;
  output s_write_cmd_vacancy;
  input [1:0]Q;
  input aclk;
  input areset;
  input exit_bready;
  input cmd_push_block_reg;
  input cmd_push_block_reg_0;

  wire [1:0]Q;
  wire aclk;
  wire areset;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire exit_bready;
  wire [1:0]s_axi_bid;
  wire [0:0]s_axi_buser;
  wire s_write_cmd_vacancy;

  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized2 \gen_r_cmd_fifo.r_cmd_fifo 
       (.aclk(aclk),
        .areset(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized3 \gen_w_cmd_fifo.w_cmd_fifo 
       (.Q(Q),
        .aclk(aclk),
        .areset(areset),
        .cmd_push_block_reg(cmd_push_block_reg),
        .cmd_push_block_reg_0(cmd_push_block_reg_0),
        .exit_bready(exit_bready),
        .\gen_pipelined.state_reg[1]_0 (s_write_cmd_vacancy),
        .s_axi_bid(s_axi_bid));
  LUT2 #(
    .INIT(4'h4)) 
    \s_sbnd_buser[sc_route] 
       (.I0(s_axi_bid[0]),
        .I1(s_axi_bid[1]),
        .O(s_axi_buser));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_splitter" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_splitter
   (D,
    access_is_incr_q,
    \S_AXI_ALEN_Q_reg[0] ,
    need_to_split_q,
    split_ongoing,
    first_mi_word_reg,
    \m_vector_i_reg[1092] ,
    Q,
    \repeat_cnt_reg[3] ,
    \USE_WRITE.wr_cmd_valid ,
    \gen_pipelined.state_reg[1] ,
    \fifoaddr_reg[1] ,
    cmd_push_block_reg,
    \gen_pipelined.mesg_reg_reg[3] ,
    \gen_pipelined.mesg_reg_reg[3]_0 ,
    s_axi_bresp,
    \gen_pipelined.mesg_reg_reg[2] ,
    aclk,
    s_axi_awlen,
    areset,
    E,
    \state_reg[s_ready_i] ,
    \skid_buffer_reg[1092] ,
    \state_reg[m_valid_i] ,
    \state_reg[m_valid_i]_0 ,
    mr_axi_awready,
    s_write_cmd_vacancy,
    s_axi_wvalid,
    mr_axi_wready,
    mr_bvector,
    s_axi_awvalid,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awcache);
  output [46:0]D;
  output access_is_incr_q;
  output \S_AXI_ALEN_Q_reg[0] ;
  output need_to_split_q;
  output split_ongoing;
  output [0:0]first_mi_word_reg;
  output [28:0]\m_vector_i_reg[1092] ;
  output [2:0]Q;
  output \repeat_cnt_reg[3] ;
  output \USE_WRITE.wr_cmd_valid ;
  output \gen_pipelined.state_reg[1] ;
  output \fifoaddr_reg[1] ;
  output cmd_push_block_reg;
  output [3:0]\gen_pipelined.mesg_reg_reg[3] ;
  output \gen_pipelined.mesg_reg_reg[3]_0 ;
  output [1:0]s_axi_bresp;
  output [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  input aclk;
  input [7:0]s_axi_awlen;
  input areset;
  input [0:0]E;
  input \state_reg[s_ready_i] ;
  input [28:0]\skid_buffer_reg[1092] ;
  input \state_reg[m_valid_i] ;
  input \state_reg[m_valid_i]_0 ;
  input mr_axi_awready;
  input s_write_cmd_vacancy;
  input s_axi_wvalid;
  input mr_axi_wready;
  input [1:0]mr_bvector;
  input s_axi_awvalid;
  input [1:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awcache;

  wire [46:0]D;
  wire [0:0]E;
  wire [2:0]Q;
  wire \S_AXI_ALEN_Q_reg[0] ;
  wire \USE_WRITE.wr_cmd_valid ;
  wire access_is_incr_q;
  wire aclk;
  wire areset;
  wire cmd_push_block_reg;
  wire \fifoaddr_reg[1] ;
  wire [0:0]first_mi_word_reg;
  wire [1:0]\gen_pipelined.mesg_reg_reg[2] ;
  wire [3:0]\gen_pipelined.mesg_reg_reg[3] ;
  wire \gen_pipelined.mesg_reg_reg[3]_0 ;
  wire \gen_pipelined.state_reg[1] ;
  wire [28:0]\m_vector_i_reg[1092] ;
  wire mr_axi_awready;
  wire mr_axi_wready;
  wire [1:0]mr_bvector;
  wire need_to_split_q;
  wire \repeat_cnt_reg[3] ;
  wire [31:0]s_axi_awaddr;
  wire [3:0]s_axi_awcache;
  wire [1:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awvalid;
  wire [1:0]s_axi_bresp;
  wire s_axi_wvalid;
  wire s_write_cmd_vacancy;
  wire [28:0]\skid_buffer_reg[1092] ;
  wire split_ongoing;
  wire \state_reg[m_valid_i] ;
  wire \state_reg[m_valid_i]_0 ;
  wire \state_reg[s_ready_i] ;

  ADC_axi_smc_0_sc_exit_v1_0_6_axi3_conv \gen_axi3.axi3_conv_inst 
       (.D(D),
        .E(E),
        .Q(Q),
        .\S_AXI_ALEN_Q_reg[0] (\S_AXI_ALEN_Q_reg[0] ),
        .aclk(aclk),
        .areset(areset),
        .cmd_push_block_reg(cmd_push_block_reg),
        .\fifoaddr_reg[1] (\fifoaddr_reg[1] ),
        .first_mi_word_reg(first_mi_word_reg),
        .\gen_pipelined.mesg_reg_reg[2] (\gen_pipelined.mesg_reg_reg[2] ),
        .\gen_pipelined.mesg_reg_reg[3] (\USE_WRITE.wr_cmd_valid ),
        .\gen_pipelined.mesg_reg_reg[3]_0 (\gen_pipelined.mesg_reg_reg[3] ),
        .\gen_pipelined.mesg_reg_reg[3]_1 (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.state_reg[1] ),
        .\m_vector_i_reg[1064] (access_is_incr_q),
        .\m_vector_i_reg[1064]_0 (split_ongoing),
        .\m_vector_i_reg[1092] (\m_vector_i_reg[1092] ),
        .mr_axi_awready(mr_axi_awready),
        .mr_axi_wready(mr_axi_wready),
        .mr_bvector(mr_bvector),
        .\repeat_cnt_reg[3] (\repeat_cnt_reg[3] ),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_wvalid(s_axi_wvalid),
        .s_write_cmd_vacancy(s_write_cmd_vacancy),
        .\skid_buffer_reg[1092] (\skid_buffer_reg[1092] ),
        .split_ongoing_reg(need_to_split_q),
        .\state_reg[m_valid_i] (\state_reg[m_valid_i] ),
        .\state_reg[m_valid_i]_0 (\state_reg[m_valid_i]_0 ),
        .\state_reg[s_ready_i] (\state_reg[s_ready_i] ));
endmodule

(* C_ADDR_WIDTH = "32" *) (* C_ENABLE_PIPELINING = "1'b1" *) (* C_FAMILY = "zynq" *) 
(* C_HAS_LOCK = "0" *) (* C_IS_CASCADED = "0" *) (* C_MAX_RUSER_BITS_PER_BYTE = "0" *) 
(* C_MAX_WUSER_BITS_PER_BYTE = "0" *) (* C_MEP_IDENTIFIER_WIDTH = "2" *) (* C_M_ARUSER_WIDTH = "0" *) 
(* C_M_AWUSER_WIDTH = "0" *) (* C_M_BUSER_WIDTH = "0" *) (* C_M_ID_WIDTH = "0" *) 
(* C_M_LIMIT_READ_LENGTH = "8" *) (* C_M_LIMIT_WRITE_LENGTH = "8" *) (* C_M_PROTOCOL = "1" *) 
(* C_M_RUSER_BITS_PER_BYTE = "0" *) (* C_M_RUSER_WIDTH = "0" *) (* C_M_WUSER_BITS_PER_BYTE = "0" *) 
(* C_M_WUSER_WIDTH = "0" *) (* C_NUM_MSC = "1" *) (* C_RDATA_WIDTH = "64" *) 
(* C_READ_ACCEPTANCE = "1" *) (* C_SINGLE_ISSUING = "0" *) (* C_SSC_ROUTE_ARRAY = "12'b000100000000" *) 
(* C_SSC_ROUTE_WIDTH = "3" *) (* C_S_ID_WIDTH = "2" *) (* C_WDATA_WIDTH = "64" *) 
(* C_WRITE_ACCEPTANCE = "1" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "sc_exit_v1_0_6_top" *) 
(* P_BYPASS = "0" *) (* P_FULLY_PIPELINED = "2" *) (* P_ZERO_LATENCY = "1" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_top
   (aclk,
    aclken,
    aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready);
  input aclk;
  input aclken;
  input aresetn;
  input [1:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [1023:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [1023:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [1:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [1023:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  input [1:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [1023:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [1:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [1023:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [1:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [1:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;

  wire \<const0> ;
  wire [2:0]S_AXI_AADDR_Q;
  wire aclk;
  wire areset;
  wire areset_i_1_n_0;
  wire aresetn;
  wire \aresetn_d_reg_n_0_[0] ;
  wire aw_reg_n_10;
  wire aw_reg_n_11;
  wire aw_reg_n_12;
  wire aw_reg_n_13;
  wire aw_reg_n_14;
  wire aw_reg_n_15;
  wire aw_reg_n_16;
  wire aw_reg_n_17;
  wire aw_reg_n_18;
  wire aw_reg_n_19;
  wire aw_reg_n_2;
  wire aw_reg_n_20;
  wire aw_reg_n_21;
  wire aw_reg_n_22;
  wire aw_reg_n_23;
  wire aw_reg_n_24;
  wire aw_reg_n_25;
  wire aw_reg_n_26;
  wire aw_reg_n_27;
  wire aw_reg_n_28;
  wire aw_reg_n_29;
  wire aw_reg_n_3;
  wire aw_reg_n_30;
  wire aw_reg_n_31;
  wire aw_reg_n_4;
  wire aw_reg_n_5;
  wire aw_reg_n_6;
  wire aw_reg_n_7;
  wire aw_reg_n_8;
  wire aw_reg_n_9;
  wire b_reg_n_2;
  wire [31:0]exit_awaddr;
  wire [3:0]exit_awcache;
  wire [1:0]exit_awid;
  wire [3:0]exit_awlen;
  wire [2:0]exit_awprot;
  wire [3:0]exit_awqos;
  wire exit_bready;
  wire exit_wlast;
  wire \gen_axi3.axi3_conv_inst/USE_WRITE.wr_cmd_valid ;
  wire [3:0]\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/S_AXI_ALEN_Q ;
  wire \gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/access_is_incr_q ;
  wire \gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/need_to_split_q ;
  wire \gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/split_ongoing ;
  wire [31:0]m_axi_awaddr;
  wire [3:0]m_axi_awcache;
  wire [3:0]m_axi_awlen;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire mr_axi_awready;
  wire mr_axi_wready;
  wire [1057:1056]mr_bvector;
  wire [31:0]s_axi_awaddr;
  wire [3:0]s_axi_awcache;
  wire [1:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire [1:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire [2:2]\^s_axi_buser ;
  wire s_axi_bvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_write_cmd_vacancy;
  wire splitter_inst_n_52;
  wire splitter_inst_n_53;
  wire splitter_inst_n_54;
  wire splitter_inst_n_55;
  wire splitter_inst_n_56;
  wire splitter_inst_n_57;
  wire splitter_inst_n_58;
  wire splitter_inst_n_59;
  wire splitter_inst_n_60;
  wire splitter_inst_n_61;
  wire splitter_inst_n_62;
  wire splitter_inst_n_63;
  wire splitter_inst_n_64;
  wire splitter_inst_n_65;
  wire splitter_inst_n_66;
  wire splitter_inst_n_67;
  wire splitter_inst_n_68;
  wire splitter_inst_n_69;
  wire splitter_inst_n_70;
  wire splitter_inst_n_71;
  wire splitter_inst_n_72;
  wire splitter_inst_n_73;
  wire splitter_inst_n_74;
  wire splitter_inst_n_75;
  wire splitter_inst_n_76;
  wire splitter_inst_n_77;
  wire splitter_inst_n_78;
  wire splitter_inst_n_79;
  wire splitter_inst_n_80;
  wire splitter_inst_n_84;
  wire splitter_inst_n_86;
  wire splitter_inst_n_87;
  wire splitter_inst_n_88;
  wire splitter_inst_n_93;

  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_buser[1023] = \<const0> ;
  assign s_axi_buser[1022] = \<const0> ;
  assign s_axi_buser[1021] = \<const0> ;
  assign s_axi_buser[1020] = \<const0> ;
  assign s_axi_buser[1019] = \<const0> ;
  assign s_axi_buser[1018] = \<const0> ;
  assign s_axi_buser[1017] = \<const0> ;
  assign s_axi_buser[1016] = \<const0> ;
  assign s_axi_buser[1015] = \<const0> ;
  assign s_axi_buser[1014] = \<const0> ;
  assign s_axi_buser[1013] = \<const0> ;
  assign s_axi_buser[1012] = \<const0> ;
  assign s_axi_buser[1011] = \<const0> ;
  assign s_axi_buser[1010] = \<const0> ;
  assign s_axi_buser[1009] = \<const0> ;
  assign s_axi_buser[1008] = \<const0> ;
  assign s_axi_buser[1007] = \<const0> ;
  assign s_axi_buser[1006] = \<const0> ;
  assign s_axi_buser[1005] = \<const0> ;
  assign s_axi_buser[1004] = \<const0> ;
  assign s_axi_buser[1003] = \<const0> ;
  assign s_axi_buser[1002] = \<const0> ;
  assign s_axi_buser[1001] = \<const0> ;
  assign s_axi_buser[1000] = \<const0> ;
  assign s_axi_buser[999] = \<const0> ;
  assign s_axi_buser[998] = \<const0> ;
  assign s_axi_buser[997] = \<const0> ;
  assign s_axi_buser[996] = \<const0> ;
  assign s_axi_buser[995] = \<const0> ;
  assign s_axi_buser[994] = \<const0> ;
  assign s_axi_buser[993] = \<const0> ;
  assign s_axi_buser[992] = \<const0> ;
  assign s_axi_buser[991] = \<const0> ;
  assign s_axi_buser[990] = \<const0> ;
  assign s_axi_buser[989] = \<const0> ;
  assign s_axi_buser[988] = \<const0> ;
  assign s_axi_buser[987] = \<const0> ;
  assign s_axi_buser[986] = \<const0> ;
  assign s_axi_buser[985] = \<const0> ;
  assign s_axi_buser[984] = \<const0> ;
  assign s_axi_buser[983] = \<const0> ;
  assign s_axi_buser[982] = \<const0> ;
  assign s_axi_buser[981] = \<const0> ;
  assign s_axi_buser[980] = \<const0> ;
  assign s_axi_buser[979] = \<const0> ;
  assign s_axi_buser[978] = \<const0> ;
  assign s_axi_buser[977] = \<const0> ;
  assign s_axi_buser[976] = \<const0> ;
  assign s_axi_buser[975] = \<const0> ;
  assign s_axi_buser[974] = \<const0> ;
  assign s_axi_buser[973] = \<const0> ;
  assign s_axi_buser[972] = \<const0> ;
  assign s_axi_buser[971] = \<const0> ;
  assign s_axi_buser[970] = \<const0> ;
  assign s_axi_buser[969] = \<const0> ;
  assign s_axi_buser[968] = \<const0> ;
  assign s_axi_buser[967] = \<const0> ;
  assign s_axi_buser[966] = \<const0> ;
  assign s_axi_buser[965] = \<const0> ;
  assign s_axi_buser[964] = \<const0> ;
  assign s_axi_buser[963] = \<const0> ;
  assign s_axi_buser[962] = \<const0> ;
  assign s_axi_buser[961] = \<const0> ;
  assign s_axi_buser[960] = \<const0> ;
  assign s_axi_buser[959] = \<const0> ;
  assign s_axi_buser[958] = \<const0> ;
  assign s_axi_buser[957] = \<const0> ;
  assign s_axi_buser[956] = \<const0> ;
  assign s_axi_buser[955] = \<const0> ;
  assign s_axi_buser[954] = \<const0> ;
  assign s_axi_buser[953] = \<const0> ;
  assign s_axi_buser[952] = \<const0> ;
  assign s_axi_buser[951] = \<const0> ;
  assign s_axi_buser[950] = \<const0> ;
  assign s_axi_buser[949] = \<const0> ;
  assign s_axi_buser[948] = \<const0> ;
  assign s_axi_buser[947] = \<const0> ;
  assign s_axi_buser[946] = \<const0> ;
  assign s_axi_buser[945] = \<const0> ;
  assign s_axi_buser[944] = \<const0> ;
  assign s_axi_buser[943] = \<const0> ;
  assign s_axi_buser[942] = \<const0> ;
  assign s_axi_buser[941] = \<const0> ;
  assign s_axi_buser[940] = \<const0> ;
  assign s_axi_buser[939] = \<const0> ;
  assign s_axi_buser[938] = \<const0> ;
  assign s_axi_buser[937] = \<const0> ;
  assign s_axi_buser[936] = \<const0> ;
  assign s_axi_buser[935] = \<const0> ;
  assign s_axi_buser[934] = \<const0> ;
  assign s_axi_buser[933] = \<const0> ;
  assign s_axi_buser[932] = \<const0> ;
  assign s_axi_buser[931] = \<const0> ;
  assign s_axi_buser[930] = \<const0> ;
  assign s_axi_buser[929] = \<const0> ;
  assign s_axi_buser[928] = \<const0> ;
  assign s_axi_buser[927] = \<const0> ;
  assign s_axi_buser[926] = \<const0> ;
  assign s_axi_buser[925] = \<const0> ;
  assign s_axi_buser[924] = \<const0> ;
  assign s_axi_buser[923] = \<const0> ;
  assign s_axi_buser[922] = \<const0> ;
  assign s_axi_buser[921] = \<const0> ;
  assign s_axi_buser[920] = \<const0> ;
  assign s_axi_buser[919] = \<const0> ;
  assign s_axi_buser[918] = \<const0> ;
  assign s_axi_buser[917] = \<const0> ;
  assign s_axi_buser[916] = \<const0> ;
  assign s_axi_buser[915] = \<const0> ;
  assign s_axi_buser[914] = \<const0> ;
  assign s_axi_buser[913] = \<const0> ;
  assign s_axi_buser[912] = \<const0> ;
  assign s_axi_buser[911] = \<const0> ;
  assign s_axi_buser[910] = \<const0> ;
  assign s_axi_buser[909] = \<const0> ;
  assign s_axi_buser[908] = \<const0> ;
  assign s_axi_buser[907] = \<const0> ;
  assign s_axi_buser[906] = \<const0> ;
  assign s_axi_buser[905] = \<const0> ;
  assign s_axi_buser[904] = \<const0> ;
  assign s_axi_buser[903] = \<const0> ;
  assign s_axi_buser[902] = \<const0> ;
  assign s_axi_buser[901] = \<const0> ;
  assign s_axi_buser[900] = \<const0> ;
  assign s_axi_buser[899] = \<const0> ;
  assign s_axi_buser[898] = \<const0> ;
  assign s_axi_buser[897] = \<const0> ;
  assign s_axi_buser[896] = \<const0> ;
  assign s_axi_buser[895] = \<const0> ;
  assign s_axi_buser[894] = \<const0> ;
  assign s_axi_buser[893] = \<const0> ;
  assign s_axi_buser[892] = \<const0> ;
  assign s_axi_buser[891] = \<const0> ;
  assign s_axi_buser[890] = \<const0> ;
  assign s_axi_buser[889] = \<const0> ;
  assign s_axi_buser[888] = \<const0> ;
  assign s_axi_buser[887] = \<const0> ;
  assign s_axi_buser[886] = \<const0> ;
  assign s_axi_buser[885] = \<const0> ;
  assign s_axi_buser[884] = \<const0> ;
  assign s_axi_buser[883] = \<const0> ;
  assign s_axi_buser[882] = \<const0> ;
  assign s_axi_buser[881] = \<const0> ;
  assign s_axi_buser[880] = \<const0> ;
  assign s_axi_buser[879] = \<const0> ;
  assign s_axi_buser[878] = \<const0> ;
  assign s_axi_buser[877] = \<const0> ;
  assign s_axi_buser[876] = \<const0> ;
  assign s_axi_buser[875] = \<const0> ;
  assign s_axi_buser[874] = \<const0> ;
  assign s_axi_buser[873] = \<const0> ;
  assign s_axi_buser[872] = \<const0> ;
  assign s_axi_buser[871] = \<const0> ;
  assign s_axi_buser[870] = \<const0> ;
  assign s_axi_buser[869] = \<const0> ;
  assign s_axi_buser[868] = \<const0> ;
  assign s_axi_buser[867] = \<const0> ;
  assign s_axi_buser[866] = \<const0> ;
  assign s_axi_buser[865] = \<const0> ;
  assign s_axi_buser[864] = \<const0> ;
  assign s_axi_buser[863] = \<const0> ;
  assign s_axi_buser[862] = \<const0> ;
  assign s_axi_buser[861] = \<const0> ;
  assign s_axi_buser[860] = \<const0> ;
  assign s_axi_buser[859] = \<const0> ;
  assign s_axi_buser[858] = \<const0> ;
  assign s_axi_buser[857] = \<const0> ;
  assign s_axi_buser[856] = \<const0> ;
  assign s_axi_buser[855] = \<const0> ;
  assign s_axi_buser[854] = \<const0> ;
  assign s_axi_buser[853] = \<const0> ;
  assign s_axi_buser[852] = \<const0> ;
  assign s_axi_buser[851] = \<const0> ;
  assign s_axi_buser[850] = \<const0> ;
  assign s_axi_buser[849] = \<const0> ;
  assign s_axi_buser[848] = \<const0> ;
  assign s_axi_buser[847] = \<const0> ;
  assign s_axi_buser[846] = \<const0> ;
  assign s_axi_buser[845] = \<const0> ;
  assign s_axi_buser[844] = \<const0> ;
  assign s_axi_buser[843] = \<const0> ;
  assign s_axi_buser[842] = \<const0> ;
  assign s_axi_buser[841] = \<const0> ;
  assign s_axi_buser[840] = \<const0> ;
  assign s_axi_buser[839] = \<const0> ;
  assign s_axi_buser[838] = \<const0> ;
  assign s_axi_buser[837] = \<const0> ;
  assign s_axi_buser[836] = \<const0> ;
  assign s_axi_buser[835] = \<const0> ;
  assign s_axi_buser[834] = \<const0> ;
  assign s_axi_buser[833] = \<const0> ;
  assign s_axi_buser[832] = \<const0> ;
  assign s_axi_buser[831] = \<const0> ;
  assign s_axi_buser[830] = \<const0> ;
  assign s_axi_buser[829] = \<const0> ;
  assign s_axi_buser[828] = \<const0> ;
  assign s_axi_buser[827] = \<const0> ;
  assign s_axi_buser[826] = \<const0> ;
  assign s_axi_buser[825] = \<const0> ;
  assign s_axi_buser[824] = \<const0> ;
  assign s_axi_buser[823] = \<const0> ;
  assign s_axi_buser[822] = \<const0> ;
  assign s_axi_buser[821] = \<const0> ;
  assign s_axi_buser[820] = \<const0> ;
  assign s_axi_buser[819] = \<const0> ;
  assign s_axi_buser[818] = \<const0> ;
  assign s_axi_buser[817] = \<const0> ;
  assign s_axi_buser[816] = \<const0> ;
  assign s_axi_buser[815] = \<const0> ;
  assign s_axi_buser[814] = \<const0> ;
  assign s_axi_buser[813] = \<const0> ;
  assign s_axi_buser[812] = \<const0> ;
  assign s_axi_buser[811] = \<const0> ;
  assign s_axi_buser[810] = \<const0> ;
  assign s_axi_buser[809] = \<const0> ;
  assign s_axi_buser[808] = \<const0> ;
  assign s_axi_buser[807] = \<const0> ;
  assign s_axi_buser[806] = \<const0> ;
  assign s_axi_buser[805] = \<const0> ;
  assign s_axi_buser[804] = \<const0> ;
  assign s_axi_buser[803] = \<const0> ;
  assign s_axi_buser[802] = \<const0> ;
  assign s_axi_buser[801] = \<const0> ;
  assign s_axi_buser[800] = \<const0> ;
  assign s_axi_buser[799] = \<const0> ;
  assign s_axi_buser[798] = \<const0> ;
  assign s_axi_buser[797] = \<const0> ;
  assign s_axi_buser[796] = \<const0> ;
  assign s_axi_buser[795] = \<const0> ;
  assign s_axi_buser[794] = \<const0> ;
  assign s_axi_buser[793] = \<const0> ;
  assign s_axi_buser[792] = \<const0> ;
  assign s_axi_buser[791] = \<const0> ;
  assign s_axi_buser[790] = \<const0> ;
  assign s_axi_buser[789] = \<const0> ;
  assign s_axi_buser[788] = \<const0> ;
  assign s_axi_buser[787] = \<const0> ;
  assign s_axi_buser[786] = \<const0> ;
  assign s_axi_buser[785] = \<const0> ;
  assign s_axi_buser[784] = \<const0> ;
  assign s_axi_buser[783] = \<const0> ;
  assign s_axi_buser[782] = \<const0> ;
  assign s_axi_buser[781] = \<const0> ;
  assign s_axi_buser[780] = \<const0> ;
  assign s_axi_buser[779] = \<const0> ;
  assign s_axi_buser[778] = \<const0> ;
  assign s_axi_buser[777] = \<const0> ;
  assign s_axi_buser[776] = \<const0> ;
  assign s_axi_buser[775] = \<const0> ;
  assign s_axi_buser[774] = \<const0> ;
  assign s_axi_buser[773] = \<const0> ;
  assign s_axi_buser[772] = \<const0> ;
  assign s_axi_buser[771] = \<const0> ;
  assign s_axi_buser[770] = \<const0> ;
  assign s_axi_buser[769] = \<const0> ;
  assign s_axi_buser[768] = \<const0> ;
  assign s_axi_buser[767] = \<const0> ;
  assign s_axi_buser[766] = \<const0> ;
  assign s_axi_buser[765] = \<const0> ;
  assign s_axi_buser[764] = \<const0> ;
  assign s_axi_buser[763] = \<const0> ;
  assign s_axi_buser[762] = \<const0> ;
  assign s_axi_buser[761] = \<const0> ;
  assign s_axi_buser[760] = \<const0> ;
  assign s_axi_buser[759] = \<const0> ;
  assign s_axi_buser[758] = \<const0> ;
  assign s_axi_buser[757] = \<const0> ;
  assign s_axi_buser[756] = \<const0> ;
  assign s_axi_buser[755] = \<const0> ;
  assign s_axi_buser[754] = \<const0> ;
  assign s_axi_buser[753] = \<const0> ;
  assign s_axi_buser[752] = \<const0> ;
  assign s_axi_buser[751] = \<const0> ;
  assign s_axi_buser[750] = \<const0> ;
  assign s_axi_buser[749] = \<const0> ;
  assign s_axi_buser[748] = \<const0> ;
  assign s_axi_buser[747] = \<const0> ;
  assign s_axi_buser[746] = \<const0> ;
  assign s_axi_buser[745] = \<const0> ;
  assign s_axi_buser[744] = \<const0> ;
  assign s_axi_buser[743] = \<const0> ;
  assign s_axi_buser[742] = \<const0> ;
  assign s_axi_buser[741] = \<const0> ;
  assign s_axi_buser[740] = \<const0> ;
  assign s_axi_buser[739] = \<const0> ;
  assign s_axi_buser[738] = \<const0> ;
  assign s_axi_buser[737] = \<const0> ;
  assign s_axi_buser[736] = \<const0> ;
  assign s_axi_buser[735] = \<const0> ;
  assign s_axi_buser[734] = \<const0> ;
  assign s_axi_buser[733] = \<const0> ;
  assign s_axi_buser[732] = \<const0> ;
  assign s_axi_buser[731] = \<const0> ;
  assign s_axi_buser[730] = \<const0> ;
  assign s_axi_buser[729] = \<const0> ;
  assign s_axi_buser[728] = \<const0> ;
  assign s_axi_buser[727] = \<const0> ;
  assign s_axi_buser[726] = \<const0> ;
  assign s_axi_buser[725] = \<const0> ;
  assign s_axi_buser[724] = \<const0> ;
  assign s_axi_buser[723] = \<const0> ;
  assign s_axi_buser[722] = \<const0> ;
  assign s_axi_buser[721] = \<const0> ;
  assign s_axi_buser[720] = \<const0> ;
  assign s_axi_buser[719] = \<const0> ;
  assign s_axi_buser[718] = \<const0> ;
  assign s_axi_buser[717] = \<const0> ;
  assign s_axi_buser[716] = \<const0> ;
  assign s_axi_buser[715] = \<const0> ;
  assign s_axi_buser[714] = \<const0> ;
  assign s_axi_buser[713] = \<const0> ;
  assign s_axi_buser[712] = \<const0> ;
  assign s_axi_buser[711] = \<const0> ;
  assign s_axi_buser[710] = \<const0> ;
  assign s_axi_buser[709] = \<const0> ;
  assign s_axi_buser[708] = \<const0> ;
  assign s_axi_buser[707] = \<const0> ;
  assign s_axi_buser[706] = \<const0> ;
  assign s_axi_buser[705] = \<const0> ;
  assign s_axi_buser[704] = \<const0> ;
  assign s_axi_buser[703] = \<const0> ;
  assign s_axi_buser[702] = \<const0> ;
  assign s_axi_buser[701] = \<const0> ;
  assign s_axi_buser[700] = \<const0> ;
  assign s_axi_buser[699] = \<const0> ;
  assign s_axi_buser[698] = \<const0> ;
  assign s_axi_buser[697] = \<const0> ;
  assign s_axi_buser[696] = \<const0> ;
  assign s_axi_buser[695] = \<const0> ;
  assign s_axi_buser[694] = \<const0> ;
  assign s_axi_buser[693] = \<const0> ;
  assign s_axi_buser[692] = \<const0> ;
  assign s_axi_buser[691] = \<const0> ;
  assign s_axi_buser[690] = \<const0> ;
  assign s_axi_buser[689] = \<const0> ;
  assign s_axi_buser[688] = \<const0> ;
  assign s_axi_buser[687] = \<const0> ;
  assign s_axi_buser[686] = \<const0> ;
  assign s_axi_buser[685] = \<const0> ;
  assign s_axi_buser[684] = \<const0> ;
  assign s_axi_buser[683] = \<const0> ;
  assign s_axi_buser[682] = \<const0> ;
  assign s_axi_buser[681] = \<const0> ;
  assign s_axi_buser[680] = \<const0> ;
  assign s_axi_buser[679] = \<const0> ;
  assign s_axi_buser[678] = \<const0> ;
  assign s_axi_buser[677] = \<const0> ;
  assign s_axi_buser[676] = \<const0> ;
  assign s_axi_buser[675] = \<const0> ;
  assign s_axi_buser[674] = \<const0> ;
  assign s_axi_buser[673] = \<const0> ;
  assign s_axi_buser[672] = \<const0> ;
  assign s_axi_buser[671] = \<const0> ;
  assign s_axi_buser[670] = \<const0> ;
  assign s_axi_buser[669] = \<const0> ;
  assign s_axi_buser[668] = \<const0> ;
  assign s_axi_buser[667] = \<const0> ;
  assign s_axi_buser[666] = \<const0> ;
  assign s_axi_buser[665] = \<const0> ;
  assign s_axi_buser[664] = \<const0> ;
  assign s_axi_buser[663] = \<const0> ;
  assign s_axi_buser[662] = \<const0> ;
  assign s_axi_buser[661] = \<const0> ;
  assign s_axi_buser[660] = \<const0> ;
  assign s_axi_buser[659] = \<const0> ;
  assign s_axi_buser[658] = \<const0> ;
  assign s_axi_buser[657] = \<const0> ;
  assign s_axi_buser[656] = \<const0> ;
  assign s_axi_buser[655] = \<const0> ;
  assign s_axi_buser[654] = \<const0> ;
  assign s_axi_buser[653] = \<const0> ;
  assign s_axi_buser[652] = \<const0> ;
  assign s_axi_buser[651] = \<const0> ;
  assign s_axi_buser[650] = \<const0> ;
  assign s_axi_buser[649] = \<const0> ;
  assign s_axi_buser[648] = \<const0> ;
  assign s_axi_buser[647] = \<const0> ;
  assign s_axi_buser[646] = \<const0> ;
  assign s_axi_buser[645] = \<const0> ;
  assign s_axi_buser[644] = \<const0> ;
  assign s_axi_buser[643] = \<const0> ;
  assign s_axi_buser[642] = \<const0> ;
  assign s_axi_buser[641] = \<const0> ;
  assign s_axi_buser[640] = \<const0> ;
  assign s_axi_buser[639] = \<const0> ;
  assign s_axi_buser[638] = \<const0> ;
  assign s_axi_buser[637] = \<const0> ;
  assign s_axi_buser[636] = \<const0> ;
  assign s_axi_buser[635] = \<const0> ;
  assign s_axi_buser[634] = \<const0> ;
  assign s_axi_buser[633] = \<const0> ;
  assign s_axi_buser[632] = \<const0> ;
  assign s_axi_buser[631] = \<const0> ;
  assign s_axi_buser[630] = \<const0> ;
  assign s_axi_buser[629] = \<const0> ;
  assign s_axi_buser[628] = \<const0> ;
  assign s_axi_buser[627] = \<const0> ;
  assign s_axi_buser[626] = \<const0> ;
  assign s_axi_buser[625] = \<const0> ;
  assign s_axi_buser[624] = \<const0> ;
  assign s_axi_buser[623] = \<const0> ;
  assign s_axi_buser[622] = \<const0> ;
  assign s_axi_buser[621] = \<const0> ;
  assign s_axi_buser[620] = \<const0> ;
  assign s_axi_buser[619] = \<const0> ;
  assign s_axi_buser[618] = \<const0> ;
  assign s_axi_buser[617] = \<const0> ;
  assign s_axi_buser[616] = \<const0> ;
  assign s_axi_buser[615] = \<const0> ;
  assign s_axi_buser[614] = \<const0> ;
  assign s_axi_buser[613] = \<const0> ;
  assign s_axi_buser[612] = \<const0> ;
  assign s_axi_buser[611] = \<const0> ;
  assign s_axi_buser[610] = \<const0> ;
  assign s_axi_buser[609] = \<const0> ;
  assign s_axi_buser[608] = \<const0> ;
  assign s_axi_buser[607] = \<const0> ;
  assign s_axi_buser[606] = \<const0> ;
  assign s_axi_buser[605] = \<const0> ;
  assign s_axi_buser[604] = \<const0> ;
  assign s_axi_buser[603] = \<const0> ;
  assign s_axi_buser[602] = \<const0> ;
  assign s_axi_buser[601] = \<const0> ;
  assign s_axi_buser[600] = \<const0> ;
  assign s_axi_buser[599] = \<const0> ;
  assign s_axi_buser[598] = \<const0> ;
  assign s_axi_buser[597] = \<const0> ;
  assign s_axi_buser[596] = \<const0> ;
  assign s_axi_buser[595] = \<const0> ;
  assign s_axi_buser[594] = \<const0> ;
  assign s_axi_buser[593] = \<const0> ;
  assign s_axi_buser[592] = \<const0> ;
  assign s_axi_buser[591] = \<const0> ;
  assign s_axi_buser[590] = \<const0> ;
  assign s_axi_buser[589] = \<const0> ;
  assign s_axi_buser[588] = \<const0> ;
  assign s_axi_buser[587] = \<const0> ;
  assign s_axi_buser[586] = \<const0> ;
  assign s_axi_buser[585] = \<const0> ;
  assign s_axi_buser[584] = \<const0> ;
  assign s_axi_buser[583] = \<const0> ;
  assign s_axi_buser[582] = \<const0> ;
  assign s_axi_buser[581] = \<const0> ;
  assign s_axi_buser[580] = \<const0> ;
  assign s_axi_buser[579] = \<const0> ;
  assign s_axi_buser[578] = \<const0> ;
  assign s_axi_buser[577] = \<const0> ;
  assign s_axi_buser[576] = \<const0> ;
  assign s_axi_buser[575] = \<const0> ;
  assign s_axi_buser[574] = \<const0> ;
  assign s_axi_buser[573] = \<const0> ;
  assign s_axi_buser[572] = \<const0> ;
  assign s_axi_buser[571] = \<const0> ;
  assign s_axi_buser[570] = \<const0> ;
  assign s_axi_buser[569] = \<const0> ;
  assign s_axi_buser[568] = \<const0> ;
  assign s_axi_buser[567] = \<const0> ;
  assign s_axi_buser[566] = \<const0> ;
  assign s_axi_buser[565] = \<const0> ;
  assign s_axi_buser[564] = \<const0> ;
  assign s_axi_buser[563] = \<const0> ;
  assign s_axi_buser[562] = \<const0> ;
  assign s_axi_buser[561] = \<const0> ;
  assign s_axi_buser[560] = \<const0> ;
  assign s_axi_buser[559] = \<const0> ;
  assign s_axi_buser[558] = \<const0> ;
  assign s_axi_buser[557] = \<const0> ;
  assign s_axi_buser[556] = \<const0> ;
  assign s_axi_buser[555] = \<const0> ;
  assign s_axi_buser[554] = \<const0> ;
  assign s_axi_buser[553] = \<const0> ;
  assign s_axi_buser[552] = \<const0> ;
  assign s_axi_buser[551] = \<const0> ;
  assign s_axi_buser[550] = \<const0> ;
  assign s_axi_buser[549] = \<const0> ;
  assign s_axi_buser[548] = \<const0> ;
  assign s_axi_buser[547] = \<const0> ;
  assign s_axi_buser[546] = \<const0> ;
  assign s_axi_buser[545] = \<const0> ;
  assign s_axi_buser[544] = \<const0> ;
  assign s_axi_buser[543] = \<const0> ;
  assign s_axi_buser[542] = \<const0> ;
  assign s_axi_buser[541] = \<const0> ;
  assign s_axi_buser[540] = \<const0> ;
  assign s_axi_buser[539] = \<const0> ;
  assign s_axi_buser[538] = \<const0> ;
  assign s_axi_buser[537] = \<const0> ;
  assign s_axi_buser[536] = \<const0> ;
  assign s_axi_buser[535] = \<const0> ;
  assign s_axi_buser[534] = \<const0> ;
  assign s_axi_buser[533] = \<const0> ;
  assign s_axi_buser[532] = \<const0> ;
  assign s_axi_buser[531] = \<const0> ;
  assign s_axi_buser[530] = \<const0> ;
  assign s_axi_buser[529] = \<const0> ;
  assign s_axi_buser[528] = \<const0> ;
  assign s_axi_buser[527] = \<const0> ;
  assign s_axi_buser[526] = \<const0> ;
  assign s_axi_buser[525] = \<const0> ;
  assign s_axi_buser[524] = \<const0> ;
  assign s_axi_buser[523] = \<const0> ;
  assign s_axi_buser[522] = \<const0> ;
  assign s_axi_buser[521] = \<const0> ;
  assign s_axi_buser[520] = \<const0> ;
  assign s_axi_buser[519] = \<const0> ;
  assign s_axi_buser[518] = \<const0> ;
  assign s_axi_buser[517] = \<const0> ;
  assign s_axi_buser[516] = \<const0> ;
  assign s_axi_buser[515] = \<const0> ;
  assign s_axi_buser[514] = \<const0> ;
  assign s_axi_buser[513] = \<const0> ;
  assign s_axi_buser[512] = \<const0> ;
  assign s_axi_buser[511] = \<const0> ;
  assign s_axi_buser[510] = \<const0> ;
  assign s_axi_buser[509] = \<const0> ;
  assign s_axi_buser[508] = \<const0> ;
  assign s_axi_buser[507] = \<const0> ;
  assign s_axi_buser[506] = \<const0> ;
  assign s_axi_buser[505] = \<const0> ;
  assign s_axi_buser[504] = \<const0> ;
  assign s_axi_buser[503] = \<const0> ;
  assign s_axi_buser[502] = \<const0> ;
  assign s_axi_buser[501] = \<const0> ;
  assign s_axi_buser[500] = \<const0> ;
  assign s_axi_buser[499] = \<const0> ;
  assign s_axi_buser[498] = \<const0> ;
  assign s_axi_buser[497] = \<const0> ;
  assign s_axi_buser[496] = \<const0> ;
  assign s_axi_buser[495] = \<const0> ;
  assign s_axi_buser[494] = \<const0> ;
  assign s_axi_buser[493] = \<const0> ;
  assign s_axi_buser[492] = \<const0> ;
  assign s_axi_buser[491] = \<const0> ;
  assign s_axi_buser[490] = \<const0> ;
  assign s_axi_buser[489] = \<const0> ;
  assign s_axi_buser[488] = \<const0> ;
  assign s_axi_buser[487] = \<const0> ;
  assign s_axi_buser[486] = \<const0> ;
  assign s_axi_buser[485] = \<const0> ;
  assign s_axi_buser[484] = \<const0> ;
  assign s_axi_buser[483] = \<const0> ;
  assign s_axi_buser[482] = \<const0> ;
  assign s_axi_buser[481] = \<const0> ;
  assign s_axi_buser[480] = \<const0> ;
  assign s_axi_buser[479] = \<const0> ;
  assign s_axi_buser[478] = \<const0> ;
  assign s_axi_buser[477] = \<const0> ;
  assign s_axi_buser[476] = \<const0> ;
  assign s_axi_buser[475] = \<const0> ;
  assign s_axi_buser[474] = \<const0> ;
  assign s_axi_buser[473] = \<const0> ;
  assign s_axi_buser[472] = \<const0> ;
  assign s_axi_buser[471] = \<const0> ;
  assign s_axi_buser[470] = \<const0> ;
  assign s_axi_buser[469] = \<const0> ;
  assign s_axi_buser[468] = \<const0> ;
  assign s_axi_buser[467] = \<const0> ;
  assign s_axi_buser[466] = \<const0> ;
  assign s_axi_buser[465] = \<const0> ;
  assign s_axi_buser[464] = \<const0> ;
  assign s_axi_buser[463] = \<const0> ;
  assign s_axi_buser[462] = \<const0> ;
  assign s_axi_buser[461] = \<const0> ;
  assign s_axi_buser[460] = \<const0> ;
  assign s_axi_buser[459] = \<const0> ;
  assign s_axi_buser[458] = \<const0> ;
  assign s_axi_buser[457] = \<const0> ;
  assign s_axi_buser[456] = \<const0> ;
  assign s_axi_buser[455] = \<const0> ;
  assign s_axi_buser[454] = \<const0> ;
  assign s_axi_buser[453] = \<const0> ;
  assign s_axi_buser[452] = \<const0> ;
  assign s_axi_buser[451] = \<const0> ;
  assign s_axi_buser[450] = \<const0> ;
  assign s_axi_buser[449] = \<const0> ;
  assign s_axi_buser[448] = \<const0> ;
  assign s_axi_buser[447] = \<const0> ;
  assign s_axi_buser[446] = \<const0> ;
  assign s_axi_buser[445] = \<const0> ;
  assign s_axi_buser[444] = \<const0> ;
  assign s_axi_buser[443] = \<const0> ;
  assign s_axi_buser[442] = \<const0> ;
  assign s_axi_buser[441] = \<const0> ;
  assign s_axi_buser[440] = \<const0> ;
  assign s_axi_buser[439] = \<const0> ;
  assign s_axi_buser[438] = \<const0> ;
  assign s_axi_buser[437] = \<const0> ;
  assign s_axi_buser[436] = \<const0> ;
  assign s_axi_buser[435] = \<const0> ;
  assign s_axi_buser[434] = \<const0> ;
  assign s_axi_buser[433] = \<const0> ;
  assign s_axi_buser[432] = \<const0> ;
  assign s_axi_buser[431] = \<const0> ;
  assign s_axi_buser[430] = \<const0> ;
  assign s_axi_buser[429] = \<const0> ;
  assign s_axi_buser[428] = \<const0> ;
  assign s_axi_buser[427] = \<const0> ;
  assign s_axi_buser[426] = \<const0> ;
  assign s_axi_buser[425] = \<const0> ;
  assign s_axi_buser[424] = \<const0> ;
  assign s_axi_buser[423] = \<const0> ;
  assign s_axi_buser[422] = \<const0> ;
  assign s_axi_buser[421] = \<const0> ;
  assign s_axi_buser[420] = \<const0> ;
  assign s_axi_buser[419] = \<const0> ;
  assign s_axi_buser[418] = \<const0> ;
  assign s_axi_buser[417] = \<const0> ;
  assign s_axi_buser[416] = \<const0> ;
  assign s_axi_buser[415] = \<const0> ;
  assign s_axi_buser[414] = \<const0> ;
  assign s_axi_buser[413] = \<const0> ;
  assign s_axi_buser[412] = \<const0> ;
  assign s_axi_buser[411] = \<const0> ;
  assign s_axi_buser[410] = \<const0> ;
  assign s_axi_buser[409] = \<const0> ;
  assign s_axi_buser[408] = \<const0> ;
  assign s_axi_buser[407] = \<const0> ;
  assign s_axi_buser[406] = \<const0> ;
  assign s_axi_buser[405] = \<const0> ;
  assign s_axi_buser[404] = \<const0> ;
  assign s_axi_buser[403] = \<const0> ;
  assign s_axi_buser[402] = \<const0> ;
  assign s_axi_buser[401] = \<const0> ;
  assign s_axi_buser[400] = \<const0> ;
  assign s_axi_buser[399] = \<const0> ;
  assign s_axi_buser[398] = \<const0> ;
  assign s_axi_buser[397] = \<const0> ;
  assign s_axi_buser[396] = \<const0> ;
  assign s_axi_buser[395] = \<const0> ;
  assign s_axi_buser[394] = \<const0> ;
  assign s_axi_buser[393] = \<const0> ;
  assign s_axi_buser[392] = \<const0> ;
  assign s_axi_buser[391] = \<const0> ;
  assign s_axi_buser[390] = \<const0> ;
  assign s_axi_buser[389] = \<const0> ;
  assign s_axi_buser[388] = \<const0> ;
  assign s_axi_buser[387] = \<const0> ;
  assign s_axi_buser[386] = \<const0> ;
  assign s_axi_buser[385] = \<const0> ;
  assign s_axi_buser[384] = \<const0> ;
  assign s_axi_buser[383] = \<const0> ;
  assign s_axi_buser[382] = \<const0> ;
  assign s_axi_buser[381] = \<const0> ;
  assign s_axi_buser[380] = \<const0> ;
  assign s_axi_buser[379] = \<const0> ;
  assign s_axi_buser[378] = \<const0> ;
  assign s_axi_buser[377] = \<const0> ;
  assign s_axi_buser[376] = \<const0> ;
  assign s_axi_buser[375] = \<const0> ;
  assign s_axi_buser[374] = \<const0> ;
  assign s_axi_buser[373] = \<const0> ;
  assign s_axi_buser[372] = \<const0> ;
  assign s_axi_buser[371] = \<const0> ;
  assign s_axi_buser[370] = \<const0> ;
  assign s_axi_buser[369] = \<const0> ;
  assign s_axi_buser[368] = \<const0> ;
  assign s_axi_buser[367] = \<const0> ;
  assign s_axi_buser[366] = \<const0> ;
  assign s_axi_buser[365] = \<const0> ;
  assign s_axi_buser[364] = \<const0> ;
  assign s_axi_buser[363] = \<const0> ;
  assign s_axi_buser[362] = \<const0> ;
  assign s_axi_buser[361] = \<const0> ;
  assign s_axi_buser[360] = \<const0> ;
  assign s_axi_buser[359] = \<const0> ;
  assign s_axi_buser[358] = \<const0> ;
  assign s_axi_buser[357] = \<const0> ;
  assign s_axi_buser[356] = \<const0> ;
  assign s_axi_buser[355] = \<const0> ;
  assign s_axi_buser[354] = \<const0> ;
  assign s_axi_buser[353] = \<const0> ;
  assign s_axi_buser[352] = \<const0> ;
  assign s_axi_buser[351] = \<const0> ;
  assign s_axi_buser[350] = \<const0> ;
  assign s_axi_buser[349] = \<const0> ;
  assign s_axi_buser[348] = \<const0> ;
  assign s_axi_buser[347] = \<const0> ;
  assign s_axi_buser[346] = \<const0> ;
  assign s_axi_buser[345] = \<const0> ;
  assign s_axi_buser[344] = \<const0> ;
  assign s_axi_buser[343] = \<const0> ;
  assign s_axi_buser[342] = \<const0> ;
  assign s_axi_buser[341] = \<const0> ;
  assign s_axi_buser[340] = \<const0> ;
  assign s_axi_buser[339] = \<const0> ;
  assign s_axi_buser[338] = \<const0> ;
  assign s_axi_buser[337] = \<const0> ;
  assign s_axi_buser[336] = \<const0> ;
  assign s_axi_buser[335] = \<const0> ;
  assign s_axi_buser[334] = \<const0> ;
  assign s_axi_buser[333] = \<const0> ;
  assign s_axi_buser[332] = \<const0> ;
  assign s_axi_buser[331] = \<const0> ;
  assign s_axi_buser[330] = \<const0> ;
  assign s_axi_buser[329] = \<const0> ;
  assign s_axi_buser[328] = \<const0> ;
  assign s_axi_buser[327] = \<const0> ;
  assign s_axi_buser[326] = \<const0> ;
  assign s_axi_buser[325] = \<const0> ;
  assign s_axi_buser[324] = \<const0> ;
  assign s_axi_buser[323] = \<const0> ;
  assign s_axi_buser[322] = \<const0> ;
  assign s_axi_buser[321] = \<const0> ;
  assign s_axi_buser[320] = \<const0> ;
  assign s_axi_buser[319] = \<const0> ;
  assign s_axi_buser[318] = \<const0> ;
  assign s_axi_buser[317] = \<const0> ;
  assign s_axi_buser[316] = \<const0> ;
  assign s_axi_buser[315] = \<const0> ;
  assign s_axi_buser[314] = \<const0> ;
  assign s_axi_buser[313] = \<const0> ;
  assign s_axi_buser[312] = \<const0> ;
  assign s_axi_buser[311] = \<const0> ;
  assign s_axi_buser[310] = \<const0> ;
  assign s_axi_buser[309] = \<const0> ;
  assign s_axi_buser[308] = \<const0> ;
  assign s_axi_buser[307] = \<const0> ;
  assign s_axi_buser[306] = \<const0> ;
  assign s_axi_buser[305] = \<const0> ;
  assign s_axi_buser[304] = \<const0> ;
  assign s_axi_buser[303] = \<const0> ;
  assign s_axi_buser[302] = \<const0> ;
  assign s_axi_buser[301] = \<const0> ;
  assign s_axi_buser[300] = \<const0> ;
  assign s_axi_buser[299] = \<const0> ;
  assign s_axi_buser[298] = \<const0> ;
  assign s_axi_buser[297] = \<const0> ;
  assign s_axi_buser[296] = \<const0> ;
  assign s_axi_buser[295] = \<const0> ;
  assign s_axi_buser[294] = \<const0> ;
  assign s_axi_buser[293] = \<const0> ;
  assign s_axi_buser[292] = \<const0> ;
  assign s_axi_buser[291] = \<const0> ;
  assign s_axi_buser[290] = \<const0> ;
  assign s_axi_buser[289] = \<const0> ;
  assign s_axi_buser[288] = \<const0> ;
  assign s_axi_buser[287] = \<const0> ;
  assign s_axi_buser[286] = \<const0> ;
  assign s_axi_buser[285] = \<const0> ;
  assign s_axi_buser[284] = \<const0> ;
  assign s_axi_buser[283] = \<const0> ;
  assign s_axi_buser[282] = \<const0> ;
  assign s_axi_buser[281] = \<const0> ;
  assign s_axi_buser[280] = \<const0> ;
  assign s_axi_buser[279] = \<const0> ;
  assign s_axi_buser[278] = \<const0> ;
  assign s_axi_buser[277] = \<const0> ;
  assign s_axi_buser[276] = \<const0> ;
  assign s_axi_buser[275] = \<const0> ;
  assign s_axi_buser[274] = \<const0> ;
  assign s_axi_buser[273] = \<const0> ;
  assign s_axi_buser[272] = \<const0> ;
  assign s_axi_buser[271] = \<const0> ;
  assign s_axi_buser[270] = \<const0> ;
  assign s_axi_buser[269] = \<const0> ;
  assign s_axi_buser[268] = \<const0> ;
  assign s_axi_buser[267] = \<const0> ;
  assign s_axi_buser[266] = \<const0> ;
  assign s_axi_buser[265] = \<const0> ;
  assign s_axi_buser[264] = \<const0> ;
  assign s_axi_buser[263] = \<const0> ;
  assign s_axi_buser[262] = \<const0> ;
  assign s_axi_buser[261] = \<const0> ;
  assign s_axi_buser[260] = \<const0> ;
  assign s_axi_buser[259] = \<const0> ;
  assign s_axi_buser[258] = \<const0> ;
  assign s_axi_buser[257] = \<const0> ;
  assign s_axi_buser[256] = \<const0> ;
  assign s_axi_buser[255] = \<const0> ;
  assign s_axi_buser[254] = \<const0> ;
  assign s_axi_buser[253] = \<const0> ;
  assign s_axi_buser[252] = \<const0> ;
  assign s_axi_buser[251] = \<const0> ;
  assign s_axi_buser[250] = \<const0> ;
  assign s_axi_buser[249] = \<const0> ;
  assign s_axi_buser[248] = \<const0> ;
  assign s_axi_buser[247] = \<const0> ;
  assign s_axi_buser[246] = \<const0> ;
  assign s_axi_buser[245] = \<const0> ;
  assign s_axi_buser[244] = \<const0> ;
  assign s_axi_buser[243] = \<const0> ;
  assign s_axi_buser[242] = \<const0> ;
  assign s_axi_buser[241] = \<const0> ;
  assign s_axi_buser[240] = \<const0> ;
  assign s_axi_buser[239] = \<const0> ;
  assign s_axi_buser[238] = \<const0> ;
  assign s_axi_buser[237] = \<const0> ;
  assign s_axi_buser[236] = \<const0> ;
  assign s_axi_buser[235] = \<const0> ;
  assign s_axi_buser[234] = \<const0> ;
  assign s_axi_buser[233] = \<const0> ;
  assign s_axi_buser[232] = \<const0> ;
  assign s_axi_buser[231] = \<const0> ;
  assign s_axi_buser[230] = \<const0> ;
  assign s_axi_buser[229] = \<const0> ;
  assign s_axi_buser[228] = \<const0> ;
  assign s_axi_buser[227] = \<const0> ;
  assign s_axi_buser[226] = \<const0> ;
  assign s_axi_buser[225] = \<const0> ;
  assign s_axi_buser[224] = \<const0> ;
  assign s_axi_buser[223] = \<const0> ;
  assign s_axi_buser[222] = \<const0> ;
  assign s_axi_buser[221] = \<const0> ;
  assign s_axi_buser[220] = \<const0> ;
  assign s_axi_buser[219] = \<const0> ;
  assign s_axi_buser[218] = \<const0> ;
  assign s_axi_buser[217] = \<const0> ;
  assign s_axi_buser[216] = \<const0> ;
  assign s_axi_buser[215] = \<const0> ;
  assign s_axi_buser[214] = \<const0> ;
  assign s_axi_buser[213] = \<const0> ;
  assign s_axi_buser[212] = \<const0> ;
  assign s_axi_buser[211] = \<const0> ;
  assign s_axi_buser[210] = \<const0> ;
  assign s_axi_buser[209] = \<const0> ;
  assign s_axi_buser[208] = \<const0> ;
  assign s_axi_buser[207] = \<const0> ;
  assign s_axi_buser[206] = \<const0> ;
  assign s_axi_buser[205] = \<const0> ;
  assign s_axi_buser[204] = \<const0> ;
  assign s_axi_buser[203] = \<const0> ;
  assign s_axi_buser[202] = \<const0> ;
  assign s_axi_buser[201] = \<const0> ;
  assign s_axi_buser[200] = \<const0> ;
  assign s_axi_buser[199] = \<const0> ;
  assign s_axi_buser[198] = \<const0> ;
  assign s_axi_buser[197] = \<const0> ;
  assign s_axi_buser[196] = \<const0> ;
  assign s_axi_buser[195] = \<const0> ;
  assign s_axi_buser[194] = \<const0> ;
  assign s_axi_buser[193] = \<const0> ;
  assign s_axi_buser[192] = \<const0> ;
  assign s_axi_buser[191] = \<const0> ;
  assign s_axi_buser[190] = \<const0> ;
  assign s_axi_buser[189] = \<const0> ;
  assign s_axi_buser[188] = \<const0> ;
  assign s_axi_buser[187] = \<const0> ;
  assign s_axi_buser[186] = \<const0> ;
  assign s_axi_buser[185] = \<const0> ;
  assign s_axi_buser[184] = \<const0> ;
  assign s_axi_buser[183] = \<const0> ;
  assign s_axi_buser[182] = \<const0> ;
  assign s_axi_buser[181] = \<const0> ;
  assign s_axi_buser[180] = \<const0> ;
  assign s_axi_buser[179] = \<const0> ;
  assign s_axi_buser[178] = \<const0> ;
  assign s_axi_buser[177] = \<const0> ;
  assign s_axi_buser[176] = \<const0> ;
  assign s_axi_buser[175] = \<const0> ;
  assign s_axi_buser[174] = \<const0> ;
  assign s_axi_buser[173] = \<const0> ;
  assign s_axi_buser[172] = \<const0> ;
  assign s_axi_buser[171] = \<const0> ;
  assign s_axi_buser[170] = \<const0> ;
  assign s_axi_buser[169] = \<const0> ;
  assign s_axi_buser[168] = \<const0> ;
  assign s_axi_buser[167] = \<const0> ;
  assign s_axi_buser[166] = \<const0> ;
  assign s_axi_buser[165] = \<const0> ;
  assign s_axi_buser[164] = \<const0> ;
  assign s_axi_buser[163] = \<const0> ;
  assign s_axi_buser[162] = \<const0> ;
  assign s_axi_buser[161] = \<const0> ;
  assign s_axi_buser[160] = \<const0> ;
  assign s_axi_buser[159] = \<const0> ;
  assign s_axi_buser[158] = \<const0> ;
  assign s_axi_buser[157] = \<const0> ;
  assign s_axi_buser[156] = \<const0> ;
  assign s_axi_buser[155] = \<const0> ;
  assign s_axi_buser[154] = \<const0> ;
  assign s_axi_buser[153] = \<const0> ;
  assign s_axi_buser[152] = \<const0> ;
  assign s_axi_buser[151] = \<const0> ;
  assign s_axi_buser[150] = \<const0> ;
  assign s_axi_buser[149] = \<const0> ;
  assign s_axi_buser[148] = \<const0> ;
  assign s_axi_buser[147] = \<const0> ;
  assign s_axi_buser[146] = \<const0> ;
  assign s_axi_buser[145] = \<const0> ;
  assign s_axi_buser[144] = \<const0> ;
  assign s_axi_buser[143] = \<const0> ;
  assign s_axi_buser[142] = \<const0> ;
  assign s_axi_buser[141] = \<const0> ;
  assign s_axi_buser[140] = \<const0> ;
  assign s_axi_buser[139] = \<const0> ;
  assign s_axi_buser[138] = \<const0> ;
  assign s_axi_buser[137] = \<const0> ;
  assign s_axi_buser[136] = \<const0> ;
  assign s_axi_buser[135] = \<const0> ;
  assign s_axi_buser[134] = \<const0> ;
  assign s_axi_buser[133] = \<const0> ;
  assign s_axi_buser[132] = \<const0> ;
  assign s_axi_buser[131] = \<const0> ;
  assign s_axi_buser[130] = \<const0> ;
  assign s_axi_buser[129] = \<const0> ;
  assign s_axi_buser[128] = \<const0> ;
  assign s_axi_buser[127] = \<const0> ;
  assign s_axi_buser[126] = \<const0> ;
  assign s_axi_buser[125] = \<const0> ;
  assign s_axi_buser[124] = \<const0> ;
  assign s_axi_buser[123] = \<const0> ;
  assign s_axi_buser[122] = \<const0> ;
  assign s_axi_buser[121] = \<const0> ;
  assign s_axi_buser[120] = \<const0> ;
  assign s_axi_buser[119] = \<const0> ;
  assign s_axi_buser[118] = \<const0> ;
  assign s_axi_buser[117] = \<const0> ;
  assign s_axi_buser[116] = \<const0> ;
  assign s_axi_buser[115] = \<const0> ;
  assign s_axi_buser[114] = \<const0> ;
  assign s_axi_buser[113] = \<const0> ;
  assign s_axi_buser[112] = \<const0> ;
  assign s_axi_buser[111] = \<const0> ;
  assign s_axi_buser[110] = \<const0> ;
  assign s_axi_buser[109] = \<const0> ;
  assign s_axi_buser[108] = \<const0> ;
  assign s_axi_buser[107] = \<const0> ;
  assign s_axi_buser[106] = \<const0> ;
  assign s_axi_buser[105] = \<const0> ;
  assign s_axi_buser[104] = \<const0> ;
  assign s_axi_buser[103] = \<const0> ;
  assign s_axi_buser[102] = \<const0> ;
  assign s_axi_buser[101] = \<const0> ;
  assign s_axi_buser[100] = \<const0> ;
  assign s_axi_buser[99] = \<const0> ;
  assign s_axi_buser[98] = \<const0> ;
  assign s_axi_buser[97] = \<const0> ;
  assign s_axi_buser[96] = \<const0> ;
  assign s_axi_buser[95] = \<const0> ;
  assign s_axi_buser[94] = \<const0> ;
  assign s_axi_buser[93] = \<const0> ;
  assign s_axi_buser[92] = \<const0> ;
  assign s_axi_buser[91] = \<const0> ;
  assign s_axi_buser[90] = \<const0> ;
  assign s_axi_buser[89] = \<const0> ;
  assign s_axi_buser[88] = \<const0> ;
  assign s_axi_buser[87] = \<const0> ;
  assign s_axi_buser[86] = \<const0> ;
  assign s_axi_buser[85] = \<const0> ;
  assign s_axi_buser[84] = \<const0> ;
  assign s_axi_buser[83] = \<const0> ;
  assign s_axi_buser[82] = \<const0> ;
  assign s_axi_buser[81] = \<const0> ;
  assign s_axi_buser[80] = \<const0> ;
  assign s_axi_buser[79] = \<const0> ;
  assign s_axi_buser[78] = \<const0> ;
  assign s_axi_buser[77] = \<const0> ;
  assign s_axi_buser[76] = \<const0> ;
  assign s_axi_buser[75] = \<const0> ;
  assign s_axi_buser[74] = \<const0> ;
  assign s_axi_buser[73] = \<const0> ;
  assign s_axi_buser[72] = \<const0> ;
  assign s_axi_buser[71] = \<const0> ;
  assign s_axi_buser[70] = \<const0> ;
  assign s_axi_buser[69] = \<const0> ;
  assign s_axi_buser[68] = \<const0> ;
  assign s_axi_buser[67] = \<const0> ;
  assign s_axi_buser[66] = \<const0> ;
  assign s_axi_buser[65] = \<const0> ;
  assign s_axi_buser[64] = \<const0> ;
  assign s_axi_buser[63] = \<const0> ;
  assign s_axi_buser[62] = \<const0> ;
  assign s_axi_buser[61] = \<const0> ;
  assign s_axi_buser[60] = \<const0> ;
  assign s_axi_buser[59] = \<const0> ;
  assign s_axi_buser[58] = \<const0> ;
  assign s_axi_buser[57] = \<const0> ;
  assign s_axi_buser[56] = \<const0> ;
  assign s_axi_buser[55] = \<const0> ;
  assign s_axi_buser[54] = \<const0> ;
  assign s_axi_buser[53] = \<const0> ;
  assign s_axi_buser[52] = \<const0> ;
  assign s_axi_buser[51] = \<const0> ;
  assign s_axi_buser[50] = \<const0> ;
  assign s_axi_buser[49] = \<const0> ;
  assign s_axi_buser[48] = \<const0> ;
  assign s_axi_buser[47] = \<const0> ;
  assign s_axi_buser[46] = \<const0> ;
  assign s_axi_buser[45] = \<const0> ;
  assign s_axi_buser[44] = \<const0> ;
  assign s_axi_buser[43] = \<const0> ;
  assign s_axi_buser[42] = \<const0> ;
  assign s_axi_buser[41] = \<const0> ;
  assign s_axi_buser[40] = \<const0> ;
  assign s_axi_buser[39] = \<const0> ;
  assign s_axi_buser[38] = \<const0> ;
  assign s_axi_buser[37] = \<const0> ;
  assign s_axi_buser[36] = \<const0> ;
  assign s_axi_buser[35] = \<const0> ;
  assign s_axi_buser[34] = \<const0> ;
  assign s_axi_buser[33] = \<const0> ;
  assign s_axi_buser[32] = \<const0> ;
  assign s_axi_buser[31] = \<const0> ;
  assign s_axi_buser[30] = \<const0> ;
  assign s_axi_buser[29] = \<const0> ;
  assign s_axi_buser[28] = \<const0> ;
  assign s_axi_buser[27] = \<const0> ;
  assign s_axi_buser[26] = \<const0> ;
  assign s_axi_buser[25] = \<const0> ;
  assign s_axi_buser[24] = \<const0> ;
  assign s_axi_buser[23] = \<const0> ;
  assign s_axi_buser[22] = \<const0> ;
  assign s_axi_buser[21] = \<const0> ;
  assign s_axi_buser[20] = \<const0> ;
  assign s_axi_buser[19] = \<const0> ;
  assign s_axi_buser[18] = \<const0> ;
  assign s_axi_buser[17] = \<const0> ;
  assign s_axi_buser[16] = \<const0> ;
  assign s_axi_buser[15] = \<const0> ;
  assign s_axi_buser[14] = \<const0> ;
  assign s_axi_buser[13] = \<const0> ;
  assign s_axi_buser[12] = \<const0> ;
  assign s_axi_buser[11] = \<const0> ;
  assign s_axi_buser[10] = \<const0> ;
  assign s_axi_buser[9] = \<const0> ;
  assign s_axi_buser[8] = \<const0> ;
  assign s_axi_buser[7] = \<const0> ;
  assign s_axi_buser[6] = \<const0> ;
  assign s_axi_buser[5] = \<const0> ;
  assign s_axi_buser[4] = \<const0> ;
  assign s_axi_buser[3] = \<const0> ;
  assign s_axi_buser[2] = \^s_axi_buser [2];
  assign s_axi_buser[1] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[1023] = \<const0> ;
  assign s_axi_ruser[1022] = \<const0> ;
  assign s_axi_ruser[1021] = \<const0> ;
  assign s_axi_ruser[1020] = \<const0> ;
  assign s_axi_ruser[1019] = \<const0> ;
  assign s_axi_ruser[1018] = \<const0> ;
  assign s_axi_ruser[1017] = \<const0> ;
  assign s_axi_ruser[1016] = \<const0> ;
  assign s_axi_ruser[1015] = \<const0> ;
  assign s_axi_ruser[1014] = \<const0> ;
  assign s_axi_ruser[1013] = \<const0> ;
  assign s_axi_ruser[1012] = \<const0> ;
  assign s_axi_ruser[1011] = \<const0> ;
  assign s_axi_ruser[1010] = \<const0> ;
  assign s_axi_ruser[1009] = \<const0> ;
  assign s_axi_ruser[1008] = \<const0> ;
  assign s_axi_ruser[1007] = \<const0> ;
  assign s_axi_ruser[1006] = \<const0> ;
  assign s_axi_ruser[1005] = \<const0> ;
  assign s_axi_ruser[1004] = \<const0> ;
  assign s_axi_ruser[1003] = \<const0> ;
  assign s_axi_ruser[1002] = \<const0> ;
  assign s_axi_ruser[1001] = \<const0> ;
  assign s_axi_ruser[1000] = \<const0> ;
  assign s_axi_ruser[999] = \<const0> ;
  assign s_axi_ruser[998] = \<const0> ;
  assign s_axi_ruser[997] = \<const0> ;
  assign s_axi_ruser[996] = \<const0> ;
  assign s_axi_ruser[995] = \<const0> ;
  assign s_axi_ruser[994] = \<const0> ;
  assign s_axi_ruser[993] = \<const0> ;
  assign s_axi_ruser[992] = \<const0> ;
  assign s_axi_ruser[991] = \<const0> ;
  assign s_axi_ruser[990] = \<const0> ;
  assign s_axi_ruser[989] = \<const0> ;
  assign s_axi_ruser[988] = \<const0> ;
  assign s_axi_ruser[987] = \<const0> ;
  assign s_axi_ruser[986] = \<const0> ;
  assign s_axi_ruser[985] = \<const0> ;
  assign s_axi_ruser[984] = \<const0> ;
  assign s_axi_ruser[983] = \<const0> ;
  assign s_axi_ruser[982] = \<const0> ;
  assign s_axi_ruser[981] = \<const0> ;
  assign s_axi_ruser[980] = \<const0> ;
  assign s_axi_ruser[979] = \<const0> ;
  assign s_axi_ruser[978] = \<const0> ;
  assign s_axi_ruser[977] = \<const0> ;
  assign s_axi_ruser[976] = \<const0> ;
  assign s_axi_ruser[975] = \<const0> ;
  assign s_axi_ruser[974] = \<const0> ;
  assign s_axi_ruser[973] = \<const0> ;
  assign s_axi_ruser[972] = \<const0> ;
  assign s_axi_ruser[971] = \<const0> ;
  assign s_axi_ruser[970] = \<const0> ;
  assign s_axi_ruser[969] = \<const0> ;
  assign s_axi_ruser[968] = \<const0> ;
  assign s_axi_ruser[967] = \<const0> ;
  assign s_axi_ruser[966] = \<const0> ;
  assign s_axi_ruser[965] = \<const0> ;
  assign s_axi_ruser[964] = \<const0> ;
  assign s_axi_ruser[963] = \<const0> ;
  assign s_axi_ruser[962] = \<const0> ;
  assign s_axi_ruser[961] = \<const0> ;
  assign s_axi_ruser[960] = \<const0> ;
  assign s_axi_ruser[959] = \<const0> ;
  assign s_axi_ruser[958] = \<const0> ;
  assign s_axi_ruser[957] = \<const0> ;
  assign s_axi_ruser[956] = \<const0> ;
  assign s_axi_ruser[955] = \<const0> ;
  assign s_axi_ruser[954] = \<const0> ;
  assign s_axi_ruser[953] = \<const0> ;
  assign s_axi_ruser[952] = \<const0> ;
  assign s_axi_ruser[951] = \<const0> ;
  assign s_axi_ruser[950] = \<const0> ;
  assign s_axi_ruser[949] = \<const0> ;
  assign s_axi_ruser[948] = \<const0> ;
  assign s_axi_ruser[947] = \<const0> ;
  assign s_axi_ruser[946] = \<const0> ;
  assign s_axi_ruser[945] = \<const0> ;
  assign s_axi_ruser[944] = \<const0> ;
  assign s_axi_ruser[943] = \<const0> ;
  assign s_axi_ruser[942] = \<const0> ;
  assign s_axi_ruser[941] = \<const0> ;
  assign s_axi_ruser[940] = \<const0> ;
  assign s_axi_ruser[939] = \<const0> ;
  assign s_axi_ruser[938] = \<const0> ;
  assign s_axi_ruser[937] = \<const0> ;
  assign s_axi_ruser[936] = \<const0> ;
  assign s_axi_ruser[935] = \<const0> ;
  assign s_axi_ruser[934] = \<const0> ;
  assign s_axi_ruser[933] = \<const0> ;
  assign s_axi_ruser[932] = \<const0> ;
  assign s_axi_ruser[931] = \<const0> ;
  assign s_axi_ruser[930] = \<const0> ;
  assign s_axi_ruser[929] = \<const0> ;
  assign s_axi_ruser[928] = \<const0> ;
  assign s_axi_ruser[927] = \<const0> ;
  assign s_axi_ruser[926] = \<const0> ;
  assign s_axi_ruser[925] = \<const0> ;
  assign s_axi_ruser[924] = \<const0> ;
  assign s_axi_ruser[923] = \<const0> ;
  assign s_axi_ruser[922] = \<const0> ;
  assign s_axi_ruser[921] = \<const0> ;
  assign s_axi_ruser[920] = \<const0> ;
  assign s_axi_ruser[919] = \<const0> ;
  assign s_axi_ruser[918] = \<const0> ;
  assign s_axi_ruser[917] = \<const0> ;
  assign s_axi_ruser[916] = \<const0> ;
  assign s_axi_ruser[915] = \<const0> ;
  assign s_axi_ruser[914] = \<const0> ;
  assign s_axi_ruser[913] = \<const0> ;
  assign s_axi_ruser[912] = \<const0> ;
  assign s_axi_ruser[911] = \<const0> ;
  assign s_axi_ruser[910] = \<const0> ;
  assign s_axi_ruser[909] = \<const0> ;
  assign s_axi_ruser[908] = \<const0> ;
  assign s_axi_ruser[907] = \<const0> ;
  assign s_axi_ruser[906] = \<const0> ;
  assign s_axi_ruser[905] = \<const0> ;
  assign s_axi_ruser[904] = \<const0> ;
  assign s_axi_ruser[903] = \<const0> ;
  assign s_axi_ruser[902] = \<const0> ;
  assign s_axi_ruser[901] = \<const0> ;
  assign s_axi_ruser[900] = \<const0> ;
  assign s_axi_ruser[899] = \<const0> ;
  assign s_axi_ruser[898] = \<const0> ;
  assign s_axi_ruser[897] = \<const0> ;
  assign s_axi_ruser[896] = \<const0> ;
  assign s_axi_ruser[895] = \<const0> ;
  assign s_axi_ruser[894] = \<const0> ;
  assign s_axi_ruser[893] = \<const0> ;
  assign s_axi_ruser[892] = \<const0> ;
  assign s_axi_ruser[891] = \<const0> ;
  assign s_axi_ruser[890] = \<const0> ;
  assign s_axi_ruser[889] = \<const0> ;
  assign s_axi_ruser[888] = \<const0> ;
  assign s_axi_ruser[887] = \<const0> ;
  assign s_axi_ruser[886] = \<const0> ;
  assign s_axi_ruser[885] = \<const0> ;
  assign s_axi_ruser[884] = \<const0> ;
  assign s_axi_ruser[883] = \<const0> ;
  assign s_axi_ruser[882] = \<const0> ;
  assign s_axi_ruser[881] = \<const0> ;
  assign s_axi_ruser[880] = \<const0> ;
  assign s_axi_ruser[879] = \<const0> ;
  assign s_axi_ruser[878] = \<const0> ;
  assign s_axi_ruser[877] = \<const0> ;
  assign s_axi_ruser[876] = \<const0> ;
  assign s_axi_ruser[875] = \<const0> ;
  assign s_axi_ruser[874] = \<const0> ;
  assign s_axi_ruser[873] = \<const0> ;
  assign s_axi_ruser[872] = \<const0> ;
  assign s_axi_ruser[871] = \<const0> ;
  assign s_axi_ruser[870] = \<const0> ;
  assign s_axi_ruser[869] = \<const0> ;
  assign s_axi_ruser[868] = \<const0> ;
  assign s_axi_ruser[867] = \<const0> ;
  assign s_axi_ruser[866] = \<const0> ;
  assign s_axi_ruser[865] = \<const0> ;
  assign s_axi_ruser[864] = \<const0> ;
  assign s_axi_ruser[863] = \<const0> ;
  assign s_axi_ruser[862] = \<const0> ;
  assign s_axi_ruser[861] = \<const0> ;
  assign s_axi_ruser[860] = \<const0> ;
  assign s_axi_ruser[859] = \<const0> ;
  assign s_axi_ruser[858] = \<const0> ;
  assign s_axi_ruser[857] = \<const0> ;
  assign s_axi_ruser[856] = \<const0> ;
  assign s_axi_ruser[855] = \<const0> ;
  assign s_axi_ruser[854] = \<const0> ;
  assign s_axi_ruser[853] = \<const0> ;
  assign s_axi_ruser[852] = \<const0> ;
  assign s_axi_ruser[851] = \<const0> ;
  assign s_axi_ruser[850] = \<const0> ;
  assign s_axi_ruser[849] = \<const0> ;
  assign s_axi_ruser[848] = \<const0> ;
  assign s_axi_ruser[847] = \<const0> ;
  assign s_axi_ruser[846] = \<const0> ;
  assign s_axi_ruser[845] = \<const0> ;
  assign s_axi_ruser[844] = \<const0> ;
  assign s_axi_ruser[843] = \<const0> ;
  assign s_axi_ruser[842] = \<const0> ;
  assign s_axi_ruser[841] = \<const0> ;
  assign s_axi_ruser[840] = \<const0> ;
  assign s_axi_ruser[839] = \<const0> ;
  assign s_axi_ruser[838] = \<const0> ;
  assign s_axi_ruser[837] = \<const0> ;
  assign s_axi_ruser[836] = \<const0> ;
  assign s_axi_ruser[835] = \<const0> ;
  assign s_axi_ruser[834] = \<const0> ;
  assign s_axi_ruser[833] = \<const0> ;
  assign s_axi_ruser[832] = \<const0> ;
  assign s_axi_ruser[831] = \<const0> ;
  assign s_axi_ruser[830] = \<const0> ;
  assign s_axi_ruser[829] = \<const0> ;
  assign s_axi_ruser[828] = \<const0> ;
  assign s_axi_ruser[827] = \<const0> ;
  assign s_axi_ruser[826] = \<const0> ;
  assign s_axi_ruser[825] = \<const0> ;
  assign s_axi_ruser[824] = \<const0> ;
  assign s_axi_ruser[823] = \<const0> ;
  assign s_axi_ruser[822] = \<const0> ;
  assign s_axi_ruser[821] = \<const0> ;
  assign s_axi_ruser[820] = \<const0> ;
  assign s_axi_ruser[819] = \<const0> ;
  assign s_axi_ruser[818] = \<const0> ;
  assign s_axi_ruser[817] = \<const0> ;
  assign s_axi_ruser[816] = \<const0> ;
  assign s_axi_ruser[815] = \<const0> ;
  assign s_axi_ruser[814] = \<const0> ;
  assign s_axi_ruser[813] = \<const0> ;
  assign s_axi_ruser[812] = \<const0> ;
  assign s_axi_ruser[811] = \<const0> ;
  assign s_axi_ruser[810] = \<const0> ;
  assign s_axi_ruser[809] = \<const0> ;
  assign s_axi_ruser[808] = \<const0> ;
  assign s_axi_ruser[807] = \<const0> ;
  assign s_axi_ruser[806] = \<const0> ;
  assign s_axi_ruser[805] = \<const0> ;
  assign s_axi_ruser[804] = \<const0> ;
  assign s_axi_ruser[803] = \<const0> ;
  assign s_axi_ruser[802] = \<const0> ;
  assign s_axi_ruser[801] = \<const0> ;
  assign s_axi_ruser[800] = \<const0> ;
  assign s_axi_ruser[799] = \<const0> ;
  assign s_axi_ruser[798] = \<const0> ;
  assign s_axi_ruser[797] = \<const0> ;
  assign s_axi_ruser[796] = \<const0> ;
  assign s_axi_ruser[795] = \<const0> ;
  assign s_axi_ruser[794] = \<const0> ;
  assign s_axi_ruser[793] = \<const0> ;
  assign s_axi_ruser[792] = \<const0> ;
  assign s_axi_ruser[791] = \<const0> ;
  assign s_axi_ruser[790] = \<const0> ;
  assign s_axi_ruser[789] = \<const0> ;
  assign s_axi_ruser[788] = \<const0> ;
  assign s_axi_ruser[787] = \<const0> ;
  assign s_axi_ruser[786] = \<const0> ;
  assign s_axi_ruser[785] = \<const0> ;
  assign s_axi_ruser[784] = \<const0> ;
  assign s_axi_ruser[783] = \<const0> ;
  assign s_axi_ruser[782] = \<const0> ;
  assign s_axi_ruser[781] = \<const0> ;
  assign s_axi_ruser[780] = \<const0> ;
  assign s_axi_ruser[779] = \<const0> ;
  assign s_axi_ruser[778] = \<const0> ;
  assign s_axi_ruser[777] = \<const0> ;
  assign s_axi_ruser[776] = \<const0> ;
  assign s_axi_ruser[775] = \<const0> ;
  assign s_axi_ruser[774] = \<const0> ;
  assign s_axi_ruser[773] = \<const0> ;
  assign s_axi_ruser[772] = \<const0> ;
  assign s_axi_ruser[771] = \<const0> ;
  assign s_axi_ruser[770] = \<const0> ;
  assign s_axi_ruser[769] = \<const0> ;
  assign s_axi_ruser[768] = \<const0> ;
  assign s_axi_ruser[767] = \<const0> ;
  assign s_axi_ruser[766] = \<const0> ;
  assign s_axi_ruser[765] = \<const0> ;
  assign s_axi_ruser[764] = \<const0> ;
  assign s_axi_ruser[763] = \<const0> ;
  assign s_axi_ruser[762] = \<const0> ;
  assign s_axi_ruser[761] = \<const0> ;
  assign s_axi_ruser[760] = \<const0> ;
  assign s_axi_ruser[759] = \<const0> ;
  assign s_axi_ruser[758] = \<const0> ;
  assign s_axi_ruser[757] = \<const0> ;
  assign s_axi_ruser[756] = \<const0> ;
  assign s_axi_ruser[755] = \<const0> ;
  assign s_axi_ruser[754] = \<const0> ;
  assign s_axi_ruser[753] = \<const0> ;
  assign s_axi_ruser[752] = \<const0> ;
  assign s_axi_ruser[751] = \<const0> ;
  assign s_axi_ruser[750] = \<const0> ;
  assign s_axi_ruser[749] = \<const0> ;
  assign s_axi_ruser[748] = \<const0> ;
  assign s_axi_ruser[747] = \<const0> ;
  assign s_axi_ruser[746] = \<const0> ;
  assign s_axi_ruser[745] = \<const0> ;
  assign s_axi_ruser[744] = \<const0> ;
  assign s_axi_ruser[743] = \<const0> ;
  assign s_axi_ruser[742] = \<const0> ;
  assign s_axi_ruser[741] = \<const0> ;
  assign s_axi_ruser[740] = \<const0> ;
  assign s_axi_ruser[739] = \<const0> ;
  assign s_axi_ruser[738] = \<const0> ;
  assign s_axi_ruser[737] = \<const0> ;
  assign s_axi_ruser[736] = \<const0> ;
  assign s_axi_ruser[735] = \<const0> ;
  assign s_axi_ruser[734] = \<const0> ;
  assign s_axi_ruser[733] = \<const0> ;
  assign s_axi_ruser[732] = \<const0> ;
  assign s_axi_ruser[731] = \<const0> ;
  assign s_axi_ruser[730] = \<const0> ;
  assign s_axi_ruser[729] = \<const0> ;
  assign s_axi_ruser[728] = \<const0> ;
  assign s_axi_ruser[727] = \<const0> ;
  assign s_axi_ruser[726] = \<const0> ;
  assign s_axi_ruser[725] = \<const0> ;
  assign s_axi_ruser[724] = \<const0> ;
  assign s_axi_ruser[723] = \<const0> ;
  assign s_axi_ruser[722] = \<const0> ;
  assign s_axi_ruser[721] = \<const0> ;
  assign s_axi_ruser[720] = \<const0> ;
  assign s_axi_ruser[719] = \<const0> ;
  assign s_axi_ruser[718] = \<const0> ;
  assign s_axi_ruser[717] = \<const0> ;
  assign s_axi_ruser[716] = \<const0> ;
  assign s_axi_ruser[715] = \<const0> ;
  assign s_axi_ruser[714] = \<const0> ;
  assign s_axi_ruser[713] = \<const0> ;
  assign s_axi_ruser[712] = \<const0> ;
  assign s_axi_ruser[711] = \<const0> ;
  assign s_axi_ruser[710] = \<const0> ;
  assign s_axi_ruser[709] = \<const0> ;
  assign s_axi_ruser[708] = \<const0> ;
  assign s_axi_ruser[707] = \<const0> ;
  assign s_axi_ruser[706] = \<const0> ;
  assign s_axi_ruser[705] = \<const0> ;
  assign s_axi_ruser[704] = \<const0> ;
  assign s_axi_ruser[703] = \<const0> ;
  assign s_axi_ruser[702] = \<const0> ;
  assign s_axi_ruser[701] = \<const0> ;
  assign s_axi_ruser[700] = \<const0> ;
  assign s_axi_ruser[699] = \<const0> ;
  assign s_axi_ruser[698] = \<const0> ;
  assign s_axi_ruser[697] = \<const0> ;
  assign s_axi_ruser[696] = \<const0> ;
  assign s_axi_ruser[695] = \<const0> ;
  assign s_axi_ruser[694] = \<const0> ;
  assign s_axi_ruser[693] = \<const0> ;
  assign s_axi_ruser[692] = \<const0> ;
  assign s_axi_ruser[691] = \<const0> ;
  assign s_axi_ruser[690] = \<const0> ;
  assign s_axi_ruser[689] = \<const0> ;
  assign s_axi_ruser[688] = \<const0> ;
  assign s_axi_ruser[687] = \<const0> ;
  assign s_axi_ruser[686] = \<const0> ;
  assign s_axi_ruser[685] = \<const0> ;
  assign s_axi_ruser[684] = \<const0> ;
  assign s_axi_ruser[683] = \<const0> ;
  assign s_axi_ruser[682] = \<const0> ;
  assign s_axi_ruser[681] = \<const0> ;
  assign s_axi_ruser[680] = \<const0> ;
  assign s_axi_ruser[679] = \<const0> ;
  assign s_axi_ruser[678] = \<const0> ;
  assign s_axi_ruser[677] = \<const0> ;
  assign s_axi_ruser[676] = \<const0> ;
  assign s_axi_ruser[675] = \<const0> ;
  assign s_axi_ruser[674] = \<const0> ;
  assign s_axi_ruser[673] = \<const0> ;
  assign s_axi_ruser[672] = \<const0> ;
  assign s_axi_ruser[671] = \<const0> ;
  assign s_axi_ruser[670] = \<const0> ;
  assign s_axi_ruser[669] = \<const0> ;
  assign s_axi_ruser[668] = \<const0> ;
  assign s_axi_ruser[667] = \<const0> ;
  assign s_axi_ruser[666] = \<const0> ;
  assign s_axi_ruser[665] = \<const0> ;
  assign s_axi_ruser[664] = \<const0> ;
  assign s_axi_ruser[663] = \<const0> ;
  assign s_axi_ruser[662] = \<const0> ;
  assign s_axi_ruser[661] = \<const0> ;
  assign s_axi_ruser[660] = \<const0> ;
  assign s_axi_ruser[659] = \<const0> ;
  assign s_axi_ruser[658] = \<const0> ;
  assign s_axi_ruser[657] = \<const0> ;
  assign s_axi_ruser[656] = \<const0> ;
  assign s_axi_ruser[655] = \<const0> ;
  assign s_axi_ruser[654] = \<const0> ;
  assign s_axi_ruser[653] = \<const0> ;
  assign s_axi_ruser[652] = \<const0> ;
  assign s_axi_ruser[651] = \<const0> ;
  assign s_axi_ruser[650] = \<const0> ;
  assign s_axi_ruser[649] = \<const0> ;
  assign s_axi_ruser[648] = \<const0> ;
  assign s_axi_ruser[647] = \<const0> ;
  assign s_axi_ruser[646] = \<const0> ;
  assign s_axi_ruser[645] = \<const0> ;
  assign s_axi_ruser[644] = \<const0> ;
  assign s_axi_ruser[643] = \<const0> ;
  assign s_axi_ruser[642] = \<const0> ;
  assign s_axi_ruser[641] = \<const0> ;
  assign s_axi_ruser[640] = \<const0> ;
  assign s_axi_ruser[639] = \<const0> ;
  assign s_axi_ruser[638] = \<const0> ;
  assign s_axi_ruser[637] = \<const0> ;
  assign s_axi_ruser[636] = \<const0> ;
  assign s_axi_ruser[635] = \<const0> ;
  assign s_axi_ruser[634] = \<const0> ;
  assign s_axi_ruser[633] = \<const0> ;
  assign s_axi_ruser[632] = \<const0> ;
  assign s_axi_ruser[631] = \<const0> ;
  assign s_axi_ruser[630] = \<const0> ;
  assign s_axi_ruser[629] = \<const0> ;
  assign s_axi_ruser[628] = \<const0> ;
  assign s_axi_ruser[627] = \<const0> ;
  assign s_axi_ruser[626] = \<const0> ;
  assign s_axi_ruser[625] = \<const0> ;
  assign s_axi_ruser[624] = \<const0> ;
  assign s_axi_ruser[623] = \<const0> ;
  assign s_axi_ruser[622] = \<const0> ;
  assign s_axi_ruser[621] = \<const0> ;
  assign s_axi_ruser[620] = \<const0> ;
  assign s_axi_ruser[619] = \<const0> ;
  assign s_axi_ruser[618] = \<const0> ;
  assign s_axi_ruser[617] = \<const0> ;
  assign s_axi_ruser[616] = \<const0> ;
  assign s_axi_ruser[615] = \<const0> ;
  assign s_axi_ruser[614] = \<const0> ;
  assign s_axi_ruser[613] = \<const0> ;
  assign s_axi_ruser[612] = \<const0> ;
  assign s_axi_ruser[611] = \<const0> ;
  assign s_axi_ruser[610] = \<const0> ;
  assign s_axi_ruser[609] = \<const0> ;
  assign s_axi_ruser[608] = \<const0> ;
  assign s_axi_ruser[607] = \<const0> ;
  assign s_axi_ruser[606] = \<const0> ;
  assign s_axi_ruser[605] = \<const0> ;
  assign s_axi_ruser[604] = \<const0> ;
  assign s_axi_ruser[603] = \<const0> ;
  assign s_axi_ruser[602] = \<const0> ;
  assign s_axi_ruser[601] = \<const0> ;
  assign s_axi_ruser[600] = \<const0> ;
  assign s_axi_ruser[599] = \<const0> ;
  assign s_axi_ruser[598] = \<const0> ;
  assign s_axi_ruser[597] = \<const0> ;
  assign s_axi_ruser[596] = \<const0> ;
  assign s_axi_ruser[595] = \<const0> ;
  assign s_axi_ruser[594] = \<const0> ;
  assign s_axi_ruser[593] = \<const0> ;
  assign s_axi_ruser[592] = \<const0> ;
  assign s_axi_ruser[591] = \<const0> ;
  assign s_axi_ruser[590] = \<const0> ;
  assign s_axi_ruser[589] = \<const0> ;
  assign s_axi_ruser[588] = \<const0> ;
  assign s_axi_ruser[587] = \<const0> ;
  assign s_axi_ruser[586] = \<const0> ;
  assign s_axi_ruser[585] = \<const0> ;
  assign s_axi_ruser[584] = \<const0> ;
  assign s_axi_ruser[583] = \<const0> ;
  assign s_axi_ruser[582] = \<const0> ;
  assign s_axi_ruser[581] = \<const0> ;
  assign s_axi_ruser[580] = \<const0> ;
  assign s_axi_ruser[579] = \<const0> ;
  assign s_axi_ruser[578] = \<const0> ;
  assign s_axi_ruser[577] = \<const0> ;
  assign s_axi_ruser[576] = \<const0> ;
  assign s_axi_ruser[575] = \<const0> ;
  assign s_axi_ruser[574] = \<const0> ;
  assign s_axi_ruser[573] = \<const0> ;
  assign s_axi_ruser[572] = \<const0> ;
  assign s_axi_ruser[571] = \<const0> ;
  assign s_axi_ruser[570] = \<const0> ;
  assign s_axi_ruser[569] = \<const0> ;
  assign s_axi_ruser[568] = \<const0> ;
  assign s_axi_ruser[567] = \<const0> ;
  assign s_axi_ruser[566] = \<const0> ;
  assign s_axi_ruser[565] = \<const0> ;
  assign s_axi_ruser[564] = \<const0> ;
  assign s_axi_ruser[563] = \<const0> ;
  assign s_axi_ruser[562] = \<const0> ;
  assign s_axi_ruser[561] = \<const0> ;
  assign s_axi_ruser[560] = \<const0> ;
  assign s_axi_ruser[559] = \<const0> ;
  assign s_axi_ruser[558] = \<const0> ;
  assign s_axi_ruser[557] = \<const0> ;
  assign s_axi_ruser[556] = \<const0> ;
  assign s_axi_ruser[555] = \<const0> ;
  assign s_axi_ruser[554] = \<const0> ;
  assign s_axi_ruser[553] = \<const0> ;
  assign s_axi_ruser[552] = \<const0> ;
  assign s_axi_ruser[551] = \<const0> ;
  assign s_axi_ruser[550] = \<const0> ;
  assign s_axi_ruser[549] = \<const0> ;
  assign s_axi_ruser[548] = \<const0> ;
  assign s_axi_ruser[547] = \<const0> ;
  assign s_axi_ruser[546] = \<const0> ;
  assign s_axi_ruser[545] = \<const0> ;
  assign s_axi_ruser[544] = \<const0> ;
  assign s_axi_ruser[543] = \<const0> ;
  assign s_axi_ruser[542] = \<const0> ;
  assign s_axi_ruser[541] = \<const0> ;
  assign s_axi_ruser[540] = \<const0> ;
  assign s_axi_ruser[539] = \<const0> ;
  assign s_axi_ruser[538] = \<const0> ;
  assign s_axi_ruser[537] = \<const0> ;
  assign s_axi_ruser[536] = \<const0> ;
  assign s_axi_ruser[535] = \<const0> ;
  assign s_axi_ruser[534] = \<const0> ;
  assign s_axi_ruser[533] = \<const0> ;
  assign s_axi_ruser[532] = \<const0> ;
  assign s_axi_ruser[531] = \<const0> ;
  assign s_axi_ruser[530] = \<const0> ;
  assign s_axi_ruser[529] = \<const0> ;
  assign s_axi_ruser[528] = \<const0> ;
  assign s_axi_ruser[527] = \<const0> ;
  assign s_axi_ruser[526] = \<const0> ;
  assign s_axi_ruser[525] = \<const0> ;
  assign s_axi_ruser[524] = \<const0> ;
  assign s_axi_ruser[523] = \<const0> ;
  assign s_axi_ruser[522] = \<const0> ;
  assign s_axi_ruser[521] = \<const0> ;
  assign s_axi_ruser[520] = \<const0> ;
  assign s_axi_ruser[519] = \<const0> ;
  assign s_axi_ruser[518] = \<const0> ;
  assign s_axi_ruser[517] = \<const0> ;
  assign s_axi_ruser[516] = \<const0> ;
  assign s_axi_ruser[515] = \<const0> ;
  assign s_axi_ruser[514] = \<const0> ;
  assign s_axi_ruser[513] = \<const0> ;
  assign s_axi_ruser[512] = \<const0> ;
  assign s_axi_ruser[511] = \<const0> ;
  assign s_axi_ruser[510] = \<const0> ;
  assign s_axi_ruser[509] = \<const0> ;
  assign s_axi_ruser[508] = \<const0> ;
  assign s_axi_ruser[507] = \<const0> ;
  assign s_axi_ruser[506] = \<const0> ;
  assign s_axi_ruser[505] = \<const0> ;
  assign s_axi_ruser[504] = \<const0> ;
  assign s_axi_ruser[503] = \<const0> ;
  assign s_axi_ruser[502] = \<const0> ;
  assign s_axi_ruser[501] = \<const0> ;
  assign s_axi_ruser[500] = \<const0> ;
  assign s_axi_ruser[499] = \<const0> ;
  assign s_axi_ruser[498] = \<const0> ;
  assign s_axi_ruser[497] = \<const0> ;
  assign s_axi_ruser[496] = \<const0> ;
  assign s_axi_ruser[495] = \<const0> ;
  assign s_axi_ruser[494] = \<const0> ;
  assign s_axi_ruser[493] = \<const0> ;
  assign s_axi_ruser[492] = \<const0> ;
  assign s_axi_ruser[491] = \<const0> ;
  assign s_axi_ruser[490] = \<const0> ;
  assign s_axi_ruser[489] = \<const0> ;
  assign s_axi_ruser[488] = \<const0> ;
  assign s_axi_ruser[487] = \<const0> ;
  assign s_axi_ruser[486] = \<const0> ;
  assign s_axi_ruser[485] = \<const0> ;
  assign s_axi_ruser[484] = \<const0> ;
  assign s_axi_ruser[483] = \<const0> ;
  assign s_axi_ruser[482] = \<const0> ;
  assign s_axi_ruser[481] = \<const0> ;
  assign s_axi_ruser[480] = \<const0> ;
  assign s_axi_ruser[479] = \<const0> ;
  assign s_axi_ruser[478] = \<const0> ;
  assign s_axi_ruser[477] = \<const0> ;
  assign s_axi_ruser[476] = \<const0> ;
  assign s_axi_ruser[475] = \<const0> ;
  assign s_axi_ruser[474] = \<const0> ;
  assign s_axi_ruser[473] = \<const0> ;
  assign s_axi_ruser[472] = \<const0> ;
  assign s_axi_ruser[471] = \<const0> ;
  assign s_axi_ruser[470] = \<const0> ;
  assign s_axi_ruser[469] = \<const0> ;
  assign s_axi_ruser[468] = \<const0> ;
  assign s_axi_ruser[467] = \<const0> ;
  assign s_axi_ruser[466] = \<const0> ;
  assign s_axi_ruser[465] = \<const0> ;
  assign s_axi_ruser[464] = \<const0> ;
  assign s_axi_ruser[463] = \<const0> ;
  assign s_axi_ruser[462] = \<const0> ;
  assign s_axi_ruser[461] = \<const0> ;
  assign s_axi_ruser[460] = \<const0> ;
  assign s_axi_ruser[459] = \<const0> ;
  assign s_axi_ruser[458] = \<const0> ;
  assign s_axi_ruser[457] = \<const0> ;
  assign s_axi_ruser[456] = \<const0> ;
  assign s_axi_ruser[455] = \<const0> ;
  assign s_axi_ruser[454] = \<const0> ;
  assign s_axi_ruser[453] = \<const0> ;
  assign s_axi_ruser[452] = \<const0> ;
  assign s_axi_ruser[451] = \<const0> ;
  assign s_axi_ruser[450] = \<const0> ;
  assign s_axi_ruser[449] = \<const0> ;
  assign s_axi_ruser[448] = \<const0> ;
  assign s_axi_ruser[447] = \<const0> ;
  assign s_axi_ruser[446] = \<const0> ;
  assign s_axi_ruser[445] = \<const0> ;
  assign s_axi_ruser[444] = \<const0> ;
  assign s_axi_ruser[443] = \<const0> ;
  assign s_axi_ruser[442] = \<const0> ;
  assign s_axi_ruser[441] = \<const0> ;
  assign s_axi_ruser[440] = \<const0> ;
  assign s_axi_ruser[439] = \<const0> ;
  assign s_axi_ruser[438] = \<const0> ;
  assign s_axi_ruser[437] = \<const0> ;
  assign s_axi_ruser[436] = \<const0> ;
  assign s_axi_ruser[435] = \<const0> ;
  assign s_axi_ruser[434] = \<const0> ;
  assign s_axi_ruser[433] = \<const0> ;
  assign s_axi_ruser[432] = \<const0> ;
  assign s_axi_ruser[431] = \<const0> ;
  assign s_axi_ruser[430] = \<const0> ;
  assign s_axi_ruser[429] = \<const0> ;
  assign s_axi_ruser[428] = \<const0> ;
  assign s_axi_ruser[427] = \<const0> ;
  assign s_axi_ruser[426] = \<const0> ;
  assign s_axi_ruser[425] = \<const0> ;
  assign s_axi_ruser[424] = \<const0> ;
  assign s_axi_ruser[423] = \<const0> ;
  assign s_axi_ruser[422] = \<const0> ;
  assign s_axi_ruser[421] = \<const0> ;
  assign s_axi_ruser[420] = \<const0> ;
  assign s_axi_ruser[419] = \<const0> ;
  assign s_axi_ruser[418] = \<const0> ;
  assign s_axi_ruser[417] = \<const0> ;
  assign s_axi_ruser[416] = \<const0> ;
  assign s_axi_ruser[415] = \<const0> ;
  assign s_axi_ruser[414] = \<const0> ;
  assign s_axi_ruser[413] = \<const0> ;
  assign s_axi_ruser[412] = \<const0> ;
  assign s_axi_ruser[411] = \<const0> ;
  assign s_axi_ruser[410] = \<const0> ;
  assign s_axi_ruser[409] = \<const0> ;
  assign s_axi_ruser[408] = \<const0> ;
  assign s_axi_ruser[407] = \<const0> ;
  assign s_axi_ruser[406] = \<const0> ;
  assign s_axi_ruser[405] = \<const0> ;
  assign s_axi_ruser[404] = \<const0> ;
  assign s_axi_ruser[403] = \<const0> ;
  assign s_axi_ruser[402] = \<const0> ;
  assign s_axi_ruser[401] = \<const0> ;
  assign s_axi_ruser[400] = \<const0> ;
  assign s_axi_ruser[399] = \<const0> ;
  assign s_axi_ruser[398] = \<const0> ;
  assign s_axi_ruser[397] = \<const0> ;
  assign s_axi_ruser[396] = \<const0> ;
  assign s_axi_ruser[395] = \<const0> ;
  assign s_axi_ruser[394] = \<const0> ;
  assign s_axi_ruser[393] = \<const0> ;
  assign s_axi_ruser[392] = \<const0> ;
  assign s_axi_ruser[391] = \<const0> ;
  assign s_axi_ruser[390] = \<const0> ;
  assign s_axi_ruser[389] = \<const0> ;
  assign s_axi_ruser[388] = \<const0> ;
  assign s_axi_ruser[387] = \<const0> ;
  assign s_axi_ruser[386] = \<const0> ;
  assign s_axi_ruser[385] = \<const0> ;
  assign s_axi_ruser[384] = \<const0> ;
  assign s_axi_ruser[383] = \<const0> ;
  assign s_axi_ruser[382] = \<const0> ;
  assign s_axi_ruser[381] = \<const0> ;
  assign s_axi_ruser[380] = \<const0> ;
  assign s_axi_ruser[379] = \<const0> ;
  assign s_axi_ruser[378] = \<const0> ;
  assign s_axi_ruser[377] = \<const0> ;
  assign s_axi_ruser[376] = \<const0> ;
  assign s_axi_ruser[375] = \<const0> ;
  assign s_axi_ruser[374] = \<const0> ;
  assign s_axi_ruser[373] = \<const0> ;
  assign s_axi_ruser[372] = \<const0> ;
  assign s_axi_ruser[371] = \<const0> ;
  assign s_axi_ruser[370] = \<const0> ;
  assign s_axi_ruser[369] = \<const0> ;
  assign s_axi_ruser[368] = \<const0> ;
  assign s_axi_ruser[367] = \<const0> ;
  assign s_axi_ruser[366] = \<const0> ;
  assign s_axi_ruser[365] = \<const0> ;
  assign s_axi_ruser[364] = \<const0> ;
  assign s_axi_ruser[363] = \<const0> ;
  assign s_axi_ruser[362] = \<const0> ;
  assign s_axi_ruser[361] = \<const0> ;
  assign s_axi_ruser[360] = \<const0> ;
  assign s_axi_ruser[359] = \<const0> ;
  assign s_axi_ruser[358] = \<const0> ;
  assign s_axi_ruser[357] = \<const0> ;
  assign s_axi_ruser[356] = \<const0> ;
  assign s_axi_ruser[355] = \<const0> ;
  assign s_axi_ruser[354] = \<const0> ;
  assign s_axi_ruser[353] = \<const0> ;
  assign s_axi_ruser[352] = \<const0> ;
  assign s_axi_ruser[351] = \<const0> ;
  assign s_axi_ruser[350] = \<const0> ;
  assign s_axi_ruser[349] = \<const0> ;
  assign s_axi_ruser[348] = \<const0> ;
  assign s_axi_ruser[347] = \<const0> ;
  assign s_axi_ruser[346] = \<const0> ;
  assign s_axi_ruser[345] = \<const0> ;
  assign s_axi_ruser[344] = \<const0> ;
  assign s_axi_ruser[343] = \<const0> ;
  assign s_axi_ruser[342] = \<const0> ;
  assign s_axi_ruser[341] = \<const0> ;
  assign s_axi_ruser[340] = \<const0> ;
  assign s_axi_ruser[339] = \<const0> ;
  assign s_axi_ruser[338] = \<const0> ;
  assign s_axi_ruser[337] = \<const0> ;
  assign s_axi_ruser[336] = \<const0> ;
  assign s_axi_ruser[335] = \<const0> ;
  assign s_axi_ruser[334] = \<const0> ;
  assign s_axi_ruser[333] = \<const0> ;
  assign s_axi_ruser[332] = \<const0> ;
  assign s_axi_ruser[331] = \<const0> ;
  assign s_axi_ruser[330] = \<const0> ;
  assign s_axi_ruser[329] = \<const0> ;
  assign s_axi_ruser[328] = \<const0> ;
  assign s_axi_ruser[327] = \<const0> ;
  assign s_axi_ruser[326] = \<const0> ;
  assign s_axi_ruser[325] = \<const0> ;
  assign s_axi_ruser[324] = \<const0> ;
  assign s_axi_ruser[323] = \<const0> ;
  assign s_axi_ruser[322] = \<const0> ;
  assign s_axi_ruser[321] = \<const0> ;
  assign s_axi_ruser[320] = \<const0> ;
  assign s_axi_ruser[319] = \<const0> ;
  assign s_axi_ruser[318] = \<const0> ;
  assign s_axi_ruser[317] = \<const0> ;
  assign s_axi_ruser[316] = \<const0> ;
  assign s_axi_ruser[315] = \<const0> ;
  assign s_axi_ruser[314] = \<const0> ;
  assign s_axi_ruser[313] = \<const0> ;
  assign s_axi_ruser[312] = \<const0> ;
  assign s_axi_ruser[311] = \<const0> ;
  assign s_axi_ruser[310] = \<const0> ;
  assign s_axi_ruser[309] = \<const0> ;
  assign s_axi_ruser[308] = \<const0> ;
  assign s_axi_ruser[307] = \<const0> ;
  assign s_axi_ruser[306] = \<const0> ;
  assign s_axi_ruser[305] = \<const0> ;
  assign s_axi_ruser[304] = \<const0> ;
  assign s_axi_ruser[303] = \<const0> ;
  assign s_axi_ruser[302] = \<const0> ;
  assign s_axi_ruser[301] = \<const0> ;
  assign s_axi_ruser[300] = \<const0> ;
  assign s_axi_ruser[299] = \<const0> ;
  assign s_axi_ruser[298] = \<const0> ;
  assign s_axi_ruser[297] = \<const0> ;
  assign s_axi_ruser[296] = \<const0> ;
  assign s_axi_ruser[295] = \<const0> ;
  assign s_axi_ruser[294] = \<const0> ;
  assign s_axi_ruser[293] = \<const0> ;
  assign s_axi_ruser[292] = \<const0> ;
  assign s_axi_ruser[291] = \<const0> ;
  assign s_axi_ruser[290] = \<const0> ;
  assign s_axi_ruser[289] = \<const0> ;
  assign s_axi_ruser[288] = \<const0> ;
  assign s_axi_ruser[287] = \<const0> ;
  assign s_axi_ruser[286] = \<const0> ;
  assign s_axi_ruser[285] = \<const0> ;
  assign s_axi_ruser[284] = \<const0> ;
  assign s_axi_ruser[283] = \<const0> ;
  assign s_axi_ruser[282] = \<const0> ;
  assign s_axi_ruser[281] = \<const0> ;
  assign s_axi_ruser[280] = \<const0> ;
  assign s_axi_ruser[279] = \<const0> ;
  assign s_axi_ruser[278] = \<const0> ;
  assign s_axi_ruser[277] = \<const0> ;
  assign s_axi_ruser[276] = \<const0> ;
  assign s_axi_ruser[275] = \<const0> ;
  assign s_axi_ruser[274] = \<const0> ;
  assign s_axi_ruser[273] = \<const0> ;
  assign s_axi_ruser[272] = \<const0> ;
  assign s_axi_ruser[271] = \<const0> ;
  assign s_axi_ruser[270] = \<const0> ;
  assign s_axi_ruser[269] = \<const0> ;
  assign s_axi_ruser[268] = \<const0> ;
  assign s_axi_ruser[267] = \<const0> ;
  assign s_axi_ruser[266] = \<const0> ;
  assign s_axi_ruser[265] = \<const0> ;
  assign s_axi_ruser[264] = \<const0> ;
  assign s_axi_ruser[263] = \<const0> ;
  assign s_axi_ruser[262] = \<const0> ;
  assign s_axi_ruser[261] = \<const0> ;
  assign s_axi_ruser[260] = \<const0> ;
  assign s_axi_ruser[259] = \<const0> ;
  assign s_axi_ruser[258] = \<const0> ;
  assign s_axi_ruser[257] = \<const0> ;
  assign s_axi_ruser[256] = \<const0> ;
  assign s_axi_ruser[255] = \<const0> ;
  assign s_axi_ruser[254] = \<const0> ;
  assign s_axi_ruser[253] = \<const0> ;
  assign s_axi_ruser[252] = \<const0> ;
  assign s_axi_ruser[251] = \<const0> ;
  assign s_axi_ruser[250] = \<const0> ;
  assign s_axi_ruser[249] = \<const0> ;
  assign s_axi_ruser[248] = \<const0> ;
  assign s_axi_ruser[247] = \<const0> ;
  assign s_axi_ruser[246] = \<const0> ;
  assign s_axi_ruser[245] = \<const0> ;
  assign s_axi_ruser[244] = \<const0> ;
  assign s_axi_ruser[243] = \<const0> ;
  assign s_axi_ruser[242] = \<const0> ;
  assign s_axi_ruser[241] = \<const0> ;
  assign s_axi_ruser[240] = \<const0> ;
  assign s_axi_ruser[239] = \<const0> ;
  assign s_axi_ruser[238] = \<const0> ;
  assign s_axi_ruser[237] = \<const0> ;
  assign s_axi_ruser[236] = \<const0> ;
  assign s_axi_ruser[235] = \<const0> ;
  assign s_axi_ruser[234] = \<const0> ;
  assign s_axi_ruser[233] = \<const0> ;
  assign s_axi_ruser[232] = \<const0> ;
  assign s_axi_ruser[231] = \<const0> ;
  assign s_axi_ruser[230] = \<const0> ;
  assign s_axi_ruser[229] = \<const0> ;
  assign s_axi_ruser[228] = \<const0> ;
  assign s_axi_ruser[227] = \<const0> ;
  assign s_axi_ruser[226] = \<const0> ;
  assign s_axi_ruser[225] = \<const0> ;
  assign s_axi_ruser[224] = \<const0> ;
  assign s_axi_ruser[223] = \<const0> ;
  assign s_axi_ruser[222] = \<const0> ;
  assign s_axi_ruser[221] = \<const0> ;
  assign s_axi_ruser[220] = \<const0> ;
  assign s_axi_ruser[219] = \<const0> ;
  assign s_axi_ruser[218] = \<const0> ;
  assign s_axi_ruser[217] = \<const0> ;
  assign s_axi_ruser[216] = \<const0> ;
  assign s_axi_ruser[215] = \<const0> ;
  assign s_axi_ruser[214] = \<const0> ;
  assign s_axi_ruser[213] = \<const0> ;
  assign s_axi_ruser[212] = \<const0> ;
  assign s_axi_ruser[211] = \<const0> ;
  assign s_axi_ruser[210] = \<const0> ;
  assign s_axi_ruser[209] = \<const0> ;
  assign s_axi_ruser[208] = \<const0> ;
  assign s_axi_ruser[207] = \<const0> ;
  assign s_axi_ruser[206] = \<const0> ;
  assign s_axi_ruser[205] = \<const0> ;
  assign s_axi_ruser[204] = \<const0> ;
  assign s_axi_ruser[203] = \<const0> ;
  assign s_axi_ruser[202] = \<const0> ;
  assign s_axi_ruser[201] = \<const0> ;
  assign s_axi_ruser[200] = \<const0> ;
  assign s_axi_ruser[199] = \<const0> ;
  assign s_axi_ruser[198] = \<const0> ;
  assign s_axi_ruser[197] = \<const0> ;
  assign s_axi_ruser[196] = \<const0> ;
  assign s_axi_ruser[195] = \<const0> ;
  assign s_axi_ruser[194] = \<const0> ;
  assign s_axi_ruser[193] = \<const0> ;
  assign s_axi_ruser[192] = \<const0> ;
  assign s_axi_ruser[191] = \<const0> ;
  assign s_axi_ruser[190] = \<const0> ;
  assign s_axi_ruser[189] = \<const0> ;
  assign s_axi_ruser[188] = \<const0> ;
  assign s_axi_ruser[187] = \<const0> ;
  assign s_axi_ruser[186] = \<const0> ;
  assign s_axi_ruser[185] = \<const0> ;
  assign s_axi_ruser[184] = \<const0> ;
  assign s_axi_ruser[183] = \<const0> ;
  assign s_axi_ruser[182] = \<const0> ;
  assign s_axi_ruser[181] = \<const0> ;
  assign s_axi_ruser[180] = \<const0> ;
  assign s_axi_ruser[179] = \<const0> ;
  assign s_axi_ruser[178] = \<const0> ;
  assign s_axi_ruser[177] = \<const0> ;
  assign s_axi_ruser[176] = \<const0> ;
  assign s_axi_ruser[175] = \<const0> ;
  assign s_axi_ruser[174] = \<const0> ;
  assign s_axi_ruser[173] = \<const0> ;
  assign s_axi_ruser[172] = \<const0> ;
  assign s_axi_ruser[171] = \<const0> ;
  assign s_axi_ruser[170] = \<const0> ;
  assign s_axi_ruser[169] = \<const0> ;
  assign s_axi_ruser[168] = \<const0> ;
  assign s_axi_ruser[167] = \<const0> ;
  assign s_axi_ruser[166] = \<const0> ;
  assign s_axi_ruser[165] = \<const0> ;
  assign s_axi_ruser[164] = \<const0> ;
  assign s_axi_ruser[163] = \<const0> ;
  assign s_axi_ruser[162] = \<const0> ;
  assign s_axi_ruser[161] = \<const0> ;
  assign s_axi_ruser[160] = \<const0> ;
  assign s_axi_ruser[159] = \<const0> ;
  assign s_axi_ruser[158] = \<const0> ;
  assign s_axi_ruser[157] = \<const0> ;
  assign s_axi_ruser[156] = \<const0> ;
  assign s_axi_ruser[155] = \<const0> ;
  assign s_axi_ruser[154] = \<const0> ;
  assign s_axi_ruser[153] = \<const0> ;
  assign s_axi_ruser[152] = \<const0> ;
  assign s_axi_ruser[151] = \<const0> ;
  assign s_axi_ruser[150] = \<const0> ;
  assign s_axi_ruser[149] = \<const0> ;
  assign s_axi_ruser[148] = \<const0> ;
  assign s_axi_ruser[147] = \<const0> ;
  assign s_axi_ruser[146] = \<const0> ;
  assign s_axi_ruser[145] = \<const0> ;
  assign s_axi_ruser[144] = \<const0> ;
  assign s_axi_ruser[143] = \<const0> ;
  assign s_axi_ruser[142] = \<const0> ;
  assign s_axi_ruser[141] = \<const0> ;
  assign s_axi_ruser[140] = \<const0> ;
  assign s_axi_ruser[139] = \<const0> ;
  assign s_axi_ruser[138] = \<const0> ;
  assign s_axi_ruser[137] = \<const0> ;
  assign s_axi_ruser[136] = \<const0> ;
  assign s_axi_ruser[135] = \<const0> ;
  assign s_axi_ruser[134] = \<const0> ;
  assign s_axi_ruser[133] = \<const0> ;
  assign s_axi_ruser[132] = \<const0> ;
  assign s_axi_ruser[131] = \<const0> ;
  assign s_axi_ruser[130] = \<const0> ;
  assign s_axi_ruser[129] = \<const0> ;
  assign s_axi_ruser[128] = \<const0> ;
  assign s_axi_ruser[127] = \<const0> ;
  assign s_axi_ruser[126] = \<const0> ;
  assign s_axi_ruser[125] = \<const0> ;
  assign s_axi_ruser[124] = \<const0> ;
  assign s_axi_ruser[123] = \<const0> ;
  assign s_axi_ruser[122] = \<const0> ;
  assign s_axi_ruser[121] = \<const0> ;
  assign s_axi_ruser[120] = \<const0> ;
  assign s_axi_ruser[119] = \<const0> ;
  assign s_axi_ruser[118] = \<const0> ;
  assign s_axi_ruser[117] = \<const0> ;
  assign s_axi_ruser[116] = \<const0> ;
  assign s_axi_ruser[115] = \<const0> ;
  assign s_axi_ruser[114] = \<const0> ;
  assign s_axi_ruser[113] = \<const0> ;
  assign s_axi_ruser[112] = \<const0> ;
  assign s_axi_ruser[111] = \<const0> ;
  assign s_axi_ruser[110] = \<const0> ;
  assign s_axi_ruser[109] = \<const0> ;
  assign s_axi_ruser[108] = \<const0> ;
  assign s_axi_ruser[107] = \<const0> ;
  assign s_axi_ruser[106] = \<const0> ;
  assign s_axi_ruser[105] = \<const0> ;
  assign s_axi_ruser[104] = \<const0> ;
  assign s_axi_ruser[103] = \<const0> ;
  assign s_axi_ruser[102] = \<const0> ;
  assign s_axi_ruser[101] = \<const0> ;
  assign s_axi_ruser[100] = \<const0> ;
  assign s_axi_ruser[99] = \<const0> ;
  assign s_axi_ruser[98] = \<const0> ;
  assign s_axi_ruser[97] = \<const0> ;
  assign s_axi_ruser[96] = \<const0> ;
  assign s_axi_ruser[95] = \<const0> ;
  assign s_axi_ruser[94] = \<const0> ;
  assign s_axi_ruser[93] = \<const0> ;
  assign s_axi_ruser[92] = \<const0> ;
  assign s_axi_ruser[91] = \<const0> ;
  assign s_axi_ruser[90] = \<const0> ;
  assign s_axi_ruser[89] = \<const0> ;
  assign s_axi_ruser[88] = \<const0> ;
  assign s_axi_ruser[87] = \<const0> ;
  assign s_axi_ruser[86] = \<const0> ;
  assign s_axi_ruser[85] = \<const0> ;
  assign s_axi_ruser[84] = \<const0> ;
  assign s_axi_ruser[83] = \<const0> ;
  assign s_axi_ruser[82] = \<const0> ;
  assign s_axi_ruser[81] = \<const0> ;
  assign s_axi_ruser[80] = \<const0> ;
  assign s_axi_ruser[79] = \<const0> ;
  assign s_axi_ruser[78] = \<const0> ;
  assign s_axi_ruser[77] = \<const0> ;
  assign s_axi_ruser[76] = \<const0> ;
  assign s_axi_ruser[75] = \<const0> ;
  assign s_axi_ruser[74] = \<const0> ;
  assign s_axi_ruser[73] = \<const0> ;
  assign s_axi_ruser[72] = \<const0> ;
  assign s_axi_ruser[71] = \<const0> ;
  assign s_axi_ruser[70] = \<const0> ;
  assign s_axi_ruser[69] = \<const0> ;
  assign s_axi_ruser[68] = \<const0> ;
  assign s_axi_ruser[67] = \<const0> ;
  assign s_axi_ruser[66] = \<const0> ;
  assign s_axi_ruser[65] = \<const0> ;
  assign s_axi_ruser[64] = \<const0> ;
  assign s_axi_ruser[63] = \<const0> ;
  assign s_axi_ruser[62] = \<const0> ;
  assign s_axi_ruser[61] = \<const0> ;
  assign s_axi_ruser[60] = \<const0> ;
  assign s_axi_ruser[59] = \<const0> ;
  assign s_axi_ruser[58] = \<const0> ;
  assign s_axi_ruser[57] = \<const0> ;
  assign s_axi_ruser[56] = \<const0> ;
  assign s_axi_ruser[55] = \<const0> ;
  assign s_axi_ruser[54] = \<const0> ;
  assign s_axi_ruser[53] = \<const0> ;
  assign s_axi_ruser[52] = \<const0> ;
  assign s_axi_ruser[51] = \<const0> ;
  assign s_axi_ruser[50] = \<const0> ;
  assign s_axi_ruser[49] = \<const0> ;
  assign s_axi_ruser[48] = \<const0> ;
  assign s_axi_ruser[47] = \<const0> ;
  assign s_axi_ruser[46] = \<const0> ;
  assign s_axi_ruser[45] = \<const0> ;
  assign s_axi_ruser[44] = \<const0> ;
  assign s_axi_ruser[43] = \<const0> ;
  assign s_axi_ruser[42] = \<const0> ;
  assign s_axi_ruser[41] = \<const0> ;
  assign s_axi_ruser[40] = \<const0> ;
  assign s_axi_ruser[39] = \<const0> ;
  assign s_axi_ruser[38] = \<const0> ;
  assign s_axi_ruser[37] = \<const0> ;
  assign s_axi_ruser[36] = \<const0> ;
  assign s_axi_ruser[35] = \<const0> ;
  assign s_axi_ruser[34] = \<const0> ;
  assign s_axi_ruser[33] = \<const0> ;
  assign s_axi_ruser[32] = \<const0> ;
  assign s_axi_ruser[31] = \<const0> ;
  assign s_axi_ruser[30] = \<const0> ;
  assign s_axi_ruser[29] = \<const0> ;
  assign s_axi_ruser[28] = \<const0> ;
  assign s_axi_ruser[27] = \<const0> ;
  assign s_axi_ruser[26] = \<const0> ;
  assign s_axi_ruser[25] = \<const0> ;
  assign s_axi_ruser[24] = \<const0> ;
  assign s_axi_ruser[23] = \<const0> ;
  assign s_axi_ruser[22] = \<const0> ;
  assign s_axi_ruser[21] = \<const0> ;
  assign s_axi_ruser[20] = \<const0> ;
  assign s_axi_ruser[19] = \<const0> ;
  assign s_axi_ruser[18] = \<const0> ;
  assign s_axi_ruser[17] = \<const0> ;
  assign s_axi_ruser[16] = \<const0> ;
  assign s_axi_ruser[15] = \<const0> ;
  assign s_axi_ruser[14] = \<const0> ;
  assign s_axi_ruser[13] = \<const0> ;
  assign s_axi_ruser[12] = \<const0> ;
  assign s_axi_ruser[11] = \<const0> ;
  assign s_axi_ruser[10] = \<const0> ;
  assign s_axi_ruser[9] = \<const0> ;
  assign s_axi_ruser[8] = \<const0> ;
  assign s_axi_ruser[7] = \<const0> ;
  assign s_axi_ruser[6] = \<const0> ;
  assign s_axi_ruser[5] = \<const0> ;
  assign s_axi_ruser[4] = \<const0> ;
  assign s_axi_ruser[3] = \<const0> ;
  assign s_axi_ruser[2] = \<const0> ;
  assign s_axi_ruser[1] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    areset_i_1
       (.I0(\aresetn_d_reg_n_0_[0] ),
        .O(areset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_reg
       (.C(aclk),
        .CE(1'b1),
        .D(areset_i_1_n_0),
        .Q(areset),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(aresetn),
        .Q(\aresetn_d_reg_n_0_[0] ),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_62 aw_reg
       (.D({exit_awcache,exit_awqos,exit_awprot,exit_awlen,exit_awaddr}),
        .\M00_AXI_awcache[3] ({m_axi_awcache,m_axi_awqos,m_axi_awprot,m_axi_awlen,m_axi_awaddr}),
        .M00_AXI_awvalid(m_axi_awvalid),
        .Q(S_AXI_AADDR_Q),
        .\S_AXI_ALEN_Q_reg[3] (\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/S_AXI_ALEN_Q ),
        .access_is_incr_q(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/access_is_incr_q ),
        .aclk(aclk),
        .areset(areset),
        .command_ongoing_reg(splitter_inst_n_88),
        .m_axi_awready(m_axi_awready),
        .\m_vector_i_reg[1064]_0 (aw_reg_n_2),
        .\m_vector_i_reg[1092]_0 ({aw_reg_n_3,aw_reg_n_4,aw_reg_n_5,aw_reg_n_6,aw_reg_n_7,aw_reg_n_8,aw_reg_n_9,aw_reg_n_10,aw_reg_n_11,aw_reg_n_12,aw_reg_n_13,aw_reg_n_14,aw_reg_n_15,aw_reg_n_16,aw_reg_n_17,aw_reg_n_18,aw_reg_n_19,aw_reg_n_20,aw_reg_n_21,aw_reg_n_22,aw_reg_n_23,aw_reg_n_24,aw_reg_n_25,aw_reg_n_26,aw_reg_n_27,aw_reg_n_28,aw_reg_n_29,aw_reg_n_30,aw_reg_n_31}),
        .mr_axi_awready(mr_axi_awready),
        .need_to_split_q(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/need_to_split_q ),
        .\pushed_commands_reg[0] (splitter_inst_n_93),
        .s_write_cmd_vacancy(s_write_cmd_vacancy),
        .\skid_buffer_reg[1092]_0 ({splitter_inst_n_52,splitter_inst_n_53,splitter_inst_n_54,splitter_inst_n_55,splitter_inst_n_56,splitter_inst_n_57,splitter_inst_n_58,splitter_inst_n_59,splitter_inst_n_60,splitter_inst_n_61,splitter_inst_n_62,splitter_inst_n_63,splitter_inst_n_64,splitter_inst_n_65,splitter_inst_n_66,splitter_inst_n_67,splitter_inst_n_68,splitter_inst_n_69,splitter_inst_n_70,splitter_inst_n_71,splitter_inst_n_72,splitter_inst_n_73,splitter_inst_n_74,splitter_inst_n_75,splitter_inst_n_76,splitter_inst_n_77,splitter_inst_n_78,splitter_inst_n_79,splitter_inst_n_80}),
        .split_ongoing(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/split_ongoing ));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_63 b_reg
       (.M00_AXI_bready(m_axi_bready),
        .aclk(aclk),
        .areset(areset),
        .exit_bready(exit_bready),
        .\fifoaddr_reg[2] (b_reg_n_2),
        .\gen_pipelined.mesg_reg_reg[4] (splitter_inst_n_84),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .mr_bvector(mr_bvector),
        .s_axi_bready(s_axi_bready),
        .s_axi_bvalid(s_axi_bvalid));
  ADC_axi_smc_0_sc_exit_v1_0_6_exit exit_inst
       (.Q(exit_awid),
        .aclk(aclk),
        .areset(areset),
        .cmd_push_block_reg(splitter_inst_n_87),
        .cmd_push_block_reg_0(splitter_inst_n_86),
        .exit_bready(exit_bready),
        .s_axi_bid(s_axi_bid),
        .s_axi_buser(\^s_axi_buser ),
        .s_write_cmd_vacancy(s_write_cmd_vacancy));
  ADC_axi_smc_0_sc_exit_v1_0_6_splitter splitter_inst
       (.D({exit_awcache,exit_awqos,exit_awprot,exit_awlen,exit_awaddr}),
        .E(exit_bready),
        .Q(S_AXI_AADDR_Q),
        .\S_AXI_ALEN_Q_reg[0] (s_axi_awready),
        .\USE_WRITE.wr_cmd_valid (\gen_axi3.axi3_conv_inst/USE_WRITE.wr_cmd_valid ),
        .access_is_incr_q(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/access_is_incr_q ),
        .aclk(aclk),
        .areset(areset),
        .cmd_push_block_reg(splitter_inst_n_88),
        .\fifoaddr_reg[1] (splitter_inst_n_87),
        .first_mi_word_reg(exit_wlast),
        .\gen_pipelined.mesg_reg_reg[2] (exit_awid),
        .\gen_pipelined.mesg_reg_reg[3] (\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/S_AXI_ALEN_Q ),
        .\gen_pipelined.mesg_reg_reg[3]_0 (splitter_inst_n_93),
        .\gen_pipelined.state_reg[1] (splitter_inst_n_86),
        .\m_vector_i_reg[1092] ({splitter_inst_n_52,splitter_inst_n_53,splitter_inst_n_54,splitter_inst_n_55,splitter_inst_n_56,splitter_inst_n_57,splitter_inst_n_58,splitter_inst_n_59,splitter_inst_n_60,splitter_inst_n_61,splitter_inst_n_62,splitter_inst_n_63,splitter_inst_n_64,splitter_inst_n_65,splitter_inst_n_66,splitter_inst_n_67,splitter_inst_n_68,splitter_inst_n_69,splitter_inst_n_70,splitter_inst_n_71,splitter_inst_n_72,splitter_inst_n_73,splitter_inst_n_74,splitter_inst_n_75,splitter_inst_n_76,splitter_inst_n_77,splitter_inst_n_78,splitter_inst_n_79,splitter_inst_n_80}),
        .mr_axi_awready(mr_axi_awready),
        .mr_axi_wready(mr_axi_wready),
        .mr_bvector(mr_bvector),
        .need_to_split_q(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/need_to_split_q ),
        .\repeat_cnt_reg[3] (splitter_inst_n_84),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_wvalid(s_axi_wvalid),
        .s_write_cmd_vacancy(s_write_cmd_vacancy),
        .\skid_buffer_reg[1092] ({aw_reg_n_3,aw_reg_n_4,aw_reg_n_5,aw_reg_n_6,aw_reg_n_7,aw_reg_n_8,aw_reg_n_9,aw_reg_n_10,aw_reg_n_11,aw_reg_n_12,aw_reg_n_13,aw_reg_n_14,aw_reg_n_15,aw_reg_n_16,aw_reg_n_17,aw_reg_n_18,aw_reg_n_19,aw_reg_n_20,aw_reg_n_21,aw_reg_n_22,aw_reg_n_23,aw_reg_n_24,aw_reg_n_25,aw_reg_n_26,aw_reg_n_27,aw_reg_n_28,aw_reg_n_29,aw_reg_n_30,aw_reg_n_31}),
        .split_ongoing(\gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/split_ongoing ),
        .\state_reg[m_valid_i] (aw_reg_n_2),
        .\state_reg[m_valid_i]_0 (b_reg_n_2),
        .\state_reg[s_ready_i] (s_axi_wready));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_64 w_reg
       (.D({s_axi_wstrb,s_axi_wdata,exit_wlast}),
        .M00_AXI_wvalid(m_axi_wvalid),
        .Q({m_axi_wstrb,m_axi_wdata,m_axi_wlast}),
        .\USE_WRITE.wr_cmd_valid (\gen_axi3.axi3_conv_inst/USE_WRITE.wr_cmd_valid ),
        .aclk(aclk),
        .areset(areset),
        .m_axi_wready(m_axi_wready),
        .mr_axi_wready(mr_axi_wready),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "sc_exit_v1_0_6_w_axi3_conv" *) 
module ADC_axi_smc_0_sc_exit_v1_0_6_w_axi3_conv
   (first_mi_word_reg_0,
    \gen_pipelined.mesg_reg_reg[3] ,
    areset,
    \state_reg[s_ready_i] ,
    aclk,
    \gen_pipelined.mesg_reg_reg[3]_0 ,
    \gen_pipelined.state_reg[1] ,
    s_axi_wvalid,
    mr_axi_wready);
  output [0:0]first_mi_word_reg_0;
  output \gen_pipelined.mesg_reg_reg[3] ;
  input areset;
  input \state_reg[s_ready_i] ;
  input aclk;
  input [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  input \gen_pipelined.state_reg[1] ;
  input s_axi_wvalid;
  input mr_axi_wready;

  wire aclk;
  wire areset;
  wire first_mi_word;
  wire [0:0]first_mi_word_reg_0;
  wire \gen_pipelined.mesg_reg_reg[3] ;
  wire [3:0]\gen_pipelined.mesg_reg_reg[3]_0 ;
  wire \gen_pipelined.state[2]_i_4_n_0 ;
  wire \gen_pipelined.state[2]_i_5_n_0 ;
  wire \gen_pipelined.state[2]_i_6_n_0 ;
  wire \gen_pipelined.state_reg[1] ;
  wire \length_counter_1[0]_i_1_n_0 ;
  wire \length_counter_1[1]_i_1_n_0 ;
  wire \length_counter_1[2]_i_1_n_0 ;
  wire \length_counter_1[2]_i_2_n_0 ;
  wire \length_counter_1[3]_i_1_n_0 ;
  wire \length_counter_1[3]_i_2_n_0 ;
  wire \length_counter_1[4]_i_1_n_0 ;
  wire \length_counter_1[5]_i_1_n_0 ;
  wire \length_counter_1[6]_i_1_n_0 ;
  wire \length_counter_1[7]_i_1_n_0 ;
  wire \length_counter_1[7]_i_2_n_0 ;
  wire \length_counter_1[7]_i_3_n_0 ;
  wire [7:0]length_counter_1_reg;
  wire mr_axi_wready;
  wire s_axi_wvalid;
  wire \skid_buffer[1024]_i_2_n_0 ;
  wire \state_reg[s_ready_i] ;

  FDSE first_mi_word_reg
       (.C(aclk),
        .CE(\state_reg[s_ready_i] ),
        .D(first_mi_word_reg_0),
        .Q(first_mi_word),
        .S(areset));
  LUT5 #(
    .INIT(32'hFDFFFFFF)) 
    \gen_pipelined.state[2]_i_2 
       (.I0(\length_counter_1[3]_i_2_n_0 ),
        .I1(\gen_pipelined.state[2]_i_4_n_0 ),
        .I2(\gen_pipelined.state[2]_i_5_n_0 ),
        .I3(\state_reg[s_ready_i] ),
        .I4(\gen_pipelined.state[2]_i_6_n_0 ),
        .O(\gen_pipelined.mesg_reg_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_pipelined.state[2]_i_4 
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg[2]),
        .O(\gen_pipelined.state[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_pipelined.state[2]_i_5 
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 [3]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg[3]),
        .O(\gen_pipelined.state[2]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFF00FF01)) 
    \gen_pipelined.state[2]_i_6 
       (.I0(length_counter_1_reg[4]),
        .I1(length_counter_1_reg[5]),
        .I2(length_counter_1_reg[7]),
        .I3(first_mi_word),
        .I4(length_counter_1_reg[6]),
        .O(\gen_pipelined.state[2]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \length_counter_1[0]_i_1 
       (.I0(length_counter_1_reg[0]),
        .I1(first_mi_word),
        .I2(\gen_pipelined.mesg_reg_reg[3]_0 [0]),
        .O(\length_counter_1[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \length_counter_1[1]_i_1 
       (.I0(length_counter_1_reg[0]),
        .I1(\gen_pipelined.mesg_reg_reg[3]_0 [0]),
        .I2(length_counter_1_reg[1]),
        .I3(first_mi_word),
        .I4(\gen_pipelined.mesg_reg_reg[3]_0 [1]),
        .O(\length_counter_1[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \length_counter_1[2]_i_1 
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 [1]),
        .I1(length_counter_1_reg[1]),
        .I2(\length_counter_1[2]_i_2_n_0 ),
        .I3(length_counter_1_reg[2]),
        .I4(first_mi_word),
        .I5(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .O(\length_counter_1[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \length_counter_1[2]_i_2 
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 [0]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg[0]),
        .O(\length_counter_1[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB88B7447B8B8B8B8)) 
    \length_counter_1[3]_i_1 
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 [3]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg[3]),
        .I3(length_counter_1_reg[2]),
        .I4(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .I5(\length_counter_1[3]_i_2_n_0 ),
        .O(\length_counter_1[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \length_counter_1[3]_i_2 
       (.I0(length_counter_1_reg[0]),
        .I1(\gen_pipelined.mesg_reg_reg[3]_0 [0]),
        .I2(length_counter_1_reg[1]),
        .I3(first_mi_word),
        .I4(\gen_pipelined.mesg_reg_reg[3]_0 [1]),
        .O(\length_counter_1[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2AAAAAAAEAAA6AAA)) 
    \length_counter_1[4]_i_1 
       (.I0(length_counter_1_reg[4]),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(s_axi_wvalid),
        .I3(mr_axi_wready),
        .I4(first_mi_word),
        .I5(\skid_buffer[1024]_i_2_n_0 ),
        .O(\length_counter_1[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h7F6F4050)) 
    \length_counter_1[5]_i_1 
       (.I0(\skid_buffer[1024]_i_2_n_0 ),
        .I1(first_mi_word),
        .I2(\state_reg[s_ready_i] ),
        .I3(length_counter_1_reg[4]),
        .I4(length_counter_1_reg[5]),
        .O(\length_counter_1[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0F0FFE01FF00FF00)) 
    \length_counter_1[6]_i_1 
       (.I0(length_counter_1_reg[5]),
        .I1(length_counter_1_reg[4]),
        .I2(\skid_buffer[1024]_i_2_n_0 ),
        .I3(length_counter_1_reg[6]),
        .I4(first_mi_word),
        .I5(\state_reg[s_ready_i] ),
        .O(\length_counter_1[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h4B4BCCC3)) 
    \length_counter_1[7]_i_1 
       (.I0(\state_reg[s_ready_i] ),
        .I1(length_counter_1_reg[7]),
        .I2(\length_counter_1[7]_i_2_n_0 ),
        .I3(length_counter_1_reg[6]),
        .I4(first_mi_word),
        .O(\length_counter_1[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAFAE)) 
    \length_counter_1[7]_i_2 
       (.I0(\length_counter_1[7]_i_3_n_0 ),
        .I1(length_counter_1_reg[4]),
        .I2(first_mi_word),
        .I3(length_counter_1_reg[5]),
        .O(\length_counter_1[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDDDFDFFFFFFFF)) 
    \length_counter_1[7]_i_3 
       (.I0(\state_reg[s_ready_i] ),
        .I1(\gen_pipelined.state[2]_i_5_n_0 ),
        .I2(length_counter_1_reg[2]),
        .I3(first_mi_word),
        .I4(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .I5(\length_counter_1[3]_i_2_n_0 ),
        .O(\length_counter_1[7]_i_3_n_0 ));
  FDRE \length_counter_1_reg[0] 
       (.C(aclk),
        .CE(\state_reg[s_ready_i] ),
        .D(\length_counter_1[0]_i_1_n_0 ),
        .Q(length_counter_1_reg[0]),
        .R(areset));
  FDRE \length_counter_1_reg[1] 
       (.C(aclk),
        .CE(\state_reg[s_ready_i] ),
        .D(\length_counter_1[1]_i_1_n_0 ),
        .Q(length_counter_1_reg[1]),
        .R(areset));
  FDRE \length_counter_1_reg[2] 
       (.C(aclk),
        .CE(\state_reg[s_ready_i] ),
        .D(\length_counter_1[2]_i_1_n_0 ),
        .Q(length_counter_1_reg[2]),
        .R(areset));
  FDRE \length_counter_1_reg[3] 
       (.C(aclk),
        .CE(\state_reg[s_ready_i] ),
        .D(\length_counter_1[3]_i_1_n_0 ),
        .Q(length_counter_1_reg[3]),
        .R(areset));
  FDRE \length_counter_1_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\length_counter_1[4]_i_1_n_0 ),
        .Q(length_counter_1_reg[4]),
        .R(areset));
  FDRE \length_counter_1_reg[5] 
       (.C(aclk),
        .CE(1'b1),
        .D(\length_counter_1[5]_i_1_n_0 ),
        .Q(length_counter_1_reg[5]),
        .R(areset));
  FDRE \length_counter_1_reg[6] 
       (.C(aclk),
        .CE(1'b1),
        .D(\length_counter_1[6]_i_1_n_0 ),
        .Q(length_counter_1_reg[6]),
        .R(areset));
  FDRE \length_counter_1_reg[7] 
       (.C(aclk),
        .CE(1'b1),
        .D(\length_counter_1[7]_i_1_n_0 ),
        .Q(length_counter_1_reg[7]),
        .R(areset));
  LUT6 #(
    .INIT(64'h00000000CCCCCCCD)) 
    \skid_buffer[1024]_i_1 
       (.I0(length_counter_1_reg[6]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg[7]),
        .I3(length_counter_1_reg[5]),
        .I4(length_counter_1_reg[4]),
        .I5(\skid_buffer[1024]_i_2_n_0 ),
        .O(first_mi_word_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFFF5DDDDFFF5)) 
    \skid_buffer[1024]_i_2 
       (.I0(\length_counter_1[3]_i_2_n_0 ),
        .I1(\gen_pipelined.mesg_reg_reg[3]_0 [2]),
        .I2(length_counter_1_reg[2]),
        .I3(length_counter_1_reg[3]),
        .I4(first_mi_word),
        .I5(\gen_pipelined.mesg_reg_reg[3]_0 [3]),
        .O(\skid_buffer[1024]_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_mmu_v1_0_5_decerr_slave" *) 
module ADC_axi_smc_0_sc_mmu_v1_0_5_decerr_slave
   (\gen_endpoint.err_awready ,
    \gen_endpoint.err_bvalid ,
    mr_axi_awready,
    mr_axi_bvalid,
    mr_axi_wready,
    areset,
    aclk,
    m_axi_awready,
    \gen_endpoint.w_state ,
    m_axi_bvalid,
    \gen_endpoint.w_enable_reg ,
    m_axi_wready,
    mr_axi_awvalid,
    Q,
    mr_axi_wvalid,
    \state_reg[m_valid_i] ,
    \state_reg[s_ready_i] ,
    \state_reg[m_valid_i]_0 );
  output \gen_endpoint.err_awready ;
  output \gen_endpoint.err_bvalid ;
  output mr_axi_awready;
  output mr_axi_bvalid;
  output mr_axi_wready;
  input areset;
  input aclk;
  input m_axi_awready;
  input [1:0]\gen_endpoint.w_state ;
  input m_axi_bvalid;
  input \gen_endpoint.w_enable_reg ;
  input m_axi_wready;
  input mr_axi_awvalid;
  input [0:0]Q;
  input mr_axi_wvalid;
  input \state_reg[m_valid_i] ;
  input \state_reg[s_ready_i] ;
  input \state_reg[m_valid_i]_0 ;

  wire [0:0]Q;
  wire aclk;
  wire areset;
  wire \gen_axi.gen_write.s_axi_awready_i_i_1_n_0 ;
  wire \gen_axi.gen_write.s_axi_bvalid_i_i_1_n_0 ;
  wire \gen_axi.gen_write.s_axi_bvalid_i_i_2_n_0 ;
  wire \gen_axi.gen_write.s_axi_wready_i11_out ;
  wire \gen_axi.gen_write.s_axi_wready_i_i_1_n_0 ;
  wire \gen_axi.gen_write.write_cs[0]_i_1_n_0 ;
  wire \gen_axi.gen_write.write_cs[1]_i_1_n_0 ;
  wire \gen_axi.gen_write.write_cs_reg_n_0_[0] ;
  wire \gen_axi.gen_write.write_cs_reg_n_0_[1] ;
  wire \gen_endpoint.err_awready ;
  wire \gen_endpoint.err_bvalid ;
  wire \gen_endpoint.err_wready ;
  wire \gen_endpoint.w_enable_reg ;
  wire [1:0]\gen_endpoint.w_state ;
  wire m_axi_awready;
  wire m_axi_bvalid;
  wire m_axi_wready;
  wire mr_axi_awready;
  wire mr_axi_awvalid;
  wire mr_axi_bvalid;
  wire mr_axi_wready;
  wire mr_axi_wvalid;
  wire \state_reg[m_valid_i] ;
  wire \state_reg[m_valid_i]_0 ;
  wire \state_reg[s_ready_i] ;

  LUT5 #(
    .INIT(32'hFFFA0C0A)) 
    \gen_axi.gen_write.s_axi_awready_i_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(\state_reg[s_ready_i] ),
        .I2(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I3(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .I4(\gen_endpoint.err_awready ),
        .O(\gen_axi.gen_write.s_axi_awready_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.gen_write.s_axi_awready_i_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_axi.gen_write.s_axi_awready_i_i_1_n_0 ),
        .Q(\gen_endpoint.err_awready ),
        .R(areset));
  LUT6 #(
    .INIT(64'hFFFFF777F0008000)) 
    \gen_axi.gen_write.s_axi_bvalid_i_i_1 
       (.I0(\state_reg[s_ready_i] ),
        .I1(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .I2(\gen_axi.gen_write.s_axi_bvalid_i_i_2_n_0 ),
        .I3(\state_reg[m_valid_i]_0 ),
        .I4(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I5(\gen_endpoint.err_bvalid ),
        .O(\gen_axi.gen_write.s_axi_bvalid_i_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \gen_axi.gen_write.s_axi_bvalid_i_i_2 
       (.I0(\gen_endpoint.w_state [1]),
        .I1(\gen_endpoint.w_state [0]),
        .I2(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .O(\gen_axi.gen_write.s_axi_bvalid_i_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.gen_write.s_axi_bvalid_i_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_axi.gen_write.s_axi_bvalid_i_i_1_n_0 ),
        .Q(\gen_endpoint.err_bvalid ),
        .R(areset));
  LUT4 #(
    .INIT(16'h1F10)) 
    \gen_axi.gen_write.s_axi_wready_i_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I2(\gen_axi.gen_write.s_axi_wready_i11_out ),
        .I3(\gen_endpoint.err_wready ),
        .O(\gen_axi.gen_write.s_axi_wready_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.gen_write.s_axi_wready_i_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_axi.gen_write.s_axi_wready_i_i_1_n_0 ),
        .Q(\gen_endpoint.err_wready ),
        .R(areset));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'h1C)) 
    \gen_axi.gen_write.write_cs[0]_i_1 
       (.I0(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .I1(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I2(\gen_axi.gen_write.s_axi_wready_i11_out ),
        .O(\gen_axi.gen_write.write_cs[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'hF0C4)) 
    \gen_axi.gen_write.write_cs[1]_i_1 
       (.I0(\state_reg[s_ready_i] ),
        .I1(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .I2(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I3(\gen_axi.gen_write.s_axi_wready_i11_out ),
        .O(\gen_axi.gen_write.write_cs[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAA80008000800080)) 
    \gen_axi.gen_write.write_cs[1]_i_2 
       (.I0(\gen_axi.gen_write.s_axi_bvalid_i_i_2_n_0 ),
        .I1(\gen_endpoint.err_awready ),
        .I2(mr_axi_awvalid),
        .I3(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .I4(Q),
        .I5(mr_axi_wvalid),
        .O(\gen_axi.gen_write.s_axi_wready_i11_out ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.gen_write.write_cs_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_axi.gen_write.write_cs[0]_i_1_n_0 ),
        .Q(\gen_axi.gen_write.write_cs_reg_n_0_[0] ),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.gen_write.write_cs_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_axi.gen_write.write_cs[1]_i_1_n_0 ),
        .Q(\gen_axi.gen_write.write_cs_reg_n_0_[1] ),
        .R(areset));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hEA2A)) 
    \state[m_valid_i]_i_2__0 
       (.I0(m_axi_bvalid),
        .I1(\gen_endpoint.w_state [0]),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.err_bvalid ),
        .O(mr_axi_bvalid));
  LUT4 #(
    .INIT(16'hEA2A)) 
    \state[m_valid_i]_i_5 
       (.I0(m_axi_awready),
        .I1(\gen_endpoint.w_state [0]),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.err_awready ),
        .O(mr_axi_awready));
  LUT5 #(
    .INIT(32'hF8880888)) 
    \state[s_ready_i]_i_2__0 
       (.I0(\gen_endpoint.w_enable_reg ),
        .I1(m_axi_wready),
        .I2(\gen_endpoint.w_state [0]),
        .I3(\gen_endpoint.w_state [1]),
        .I4(\gen_endpoint.err_wready ),
        .O(mr_axi_wready));
endmodule

(* C_ADDR_WIDTH = "32" *) (* C_ENABLE_PIPELINING = "1'b1" *) (* C_FAMILY = "zynq" *) 
(* C_ID_WIDTH = "0" *) (* C_IS_CASCADED = "0" *) (* C_MSC_ROUTE_ARRAY = "1'b1" *) 
(* C_MSC_ROUTE_WIDTH = "1" *) (* C_NUM_MSC = "1" *) (* C_NUM_SEG = "1" *) 
(* C_RDATA_WIDTH = "32" *) (* C_READ_ACCEPTANCE = "32" *) (* C_SEG_BASE_ADDR_ARRAY = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_SEG_SECURE_READ_ARRAY = "1'b0" *) (* C_SEG_SECURE_WRITE_ARRAY = "1'b0" *) (* C_SEG_SEP_ROUTE_ARRAY = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_SEG_SIZE_ARRAY = "29" *) (* C_SEG_SUPPORTS_READ_ARRAY = "1'b1" *) (* C_SEG_SUPPORTS_WRITE_ARRAY = "1'b1" *) 
(* C_SINGLE_ISSUING = "0" *) (* C_SUPPORTS_READ_DECERR = "1" *) (* C_SUPPORTS_WRAP = "1" *) 
(* C_SUPPORTS_WRITE_DECERR = "1" *) (* C_S_ARUSER_WIDTH = "0" *) (* C_S_AWUSER_WIDTH = "0" *) 
(* C_S_BUSER_WIDTH = "0" *) (* C_S_PROTOCOL = "0" *) (* C_S_RUSER_WIDTH = "0" *) 
(* C_S_WUSER_WIDTH = "0" *) (* C_WDATA_WIDTH = "32" *) (* C_WRITE_ACCEPTANCE = "32" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "sc_mmu_v1_0_5_top" *) (* P_AXI3 = "1" *) 
(* P_AXI4 = "0" *) (* P_AXILITE = "2" *) (* P_BYPASS = "0" *) 
(* P_DECERR = "2'b11" *) (* P_FIXED = "2'b00" *) (* P_FULLY_PIPELINED = "2" *) 
(* P_INCR = "2'b01" *) (* P_NUM_MSC_LOG = "1" *) (* P_NUM_SEG_LOG = "1" *) 
(* P_QUEUE_SIZE = "5" *) (* P_R_DWBYTES = "4" *) (* P_R_DWSIZE = "2" *) 
(* P_WRAP = "2'b10" *) (* P_W_DWBYTES = "4" *) (* P_W_DWSIZE = "2" *) 
(* P_ZERO_LATENCY = "1" *) 
module ADC_axi_smc_0_sc_mmu_v1_0_5_top
   (aclk,
    aresetn,
    aclken,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready);
  input aclk;
  input aresetn;
  input aclken;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [1023:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output m_axi_wlast;
  output [1023:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [1023:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [1023:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [1023:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;

  wire \<const0> ;
  wire aclk;
  wire areset;
  wire areset_i_1_n_0;
  wire aresetn;
  wire aw_reg_stall_n_1;
  wire aw_reg_stall_n_2;
  wire aw_reg_stall_n_3;
  wire aw_reg_stall_n_4;
  wire aw_reg_stall_n_5;
  wire aw_sreg_n_2;
  wire aw_sreg_n_3;
  wire aw_sreg_n_4;
  wire aw_sreg_n_7;
  wire b_sreg_n_2;
  wire b_sreg_n_3;
  wire b_sreg_n_4;
  wire b_sreg_n_5;
  wire b_sreg_n_6;
  wire \gen_endpoint.b_cnt[0]_i_1_n_0 ;
  wire \gen_endpoint.b_cnt[5]_i_3_n_0 ;
  wire [5:0]\gen_endpoint.b_cnt_reg__0 ;
  wire \gen_endpoint.err_awready ;
  wire \gen_endpoint.err_bvalid ;
  wire \gen_endpoint.w_cnt[0]_i_1_n_0 ;
  wire \gen_endpoint.w_cnt[5]_i_3_n_0 ;
  wire [5:0]\gen_endpoint.w_cnt_reg__0 ;
  wire \gen_endpoint.w_enable_i_2_n_0 ;
  wire \gen_endpoint.w_enable_i_5_n_0 ;
  wire \gen_endpoint.w_enable_reg_n_0 ;
  wire \gen_endpoint.w_resume_i_1_n_0 ;
  wire [1:0]\gen_endpoint.w_state ;
  wire \gen_endpoint.w_state[1]_i_6_n_0 ;
  wire \gen_endpoint.w_trigger_decerr ;
  wire [31:0]m_axi_awaddr;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire mr_axi_awready;
  wire mr_axi_awvalid;
  wire mr_axi_bvalid;
  wire mr_axi_wready;
  wire mr_axi_wvalid;
  wire p_13_in;
  wire [1144:1061]s_awvector_d;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire s_axi_awready_d;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_split_awvalid;
  wire sr_axi_awvalid;
  wire w_resume;
  wire w_sreg_n_3;
  wire w_sreg_n_4;
  wire w_sreg_n_45;
  wire w_sreg_n_46;
  wire w_sreg_n_47;
  wire w_sreg_n_5;
  wire w_sreg_n_6;
  wire w_sreg_n_7;

  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[1023] = \<const0> ;
  assign m_axi_aruser[1022] = \<const0> ;
  assign m_axi_aruser[1021] = \<const0> ;
  assign m_axi_aruser[1020] = \<const0> ;
  assign m_axi_aruser[1019] = \<const0> ;
  assign m_axi_aruser[1018] = \<const0> ;
  assign m_axi_aruser[1017] = \<const0> ;
  assign m_axi_aruser[1016] = \<const0> ;
  assign m_axi_aruser[1015] = \<const0> ;
  assign m_axi_aruser[1014] = \<const0> ;
  assign m_axi_aruser[1013] = \<const0> ;
  assign m_axi_aruser[1012] = \<const0> ;
  assign m_axi_aruser[1011] = \<const0> ;
  assign m_axi_aruser[1010] = \<const0> ;
  assign m_axi_aruser[1009] = \<const0> ;
  assign m_axi_aruser[1008] = \<const0> ;
  assign m_axi_aruser[1007] = \<const0> ;
  assign m_axi_aruser[1006] = \<const0> ;
  assign m_axi_aruser[1005] = \<const0> ;
  assign m_axi_aruser[1004] = \<const0> ;
  assign m_axi_aruser[1003] = \<const0> ;
  assign m_axi_aruser[1002] = \<const0> ;
  assign m_axi_aruser[1001] = \<const0> ;
  assign m_axi_aruser[1000] = \<const0> ;
  assign m_axi_aruser[999] = \<const0> ;
  assign m_axi_aruser[998] = \<const0> ;
  assign m_axi_aruser[997] = \<const0> ;
  assign m_axi_aruser[996] = \<const0> ;
  assign m_axi_aruser[995] = \<const0> ;
  assign m_axi_aruser[994] = \<const0> ;
  assign m_axi_aruser[993] = \<const0> ;
  assign m_axi_aruser[992] = \<const0> ;
  assign m_axi_aruser[991] = \<const0> ;
  assign m_axi_aruser[990] = \<const0> ;
  assign m_axi_aruser[989] = \<const0> ;
  assign m_axi_aruser[988] = \<const0> ;
  assign m_axi_aruser[987] = \<const0> ;
  assign m_axi_aruser[986] = \<const0> ;
  assign m_axi_aruser[985] = \<const0> ;
  assign m_axi_aruser[984] = \<const0> ;
  assign m_axi_aruser[983] = \<const0> ;
  assign m_axi_aruser[982] = \<const0> ;
  assign m_axi_aruser[981] = \<const0> ;
  assign m_axi_aruser[980] = \<const0> ;
  assign m_axi_aruser[979] = \<const0> ;
  assign m_axi_aruser[978] = \<const0> ;
  assign m_axi_aruser[977] = \<const0> ;
  assign m_axi_aruser[976] = \<const0> ;
  assign m_axi_aruser[975] = \<const0> ;
  assign m_axi_aruser[974] = \<const0> ;
  assign m_axi_aruser[973] = \<const0> ;
  assign m_axi_aruser[972] = \<const0> ;
  assign m_axi_aruser[971] = \<const0> ;
  assign m_axi_aruser[970] = \<const0> ;
  assign m_axi_aruser[969] = \<const0> ;
  assign m_axi_aruser[968] = \<const0> ;
  assign m_axi_aruser[967] = \<const0> ;
  assign m_axi_aruser[966] = \<const0> ;
  assign m_axi_aruser[965] = \<const0> ;
  assign m_axi_aruser[964] = \<const0> ;
  assign m_axi_aruser[963] = \<const0> ;
  assign m_axi_aruser[962] = \<const0> ;
  assign m_axi_aruser[961] = \<const0> ;
  assign m_axi_aruser[960] = \<const0> ;
  assign m_axi_aruser[959] = \<const0> ;
  assign m_axi_aruser[958] = \<const0> ;
  assign m_axi_aruser[957] = \<const0> ;
  assign m_axi_aruser[956] = \<const0> ;
  assign m_axi_aruser[955] = \<const0> ;
  assign m_axi_aruser[954] = \<const0> ;
  assign m_axi_aruser[953] = \<const0> ;
  assign m_axi_aruser[952] = \<const0> ;
  assign m_axi_aruser[951] = \<const0> ;
  assign m_axi_aruser[950] = \<const0> ;
  assign m_axi_aruser[949] = \<const0> ;
  assign m_axi_aruser[948] = \<const0> ;
  assign m_axi_aruser[947] = \<const0> ;
  assign m_axi_aruser[946] = \<const0> ;
  assign m_axi_aruser[945] = \<const0> ;
  assign m_axi_aruser[944] = \<const0> ;
  assign m_axi_aruser[943] = \<const0> ;
  assign m_axi_aruser[942] = \<const0> ;
  assign m_axi_aruser[941] = \<const0> ;
  assign m_axi_aruser[940] = \<const0> ;
  assign m_axi_aruser[939] = \<const0> ;
  assign m_axi_aruser[938] = \<const0> ;
  assign m_axi_aruser[937] = \<const0> ;
  assign m_axi_aruser[936] = \<const0> ;
  assign m_axi_aruser[935] = \<const0> ;
  assign m_axi_aruser[934] = \<const0> ;
  assign m_axi_aruser[933] = \<const0> ;
  assign m_axi_aruser[932] = \<const0> ;
  assign m_axi_aruser[931] = \<const0> ;
  assign m_axi_aruser[930] = \<const0> ;
  assign m_axi_aruser[929] = \<const0> ;
  assign m_axi_aruser[928] = \<const0> ;
  assign m_axi_aruser[927] = \<const0> ;
  assign m_axi_aruser[926] = \<const0> ;
  assign m_axi_aruser[925] = \<const0> ;
  assign m_axi_aruser[924] = \<const0> ;
  assign m_axi_aruser[923] = \<const0> ;
  assign m_axi_aruser[922] = \<const0> ;
  assign m_axi_aruser[921] = \<const0> ;
  assign m_axi_aruser[920] = \<const0> ;
  assign m_axi_aruser[919] = \<const0> ;
  assign m_axi_aruser[918] = \<const0> ;
  assign m_axi_aruser[917] = \<const0> ;
  assign m_axi_aruser[916] = \<const0> ;
  assign m_axi_aruser[915] = \<const0> ;
  assign m_axi_aruser[914] = \<const0> ;
  assign m_axi_aruser[913] = \<const0> ;
  assign m_axi_aruser[912] = \<const0> ;
  assign m_axi_aruser[911] = \<const0> ;
  assign m_axi_aruser[910] = \<const0> ;
  assign m_axi_aruser[909] = \<const0> ;
  assign m_axi_aruser[908] = \<const0> ;
  assign m_axi_aruser[907] = \<const0> ;
  assign m_axi_aruser[906] = \<const0> ;
  assign m_axi_aruser[905] = \<const0> ;
  assign m_axi_aruser[904] = \<const0> ;
  assign m_axi_aruser[903] = \<const0> ;
  assign m_axi_aruser[902] = \<const0> ;
  assign m_axi_aruser[901] = \<const0> ;
  assign m_axi_aruser[900] = \<const0> ;
  assign m_axi_aruser[899] = \<const0> ;
  assign m_axi_aruser[898] = \<const0> ;
  assign m_axi_aruser[897] = \<const0> ;
  assign m_axi_aruser[896] = \<const0> ;
  assign m_axi_aruser[895] = \<const0> ;
  assign m_axi_aruser[894] = \<const0> ;
  assign m_axi_aruser[893] = \<const0> ;
  assign m_axi_aruser[892] = \<const0> ;
  assign m_axi_aruser[891] = \<const0> ;
  assign m_axi_aruser[890] = \<const0> ;
  assign m_axi_aruser[889] = \<const0> ;
  assign m_axi_aruser[888] = \<const0> ;
  assign m_axi_aruser[887] = \<const0> ;
  assign m_axi_aruser[886] = \<const0> ;
  assign m_axi_aruser[885] = \<const0> ;
  assign m_axi_aruser[884] = \<const0> ;
  assign m_axi_aruser[883] = \<const0> ;
  assign m_axi_aruser[882] = \<const0> ;
  assign m_axi_aruser[881] = \<const0> ;
  assign m_axi_aruser[880] = \<const0> ;
  assign m_axi_aruser[879] = \<const0> ;
  assign m_axi_aruser[878] = \<const0> ;
  assign m_axi_aruser[877] = \<const0> ;
  assign m_axi_aruser[876] = \<const0> ;
  assign m_axi_aruser[875] = \<const0> ;
  assign m_axi_aruser[874] = \<const0> ;
  assign m_axi_aruser[873] = \<const0> ;
  assign m_axi_aruser[872] = \<const0> ;
  assign m_axi_aruser[871] = \<const0> ;
  assign m_axi_aruser[870] = \<const0> ;
  assign m_axi_aruser[869] = \<const0> ;
  assign m_axi_aruser[868] = \<const0> ;
  assign m_axi_aruser[867] = \<const0> ;
  assign m_axi_aruser[866] = \<const0> ;
  assign m_axi_aruser[865] = \<const0> ;
  assign m_axi_aruser[864] = \<const0> ;
  assign m_axi_aruser[863] = \<const0> ;
  assign m_axi_aruser[862] = \<const0> ;
  assign m_axi_aruser[861] = \<const0> ;
  assign m_axi_aruser[860] = \<const0> ;
  assign m_axi_aruser[859] = \<const0> ;
  assign m_axi_aruser[858] = \<const0> ;
  assign m_axi_aruser[857] = \<const0> ;
  assign m_axi_aruser[856] = \<const0> ;
  assign m_axi_aruser[855] = \<const0> ;
  assign m_axi_aruser[854] = \<const0> ;
  assign m_axi_aruser[853] = \<const0> ;
  assign m_axi_aruser[852] = \<const0> ;
  assign m_axi_aruser[851] = \<const0> ;
  assign m_axi_aruser[850] = \<const0> ;
  assign m_axi_aruser[849] = \<const0> ;
  assign m_axi_aruser[848] = \<const0> ;
  assign m_axi_aruser[847] = \<const0> ;
  assign m_axi_aruser[846] = \<const0> ;
  assign m_axi_aruser[845] = \<const0> ;
  assign m_axi_aruser[844] = \<const0> ;
  assign m_axi_aruser[843] = \<const0> ;
  assign m_axi_aruser[842] = \<const0> ;
  assign m_axi_aruser[841] = \<const0> ;
  assign m_axi_aruser[840] = \<const0> ;
  assign m_axi_aruser[839] = \<const0> ;
  assign m_axi_aruser[838] = \<const0> ;
  assign m_axi_aruser[837] = \<const0> ;
  assign m_axi_aruser[836] = \<const0> ;
  assign m_axi_aruser[835] = \<const0> ;
  assign m_axi_aruser[834] = \<const0> ;
  assign m_axi_aruser[833] = \<const0> ;
  assign m_axi_aruser[832] = \<const0> ;
  assign m_axi_aruser[831] = \<const0> ;
  assign m_axi_aruser[830] = \<const0> ;
  assign m_axi_aruser[829] = \<const0> ;
  assign m_axi_aruser[828] = \<const0> ;
  assign m_axi_aruser[827] = \<const0> ;
  assign m_axi_aruser[826] = \<const0> ;
  assign m_axi_aruser[825] = \<const0> ;
  assign m_axi_aruser[824] = \<const0> ;
  assign m_axi_aruser[823] = \<const0> ;
  assign m_axi_aruser[822] = \<const0> ;
  assign m_axi_aruser[821] = \<const0> ;
  assign m_axi_aruser[820] = \<const0> ;
  assign m_axi_aruser[819] = \<const0> ;
  assign m_axi_aruser[818] = \<const0> ;
  assign m_axi_aruser[817] = \<const0> ;
  assign m_axi_aruser[816] = \<const0> ;
  assign m_axi_aruser[815] = \<const0> ;
  assign m_axi_aruser[814] = \<const0> ;
  assign m_axi_aruser[813] = \<const0> ;
  assign m_axi_aruser[812] = \<const0> ;
  assign m_axi_aruser[811] = \<const0> ;
  assign m_axi_aruser[810] = \<const0> ;
  assign m_axi_aruser[809] = \<const0> ;
  assign m_axi_aruser[808] = \<const0> ;
  assign m_axi_aruser[807] = \<const0> ;
  assign m_axi_aruser[806] = \<const0> ;
  assign m_axi_aruser[805] = \<const0> ;
  assign m_axi_aruser[804] = \<const0> ;
  assign m_axi_aruser[803] = \<const0> ;
  assign m_axi_aruser[802] = \<const0> ;
  assign m_axi_aruser[801] = \<const0> ;
  assign m_axi_aruser[800] = \<const0> ;
  assign m_axi_aruser[799] = \<const0> ;
  assign m_axi_aruser[798] = \<const0> ;
  assign m_axi_aruser[797] = \<const0> ;
  assign m_axi_aruser[796] = \<const0> ;
  assign m_axi_aruser[795] = \<const0> ;
  assign m_axi_aruser[794] = \<const0> ;
  assign m_axi_aruser[793] = \<const0> ;
  assign m_axi_aruser[792] = \<const0> ;
  assign m_axi_aruser[791] = \<const0> ;
  assign m_axi_aruser[790] = \<const0> ;
  assign m_axi_aruser[789] = \<const0> ;
  assign m_axi_aruser[788] = \<const0> ;
  assign m_axi_aruser[787] = \<const0> ;
  assign m_axi_aruser[786] = \<const0> ;
  assign m_axi_aruser[785] = \<const0> ;
  assign m_axi_aruser[784] = \<const0> ;
  assign m_axi_aruser[783] = \<const0> ;
  assign m_axi_aruser[782] = \<const0> ;
  assign m_axi_aruser[781] = \<const0> ;
  assign m_axi_aruser[780] = \<const0> ;
  assign m_axi_aruser[779] = \<const0> ;
  assign m_axi_aruser[778] = \<const0> ;
  assign m_axi_aruser[777] = \<const0> ;
  assign m_axi_aruser[776] = \<const0> ;
  assign m_axi_aruser[775] = \<const0> ;
  assign m_axi_aruser[774] = \<const0> ;
  assign m_axi_aruser[773] = \<const0> ;
  assign m_axi_aruser[772] = \<const0> ;
  assign m_axi_aruser[771] = \<const0> ;
  assign m_axi_aruser[770] = \<const0> ;
  assign m_axi_aruser[769] = \<const0> ;
  assign m_axi_aruser[768] = \<const0> ;
  assign m_axi_aruser[767] = \<const0> ;
  assign m_axi_aruser[766] = \<const0> ;
  assign m_axi_aruser[765] = \<const0> ;
  assign m_axi_aruser[764] = \<const0> ;
  assign m_axi_aruser[763] = \<const0> ;
  assign m_axi_aruser[762] = \<const0> ;
  assign m_axi_aruser[761] = \<const0> ;
  assign m_axi_aruser[760] = \<const0> ;
  assign m_axi_aruser[759] = \<const0> ;
  assign m_axi_aruser[758] = \<const0> ;
  assign m_axi_aruser[757] = \<const0> ;
  assign m_axi_aruser[756] = \<const0> ;
  assign m_axi_aruser[755] = \<const0> ;
  assign m_axi_aruser[754] = \<const0> ;
  assign m_axi_aruser[753] = \<const0> ;
  assign m_axi_aruser[752] = \<const0> ;
  assign m_axi_aruser[751] = \<const0> ;
  assign m_axi_aruser[750] = \<const0> ;
  assign m_axi_aruser[749] = \<const0> ;
  assign m_axi_aruser[748] = \<const0> ;
  assign m_axi_aruser[747] = \<const0> ;
  assign m_axi_aruser[746] = \<const0> ;
  assign m_axi_aruser[745] = \<const0> ;
  assign m_axi_aruser[744] = \<const0> ;
  assign m_axi_aruser[743] = \<const0> ;
  assign m_axi_aruser[742] = \<const0> ;
  assign m_axi_aruser[741] = \<const0> ;
  assign m_axi_aruser[740] = \<const0> ;
  assign m_axi_aruser[739] = \<const0> ;
  assign m_axi_aruser[738] = \<const0> ;
  assign m_axi_aruser[737] = \<const0> ;
  assign m_axi_aruser[736] = \<const0> ;
  assign m_axi_aruser[735] = \<const0> ;
  assign m_axi_aruser[734] = \<const0> ;
  assign m_axi_aruser[733] = \<const0> ;
  assign m_axi_aruser[732] = \<const0> ;
  assign m_axi_aruser[731] = \<const0> ;
  assign m_axi_aruser[730] = \<const0> ;
  assign m_axi_aruser[729] = \<const0> ;
  assign m_axi_aruser[728] = \<const0> ;
  assign m_axi_aruser[727] = \<const0> ;
  assign m_axi_aruser[726] = \<const0> ;
  assign m_axi_aruser[725] = \<const0> ;
  assign m_axi_aruser[724] = \<const0> ;
  assign m_axi_aruser[723] = \<const0> ;
  assign m_axi_aruser[722] = \<const0> ;
  assign m_axi_aruser[721] = \<const0> ;
  assign m_axi_aruser[720] = \<const0> ;
  assign m_axi_aruser[719] = \<const0> ;
  assign m_axi_aruser[718] = \<const0> ;
  assign m_axi_aruser[717] = \<const0> ;
  assign m_axi_aruser[716] = \<const0> ;
  assign m_axi_aruser[715] = \<const0> ;
  assign m_axi_aruser[714] = \<const0> ;
  assign m_axi_aruser[713] = \<const0> ;
  assign m_axi_aruser[712] = \<const0> ;
  assign m_axi_aruser[711] = \<const0> ;
  assign m_axi_aruser[710] = \<const0> ;
  assign m_axi_aruser[709] = \<const0> ;
  assign m_axi_aruser[708] = \<const0> ;
  assign m_axi_aruser[707] = \<const0> ;
  assign m_axi_aruser[706] = \<const0> ;
  assign m_axi_aruser[705] = \<const0> ;
  assign m_axi_aruser[704] = \<const0> ;
  assign m_axi_aruser[703] = \<const0> ;
  assign m_axi_aruser[702] = \<const0> ;
  assign m_axi_aruser[701] = \<const0> ;
  assign m_axi_aruser[700] = \<const0> ;
  assign m_axi_aruser[699] = \<const0> ;
  assign m_axi_aruser[698] = \<const0> ;
  assign m_axi_aruser[697] = \<const0> ;
  assign m_axi_aruser[696] = \<const0> ;
  assign m_axi_aruser[695] = \<const0> ;
  assign m_axi_aruser[694] = \<const0> ;
  assign m_axi_aruser[693] = \<const0> ;
  assign m_axi_aruser[692] = \<const0> ;
  assign m_axi_aruser[691] = \<const0> ;
  assign m_axi_aruser[690] = \<const0> ;
  assign m_axi_aruser[689] = \<const0> ;
  assign m_axi_aruser[688] = \<const0> ;
  assign m_axi_aruser[687] = \<const0> ;
  assign m_axi_aruser[686] = \<const0> ;
  assign m_axi_aruser[685] = \<const0> ;
  assign m_axi_aruser[684] = \<const0> ;
  assign m_axi_aruser[683] = \<const0> ;
  assign m_axi_aruser[682] = \<const0> ;
  assign m_axi_aruser[681] = \<const0> ;
  assign m_axi_aruser[680] = \<const0> ;
  assign m_axi_aruser[679] = \<const0> ;
  assign m_axi_aruser[678] = \<const0> ;
  assign m_axi_aruser[677] = \<const0> ;
  assign m_axi_aruser[676] = \<const0> ;
  assign m_axi_aruser[675] = \<const0> ;
  assign m_axi_aruser[674] = \<const0> ;
  assign m_axi_aruser[673] = \<const0> ;
  assign m_axi_aruser[672] = \<const0> ;
  assign m_axi_aruser[671] = \<const0> ;
  assign m_axi_aruser[670] = \<const0> ;
  assign m_axi_aruser[669] = \<const0> ;
  assign m_axi_aruser[668] = \<const0> ;
  assign m_axi_aruser[667] = \<const0> ;
  assign m_axi_aruser[666] = \<const0> ;
  assign m_axi_aruser[665] = \<const0> ;
  assign m_axi_aruser[664] = \<const0> ;
  assign m_axi_aruser[663] = \<const0> ;
  assign m_axi_aruser[662] = \<const0> ;
  assign m_axi_aruser[661] = \<const0> ;
  assign m_axi_aruser[660] = \<const0> ;
  assign m_axi_aruser[659] = \<const0> ;
  assign m_axi_aruser[658] = \<const0> ;
  assign m_axi_aruser[657] = \<const0> ;
  assign m_axi_aruser[656] = \<const0> ;
  assign m_axi_aruser[655] = \<const0> ;
  assign m_axi_aruser[654] = \<const0> ;
  assign m_axi_aruser[653] = \<const0> ;
  assign m_axi_aruser[652] = \<const0> ;
  assign m_axi_aruser[651] = \<const0> ;
  assign m_axi_aruser[650] = \<const0> ;
  assign m_axi_aruser[649] = \<const0> ;
  assign m_axi_aruser[648] = \<const0> ;
  assign m_axi_aruser[647] = \<const0> ;
  assign m_axi_aruser[646] = \<const0> ;
  assign m_axi_aruser[645] = \<const0> ;
  assign m_axi_aruser[644] = \<const0> ;
  assign m_axi_aruser[643] = \<const0> ;
  assign m_axi_aruser[642] = \<const0> ;
  assign m_axi_aruser[641] = \<const0> ;
  assign m_axi_aruser[640] = \<const0> ;
  assign m_axi_aruser[639] = \<const0> ;
  assign m_axi_aruser[638] = \<const0> ;
  assign m_axi_aruser[637] = \<const0> ;
  assign m_axi_aruser[636] = \<const0> ;
  assign m_axi_aruser[635] = \<const0> ;
  assign m_axi_aruser[634] = \<const0> ;
  assign m_axi_aruser[633] = \<const0> ;
  assign m_axi_aruser[632] = \<const0> ;
  assign m_axi_aruser[631] = \<const0> ;
  assign m_axi_aruser[630] = \<const0> ;
  assign m_axi_aruser[629] = \<const0> ;
  assign m_axi_aruser[628] = \<const0> ;
  assign m_axi_aruser[627] = \<const0> ;
  assign m_axi_aruser[626] = \<const0> ;
  assign m_axi_aruser[625] = \<const0> ;
  assign m_axi_aruser[624] = \<const0> ;
  assign m_axi_aruser[623] = \<const0> ;
  assign m_axi_aruser[622] = \<const0> ;
  assign m_axi_aruser[621] = \<const0> ;
  assign m_axi_aruser[620] = \<const0> ;
  assign m_axi_aruser[619] = \<const0> ;
  assign m_axi_aruser[618] = \<const0> ;
  assign m_axi_aruser[617] = \<const0> ;
  assign m_axi_aruser[616] = \<const0> ;
  assign m_axi_aruser[615] = \<const0> ;
  assign m_axi_aruser[614] = \<const0> ;
  assign m_axi_aruser[613] = \<const0> ;
  assign m_axi_aruser[612] = \<const0> ;
  assign m_axi_aruser[611] = \<const0> ;
  assign m_axi_aruser[610] = \<const0> ;
  assign m_axi_aruser[609] = \<const0> ;
  assign m_axi_aruser[608] = \<const0> ;
  assign m_axi_aruser[607] = \<const0> ;
  assign m_axi_aruser[606] = \<const0> ;
  assign m_axi_aruser[605] = \<const0> ;
  assign m_axi_aruser[604] = \<const0> ;
  assign m_axi_aruser[603] = \<const0> ;
  assign m_axi_aruser[602] = \<const0> ;
  assign m_axi_aruser[601] = \<const0> ;
  assign m_axi_aruser[600] = \<const0> ;
  assign m_axi_aruser[599] = \<const0> ;
  assign m_axi_aruser[598] = \<const0> ;
  assign m_axi_aruser[597] = \<const0> ;
  assign m_axi_aruser[596] = \<const0> ;
  assign m_axi_aruser[595] = \<const0> ;
  assign m_axi_aruser[594] = \<const0> ;
  assign m_axi_aruser[593] = \<const0> ;
  assign m_axi_aruser[592] = \<const0> ;
  assign m_axi_aruser[591] = \<const0> ;
  assign m_axi_aruser[590] = \<const0> ;
  assign m_axi_aruser[589] = \<const0> ;
  assign m_axi_aruser[588] = \<const0> ;
  assign m_axi_aruser[587] = \<const0> ;
  assign m_axi_aruser[586] = \<const0> ;
  assign m_axi_aruser[585] = \<const0> ;
  assign m_axi_aruser[584] = \<const0> ;
  assign m_axi_aruser[583] = \<const0> ;
  assign m_axi_aruser[582] = \<const0> ;
  assign m_axi_aruser[581] = \<const0> ;
  assign m_axi_aruser[580] = \<const0> ;
  assign m_axi_aruser[579] = \<const0> ;
  assign m_axi_aruser[578] = \<const0> ;
  assign m_axi_aruser[577] = \<const0> ;
  assign m_axi_aruser[576] = \<const0> ;
  assign m_axi_aruser[575] = \<const0> ;
  assign m_axi_aruser[574] = \<const0> ;
  assign m_axi_aruser[573] = \<const0> ;
  assign m_axi_aruser[572] = \<const0> ;
  assign m_axi_aruser[571] = \<const0> ;
  assign m_axi_aruser[570] = \<const0> ;
  assign m_axi_aruser[569] = \<const0> ;
  assign m_axi_aruser[568] = \<const0> ;
  assign m_axi_aruser[567] = \<const0> ;
  assign m_axi_aruser[566] = \<const0> ;
  assign m_axi_aruser[565] = \<const0> ;
  assign m_axi_aruser[564] = \<const0> ;
  assign m_axi_aruser[563] = \<const0> ;
  assign m_axi_aruser[562] = \<const0> ;
  assign m_axi_aruser[561] = \<const0> ;
  assign m_axi_aruser[560] = \<const0> ;
  assign m_axi_aruser[559] = \<const0> ;
  assign m_axi_aruser[558] = \<const0> ;
  assign m_axi_aruser[557] = \<const0> ;
  assign m_axi_aruser[556] = \<const0> ;
  assign m_axi_aruser[555] = \<const0> ;
  assign m_axi_aruser[554] = \<const0> ;
  assign m_axi_aruser[553] = \<const0> ;
  assign m_axi_aruser[552] = \<const0> ;
  assign m_axi_aruser[551] = \<const0> ;
  assign m_axi_aruser[550] = \<const0> ;
  assign m_axi_aruser[549] = \<const0> ;
  assign m_axi_aruser[548] = \<const0> ;
  assign m_axi_aruser[547] = \<const0> ;
  assign m_axi_aruser[546] = \<const0> ;
  assign m_axi_aruser[545] = \<const0> ;
  assign m_axi_aruser[544] = \<const0> ;
  assign m_axi_aruser[543] = \<const0> ;
  assign m_axi_aruser[542] = \<const0> ;
  assign m_axi_aruser[541] = \<const0> ;
  assign m_axi_aruser[540] = \<const0> ;
  assign m_axi_aruser[539] = \<const0> ;
  assign m_axi_aruser[538] = \<const0> ;
  assign m_axi_aruser[537] = \<const0> ;
  assign m_axi_aruser[536] = \<const0> ;
  assign m_axi_aruser[535] = \<const0> ;
  assign m_axi_aruser[534] = \<const0> ;
  assign m_axi_aruser[533] = \<const0> ;
  assign m_axi_aruser[532] = \<const0> ;
  assign m_axi_aruser[531] = \<const0> ;
  assign m_axi_aruser[530] = \<const0> ;
  assign m_axi_aruser[529] = \<const0> ;
  assign m_axi_aruser[528] = \<const0> ;
  assign m_axi_aruser[527] = \<const0> ;
  assign m_axi_aruser[526] = \<const0> ;
  assign m_axi_aruser[525] = \<const0> ;
  assign m_axi_aruser[524] = \<const0> ;
  assign m_axi_aruser[523] = \<const0> ;
  assign m_axi_aruser[522] = \<const0> ;
  assign m_axi_aruser[521] = \<const0> ;
  assign m_axi_aruser[520] = \<const0> ;
  assign m_axi_aruser[519] = \<const0> ;
  assign m_axi_aruser[518] = \<const0> ;
  assign m_axi_aruser[517] = \<const0> ;
  assign m_axi_aruser[516] = \<const0> ;
  assign m_axi_aruser[515] = \<const0> ;
  assign m_axi_aruser[514] = \<const0> ;
  assign m_axi_aruser[513] = \<const0> ;
  assign m_axi_aruser[512] = \<const0> ;
  assign m_axi_aruser[511] = \<const0> ;
  assign m_axi_aruser[510] = \<const0> ;
  assign m_axi_aruser[509] = \<const0> ;
  assign m_axi_aruser[508] = \<const0> ;
  assign m_axi_aruser[507] = \<const0> ;
  assign m_axi_aruser[506] = \<const0> ;
  assign m_axi_aruser[505] = \<const0> ;
  assign m_axi_aruser[504] = \<const0> ;
  assign m_axi_aruser[503] = \<const0> ;
  assign m_axi_aruser[502] = \<const0> ;
  assign m_axi_aruser[501] = \<const0> ;
  assign m_axi_aruser[500] = \<const0> ;
  assign m_axi_aruser[499] = \<const0> ;
  assign m_axi_aruser[498] = \<const0> ;
  assign m_axi_aruser[497] = \<const0> ;
  assign m_axi_aruser[496] = \<const0> ;
  assign m_axi_aruser[495] = \<const0> ;
  assign m_axi_aruser[494] = \<const0> ;
  assign m_axi_aruser[493] = \<const0> ;
  assign m_axi_aruser[492] = \<const0> ;
  assign m_axi_aruser[491] = \<const0> ;
  assign m_axi_aruser[490] = \<const0> ;
  assign m_axi_aruser[489] = \<const0> ;
  assign m_axi_aruser[488] = \<const0> ;
  assign m_axi_aruser[487] = \<const0> ;
  assign m_axi_aruser[486] = \<const0> ;
  assign m_axi_aruser[485] = \<const0> ;
  assign m_axi_aruser[484] = \<const0> ;
  assign m_axi_aruser[483] = \<const0> ;
  assign m_axi_aruser[482] = \<const0> ;
  assign m_axi_aruser[481] = \<const0> ;
  assign m_axi_aruser[480] = \<const0> ;
  assign m_axi_aruser[479] = \<const0> ;
  assign m_axi_aruser[478] = \<const0> ;
  assign m_axi_aruser[477] = \<const0> ;
  assign m_axi_aruser[476] = \<const0> ;
  assign m_axi_aruser[475] = \<const0> ;
  assign m_axi_aruser[474] = \<const0> ;
  assign m_axi_aruser[473] = \<const0> ;
  assign m_axi_aruser[472] = \<const0> ;
  assign m_axi_aruser[471] = \<const0> ;
  assign m_axi_aruser[470] = \<const0> ;
  assign m_axi_aruser[469] = \<const0> ;
  assign m_axi_aruser[468] = \<const0> ;
  assign m_axi_aruser[467] = \<const0> ;
  assign m_axi_aruser[466] = \<const0> ;
  assign m_axi_aruser[465] = \<const0> ;
  assign m_axi_aruser[464] = \<const0> ;
  assign m_axi_aruser[463] = \<const0> ;
  assign m_axi_aruser[462] = \<const0> ;
  assign m_axi_aruser[461] = \<const0> ;
  assign m_axi_aruser[460] = \<const0> ;
  assign m_axi_aruser[459] = \<const0> ;
  assign m_axi_aruser[458] = \<const0> ;
  assign m_axi_aruser[457] = \<const0> ;
  assign m_axi_aruser[456] = \<const0> ;
  assign m_axi_aruser[455] = \<const0> ;
  assign m_axi_aruser[454] = \<const0> ;
  assign m_axi_aruser[453] = \<const0> ;
  assign m_axi_aruser[452] = \<const0> ;
  assign m_axi_aruser[451] = \<const0> ;
  assign m_axi_aruser[450] = \<const0> ;
  assign m_axi_aruser[449] = \<const0> ;
  assign m_axi_aruser[448] = \<const0> ;
  assign m_axi_aruser[447] = \<const0> ;
  assign m_axi_aruser[446] = \<const0> ;
  assign m_axi_aruser[445] = \<const0> ;
  assign m_axi_aruser[444] = \<const0> ;
  assign m_axi_aruser[443] = \<const0> ;
  assign m_axi_aruser[442] = \<const0> ;
  assign m_axi_aruser[441] = \<const0> ;
  assign m_axi_aruser[440] = \<const0> ;
  assign m_axi_aruser[439] = \<const0> ;
  assign m_axi_aruser[438] = \<const0> ;
  assign m_axi_aruser[437] = \<const0> ;
  assign m_axi_aruser[436] = \<const0> ;
  assign m_axi_aruser[435] = \<const0> ;
  assign m_axi_aruser[434] = \<const0> ;
  assign m_axi_aruser[433] = \<const0> ;
  assign m_axi_aruser[432] = \<const0> ;
  assign m_axi_aruser[431] = \<const0> ;
  assign m_axi_aruser[430] = \<const0> ;
  assign m_axi_aruser[429] = \<const0> ;
  assign m_axi_aruser[428] = \<const0> ;
  assign m_axi_aruser[427] = \<const0> ;
  assign m_axi_aruser[426] = \<const0> ;
  assign m_axi_aruser[425] = \<const0> ;
  assign m_axi_aruser[424] = \<const0> ;
  assign m_axi_aruser[423] = \<const0> ;
  assign m_axi_aruser[422] = \<const0> ;
  assign m_axi_aruser[421] = \<const0> ;
  assign m_axi_aruser[420] = \<const0> ;
  assign m_axi_aruser[419] = \<const0> ;
  assign m_axi_aruser[418] = \<const0> ;
  assign m_axi_aruser[417] = \<const0> ;
  assign m_axi_aruser[416] = \<const0> ;
  assign m_axi_aruser[415] = \<const0> ;
  assign m_axi_aruser[414] = \<const0> ;
  assign m_axi_aruser[413] = \<const0> ;
  assign m_axi_aruser[412] = \<const0> ;
  assign m_axi_aruser[411] = \<const0> ;
  assign m_axi_aruser[410] = \<const0> ;
  assign m_axi_aruser[409] = \<const0> ;
  assign m_axi_aruser[408] = \<const0> ;
  assign m_axi_aruser[407] = \<const0> ;
  assign m_axi_aruser[406] = \<const0> ;
  assign m_axi_aruser[405] = \<const0> ;
  assign m_axi_aruser[404] = \<const0> ;
  assign m_axi_aruser[403] = \<const0> ;
  assign m_axi_aruser[402] = \<const0> ;
  assign m_axi_aruser[401] = \<const0> ;
  assign m_axi_aruser[400] = \<const0> ;
  assign m_axi_aruser[399] = \<const0> ;
  assign m_axi_aruser[398] = \<const0> ;
  assign m_axi_aruser[397] = \<const0> ;
  assign m_axi_aruser[396] = \<const0> ;
  assign m_axi_aruser[395] = \<const0> ;
  assign m_axi_aruser[394] = \<const0> ;
  assign m_axi_aruser[393] = \<const0> ;
  assign m_axi_aruser[392] = \<const0> ;
  assign m_axi_aruser[391] = \<const0> ;
  assign m_axi_aruser[390] = \<const0> ;
  assign m_axi_aruser[389] = \<const0> ;
  assign m_axi_aruser[388] = \<const0> ;
  assign m_axi_aruser[387] = \<const0> ;
  assign m_axi_aruser[386] = \<const0> ;
  assign m_axi_aruser[385] = \<const0> ;
  assign m_axi_aruser[384] = \<const0> ;
  assign m_axi_aruser[383] = \<const0> ;
  assign m_axi_aruser[382] = \<const0> ;
  assign m_axi_aruser[381] = \<const0> ;
  assign m_axi_aruser[380] = \<const0> ;
  assign m_axi_aruser[379] = \<const0> ;
  assign m_axi_aruser[378] = \<const0> ;
  assign m_axi_aruser[377] = \<const0> ;
  assign m_axi_aruser[376] = \<const0> ;
  assign m_axi_aruser[375] = \<const0> ;
  assign m_axi_aruser[374] = \<const0> ;
  assign m_axi_aruser[373] = \<const0> ;
  assign m_axi_aruser[372] = \<const0> ;
  assign m_axi_aruser[371] = \<const0> ;
  assign m_axi_aruser[370] = \<const0> ;
  assign m_axi_aruser[369] = \<const0> ;
  assign m_axi_aruser[368] = \<const0> ;
  assign m_axi_aruser[367] = \<const0> ;
  assign m_axi_aruser[366] = \<const0> ;
  assign m_axi_aruser[365] = \<const0> ;
  assign m_axi_aruser[364] = \<const0> ;
  assign m_axi_aruser[363] = \<const0> ;
  assign m_axi_aruser[362] = \<const0> ;
  assign m_axi_aruser[361] = \<const0> ;
  assign m_axi_aruser[360] = \<const0> ;
  assign m_axi_aruser[359] = \<const0> ;
  assign m_axi_aruser[358] = \<const0> ;
  assign m_axi_aruser[357] = \<const0> ;
  assign m_axi_aruser[356] = \<const0> ;
  assign m_axi_aruser[355] = \<const0> ;
  assign m_axi_aruser[354] = \<const0> ;
  assign m_axi_aruser[353] = \<const0> ;
  assign m_axi_aruser[352] = \<const0> ;
  assign m_axi_aruser[351] = \<const0> ;
  assign m_axi_aruser[350] = \<const0> ;
  assign m_axi_aruser[349] = \<const0> ;
  assign m_axi_aruser[348] = \<const0> ;
  assign m_axi_aruser[347] = \<const0> ;
  assign m_axi_aruser[346] = \<const0> ;
  assign m_axi_aruser[345] = \<const0> ;
  assign m_axi_aruser[344] = \<const0> ;
  assign m_axi_aruser[343] = \<const0> ;
  assign m_axi_aruser[342] = \<const0> ;
  assign m_axi_aruser[341] = \<const0> ;
  assign m_axi_aruser[340] = \<const0> ;
  assign m_axi_aruser[339] = \<const0> ;
  assign m_axi_aruser[338] = \<const0> ;
  assign m_axi_aruser[337] = \<const0> ;
  assign m_axi_aruser[336] = \<const0> ;
  assign m_axi_aruser[335] = \<const0> ;
  assign m_axi_aruser[334] = \<const0> ;
  assign m_axi_aruser[333] = \<const0> ;
  assign m_axi_aruser[332] = \<const0> ;
  assign m_axi_aruser[331] = \<const0> ;
  assign m_axi_aruser[330] = \<const0> ;
  assign m_axi_aruser[329] = \<const0> ;
  assign m_axi_aruser[328] = \<const0> ;
  assign m_axi_aruser[327] = \<const0> ;
  assign m_axi_aruser[326] = \<const0> ;
  assign m_axi_aruser[325] = \<const0> ;
  assign m_axi_aruser[324] = \<const0> ;
  assign m_axi_aruser[323] = \<const0> ;
  assign m_axi_aruser[322] = \<const0> ;
  assign m_axi_aruser[321] = \<const0> ;
  assign m_axi_aruser[320] = \<const0> ;
  assign m_axi_aruser[319] = \<const0> ;
  assign m_axi_aruser[318] = \<const0> ;
  assign m_axi_aruser[317] = \<const0> ;
  assign m_axi_aruser[316] = \<const0> ;
  assign m_axi_aruser[315] = \<const0> ;
  assign m_axi_aruser[314] = \<const0> ;
  assign m_axi_aruser[313] = \<const0> ;
  assign m_axi_aruser[312] = \<const0> ;
  assign m_axi_aruser[311] = \<const0> ;
  assign m_axi_aruser[310] = \<const0> ;
  assign m_axi_aruser[309] = \<const0> ;
  assign m_axi_aruser[308] = \<const0> ;
  assign m_axi_aruser[307] = \<const0> ;
  assign m_axi_aruser[306] = \<const0> ;
  assign m_axi_aruser[305] = \<const0> ;
  assign m_axi_aruser[304] = \<const0> ;
  assign m_axi_aruser[303] = \<const0> ;
  assign m_axi_aruser[302] = \<const0> ;
  assign m_axi_aruser[301] = \<const0> ;
  assign m_axi_aruser[300] = \<const0> ;
  assign m_axi_aruser[299] = \<const0> ;
  assign m_axi_aruser[298] = \<const0> ;
  assign m_axi_aruser[297] = \<const0> ;
  assign m_axi_aruser[296] = \<const0> ;
  assign m_axi_aruser[295] = \<const0> ;
  assign m_axi_aruser[294] = \<const0> ;
  assign m_axi_aruser[293] = \<const0> ;
  assign m_axi_aruser[292] = \<const0> ;
  assign m_axi_aruser[291] = \<const0> ;
  assign m_axi_aruser[290] = \<const0> ;
  assign m_axi_aruser[289] = \<const0> ;
  assign m_axi_aruser[288] = \<const0> ;
  assign m_axi_aruser[287] = \<const0> ;
  assign m_axi_aruser[286] = \<const0> ;
  assign m_axi_aruser[285] = \<const0> ;
  assign m_axi_aruser[284] = \<const0> ;
  assign m_axi_aruser[283] = \<const0> ;
  assign m_axi_aruser[282] = \<const0> ;
  assign m_axi_aruser[281] = \<const0> ;
  assign m_axi_aruser[280] = \<const0> ;
  assign m_axi_aruser[279] = \<const0> ;
  assign m_axi_aruser[278] = \<const0> ;
  assign m_axi_aruser[277] = \<const0> ;
  assign m_axi_aruser[276] = \<const0> ;
  assign m_axi_aruser[275] = \<const0> ;
  assign m_axi_aruser[274] = \<const0> ;
  assign m_axi_aruser[273] = \<const0> ;
  assign m_axi_aruser[272] = \<const0> ;
  assign m_axi_aruser[271] = \<const0> ;
  assign m_axi_aruser[270] = \<const0> ;
  assign m_axi_aruser[269] = \<const0> ;
  assign m_axi_aruser[268] = \<const0> ;
  assign m_axi_aruser[267] = \<const0> ;
  assign m_axi_aruser[266] = \<const0> ;
  assign m_axi_aruser[265] = \<const0> ;
  assign m_axi_aruser[264] = \<const0> ;
  assign m_axi_aruser[263] = \<const0> ;
  assign m_axi_aruser[262] = \<const0> ;
  assign m_axi_aruser[261] = \<const0> ;
  assign m_axi_aruser[260] = \<const0> ;
  assign m_axi_aruser[259] = \<const0> ;
  assign m_axi_aruser[258] = \<const0> ;
  assign m_axi_aruser[257] = \<const0> ;
  assign m_axi_aruser[256] = \<const0> ;
  assign m_axi_aruser[255] = \<const0> ;
  assign m_axi_aruser[254] = \<const0> ;
  assign m_axi_aruser[253] = \<const0> ;
  assign m_axi_aruser[252] = \<const0> ;
  assign m_axi_aruser[251] = \<const0> ;
  assign m_axi_aruser[250] = \<const0> ;
  assign m_axi_aruser[249] = \<const0> ;
  assign m_axi_aruser[248] = \<const0> ;
  assign m_axi_aruser[247] = \<const0> ;
  assign m_axi_aruser[246] = \<const0> ;
  assign m_axi_aruser[245] = \<const0> ;
  assign m_axi_aruser[244] = \<const0> ;
  assign m_axi_aruser[243] = \<const0> ;
  assign m_axi_aruser[242] = \<const0> ;
  assign m_axi_aruser[241] = \<const0> ;
  assign m_axi_aruser[240] = \<const0> ;
  assign m_axi_aruser[239] = \<const0> ;
  assign m_axi_aruser[238] = \<const0> ;
  assign m_axi_aruser[237] = \<const0> ;
  assign m_axi_aruser[236] = \<const0> ;
  assign m_axi_aruser[235] = \<const0> ;
  assign m_axi_aruser[234] = \<const0> ;
  assign m_axi_aruser[233] = \<const0> ;
  assign m_axi_aruser[232] = \<const0> ;
  assign m_axi_aruser[231] = \<const0> ;
  assign m_axi_aruser[230] = \<const0> ;
  assign m_axi_aruser[229] = \<const0> ;
  assign m_axi_aruser[228] = \<const0> ;
  assign m_axi_aruser[227] = \<const0> ;
  assign m_axi_aruser[226] = \<const0> ;
  assign m_axi_aruser[225] = \<const0> ;
  assign m_axi_aruser[224] = \<const0> ;
  assign m_axi_aruser[223] = \<const0> ;
  assign m_axi_aruser[222] = \<const0> ;
  assign m_axi_aruser[221] = \<const0> ;
  assign m_axi_aruser[220] = \<const0> ;
  assign m_axi_aruser[219] = \<const0> ;
  assign m_axi_aruser[218] = \<const0> ;
  assign m_axi_aruser[217] = \<const0> ;
  assign m_axi_aruser[216] = \<const0> ;
  assign m_axi_aruser[215] = \<const0> ;
  assign m_axi_aruser[214] = \<const0> ;
  assign m_axi_aruser[213] = \<const0> ;
  assign m_axi_aruser[212] = \<const0> ;
  assign m_axi_aruser[211] = \<const0> ;
  assign m_axi_aruser[210] = \<const0> ;
  assign m_axi_aruser[209] = \<const0> ;
  assign m_axi_aruser[208] = \<const0> ;
  assign m_axi_aruser[207] = \<const0> ;
  assign m_axi_aruser[206] = \<const0> ;
  assign m_axi_aruser[205] = \<const0> ;
  assign m_axi_aruser[204] = \<const0> ;
  assign m_axi_aruser[203] = \<const0> ;
  assign m_axi_aruser[202] = \<const0> ;
  assign m_axi_aruser[201] = \<const0> ;
  assign m_axi_aruser[200] = \<const0> ;
  assign m_axi_aruser[199] = \<const0> ;
  assign m_axi_aruser[198] = \<const0> ;
  assign m_axi_aruser[197] = \<const0> ;
  assign m_axi_aruser[196] = \<const0> ;
  assign m_axi_aruser[195] = \<const0> ;
  assign m_axi_aruser[194] = \<const0> ;
  assign m_axi_aruser[193] = \<const0> ;
  assign m_axi_aruser[192] = \<const0> ;
  assign m_axi_aruser[191] = \<const0> ;
  assign m_axi_aruser[190] = \<const0> ;
  assign m_axi_aruser[189] = \<const0> ;
  assign m_axi_aruser[188] = \<const0> ;
  assign m_axi_aruser[187] = \<const0> ;
  assign m_axi_aruser[186] = \<const0> ;
  assign m_axi_aruser[185] = \<const0> ;
  assign m_axi_aruser[184] = \<const0> ;
  assign m_axi_aruser[183] = \<const0> ;
  assign m_axi_aruser[182] = \<const0> ;
  assign m_axi_aruser[181] = \<const0> ;
  assign m_axi_aruser[180] = \<const0> ;
  assign m_axi_aruser[179] = \<const0> ;
  assign m_axi_aruser[178] = \<const0> ;
  assign m_axi_aruser[177] = \<const0> ;
  assign m_axi_aruser[176] = \<const0> ;
  assign m_axi_aruser[175] = \<const0> ;
  assign m_axi_aruser[174] = \<const0> ;
  assign m_axi_aruser[173] = \<const0> ;
  assign m_axi_aruser[172] = \<const0> ;
  assign m_axi_aruser[171] = \<const0> ;
  assign m_axi_aruser[170] = \<const0> ;
  assign m_axi_aruser[169] = \<const0> ;
  assign m_axi_aruser[168] = \<const0> ;
  assign m_axi_aruser[167] = \<const0> ;
  assign m_axi_aruser[166] = \<const0> ;
  assign m_axi_aruser[165] = \<const0> ;
  assign m_axi_aruser[164] = \<const0> ;
  assign m_axi_aruser[163] = \<const0> ;
  assign m_axi_aruser[162] = \<const0> ;
  assign m_axi_aruser[161] = \<const0> ;
  assign m_axi_aruser[160] = \<const0> ;
  assign m_axi_aruser[159] = \<const0> ;
  assign m_axi_aruser[158] = \<const0> ;
  assign m_axi_aruser[157] = \<const0> ;
  assign m_axi_aruser[156] = \<const0> ;
  assign m_axi_aruser[155] = \<const0> ;
  assign m_axi_aruser[154] = \<const0> ;
  assign m_axi_aruser[153] = \<const0> ;
  assign m_axi_aruser[152] = \<const0> ;
  assign m_axi_aruser[151] = \<const0> ;
  assign m_axi_aruser[150] = \<const0> ;
  assign m_axi_aruser[149] = \<const0> ;
  assign m_axi_aruser[148] = \<const0> ;
  assign m_axi_aruser[147] = \<const0> ;
  assign m_axi_aruser[146] = \<const0> ;
  assign m_axi_aruser[145] = \<const0> ;
  assign m_axi_aruser[144] = \<const0> ;
  assign m_axi_aruser[143] = \<const0> ;
  assign m_axi_aruser[142] = \<const0> ;
  assign m_axi_aruser[141] = \<const0> ;
  assign m_axi_aruser[140] = \<const0> ;
  assign m_axi_aruser[139] = \<const0> ;
  assign m_axi_aruser[138] = \<const0> ;
  assign m_axi_aruser[137] = \<const0> ;
  assign m_axi_aruser[136] = \<const0> ;
  assign m_axi_aruser[135] = \<const0> ;
  assign m_axi_aruser[134] = \<const0> ;
  assign m_axi_aruser[133] = \<const0> ;
  assign m_axi_aruser[132] = \<const0> ;
  assign m_axi_aruser[131] = \<const0> ;
  assign m_axi_aruser[130] = \<const0> ;
  assign m_axi_aruser[129] = \<const0> ;
  assign m_axi_aruser[128] = \<const0> ;
  assign m_axi_aruser[127] = \<const0> ;
  assign m_axi_aruser[126] = \<const0> ;
  assign m_axi_aruser[125] = \<const0> ;
  assign m_axi_aruser[124] = \<const0> ;
  assign m_axi_aruser[123] = \<const0> ;
  assign m_axi_aruser[122] = \<const0> ;
  assign m_axi_aruser[121] = \<const0> ;
  assign m_axi_aruser[120] = \<const0> ;
  assign m_axi_aruser[119] = \<const0> ;
  assign m_axi_aruser[118] = \<const0> ;
  assign m_axi_aruser[117] = \<const0> ;
  assign m_axi_aruser[116] = \<const0> ;
  assign m_axi_aruser[115] = \<const0> ;
  assign m_axi_aruser[114] = \<const0> ;
  assign m_axi_aruser[113] = \<const0> ;
  assign m_axi_aruser[112] = \<const0> ;
  assign m_axi_aruser[111] = \<const0> ;
  assign m_axi_aruser[110] = \<const0> ;
  assign m_axi_aruser[109] = \<const0> ;
  assign m_axi_aruser[108] = \<const0> ;
  assign m_axi_aruser[107] = \<const0> ;
  assign m_axi_aruser[106] = \<const0> ;
  assign m_axi_aruser[105] = \<const0> ;
  assign m_axi_aruser[104] = \<const0> ;
  assign m_axi_aruser[103] = \<const0> ;
  assign m_axi_aruser[102] = \<const0> ;
  assign m_axi_aruser[101] = \<const0> ;
  assign m_axi_aruser[100] = \<const0> ;
  assign m_axi_aruser[99] = \<const0> ;
  assign m_axi_aruser[98] = \<const0> ;
  assign m_axi_aruser[97] = \<const0> ;
  assign m_axi_aruser[96] = \<const0> ;
  assign m_axi_aruser[95] = \<const0> ;
  assign m_axi_aruser[94] = \<const0> ;
  assign m_axi_aruser[93] = \<const0> ;
  assign m_axi_aruser[92] = \<const0> ;
  assign m_axi_aruser[91] = \<const0> ;
  assign m_axi_aruser[90] = \<const0> ;
  assign m_axi_aruser[89] = \<const0> ;
  assign m_axi_aruser[88] = \<const0> ;
  assign m_axi_aruser[87] = \<const0> ;
  assign m_axi_aruser[86] = \<const0> ;
  assign m_axi_aruser[85] = \<const0> ;
  assign m_axi_aruser[84] = \<const0> ;
  assign m_axi_aruser[83] = \<const0> ;
  assign m_axi_aruser[82] = \<const0> ;
  assign m_axi_aruser[81] = \<const0> ;
  assign m_axi_aruser[80] = \<const0> ;
  assign m_axi_aruser[79] = \<const0> ;
  assign m_axi_aruser[78] = \<const0> ;
  assign m_axi_aruser[77] = \<const0> ;
  assign m_axi_aruser[76] = \<const0> ;
  assign m_axi_aruser[75] = \<const0> ;
  assign m_axi_aruser[74] = \<const0> ;
  assign m_axi_aruser[73] = \<const0> ;
  assign m_axi_aruser[72] = \<const0> ;
  assign m_axi_aruser[71] = \<const0> ;
  assign m_axi_aruser[70] = \<const0> ;
  assign m_axi_aruser[69] = \<const0> ;
  assign m_axi_aruser[68] = \<const0> ;
  assign m_axi_aruser[67] = \<const0> ;
  assign m_axi_aruser[66] = \<const0> ;
  assign m_axi_aruser[65] = \<const0> ;
  assign m_axi_aruser[64] = \<const0> ;
  assign m_axi_aruser[63] = \<const0> ;
  assign m_axi_aruser[62] = \<const0> ;
  assign m_axi_aruser[61] = \<const0> ;
  assign m_axi_aruser[60] = \<const0> ;
  assign m_axi_aruser[59] = \<const0> ;
  assign m_axi_aruser[58] = \<const0> ;
  assign m_axi_aruser[57] = \<const0> ;
  assign m_axi_aruser[56] = \<const0> ;
  assign m_axi_aruser[55] = \<const0> ;
  assign m_axi_aruser[54] = \<const0> ;
  assign m_axi_aruser[53] = \<const0> ;
  assign m_axi_aruser[52] = \<const0> ;
  assign m_axi_aruser[51] = \<const0> ;
  assign m_axi_aruser[50] = \<const0> ;
  assign m_axi_aruser[49] = \<const0> ;
  assign m_axi_aruser[48] = \<const0> ;
  assign m_axi_aruser[47] = \<const0> ;
  assign m_axi_aruser[46] = \<const0> ;
  assign m_axi_aruser[45] = \<const0> ;
  assign m_axi_aruser[44] = \<const0> ;
  assign m_axi_aruser[43] = \<const0> ;
  assign m_axi_aruser[42] = \<const0> ;
  assign m_axi_aruser[41] = \<const0> ;
  assign m_axi_aruser[40] = \<const0> ;
  assign m_axi_aruser[39] = \<const0> ;
  assign m_axi_aruser[38] = \<const0> ;
  assign m_axi_aruser[37] = \<const0> ;
  assign m_axi_aruser[36] = \<const0> ;
  assign m_axi_aruser[35] = \<const0> ;
  assign m_axi_aruser[34] = \<const0> ;
  assign m_axi_aruser[33] = \<const0> ;
  assign m_axi_aruser[32] = \<const0> ;
  assign m_axi_aruser[31] = \<const0> ;
  assign m_axi_aruser[30] = \<const0> ;
  assign m_axi_aruser[29] = \<const0> ;
  assign m_axi_aruser[28] = \<const0> ;
  assign m_axi_aruser[27] = \<const0> ;
  assign m_axi_aruser[26] = \<const0> ;
  assign m_axi_aruser[25] = \<const0> ;
  assign m_axi_aruser[24] = \<const0> ;
  assign m_axi_aruser[23] = \<const0> ;
  assign m_axi_aruser[22] = \<const0> ;
  assign m_axi_aruser[21] = \<const0> ;
  assign m_axi_aruser[20] = \<const0> ;
  assign m_axi_aruser[19] = \<const0> ;
  assign m_axi_aruser[18] = \<const0> ;
  assign m_axi_aruser[17] = \<const0> ;
  assign m_axi_aruser[16] = \<const0> ;
  assign m_axi_aruser[15] = \<const0> ;
  assign m_axi_aruser[14] = \<const0> ;
  assign m_axi_aruser[13] = \<const0> ;
  assign m_axi_aruser[12] = \<const0> ;
  assign m_axi_aruser[11] = \<const0> ;
  assign m_axi_aruser[10] = \<const0> ;
  assign m_axi_aruser[9] = \<const0> ;
  assign m_axi_aruser[8] = \<const0> ;
  assign m_axi_aruser[7] = \<const0> ;
  assign m_axi_aruser[6] = \<const0> ;
  assign m_axi_aruser[5] = \<const0> ;
  assign m_axi_aruser[4] = \<const0> ;
  assign m_axi_aruser[3] = \<const0> ;
  assign m_axi_aruser[2] = \<const0> ;
  assign m_axi_aruser[1] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[1023] = \<const0> ;
  assign m_axi_awuser[1022] = \<const0> ;
  assign m_axi_awuser[1021] = \<const0> ;
  assign m_axi_awuser[1020] = \<const0> ;
  assign m_axi_awuser[1019] = \<const0> ;
  assign m_axi_awuser[1018] = \<const0> ;
  assign m_axi_awuser[1017] = \<const0> ;
  assign m_axi_awuser[1016] = \<const0> ;
  assign m_axi_awuser[1015] = \<const0> ;
  assign m_axi_awuser[1014] = \<const0> ;
  assign m_axi_awuser[1013] = \<const0> ;
  assign m_axi_awuser[1012] = \<const0> ;
  assign m_axi_awuser[1011] = \<const0> ;
  assign m_axi_awuser[1010] = \<const0> ;
  assign m_axi_awuser[1009] = \<const0> ;
  assign m_axi_awuser[1008] = \<const0> ;
  assign m_axi_awuser[1007] = \<const0> ;
  assign m_axi_awuser[1006] = \<const0> ;
  assign m_axi_awuser[1005] = \<const0> ;
  assign m_axi_awuser[1004] = \<const0> ;
  assign m_axi_awuser[1003] = \<const0> ;
  assign m_axi_awuser[1002] = \<const0> ;
  assign m_axi_awuser[1001] = \<const0> ;
  assign m_axi_awuser[1000] = \<const0> ;
  assign m_axi_awuser[999] = \<const0> ;
  assign m_axi_awuser[998] = \<const0> ;
  assign m_axi_awuser[997] = \<const0> ;
  assign m_axi_awuser[996] = \<const0> ;
  assign m_axi_awuser[995] = \<const0> ;
  assign m_axi_awuser[994] = \<const0> ;
  assign m_axi_awuser[993] = \<const0> ;
  assign m_axi_awuser[992] = \<const0> ;
  assign m_axi_awuser[991] = \<const0> ;
  assign m_axi_awuser[990] = \<const0> ;
  assign m_axi_awuser[989] = \<const0> ;
  assign m_axi_awuser[988] = \<const0> ;
  assign m_axi_awuser[987] = \<const0> ;
  assign m_axi_awuser[986] = \<const0> ;
  assign m_axi_awuser[985] = \<const0> ;
  assign m_axi_awuser[984] = \<const0> ;
  assign m_axi_awuser[983] = \<const0> ;
  assign m_axi_awuser[982] = \<const0> ;
  assign m_axi_awuser[981] = \<const0> ;
  assign m_axi_awuser[980] = \<const0> ;
  assign m_axi_awuser[979] = \<const0> ;
  assign m_axi_awuser[978] = \<const0> ;
  assign m_axi_awuser[977] = \<const0> ;
  assign m_axi_awuser[976] = \<const0> ;
  assign m_axi_awuser[975] = \<const0> ;
  assign m_axi_awuser[974] = \<const0> ;
  assign m_axi_awuser[973] = \<const0> ;
  assign m_axi_awuser[972] = \<const0> ;
  assign m_axi_awuser[971] = \<const0> ;
  assign m_axi_awuser[970] = \<const0> ;
  assign m_axi_awuser[969] = \<const0> ;
  assign m_axi_awuser[968] = \<const0> ;
  assign m_axi_awuser[967] = \<const0> ;
  assign m_axi_awuser[966] = \<const0> ;
  assign m_axi_awuser[965] = \<const0> ;
  assign m_axi_awuser[964] = \<const0> ;
  assign m_axi_awuser[963] = \<const0> ;
  assign m_axi_awuser[962] = \<const0> ;
  assign m_axi_awuser[961] = \<const0> ;
  assign m_axi_awuser[960] = \<const0> ;
  assign m_axi_awuser[959] = \<const0> ;
  assign m_axi_awuser[958] = \<const0> ;
  assign m_axi_awuser[957] = \<const0> ;
  assign m_axi_awuser[956] = \<const0> ;
  assign m_axi_awuser[955] = \<const0> ;
  assign m_axi_awuser[954] = \<const0> ;
  assign m_axi_awuser[953] = \<const0> ;
  assign m_axi_awuser[952] = \<const0> ;
  assign m_axi_awuser[951] = \<const0> ;
  assign m_axi_awuser[950] = \<const0> ;
  assign m_axi_awuser[949] = \<const0> ;
  assign m_axi_awuser[948] = \<const0> ;
  assign m_axi_awuser[947] = \<const0> ;
  assign m_axi_awuser[946] = \<const0> ;
  assign m_axi_awuser[945] = \<const0> ;
  assign m_axi_awuser[944] = \<const0> ;
  assign m_axi_awuser[943] = \<const0> ;
  assign m_axi_awuser[942] = \<const0> ;
  assign m_axi_awuser[941] = \<const0> ;
  assign m_axi_awuser[940] = \<const0> ;
  assign m_axi_awuser[939] = \<const0> ;
  assign m_axi_awuser[938] = \<const0> ;
  assign m_axi_awuser[937] = \<const0> ;
  assign m_axi_awuser[936] = \<const0> ;
  assign m_axi_awuser[935] = \<const0> ;
  assign m_axi_awuser[934] = \<const0> ;
  assign m_axi_awuser[933] = \<const0> ;
  assign m_axi_awuser[932] = \<const0> ;
  assign m_axi_awuser[931] = \<const0> ;
  assign m_axi_awuser[930] = \<const0> ;
  assign m_axi_awuser[929] = \<const0> ;
  assign m_axi_awuser[928] = \<const0> ;
  assign m_axi_awuser[927] = \<const0> ;
  assign m_axi_awuser[926] = \<const0> ;
  assign m_axi_awuser[925] = \<const0> ;
  assign m_axi_awuser[924] = \<const0> ;
  assign m_axi_awuser[923] = \<const0> ;
  assign m_axi_awuser[922] = \<const0> ;
  assign m_axi_awuser[921] = \<const0> ;
  assign m_axi_awuser[920] = \<const0> ;
  assign m_axi_awuser[919] = \<const0> ;
  assign m_axi_awuser[918] = \<const0> ;
  assign m_axi_awuser[917] = \<const0> ;
  assign m_axi_awuser[916] = \<const0> ;
  assign m_axi_awuser[915] = \<const0> ;
  assign m_axi_awuser[914] = \<const0> ;
  assign m_axi_awuser[913] = \<const0> ;
  assign m_axi_awuser[912] = \<const0> ;
  assign m_axi_awuser[911] = \<const0> ;
  assign m_axi_awuser[910] = \<const0> ;
  assign m_axi_awuser[909] = \<const0> ;
  assign m_axi_awuser[908] = \<const0> ;
  assign m_axi_awuser[907] = \<const0> ;
  assign m_axi_awuser[906] = \<const0> ;
  assign m_axi_awuser[905] = \<const0> ;
  assign m_axi_awuser[904] = \<const0> ;
  assign m_axi_awuser[903] = \<const0> ;
  assign m_axi_awuser[902] = \<const0> ;
  assign m_axi_awuser[901] = \<const0> ;
  assign m_axi_awuser[900] = \<const0> ;
  assign m_axi_awuser[899] = \<const0> ;
  assign m_axi_awuser[898] = \<const0> ;
  assign m_axi_awuser[897] = \<const0> ;
  assign m_axi_awuser[896] = \<const0> ;
  assign m_axi_awuser[895] = \<const0> ;
  assign m_axi_awuser[894] = \<const0> ;
  assign m_axi_awuser[893] = \<const0> ;
  assign m_axi_awuser[892] = \<const0> ;
  assign m_axi_awuser[891] = \<const0> ;
  assign m_axi_awuser[890] = \<const0> ;
  assign m_axi_awuser[889] = \<const0> ;
  assign m_axi_awuser[888] = \<const0> ;
  assign m_axi_awuser[887] = \<const0> ;
  assign m_axi_awuser[886] = \<const0> ;
  assign m_axi_awuser[885] = \<const0> ;
  assign m_axi_awuser[884] = \<const0> ;
  assign m_axi_awuser[883] = \<const0> ;
  assign m_axi_awuser[882] = \<const0> ;
  assign m_axi_awuser[881] = \<const0> ;
  assign m_axi_awuser[880] = \<const0> ;
  assign m_axi_awuser[879] = \<const0> ;
  assign m_axi_awuser[878] = \<const0> ;
  assign m_axi_awuser[877] = \<const0> ;
  assign m_axi_awuser[876] = \<const0> ;
  assign m_axi_awuser[875] = \<const0> ;
  assign m_axi_awuser[874] = \<const0> ;
  assign m_axi_awuser[873] = \<const0> ;
  assign m_axi_awuser[872] = \<const0> ;
  assign m_axi_awuser[871] = \<const0> ;
  assign m_axi_awuser[870] = \<const0> ;
  assign m_axi_awuser[869] = \<const0> ;
  assign m_axi_awuser[868] = \<const0> ;
  assign m_axi_awuser[867] = \<const0> ;
  assign m_axi_awuser[866] = \<const0> ;
  assign m_axi_awuser[865] = \<const0> ;
  assign m_axi_awuser[864] = \<const0> ;
  assign m_axi_awuser[863] = \<const0> ;
  assign m_axi_awuser[862] = \<const0> ;
  assign m_axi_awuser[861] = \<const0> ;
  assign m_axi_awuser[860] = \<const0> ;
  assign m_axi_awuser[859] = \<const0> ;
  assign m_axi_awuser[858] = \<const0> ;
  assign m_axi_awuser[857] = \<const0> ;
  assign m_axi_awuser[856] = \<const0> ;
  assign m_axi_awuser[855] = \<const0> ;
  assign m_axi_awuser[854] = \<const0> ;
  assign m_axi_awuser[853] = \<const0> ;
  assign m_axi_awuser[852] = \<const0> ;
  assign m_axi_awuser[851] = \<const0> ;
  assign m_axi_awuser[850] = \<const0> ;
  assign m_axi_awuser[849] = \<const0> ;
  assign m_axi_awuser[848] = \<const0> ;
  assign m_axi_awuser[847] = \<const0> ;
  assign m_axi_awuser[846] = \<const0> ;
  assign m_axi_awuser[845] = \<const0> ;
  assign m_axi_awuser[844] = \<const0> ;
  assign m_axi_awuser[843] = \<const0> ;
  assign m_axi_awuser[842] = \<const0> ;
  assign m_axi_awuser[841] = \<const0> ;
  assign m_axi_awuser[840] = \<const0> ;
  assign m_axi_awuser[839] = \<const0> ;
  assign m_axi_awuser[838] = \<const0> ;
  assign m_axi_awuser[837] = \<const0> ;
  assign m_axi_awuser[836] = \<const0> ;
  assign m_axi_awuser[835] = \<const0> ;
  assign m_axi_awuser[834] = \<const0> ;
  assign m_axi_awuser[833] = \<const0> ;
  assign m_axi_awuser[832] = \<const0> ;
  assign m_axi_awuser[831] = \<const0> ;
  assign m_axi_awuser[830] = \<const0> ;
  assign m_axi_awuser[829] = \<const0> ;
  assign m_axi_awuser[828] = \<const0> ;
  assign m_axi_awuser[827] = \<const0> ;
  assign m_axi_awuser[826] = \<const0> ;
  assign m_axi_awuser[825] = \<const0> ;
  assign m_axi_awuser[824] = \<const0> ;
  assign m_axi_awuser[823] = \<const0> ;
  assign m_axi_awuser[822] = \<const0> ;
  assign m_axi_awuser[821] = \<const0> ;
  assign m_axi_awuser[820] = \<const0> ;
  assign m_axi_awuser[819] = \<const0> ;
  assign m_axi_awuser[818] = \<const0> ;
  assign m_axi_awuser[817] = \<const0> ;
  assign m_axi_awuser[816] = \<const0> ;
  assign m_axi_awuser[815] = \<const0> ;
  assign m_axi_awuser[814] = \<const0> ;
  assign m_axi_awuser[813] = \<const0> ;
  assign m_axi_awuser[812] = \<const0> ;
  assign m_axi_awuser[811] = \<const0> ;
  assign m_axi_awuser[810] = \<const0> ;
  assign m_axi_awuser[809] = \<const0> ;
  assign m_axi_awuser[808] = \<const0> ;
  assign m_axi_awuser[807] = \<const0> ;
  assign m_axi_awuser[806] = \<const0> ;
  assign m_axi_awuser[805] = \<const0> ;
  assign m_axi_awuser[804] = \<const0> ;
  assign m_axi_awuser[803] = \<const0> ;
  assign m_axi_awuser[802] = \<const0> ;
  assign m_axi_awuser[801] = \<const0> ;
  assign m_axi_awuser[800] = \<const0> ;
  assign m_axi_awuser[799] = \<const0> ;
  assign m_axi_awuser[798] = \<const0> ;
  assign m_axi_awuser[797] = \<const0> ;
  assign m_axi_awuser[796] = \<const0> ;
  assign m_axi_awuser[795] = \<const0> ;
  assign m_axi_awuser[794] = \<const0> ;
  assign m_axi_awuser[793] = \<const0> ;
  assign m_axi_awuser[792] = \<const0> ;
  assign m_axi_awuser[791] = \<const0> ;
  assign m_axi_awuser[790] = \<const0> ;
  assign m_axi_awuser[789] = \<const0> ;
  assign m_axi_awuser[788] = \<const0> ;
  assign m_axi_awuser[787] = \<const0> ;
  assign m_axi_awuser[786] = \<const0> ;
  assign m_axi_awuser[785] = \<const0> ;
  assign m_axi_awuser[784] = \<const0> ;
  assign m_axi_awuser[783] = \<const0> ;
  assign m_axi_awuser[782] = \<const0> ;
  assign m_axi_awuser[781] = \<const0> ;
  assign m_axi_awuser[780] = \<const0> ;
  assign m_axi_awuser[779] = \<const0> ;
  assign m_axi_awuser[778] = \<const0> ;
  assign m_axi_awuser[777] = \<const0> ;
  assign m_axi_awuser[776] = \<const0> ;
  assign m_axi_awuser[775] = \<const0> ;
  assign m_axi_awuser[774] = \<const0> ;
  assign m_axi_awuser[773] = \<const0> ;
  assign m_axi_awuser[772] = \<const0> ;
  assign m_axi_awuser[771] = \<const0> ;
  assign m_axi_awuser[770] = \<const0> ;
  assign m_axi_awuser[769] = \<const0> ;
  assign m_axi_awuser[768] = \<const0> ;
  assign m_axi_awuser[767] = \<const0> ;
  assign m_axi_awuser[766] = \<const0> ;
  assign m_axi_awuser[765] = \<const0> ;
  assign m_axi_awuser[764] = \<const0> ;
  assign m_axi_awuser[763] = \<const0> ;
  assign m_axi_awuser[762] = \<const0> ;
  assign m_axi_awuser[761] = \<const0> ;
  assign m_axi_awuser[760] = \<const0> ;
  assign m_axi_awuser[759] = \<const0> ;
  assign m_axi_awuser[758] = \<const0> ;
  assign m_axi_awuser[757] = \<const0> ;
  assign m_axi_awuser[756] = \<const0> ;
  assign m_axi_awuser[755] = \<const0> ;
  assign m_axi_awuser[754] = \<const0> ;
  assign m_axi_awuser[753] = \<const0> ;
  assign m_axi_awuser[752] = \<const0> ;
  assign m_axi_awuser[751] = \<const0> ;
  assign m_axi_awuser[750] = \<const0> ;
  assign m_axi_awuser[749] = \<const0> ;
  assign m_axi_awuser[748] = \<const0> ;
  assign m_axi_awuser[747] = \<const0> ;
  assign m_axi_awuser[746] = \<const0> ;
  assign m_axi_awuser[745] = \<const0> ;
  assign m_axi_awuser[744] = \<const0> ;
  assign m_axi_awuser[743] = \<const0> ;
  assign m_axi_awuser[742] = \<const0> ;
  assign m_axi_awuser[741] = \<const0> ;
  assign m_axi_awuser[740] = \<const0> ;
  assign m_axi_awuser[739] = \<const0> ;
  assign m_axi_awuser[738] = \<const0> ;
  assign m_axi_awuser[737] = \<const0> ;
  assign m_axi_awuser[736] = \<const0> ;
  assign m_axi_awuser[735] = \<const0> ;
  assign m_axi_awuser[734] = \<const0> ;
  assign m_axi_awuser[733] = \<const0> ;
  assign m_axi_awuser[732] = \<const0> ;
  assign m_axi_awuser[731] = \<const0> ;
  assign m_axi_awuser[730] = \<const0> ;
  assign m_axi_awuser[729] = \<const0> ;
  assign m_axi_awuser[728] = \<const0> ;
  assign m_axi_awuser[727] = \<const0> ;
  assign m_axi_awuser[726] = \<const0> ;
  assign m_axi_awuser[725] = \<const0> ;
  assign m_axi_awuser[724] = \<const0> ;
  assign m_axi_awuser[723] = \<const0> ;
  assign m_axi_awuser[722] = \<const0> ;
  assign m_axi_awuser[721] = \<const0> ;
  assign m_axi_awuser[720] = \<const0> ;
  assign m_axi_awuser[719] = \<const0> ;
  assign m_axi_awuser[718] = \<const0> ;
  assign m_axi_awuser[717] = \<const0> ;
  assign m_axi_awuser[716] = \<const0> ;
  assign m_axi_awuser[715] = \<const0> ;
  assign m_axi_awuser[714] = \<const0> ;
  assign m_axi_awuser[713] = \<const0> ;
  assign m_axi_awuser[712] = \<const0> ;
  assign m_axi_awuser[711] = \<const0> ;
  assign m_axi_awuser[710] = \<const0> ;
  assign m_axi_awuser[709] = \<const0> ;
  assign m_axi_awuser[708] = \<const0> ;
  assign m_axi_awuser[707] = \<const0> ;
  assign m_axi_awuser[706] = \<const0> ;
  assign m_axi_awuser[705] = \<const0> ;
  assign m_axi_awuser[704] = \<const0> ;
  assign m_axi_awuser[703] = \<const0> ;
  assign m_axi_awuser[702] = \<const0> ;
  assign m_axi_awuser[701] = \<const0> ;
  assign m_axi_awuser[700] = \<const0> ;
  assign m_axi_awuser[699] = \<const0> ;
  assign m_axi_awuser[698] = \<const0> ;
  assign m_axi_awuser[697] = \<const0> ;
  assign m_axi_awuser[696] = \<const0> ;
  assign m_axi_awuser[695] = \<const0> ;
  assign m_axi_awuser[694] = \<const0> ;
  assign m_axi_awuser[693] = \<const0> ;
  assign m_axi_awuser[692] = \<const0> ;
  assign m_axi_awuser[691] = \<const0> ;
  assign m_axi_awuser[690] = \<const0> ;
  assign m_axi_awuser[689] = \<const0> ;
  assign m_axi_awuser[688] = \<const0> ;
  assign m_axi_awuser[687] = \<const0> ;
  assign m_axi_awuser[686] = \<const0> ;
  assign m_axi_awuser[685] = \<const0> ;
  assign m_axi_awuser[684] = \<const0> ;
  assign m_axi_awuser[683] = \<const0> ;
  assign m_axi_awuser[682] = \<const0> ;
  assign m_axi_awuser[681] = \<const0> ;
  assign m_axi_awuser[680] = \<const0> ;
  assign m_axi_awuser[679] = \<const0> ;
  assign m_axi_awuser[678] = \<const0> ;
  assign m_axi_awuser[677] = \<const0> ;
  assign m_axi_awuser[676] = \<const0> ;
  assign m_axi_awuser[675] = \<const0> ;
  assign m_axi_awuser[674] = \<const0> ;
  assign m_axi_awuser[673] = \<const0> ;
  assign m_axi_awuser[672] = \<const0> ;
  assign m_axi_awuser[671] = \<const0> ;
  assign m_axi_awuser[670] = \<const0> ;
  assign m_axi_awuser[669] = \<const0> ;
  assign m_axi_awuser[668] = \<const0> ;
  assign m_axi_awuser[667] = \<const0> ;
  assign m_axi_awuser[666] = \<const0> ;
  assign m_axi_awuser[665] = \<const0> ;
  assign m_axi_awuser[664] = \<const0> ;
  assign m_axi_awuser[663] = \<const0> ;
  assign m_axi_awuser[662] = \<const0> ;
  assign m_axi_awuser[661] = \<const0> ;
  assign m_axi_awuser[660] = \<const0> ;
  assign m_axi_awuser[659] = \<const0> ;
  assign m_axi_awuser[658] = \<const0> ;
  assign m_axi_awuser[657] = \<const0> ;
  assign m_axi_awuser[656] = \<const0> ;
  assign m_axi_awuser[655] = \<const0> ;
  assign m_axi_awuser[654] = \<const0> ;
  assign m_axi_awuser[653] = \<const0> ;
  assign m_axi_awuser[652] = \<const0> ;
  assign m_axi_awuser[651] = \<const0> ;
  assign m_axi_awuser[650] = \<const0> ;
  assign m_axi_awuser[649] = \<const0> ;
  assign m_axi_awuser[648] = \<const0> ;
  assign m_axi_awuser[647] = \<const0> ;
  assign m_axi_awuser[646] = \<const0> ;
  assign m_axi_awuser[645] = \<const0> ;
  assign m_axi_awuser[644] = \<const0> ;
  assign m_axi_awuser[643] = \<const0> ;
  assign m_axi_awuser[642] = \<const0> ;
  assign m_axi_awuser[641] = \<const0> ;
  assign m_axi_awuser[640] = \<const0> ;
  assign m_axi_awuser[639] = \<const0> ;
  assign m_axi_awuser[638] = \<const0> ;
  assign m_axi_awuser[637] = \<const0> ;
  assign m_axi_awuser[636] = \<const0> ;
  assign m_axi_awuser[635] = \<const0> ;
  assign m_axi_awuser[634] = \<const0> ;
  assign m_axi_awuser[633] = \<const0> ;
  assign m_axi_awuser[632] = \<const0> ;
  assign m_axi_awuser[631] = \<const0> ;
  assign m_axi_awuser[630] = \<const0> ;
  assign m_axi_awuser[629] = \<const0> ;
  assign m_axi_awuser[628] = \<const0> ;
  assign m_axi_awuser[627] = \<const0> ;
  assign m_axi_awuser[626] = \<const0> ;
  assign m_axi_awuser[625] = \<const0> ;
  assign m_axi_awuser[624] = \<const0> ;
  assign m_axi_awuser[623] = \<const0> ;
  assign m_axi_awuser[622] = \<const0> ;
  assign m_axi_awuser[621] = \<const0> ;
  assign m_axi_awuser[620] = \<const0> ;
  assign m_axi_awuser[619] = \<const0> ;
  assign m_axi_awuser[618] = \<const0> ;
  assign m_axi_awuser[617] = \<const0> ;
  assign m_axi_awuser[616] = \<const0> ;
  assign m_axi_awuser[615] = \<const0> ;
  assign m_axi_awuser[614] = \<const0> ;
  assign m_axi_awuser[613] = \<const0> ;
  assign m_axi_awuser[612] = \<const0> ;
  assign m_axi_awuser[611] = \<const0> ;
  assign m_axi_awuser[610] = \<const0> ;
  assign m_axi_awuser[609] = \<const0> ;
  assign m_axi_awuser[608] = \<const0> ;
  assign m_axi_awuser[607] = \<const0> ;
  assign m_axi_awuser[606] = \<const0> ;
  assign m_axi_awuser[605] = \<const0> ;
  assign m_axi_awuser[604] = \<const0> ;
  assign m_axi_awuser[603] = \<const0> ;
  assign m_axi_awuser[602] = \<const0> ;
  assign m_axi_awuser[601] = \<const0> ;
  assign m_axi_awuser[600] = \<const0> ;
  assign m_axi_awuser[599] = \<const0> ;
  assign m_axi_awuser[598] = \<const0> ;
  assign m_axi_awuser[597] = \<const0> ;
  assign m_axi_awuser[596] = \<const0> ;
  assign m_axi_awuser[595] = \<const0> ;
  assign m_axi_awuser[594] = \<const0> ;
  assign m_axi_awuser[593] = \<const0> ;
  assign m_axi_awuser[592] = \<const0> ;
  assign m_axi_awuser[591] = \<const0> ;
  assign m_axi_awuser[590] = \<const0> ;
  assign m_axi_awuser[589] = \<const0> ;
  assign m_axi_awuser[588] = \<const0> ;
  assign m_axi_awuser[587] = \<const0> ;
  assign m_axi_awuser[586] = \<const0> ;
  assign m_axi_awuser[585] = \<const0> ;
  assign m_axi_awuser[584] = \<const0> ;
  assign m_axi_awuser[583] = \<const0> ;
  assign m_axi_awuser[582] = \<const0> ;
  assign m_axi_awuser[581] = \<const0> ;
  assign m_axi_awuser[580] = \<const0> ;
  assign m_axi_awuser[579] = \<const0> ;
  assign m_axi_awuser[578] = \<const0> ;
  assign m_axi_awuser[577] = \<const0> ;
  assign m_axi_awuser[576] = \<const0> ;
  assign m_axi_awuser[575] = \<const0> ;
  assign m_axi_awuser[574] = \<const0> ;
  assign m_axi_awuser[573] = \<const0> ;
  assign m_axi_awuser[572] = \<const0> ;
  assign m_axi_awuser[571] = \<const0> ;
  assign m_axi_awuser[570] = \<const0> ;
  assign m_axi_awuser[569] = \<const0> ;
  assign m_axi_awuser[568] = \<const0> ;
  assign m_axi_awuser[567] = \<const0> ;
  assign m_axi_awuser[566] = \<const0> ;
  assign m_axi_awuser[565] = \<const0> ;
  assign m_axi_awuser[564] = \<const0> ;
  assign m_axi_awuser[563] = \<const0> ;
  assign m_axi_awuser[562] = \<const0> ;
  assign m_axi_awuser[561] = \<const0> ;
  assign m_axi_awuser[560] = \<const0> ;
  assign m_axi_awuser[559] = \<const0> ;
  assign m_axi_awuser[558] = \<const0> ;
  assign m_axi_awuser[557] = \<const0> ;
  assign m_axi_awuser[556] = \<const0> ;
  assign m_axi_awuser[555] = \<const0> ;
  assign m_axi_awuser[554] = \<const0> ;
  assign m_axi_awuser[553] = \<const0> ;
  assign m_axi_awuser[552] = \<const0> ;
  assign m_axi_awuser[551] = \<const0> ;
  assign m_axi_awuser[550] = \<const0> ;
  assign m_axi_awuser[549] = \<const0> ;
  assign m_axi_awuser[548] = \<const0> ;
  assign m_axi_awuser[547] = \<const0> ;
  assign m_axi_awuser[546] = \<const0> ;
  assign m_axi_awuser[545] = \<const0> ;
  assign m_axi_awuser[544] = \<const0> ;
  assign m_axi_awuser[543] = \<const0> ;
  assign m_axi_awuser[542] = \<const0> ;
  assign m_axi_awuser[541] = \<const0> ;
  assign m_axi_awuser[540] = \<const0> ;
  assign m_axi_awuser[539] = \<const0> ;
  assign m_axi_awuser[538] = \<const0> ;
  assign m_axi_awuser[537] = \<const0> ;
  assign m_axi_awuser[536] = \<const0> ;
  assign m_axi_awuser[535] = \<const0> ;
  assign m_axi_awuser[534] = \<const0> ;
  assign m_axi_awuser[533] = \<const0> ;
  assign m_axi_awuser[532] = \<const0> ;
  assign m_axi_awuser[531] = \<const0> ;
  assign m_axi_awuser[530] = \<const0> ;
  assign m_axi_awuser[529] = \<const0> ;
  assign m_axi_awuser[528] = \<const0> ;
  assign m_axi_awuser[527] = \<const0> ;
  assign m_axi_awuser[526] = \<const0> ;
  assign m_axi_awuser[525] = \<const0> ;
  assign m_axi_awuser[524] = \<const0> ;
  assign m_axi_awuser[523] = \<const0> ;
  assign m_axi_awuser[522] = \<const0> ;
  assign m_axi_awuser[521] = \<const0> ;
  assign m_axi_awuser[520] = \<const0> ;
  assign m_axi_awuser[519] = \<const0> ;
  assign m_axi_awuser[518] = \<const0> ;
  assign m_axi_awuser[517] = \<const0> ;
  assign m_axi_awuser[516] = \<const0> ;
  assign m_axi_awuser[515] = \<const0> ;
  assign m_axi_awuser[514] = \<const0> ;
  assign m_axi_awuser[513] = \<const0> ;
  assign m_axi_awuser[512] = \<const0> ;
  assign m_axi_awuser[511] = \<const0> ;
  assign m_axi_awuser[510] = \<const0> ;
  assign m_axi_awuser[509] = \<const0> ;
  assign m_axi_awuser[508] = \<const0> ;
  assign m_axi_awuser[507] = \<const0> ;
  assign m_axi_awuser[506] = \<const0> ;
  assign m_axi_awuser[505] = \<const0> ;
  assign m_axi_awuser[504] = \<const0> ;
  assign m_axi_awuser[503] = \<const0> ;
  assign m_axi_awuser[502] = \<const0> ;
  assign m_axi_awuser[501] = \<const0> ;
  assign m_axi_awuser[500] = \<const0> ;
  assign m_axi_awuser[499] = \<const0> ;
  assign m_axi_awuser[498] = \<const0> ;
  assign m_axi_awuser[497] = \<const0> ;
  assign m_axi_awuser[496] = \<const0> ;
  assign m_axi_awuser[495] = \<const0> ;
  assign m_axi_awuser[494] = \<const0> ;
  assign m_axi_awuser[493] = \<const0> ;
  assign m_axi_awuser[492] = \<const0> ;
  assign m_axi_awuser[491] = \<const0> ;
  assign m_axi_awuser[490] = \<const0> ;
  assign m_axi_awuser[489] = \<const0> ;
  assign m_axi_awuser[488] = \<const0> ;
  assign m_axi_awuser[487] = \<const0> ;
  assign m_axi_awuser[486] = \<const0> ;
  assign m_axi_awuser[485] = \<const0> ;
  assign m_axi_awuser[484] = \<const0> ;
  assign m_axi_awuser[483] = \<const0> ;
  assign m_axi_awuser[482] = \<const0> ;
  assign m_axi_awuser[481] = \<const0> ;
  assign m_axi_awuser[480] = \<const0> ;
  assign m_axi_awuser[479] = \<const0> ;
  assign m_axi_awuser[478] = \<const0> ;
  assign m_axi_awuser[477] = \<const0> ;
  assign m_axi_awuser[476] = \<const0> ;
  assign m_axi_awuser[475] = \<const0> ;
  assign m_axi_awuser[474] = \<const0> ;
  assign m_axi_awuser[473] = \<const0> ;
  assign m_axi_awuser[472] = \<const0> ;
  assign m_axi_awuser[471] = \<const0> ;
  assign m_axi_awuser[470] = \<const0> ;
  assign m_axi_awuser[469] = \<const0> ;
  assign m_axi_awuser[468] = \<const0> ;
  assign m_axi_awuser[467] = \<const0> ;
  assign m_axi_awuser[466] = \<const0> ;
  assign m_axi_awuser[465] = \<const0> ;
  assign m_axi_awuser[464] = \<const0> ;
  assign m_axi_awuser[463] = \<const0> ;
  assign m_axi_awuser[462] = \<const0> ;
  assign m_axi_awuser[461] = \<const0> ;
  assign m_axi_awuser[460] = \<const0> ;
  assign m_axi_awuser[459] = \<const0> ;
  assign m_axi_awuser[458] = \<const0> ;
  assign m_axi_awuser[457] = \<const0> ;
  assign m_axi_awuser[456] = \<const0> ;
  assign m_axi_awuser[455] = \<const0> ;
  assign m_axi_awuser[454] = \<const0> ;
  assign m_axi_awuser[453] = \<const0> ;
  assign m_axi_awuser[452] = \<const0> ;
  assign m_axi_awuser[451] = \<const0> ;
  assign m_axi_awuser[450] = \<const0> ;
  assign m_axi_awuser[449] = \<const0> ;
  assign m_axi_awuser[448] = \<const0> ;
  assign m_axi_awuser[447] = \<const0> ;
  assign m_axi_awuser[446] = \<const0> ;
  assign m_axi_awuser[445] = \<const0> ;
  assign m_axi_awuser[444] = \<const0> ;
  assign m_axi_awuser[443] = \<const0> ;
  assign m_axi_awuser[442] = \<const0> ;
  assign m_axi_awuser[441] = \<const0> ;
  assign m_axi_awuser[440] = \<const0> ;
  assign m_axi_awuser[439] = \<const0> ;
  assign m_axi_awuser[438] = \<const0> ;
  assign m_axi_awuser[437] = \<const0> ;
  assign m_axi_awuser[436] = \<const0> ;
  assign m_axi_awuser[435] = \<const0> ;
  assign m_axi_awuser[434] = \<const0> ;
  assign m_axi_awuser[433] = \<const0> ;
  assign m_axi_awuser[432] = \<const0> ;
  assign m_axi_awuser[431] = \<const0> ;
  assign m_axi_awuser[430] = \<const0> ;
  assign m_axi_awuser[429] = \<const0> ;
  assign m_axi_awuser[428] = \<const0> ;
  assign m_axi_awuser[427] = \<const0> ;
  assign m_axi_awuser[426] = \<const0> ;
  assign m_axi_awuser[425] = \<const0> ;
  assign m_axi_awuser[424] = \<const0> ;
  assign m_axi_awuser[423] = \<const0> ;
  assign m_axi_awuser[422] = \<const0> ;
  assign m_axi_awuser[421] = \<const0> ;
  assign m_axi_awuser[420] = \<const0> ;
  assign m_axi_awuser[419] = \<const0> ;
  assign m_axi_awuser[418] = \<const0> ;
  assign m_axi_awuser[417] = \<const0> ;
  assign m_axi_awuser[416] = \<const0> ;
  assign m_axi_awuser[415] = \<const0> ;
  assign m_axi_awuser[414] = \<const0> ;
  assign m_axi_awuser[413] = \<const0> ;
  assign m_axi_awuser[412] = \<const0> ;
  assign m_axi_awuser[411] = \<const0> ;
  assign m_axi_awuser[410] = \<const0> ;
  assign m_axi_awuser[409] = \<const0> ;
  assign m_axi_awuser[408] = \<const0> ;
  assign m_axi_awuser[407] = \<const0> ;
  assign m_axi_awuser[406] = \<const0> ;
  assign m_axi_awuser[405] = \<const0> ;
  assign m_axi_awuser[404] = \<const0> ;
  assign m_axi_awuser[403] = \<const0> ;
  assign m_axi_awuser[402] = \<const0> ;
  assign m_axi_awuser[401] = \<const0> ;
  assign m_axi_awuser[400] = \<const0> ;
  assign m_axi_awuser[399] = \<const0> ;
  assign m_axi_awuser[398] = \<const0> ;
  assign m_axi_awuser[397] = \<const0> ;
  assign m_axi_awuser[396] = \<const0> ;
  assign m_axi_awuser[395] = \<const0> ;
  assign m_axi_awuser[394] = \<const0> ;
  assign m_axi_awuser[393] = \<const0> ;
  assign m_axi_awuser[392] = \<const0> ;
  assign m_axi_awuser[391] = \<const0> ;
  assign m_axi_awuser[390] = \<const0> ;
  assign m_axi_awuser[389] = \<const0> ;
  assign m_axi_awuser[388] = \<const0> ;
  assign m_axi_awuser[387] = \<const0> ;
  assign m_axi_awuser[386] = \<const0> ;
  assign m_axi_awuser[385] = \<const0> ;
  assign m_axi_awuser[384] = \<const0> ;
  assign m_axi_awuser[383] = \<const0> ;
  assign m_axi_awuser[382] = \<const0> ;
  assign m_axi_awuser[381] = \<const0> ;
  assign m_axi_awuser[380] = \<const0> ;
  assign m_axi_awuser[379] = \<const0> ;
  assign m_axi_awuser[378] = \<const0> ;
  assign m_axi_awuser[377] = \<const0> ;
  assign m_axi_awuser[376] = \<const0> ;
  assign m_axi_awuser[375] = \<const0> ;
  assign m_axi_awuser[374] = \<const0> ;
  assign m_axi_awuser[373] = \<const0> ;
  assign m_axi_awuser[372] = \<const0> ;
  assign m_axi_awuser[371] = \<const0> ;
  assign m_axi_awuser[370] = \<const0> ;
  assign m_axi_awuser[369] = \<const0> ;
  assign m_axi_awuser[368] = \<const0> ;
  assign m_axi_awuser[367] = \<const0> ;
  assign m_axi_awuser[366] = \<const0> ;
  assign m_axi_awuser[365] = \<const0> ;
  assign m_axi_awuser[364] = \<const0> ;
  assign m_axi_awuser[363] = \<const0> ;
  assign m_axi_awuser[362] = \<const0> ;
  assign m_axi_awuser[361] = \<const0> ;
  assign m_axi_awuser[360] = \<const0> ;
  assign m_axi_awuser[359] = \<const0> ;
  assign m_axi_awuser[358] = \<const0> ;
  assign m_axi_awuser[357] = \<const0> ;
  assign m_axi_awuser[356] = \<const0> ;
  assign m_axi_awuser[355] = \<const0> ;
  assign m_axi_awuser[354] = \<const0> ;
  assign m_axi_awuser[353] = \<const0> ;
  assign m_axi_awuser[352] = \<const0> ;
  assign m_axi_awuser[351] = \<const0> ;
  assign m_axi_awuser[350] = \<const0> ;
  assign m_axi_awuser[349] = \<const0> ;
  assign m_axi_awuser[348] = \<const0> ;
  assign m_axi_awuser[347] = \<const0> ;
  assign m_axi_awuser[346] = \<const0> ;
  assign m_axi_awuser[345] = \<const0> ;
  assign m_axi_awuser[344] = \<const0> ;
  assign m_axi_awuser[343] = \<const0> ;
  assign m_axi_awuser[342] = \<const0> ;
  assign m_axi_awuser[341] = \<const0> ;
  assign m_axi_awuser[340] = \<const0> ;
  assign m_axi_awuser[339] = \<const0> ;
  assign m_axi_awuser[338] = \<const0> ;
  assign m_axi_awuser[337] = \<const0> ;
  assign m_axi_awuser[336] = \<const0> ;
  assign m_axi_awuser[335] = \<const0> ;
  assign m_axi_awuser[334] = \<const0> ;
  assign m_axi_awuser[333] = \<const0> ;
  assign m_axi_awuser[332] = \<const0> ;
  assign m_axi_awuser[331] = \<const0> ;
  assign m_axi_awuser[330] = \<const0> ;
  assign m_axi_awuser[329] = \<const0> ;
  assign m_axi_awuser[328] = \<const0> ;
  assign m_axi_awuser[327] = \<const0> ;
  assign m_axi_awuser[326] = \<const0> ;
  assign m_axi_awuser[325] = \<const0> ;
  assign m_axi_awuser[324] = \<const0> ;
  assign m_axi_awuser[323] = \<const0> ;
  assign m_axi_awuser[322] = \<const0> ;
  assign m_axi_awuser[321] = \<const0> ;
  assign m_axi_awuser[320] = \<const0> ;
  assign m_axi_awuser[319] = \<const0> ;
  assign m_axi_awuser[318] = \<const0> ;
  assign m_axi_awuser[317] = \<const0> ;
  assign m_axi_awuser[316] = \<const0> ;
  assign m_axi_awuser[315] = \<const0> ;
  assign m_axi_awuser[314] = \<const0> ;
  assign m_axi_awuser[313] = \<const0> ;
  assign m_axi_awuser[312] = \<const0> ;
  assign m_axi_awuser[311] = \<const0> ;
  assign m_axi_awuser[310] = \<const0> ;
  assign m_axi_awuser[309] = \<const0> ;
  assign m_axi_awuser[308] = \<const0> ;
  assign m_axi_awuser[307] = \<const0> ;
  assign m_axi_awuser[306] = \<const0> ;
  assign m_axi_awuser[305] = \<const0> ;
  assign m_axi_awuser[304] = \<const0> ;
  assign m_axi_awuser[303] = \<const0> ;
  assign m_axi_awuser[302] = \<const0> ;
  assign m_axi_awuser[301] = \<const0> ;
  assign m_axi_awuser[300] = \<const0> ;
  assign m_axi_awuser[299] = \<const0> ;
  assign m_axi_awuser[298] = \<const0> ;
  assign m_axi_awuser[297] = \<const0> ;
  assign m_axi_awuser[296] = \<const0> ;
  assign m_axi_awuser[295] = \<const0> ;
  assign m_axi_awuser[294] = \<const0> ;
  assign m_axi_awuser[293] = \<const0> ;
  assign m_axi_awuser[292] = \<const0> ;
  assign m_axi_awuser[291] = \<const0> ;
  assign m_axi_awuser[290] = \<const0> ;
  assign m_axi_awuser[289] = \<const0> ;
  assign m_axi_awuser[288] = \<const0> ;
  assign m_axi_awuser[287] = \<const0> ;
  assign m_axi_awuser[286] = \<const0> ;
  assign m_axi_awuser[285] = \<const0> ;
  assign m_axi_awuser[284] = \<const0> ;
  assign m_axi_awuser[283] = \<const0> ;
  assign m_axi_awuser[282] = \<const0> ;
  assign m_axi_awuser[281] = \<const0> ;
  assign m_axi_awuser[280] = \<const0> ;
  assign m_axi_awuser[279] = \<const0> ;
  assign m_axi_awuser[278] = \<const0> ;
  assign m_axi_awuser[277] = \<const0> ;
  assign m_axi_awuser[276] = \<const0> ;
  assign m_axi_awuser[275] = \<const0> ;
  assign m_axi_awuser[274] = \<const0> ;
  assign m_axi_awuser[273] = \<const0> ;
  assign m_axi_awuser[272] = \<const0> ;
  assign m_axi_awuser[271] = \<const0> ;
  assign m_axi_awuser[270] = \<const0> ;
  assign m_axi_awuser[269] = \<const0> ;
  assign m_axi_awuser[268] = \<const0> ;
  assign m_axi_awuser[267] = \<const0> ;
  assign m_axi_awuser[266] = \<const0> ;
  assign m_axi_awuser[265] = \<const0> ;
  assign m_axi_awuser[264] = \<const0> ;
  assign m_axi_awuser[263] = \<const0> ;
  assign m_axi_awuser[262] = \<const0> ;
  assign m_axi_awuser[261] = \<const0> ;
  assign m_axi_awuser[260] = \<const0> ;
  assign m_axi_awuser[259] = \<const0> ;
  assign m_axi_awuser[258] = \<const0> ;
  assign m_axi_awuser[257] = \<const0> ;
  assign m_axi_awuser[256] = \<const0> ;
  assign m_axi_awuser[255] = \<const0> ;
  assign m_axi_awuser[254] = \<const0> ;
  assign m_axi_awuser[253] = \<const0> ;
  assign m_axi_awuser[252] = \<const0> ;
  assign m_axi_awuser[251] = \<const0> ;
  assign m_axi_awuser[250] = \<const0> ;
  assign m_axi_awuser[249] = \<const0> ;
  assign m_axi_awuser[248] = \<const0> ;
  assign m_axi_awuser[247] = \<const0> ;
  assign m_axi_awuser[246] = \<const0> ;
  assign m_axi_awuser[245] = \<const0> ;
  assign m_axi_awuser[244] = \<const0> ;
  assign m_axi_awuser[243] = \<const0> ;
  assign m_axi_awuser[242] = \<const0> ;
  assign m_axi_awuser[241] = \<const0> ;
  assign m_axi_awuser[240] = \<const0> ;
  assign m_axi_awuser[239] = \<const0> ;
  assign m_axi_awuser[238] = \<const0> ;
  assign m_axi_awuser[237] = \<const0> ;
  assign m_axi_awuser[236] = \<const0> ;
  assign m_axi_awuser[235] = \<const0> ;
  assign m_axi_awuser[234] = \<const0> ;
  assign m_axi_awuser[233] = \<const0> ;
  assign m_axi_awuser[232] = \<const0> ;
  assign m_axi_awuser[231] = \<const0> ;
  assign m_axi_awuser[230] = \<const0> ;
  assign m_axi_awuser[229] = \<const0> ;
  assign m_axi_awuser[228] = \<const0> ;
  assign m_axi_awuser[227] = \<const0> ;
  assign m_axi_awuser[226] = \<const0> ;
  assign m_axi_awuser[225] = \<const0> ;
  assign m_axi_awuser[224] = \<const0> ;
  assign m_axi_awuser[223] = \<const0> ;
  assign m_axi_awuser[222] = \<const0> ;
  assign m_axi_awuser[221] = \<const0> ;
  assign m_axi_awuser[220] = \<const0> ;
  assign m_axi_awuser[219] = \<const0> ;
  assign m_axi_awuser[218] = \<const0> ;
  assign m_axi_awuser[217] = \<const0> ;
  assign m_axi_awuser[216] = \<const0> ;
  assign m_axi_awuser[215] = \<const0> ;
  assign m_axi_awuser[214] = \<const0> ;
  assign m_axi_awuser[213] = \<const0> ;
  assign m_axi_awuser[212] = \<const0> ;
  assign m_axi_awuser[211] = \<const0> ;
  assign m_axi_awuser[210] = \<const0> ;
  assign m_axi_awuser[209] = \<const0> ;
  assign m_axi_awuser[208] = \<const0> ;
  assign m_axi_awuser[207] = \<const0> ;
  assign m_axi_awuser[206] = \<const0> ;
  assign m_axi_awuser[205] = \<const0> ;
  assign m_axi_awuser[204] = \<const0> ;
  assign m_axi_awuser[203] = \<const0> ;
  assign m_axi_awuser[202] = \<const0> ;
  assign m_axi_awuser[201] = \<const0> ;
  assign m_axi_awuser[200] = \<const0> ;
  assign m_axi_awuser[199] = \<const0> ;
  assign m_axi_awuser[198] = \<const0> ;
  assign m_axi_awuser[197] = \<const0> ;
  assign m_axi_awuser[196] = \<const0> ;
  assign m_axi_awuser[195] = \<const0> ;
  assign m_axi_awuser[194] = \<const0> ;
  assign m_axi_awuser[193] = \<const0> ;
  assign m_axi_awuser[192] = \<const0> ;
  assign m_axi_awuser[191] = \<const0> ;
  assign m_axi_awuser[190] = \<const0> ;
  assign m_axi_awuser[189] = \<const0> ;
  assign m_axi_awuser[188] = \<const0> ;
  assign m_axi_awuser[187] = \<const0> ;
  assign m_axi_awuser[186] = \<const0> ;
  assign m_axi_awuser[185] = \<const0> ;
  assign m_axi_awuser[184] = \<const0> ;
  assign m_axi_awuser[183] = \<const0> ;
  assign m_axi_awuser[182] = \<const0> ;
  assign m_axi_awuser[181] = \<const0> ;
  assign m_axi_awuser[180] = \<const0> ;
  assign m_axi_awuser[179] = \<const0> ;
  assign m_axi_awuser[178] = \<const0> ;
  assign m_axi_awuser[177] = \<const0> ;
  assign m_axi_awuser[176] = \<const0> ;
  assign m_axi_awuser[175] = \<const0> ;
  assign m_axi_awuser[174] = \<const0> ;
  assign m_axi_awuser[173] = \<const0> ;
  assign m_axi_awuser[172] = \<const0> ;
  assign m_axi_awuser[171] = \<const0> ;
  assign m_axi_awuser[170] = \<const0> ;
  assign m_axi_awuser[169] = \<const0> ;
  assign m_axi_awuser[168] = \<const0> ;
  assign m_axi_awuser[167] = \<const0> ;
  assign m_axi_awuser[166] = \<const0> ;
  assign m_axi_awuser[165] = \<const0> ;
  assign m_axi_awuser[164] = \<const0> ;
  assign m_axi_awuser[163] = \<const0> ;
  assign m_axi_awuser[162] = \<const0> ;
  assign m_axi_awuser[161] = \<const0> ;
  assign m_axi_awuser[160] = \<const0> ;
  assign m_axi_awuser[159] = \<const0> ;
  assign m_axi_awuser[158] = \<const0> ;
  assign m_axi_awuser[157] = \<const0> ;
  assign m_axi_awuser[156] = \<const0> ;
  assign m_axi_awuser[155] = \<const0> ;
  assign m_axi_awuser[154] = \<const0> ;
  assign m_axi_awuser[153] = \<const0> ;
  assign m_axi_awuser[152] = \<const0> ;
  assign m_axi_awuser[151] = \<const0> ;
  assign m_axi_awuser[150] = \<const0> ;
  assign m_axi_awuser[149] = \<const0> ;
  assign m_axi_awuser[148] = \<const0> ;
  assign m_axi_awuser[147] = \<const0> ;
  assign m_axi_awuser[146] = \<const0> ;
  assign m_axi_awuser[145] = \<const0> ;
  assign m_axi_awuser[144] = \<const0> ;
  assign m_axi_awuser[143] = \<const0> ;
  assign m_axi_awuser[142] = \<const0> ;
  assign m_axi_awuser[141] = \<const0> ;
  assign m_axi_awuser[140] = \<const0> ;
  assign m_axi_awuser[139] = \<const0> ;
  assign m_axi_awuser[138] = \<const0> ;
  assign m_axi_awuser[137] = \<const0> ;
  assign m_axi_awuser[136] = \<const0> ;
  assign m_axi_awuser[135] = \<const0> ;
  assign m_axi_awuser[134] = \<const0> ;
  assign m_axi_awuser[133] = \<const0> ;
  assign m_axi_awuser[132] = \<const0> ;
  assign m_axi_awuser[131] = \<const0> ;
  assign m_axi_awuser[130] = \<const0> ;
  assign m_axi_awuser[129] = \<const0> ;
  assign m_axi_awuser[128] = \<const0> ;
  assign m_axi_awuser[127] = \<const0> ;
  assign m_axi_awuser[126] = \<const0> ;
  assign m_axi_awuser[125] = \<const0> ;
  assign m_axi_awuser[124] = \<const0> ;
  assign m_axi_awuser[123] = \<const0> ;
  assign m_axi_awuser[122] = \<const0> ;
  assign m_axi_awuser[121] = \<const0> ;
  assign m_axi_awuser[120] = \<const0> ;
  assign m_axi_awuser[119] = \<const0> ;
  assign m_axi_awuser[118] = \<const0> ;
  assign m_axi_awuser[117] = \<const0> ;
  assign m_axi_awuser[116] = \<const0> ;
  assign m_axi_awuser[115] = \<const0> ;
  assign m_axi_awuser[114] = \<const0> ;
  assign m_axi_awuser[113] = \<const0> ;
  assign m_axi_awuser[112] = \<const0> ;
  assign m_axi_awuser[111] = \<const0> ;
  assign m_axi_awuser[110] = \<const0> ;
  assign m_axi_awuser[109] = \<const0> ;
  assign m_axi_awuser[108] = \<const0> ;
  assign m_axi_awuser[107] = \<const0> ;
  assign m_axi_awuser[106] = \<const0> ;
  assign m_axi_awuser[105] = \<const0> ;
  assign m_axi_awuser[104] = \<const0> ;
  assign m_axi_awuser[103] = \<const0> ;
  assign m_axi_awuser[102] = \<const0> ;
  assign m_axi_awuser[101] = \<const0> ;
  assign m_axi_awuser[100] = \<const0> ;
  assign m_axi_awuser[99] = \<const0> ;
  assign m_axi_awuser[98] = \<const0> ;
  assign m_axi_awuser[97] = \<const0> ;
  assign m_axi_awuser[96] = \<const0> ;
  assign m_axi_awuser[95] = \<const0> ;
  assign m_axi_awuser[94] = \<const0> ;
  assign m_axi_awuser[93] = \<const0> ;
  assign m_axi_awuser[92] = \<const0> ;
  assign m_axi_awuser[91] = \<const0> ;
  assign m_axi_awuser[90] = \<const0> ;
  assign m_axi_awuser[89] = \<const0> ;
  assign m_axi_awuser[88] = \<const0> ;
  assign m_axi_awuser[87] = \<const0> ;
  assign m_axi_awuser[86] = \<const0> ;
  assign m_axi_awuser[85] = \<const0> ;
  assign m_axi_awuser[84] = \<const0> ;
  assign m_axi_awuser[83] = \<const0> ;
  assign m_axi_awuser[82] = \<const0> ;
  assign m_axi_awuser[81] = \<const0> ;
  assign m_axi_awuser[80] = \<const0> ;
  assign m_axi_awuser[79] = \<const0> ;
  assign m_axi_awuser[78] = \<const0> ;
  assign m_axi_awuser[77] = \<const0> ;
  assign m_axi_awuser[76] = \<const0> ;
  assign m_axi_awuser[75] = \<const0> ;
  assign m_axi_awuser[74] = \<const0> ;
  assign m_axi_awuser[73] = \<const0> ;
  assign m_axi_awuser[72] = \<const0> ;
  assign m_axi_awuser[71] = \<const0> ;
  assign m_axi_awuser[70] = \<const0> ;
  assign m_axi_awuser[69] = \<const0> ;
  assign m_axi_awuser[68] = \<const0> ;
  assign m_axi_awuser[67] = \<const0> ;
  assign m_axi_awuser[66] = \<const0> ;
  assign m_axi_awuser[65] = \<const0> ;
  assign m_axi_awuser[64] = \<const0> ;
  assign m_axi_awuser[63] = \<const0> ;
  assign m_axi_awuser[62] = \<const0> ;
  assign m_axi_awuser[61] = \<const0> ;
  assign m_axi_awuser[60] = \<const0> ;
  assign m_axi_awuser[59] = \<const0> ;
  assign m_axi_awuser[58] = \<const0> ;
  assign m_axi_awuser[57] = \<const0> ;
  assign m_axi_awuser[56] = \<const0> ;
  assign m_axi_awuser[55] = \<const0> ;
  assign m_axi_awuser[54] = \<const0> ;
  assign m_axi_awuser[53] = \<const0> ;
  assign m_axi_awuser[52] = \<const0> ;
  assign m_axi_awuser[51] = \<const0> ;
  assign m_axi_awuser[50] = \<const0> ;
  assign m_axi_awuser[49] = \<const0> ;
  assign m_axi_awuser[48] = \<const0> ;
  assign m_axi_awuser[47] = \<const0> ;
  assign m_axi_awuser[46] = \<const0> ;
  assign m_axi_awuser[45] = \<const0> ;
  assign m_axi_awuser[44] = \<const0> ;
  assign m_axi_awuser[43] = \<const0> ;
  assign m_axi_awuser[42] = \<const0> ;
  assign m_axi_awuser[41] = \<const0> ;
  assign m_axi_awuser[40] = \<const0> ;
  assign m_axi_awuser[39] = \<const0> ;
  assign m_axi_awuser[38] = \<const0> ;
  assign m_axi_awuser[37] = \<const0> ;
  assign m_axi_awuser[36] = \<const0> ;
  assign m_axi_awuser[35] = \<const0> ;
  assign m_axi_awuser[34] = \<const0> ;
  assign m_axi_awuser[33] = \<const0> ;
  assign m_axi_awuser[32] = \<const0> ;
  assign m_axi_awuser[31] = \<const0> ;
  assign m_axi_awuser[30] = \<const0> ;
  assign m_axi_awuser[29] = \<const0> ;
  assign m_axi_awuser[28] = \<const0> ;
  assign m_axi_awuser[27] = \<const0> ;
  assign m_axi_awuser[26] = \<const0> ;
  assign m_axi_awuser[25] = \<const0> ;
  assign m_axi_awuser[24] = \<const0> ;
  assign m_axi_awuser[23] = \<const0> ;
  assign m_axi_awuser[22] = \<const0> ;
  assign m_axi_awuser[21] = \<const0> ;
  assign m_axi_awuser[20] = \<const0> ;
  assign m_axi_awuser[19] = \<const0> ;
  assign m_axi_awuser[18] = \<const0> ;
  assign m_axi_awuser[17] = \<const0> ;
  assign m_axi_awuser[16] = \<const0> ;
  assign m_axi_awuser[15] = \<const0> ;
  assign m_axi_awuser[14] = \<const0> ;
  assign m_axi_awuser[13] = \<const0> ;
  assign m_axi_awuser[12] = \<const0> ;
  assign m_axi_awuser[11] = \<const0> ;
  assign m_axi_awuser[10] = \<const0> ;
  assign m_axi_awuser[9] = \<const0> ;
  assign m_axi_awuser[8] = \<const0> ;
  assign m_axi_awuser[7] = \<const0> ;
  assign m_axi_awuser[6] = \<const0> ;
  assign m_axi_awuser[5] = \<const0> ;
  assign m_axi_awuser[4] = \<const0> ;
  assign m_axi_awuser[3] = \<const0> ;
  assign m_axi_awuser[2] = \<const0> ;
  assign m_axi_awuser[1] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wuser[1023] = \<const0> ;
  assign m_axi_wuser[1022] = \<const0> ;
  assign m_axi_wuser[1021] = \<const0> ;
  assign m_axi_wuser[1020] = \<const0> ;
  assign m_axi_wuser[1019] = \<const0> ;
  assign m_axi_wuser[1018] = \<const0> ;
  assign m_axi_wuser[1017] = \<const0> ;
  assign m_axi_wuser[1016] = \<const0> ;
  assign m_axi_wuser[1015] = \<const0> ;
  assign m_axi_wuser[1014] = \<const0> ;
  assign m_axi_wuser[1013] = \<const0> ;
  assign m_axi_wuser[1012] = \<const0> ;
  assign m_axi_wuser[1011] = \<const0> ;
  assign m_axi_wuser[1010] = \<const0> ;
  assign m_axi_wuser[1009] = \<const0> ;
  assign m_axi_wuser[1008] = \<const0> ;
  assign m_axi_wuser[1007] = \<const0> ;
  assign m_axi_wuser[1006] = \<const0> ;
  assign m_axi_wuser[1005] = \<const0> ;
  assign m_axi_wuser[1004] = \<const0> ;
  assign m_axi_wuser[1003] = \<const0> ;
  assign m_axi_wuser[1002] = \<const0> ;
  assign m_axi_wuser[1001] = \<const0> ;
  assign m_axi_wuser[1000] = \<const0> ;
  assign m_axi_wuser[999] = \<const0> ;
  assign m_axi_wuser[998] = \<const0> ;
  assign m_axi_wuser[997] = \<const0> ;
  assign m_axi_wuser[996] = \<const0> ;
  assign m_axi_wuser[995] = \<const0> ;
  assign m_axi_wuser[994] = \<const0> ;
  assign m_axi_wuser[993] = \<const0> ;
  assign m_axi_wuser[992] = \<const0> ;
  assign m_axi_wuser[991] = \<const0> ;
  assign m_axi_wuser[990] = \<const0> ;
  assign m_axi_wuser[989] = \<const0> ;
  assign m_axi_wuser[988] = \<const0> ;
  assign m_axi_wuser[987] = \<const0> ;
  assign m_axi_wuser[986] = \<const0> ;
  assign m_axi_wuser[985] = \<const0> ;
  assign m_axi_wuser[984] = \<const0> ;
  assign m_axi_wuser[983] = \<const0> ;
  assign m_axi_wuser[982] = \<const0> ;
  assign m_axi_wuser[981] = \<const0> ;
  assign m_axi_wuser[980] = \<const0> ;
  assign m_axi_wuser[979] = \<const0> ;
  assign m_axi_wuser[978] = \<const0> ;
  assign m_axi_wuser[977] = \<const0> ;
  assign m_axi_wuser[976] = \<const0> ;
  assign m_axi_wuser[975] = \<const0> ;
  assign m_axi_wuser[974] = \<const0> ;
  assign m_axi_wuser[973] = \<const0> ;
  assign m_axi_wuser[972] = \<const0> ;
  assign m_axi_wuser[971] = \<const0> ;
  assign m_axi_wuser[970] = \<const0> ;
  assign m_axi_wuser[969] = \<const0> ;
  assign m_axi_wuser[968] = \<const0> ;
  assign m_axi_wuser[967] = \<const0> ;
  assign m_axi_wuser[966] = \<const0> ;
  assign m_axi_wuser[965] = \<const0> ;
  assign m_axi_wuser[964] = \<const0> ;
  assign m_axi_wuser[963] = \<const0> ;
  assign m_axi_wuser[962] = \<const0> ;
  assign m_axi_wuser[961] = \<const0> ;
  assign m_axi_wuser[960] = \<const0> ;
  assign m_axi_wuser[959] = \<const0> ;
  assign m_axi_wuser[958] = \<const0> ;
  assign m_axi_wuser[957] = \<const0> ;
  assign m_axi_wuser[956] = \<const0> ;
  assign m_axi_wuser[955] = \<const0> ;
  assign m_axi_wuser[954] = \<const0> ;
  assign m_axi_wuser[953] = \<const0> ;
  assign m_axi_wuser[952] = \<const0> ;
  assign m_axi_wuser[951] = \<const0> ;
  assign m_axi_wuser[950] = \<const0> ;
  assign m_axi_wuser[949] = \<const0> ;
  assign m_axi_wuser[948] = \<const0> ;
  assign m_axi_wuser[947] = \<const0> ;
  assign m_axi_wuser[946] = \<const0> ;
  assign m_axi_wuser[945] = \<const0> ;
  assign m_axi_wuser[944] = \<const0> ;
  assign m_axi_wuser[943] = \<const0> ;
  assign m_axi_wuser[942] = \<const0> ;
  assign m_axi_wuser[941] = \<const0> ;
  assign m_axi_wuser[940] = \<const0> ;
  assign m_axi_wuser[939] = \<const0> ;
  assign m_axi_wuser[938] = \<const0> ;
  assign m_axi_wuser[937] = \<const0> ;
  assign m_axi_wuser[936] = \<const0> ;
  assign m_axi_wuser[935] = \<const0> ;
  assign m_axi_wuser[934] = \<const0> ;
  assign m_axi_wuser[933] = \<const0> ;
  assign m_axi_wuser[932] = \<const0> ;
  assign m_axi_wuser[931] = \<const0> ;
  assign m_axi_wuser[930] = \<const0> ;
  assign m_axi_wuser[929] = \<const0> ;
  assign m_axi_wuser[928] = \<const0> ;
  assign m_axi_wuser[927] = \<const0> ;
  assign m_axi_wuser[926] = \<const0> ;
  assign m_axi_wuser[925] = \<const0> ;
  assign m_axi_wuser[924] = \<const0> ;
  assign m_axi_wuser[923] = \<const0> ;
  assign m_axi_wuser[922] = \<const0> ;
  assign m_axi_wuser[921] = \<const0> ;
  assign m_axi_wuser[920] = \<const0> ;
  assign m_axi_wuser[919] = \<const0> ;
  assign m_axi_wuser[918] = \<const0> ;
  assign m_axi_wuser[917] = \<const0> ;
  assign m_axi_wuser[916] = \<const0> ;
  assign m_axi_wuser[915] = \<const0> ;
  assign m_axi_wuser[914] = \<const0> ;
  assign m_axi_wuser[913] = \<const0> ;
  assign m_axi_wuser[912] = \<const0> ;
  assign m_axi_wuser[911] = \<const0> ;
  assign m_axi_wuser[910] = \<const0> ;
  assign m_axi_wuser[909] = \<const0> ;
  assign m_axi_wuser[908] = \<const0> ;
  assign m_axi_wuser[907] = \<const0> ;
  assign m_axi_wuser[906] = \<const0> ;
  assign m_axi_wuser[905] = \<const0> ;
  assign m_axi_wuser[904] = \<const0> ;
  assign m_axi_wuser[903] = \<const0> ;
  assign m_axi_wuser[902] = \<const0> ;
  assign m_axi_wuser[901] = \<const0> ;
  assign m_axi_wuser[900] = \<const0> ;
  assign m_axi_wuser[899] = \<const0> ;
  assign m_axi_wuser[898] = \<const0> ;
  assign m_axi_wuser[897] = \<const0> ;
  assign m_axi_wuser[896] = \<const0> ;
  assign m_axi_wuser[895] = \<const0> ;
  assign m_axi_wuser[894] = \<const0> ;
  assign m_axi_wuser[893] = \<const0> ;
  assign m_axi_wuser[892] = \<const0> ;
  assign m_axi_wuser[891] = \<const0> ;
  assign m_axi_wuser[890] = \<const0> ;
  assign m_axi_wuser[889] = \<const0> ;
  assign m_axi_wuser[888] = \<const0> ;
  assign m_axi_wuser[887] = \<const0> ;
  assign m_axi_wuser[886] = \<const0> ;
  assign m_axi_wuser[885] = \<const0> ;
  assign m_axi_wuser[884] = \<const0> ;
  assign m_axi_wuser[883] = \<const0> ;
  assign m_axi_wuser[882] = \<const0> ;
  assign m_axi_wuser[881] = \<const0> ;
  assign m_axi_wuser[880] = \<const0> ;
  assign m_axi_wuser[879] = \<const0> ;
  assign m_axi_wuser[878] = \<const0> ;
  assign m_axi_wuser[877] = \<const0> ;
  assign m_axi_wuser[876] = \<const0> ;
  assign m_axi_wuser[875] = \<const0> ;
  assign m_axi_wuser[874] = \<const0> ;
  assign m_axi_wuser[873] = \<const0> ;
  assign m_axi_wuser[872] = \<const0> ;
  assign m_axi_wuser[871] = \<const0> ;
  assign m_axi_wuser[870] = \<const0> ;
  assign m_axi_wuser[869] = \<const0> ;
  assign m_axi_wuser[868] = \<const0> ;
  assign m_axi_wuser[867] = \<const0> ;
  assign m_axi_wuser[866] = \<const0> ;
  assign m_axi_wuser[865] = \<const0> ;
  assign m_axi_wuser[864] = \<const0> ;
  assign m_axi_wuser[863] = \<const0> ;
  assign m_axi_wuser[862] = \<const0> ;
  assign m_axi_wuser[861] = \<const0> ;
  assign m_axi_wuser[860] = \<const0> ;
  assign m_axi_wuser[859] = \<const0> ;
  assign m_axi_wuser[858] = \<const0> ;
  assign m_axi_wuser[857] = \<const0> ;
  assign m_axi_wuser[856] = \<const0> ;
  assign m_axi_wuser[855] = \<const0> ;
  assign m_axi_wuser[854] = \<const0> ;
  assign m_axi_wuser[853] = \<const0> ;
  assign m_axi_wuser[852] = \<const0> ;
  assign m_axi_wuser[851] = \<const0> ;
  assign m_axi_wuser[850] = \<const0> ;
  assign m_axi_wuser[849] = \<const0> ;
  assign m_axi_wuser[848] = \<const0> ;
  assign m_axi_wuser[847] = \<const0> ;
  assign m_axi_wuser[846] = \<const0> ;
  assign m_axi_wuser[845] = \<const0> ;
  assign m_axi_wuser[844] = \<const0> ;
  assign m_axi_wuser[843] = \<const0> ;
  assign m_axi_wuser[842] = \<const0> ;
  assign m_axi_wuser[841] = \<const0> ;
  assign m_axi_wuser[840] = \<const0> ;
  assign m_axi_wuser[839] = \<const0> ;
  assign m_axi_wuser[838] = \<const0> ;
  assign m_axi_wuser[837] = \<const0> ;
  assign m_axi_wuser[836] = \<const0> ;
  assign m_axi_wuser[835] = \<const0> ;
  assign m_axi_wuser[834] = \<const0> ;
  assign m_axi_wuser[833] = \<const0> ;
  assign m_axi_wuser[832] = \<const0> ;
  assign m_axi_wuser[831] = \<const0> ;
  assign m_axi_wuser[830] = \<const0> ;
  assign m_axi_wuser[829] = \<const0> ;
  assign m_axi_wuser[828] = \<const0> ;
  assign m_axi_wuser[827] = \<const0> ;
  assign m_axi_wuser[826] = \<const0> ;
  assign m_axi_wuser[825] = \<const0> ;
  assign m_axi_wuser[824] = \<const0> ;
  assign m_axi_wuser[823] = \<const0> ;
  assign m_axi_wuser[822] = \<const0> ;
  assign m_axi_wuser[821] = \<const0> ;
  assign m_axi_wuser[820] = \<const0> ;
  assign m_axi_wuser[819] = \<const0> ;
  assign m_axi_wuser[818] = \<const0> ;
  assign m_axi_wuser[817] = \<const0> ;
  assign m_axi_wuser[816] = \<const0> ;
  assign m_axi_wuser[815] = \<const0> ;
  assign m_axi_wuser[814] = \<const0> ;
  assign m_axi_wuser[813] = \<const0> ;
  assign m_axi_wuser[812] = \<const0> ;
  assign m_axi_wuser[811] = \<const0> ;
  assign m_axi_wuser[810] = \<const0> ;
  assign m_axi_wuser[809] = \<const0> ;
  assign m_axi_wuser[808] = \<const0> ;
  assign m_axi_wuser[807] = \<const0> ;
  assign m_axi_wuser[806] = \<const0> ;
  assign m_axi_wuser[805] = \<const0> ;
  assign m_axi_wuser[804] = \<const0> ;
  assign m_axi_wuser[803] = \<const0> ;
  assign m_axi_wuser[802] = \<const0> ;
  assign m_axi_wuser[801] = \<const0> ;
  assign m_axi_wuser[800] = \<const0> ;
  assign m_axi_wuser[799] = \<const0> ;
  assign m_axi_wuser[798] = \<const0> ;
  assign m_axi_wuser[797] = \<const0> ;
  assign m_axi_wuser[796] = \<const0> ;
  assign m_axi_wuser[795] = \<const0> ;
  assign m_axi_wuser[794] = \<const0> ;
  assign m_axi_wuser[793] = \<const0> ;
  assign m_axi_wuser[792] = \<const0> ;
  assign m_axi_wuser[791] = \<const0> ;
  assign m_axi_wuser[790] = \<const0> ;
  assign m_axi_wuser[789] = \<const0> ;
  assign m_axi_wuser[788] = \<const0> ;
  assign m_axi_wuser[787] = \<const0> ;
  assign m_axi_wuser[786] = \<const0> ;
  assign m_axi_wuser[785] = \<const0> ;
  assign m_axi_wuser[784] = \<const0> ;
  assign m_axi_wuser[783] = \<const0> ;
  assign m_axi_wuser[782] = \<const0> ;
  assign m_axi_wuser[781] = \<const0> ;
  assign m_axi_wuser[780] = \<const0> ;
  assign m_axi_wuser[779] = \<const0> ;
  assign m_axi_wuser[778] = \<const0> ;
  assign m_axi_wuser[777] = \<const0> ;
  assign m_axi_wuser[776] = \<const0> ;
  assign m_axi_wuser[775] = \<const0> ;
  assign m_axi_wuser[774] = \<const0> ;
  assign m_axi_wuser[773] = \<const0> ;
  assign m_axi_wuser[772] = \<const0> ;
  assign m_axi_wuser[771] = \<const0> ;
  assign m_axi_wuser[770] = \<const0> ;
  assign m_axi_wuser[769] = \<const0> ;
  assign m_axi_wuser[768] = \<const0> ;
  assign m_axi_wuser[767] = \<const0> ;
  assign m_axi_wuser[766] = \<const0> ;
  assign m_axi_wuser[765] = \<const0> ;
  assign m_axi_wuser[764] = \<const0> ;
  assign m_axi_wuser[763] = \<const0> ;
  assign m_axi_wuser[762] = \<const0> ;
  assign m_axi_wuser[761] = \<const0> ;
  assign m_axi_wuser[760] = \<const0> ;
  assign m_axi_wuser[759] = \<const0> ;
  assign m_axi_wuser[758] = \<const0> ;
  assign m_axi_wuser[757] = \<const0> ;
  assign m_axi_wuser[756] = \<const0> ;
  assign m_axi_wuser[755] = \<const0> ;
  assign m_axi_wuser[754] = \<const0> ;
  assign m_axi_wuser[753] = \<const0> ;
  assign m_axi_wuser[752] = \<const0> ;
  assign m_axi_wuser[751] = \<const0> ;
  assign m_axi_wuser[750] = \<const0> ;
  assign m_axi_wuser[749] = \<const0> ;
  assign m_axi_wuser[748] = \<const0> ;
  assign m_axi_wuser[747] = \<const0> ;
  assign m_axi_wuser[746] = \<const0> ;
  assign m_axi_wuser[745] = \<const0> ;
  assign m_axi_wuser[744] = \<const0> ;
  assign m_axi_wuser[743] = \<const0> ;
  assign m_axi_wuser[742] = \<const0> ;
  assign m_axi_wuser[741] = \<const0> ;
  assign m_axi_wuser[740] = \<const0> ;
  assign m_axi_wuser[739] = \<const0> ;
  assign m_axi_wuser[738] = \<const0> ;
  assign m_axi_wuser[737] = \<const0> ;
  assign m_axi_wuser[736] = \<const0> ;
  assign m_axi_wuser[735] = \<const0> ;
  assign m_axi_wuser[734] = \<const0> ;
  assign m_axi_wuser[733] = \<const0> ;
  assign m_axi_wuser[732] = \<const0> ;
  assign m_axi_wuser[731] = \<const0> ;
  assign m_axi_wuser[730] = \<const0> ;
  assign m_axi_wuser[729] = \<const0> ;
  assign m_axi_wuser[728] = \<const0> ;
  assign m_axi_wuser[727] = \<const0> ;
  assign m_axi_wuser[726] = \<const0> ;
  assign m_axi_wuser[725] = \<const0> ;
  assign m_axi_wuser[724] = \<const0> ;
  assign m_axi_wuser[723] = \<const0> ;
  assign m_axi_wuser[722] = \<const0> ;
  assign m_axi_wuser[721] = \<const0> ;
  assign m_axi_wuser[720] = \<const0> ;
  assign m_axi_wuser[719] = \<const0> ;
  assign m_axi_wuser[718] = \<const0> ;
  assign m_axi_wuser[717] = \<const0> ;
  assign m_axi_wuser[716] = \<const0> ;
  assign m_axi_wuser[715] = \<const0> ;
  assign m_axi_wuser[714] = \<const0> ;
  assign m_axi_wuser[713] = \<const0> ;
  assign m_axi_wuser[712] = \<const0> ;
  assign m_axi_wuser[711] = \<const0> ;
  assign m_axi_wuser[710] = \<const0> ;
  assign m_axi_wuser[709] = \<const0> ;
  assign m_axi_wuser[708] = \<const0> ;
  assign m_axi_wuser[707] = \<const0> ;
  assign m_axi_wuser[706] = \<const0> ;
  assign m_axi_wuser[705] = \<const0> ;
  assign m_axi_wuser[704] = \<const0> ;
  assign m_axi_wuser[703] = \<const0> ;
  assign m_axi_wuser[702] = \<const0> ;
  assign m_axi_wuser[701] = \<const0> ;
  assign m_axi_wuser[700] = \<const0> ;
  assign m_axi_wuser[699] = \<const0> ;
  assign m_axi_wuser[698] = \<const0> ;
  assign m_axi_wuser[697] = \<const0> ;
  assign m_axi_wuser[696] = \<const0> ;
  assign m_axi_wuser[695] = \<const0> ;
  assign m_axi_wuser[694] = \<const0> ;
  assign m_axi_wuser[693] = \<const0> ;
  assign m_axi_wuser[692] = \<const0> ;
  assign m_axi_wuser[691] = \<const0> ;
  assign m_axi_wuser[690] = \<const0> ;
  assign m_axi_wuser[689] = \<const0> ;
  assign m_axi_wuser[688] = \<const0> ;
  assign m_axi_wuser[687] = \<const0> ;
  assign m_axi_wuser[686] = \<const0> ;
  assign m_axi_wuser[685] = \<const0> ;
  assign m_axi_wuser[684] = \<const0> ;
  assign m_axi_wuser[683] = \<const0> ;
  assign m_axi_wuser[682] = \<const0> ;
  assign m_axi_wuser[681] = \<const0> ;
  assign m_axi_wuser[680] = \<const0> ;
  assign m_axi_wuser[679] = \<const0> ;
  assign m_axi_wuser[678] = \<const0> ;
  assign m_axi_wuser[677] = \<const0> ;
  assign m_axi_wuser[676] = \<const0> ;
  assign m_axi_wuser[675] = \<const0> ;
  assign m_axi_wuser[674] = \<const0> ;
  assign m_axi_wuser[673] = \<const0> ;
  assign m_axi_wuser[672] = \<const0> ;
  assign m_axi_wuser[671] = \<const0> ;
  assign m_axi_wuser[670] = \<const0> ;
  assign m_axi_wuser[669] = \<const0> ;
  assign m_axi_wuser[668] = \<const0> ;
  assign m_axi_wuser[667] = \<const0> ;
  assign m_axi_wuser[666] = \<const0> ;
  assign m_axi_wuser[665] = \<const0> ;
  assign m_axi_wuser[664] = \<const0> ;
  assign m_axi_wuser[663] = \<const0> ;
  assign m_axi_wuser[662] = \<const0> ;
  assign m_axi_wuser[661] = \<const0> ;
  assign m_axi_wuser[660] = \<const0> ;
  assign m_axi_wuser[659] = \<const0> ;
  assign m_axi_wuser[658] = \<const0> ;
  assign m_axi_wuser[657] = \<const0> ;
  assign m_axi_wuser[656] = \<const0> ;
  assign m_axi_wuser[655] = \<const0> ;
  assign m_axi_wuser[654] = \<const0> ;
  assign m_axi_wuser[653] = \<const0> ;
  assign m_axi_wuser[652] = \<const0> ;
  assign m_axi_wuser[651] = \<const0> ;
  assign m_axi_wuser[650] = \<const0> ;
  assign m_axi_wuser[649] = \<const0> ;
  assign m_axi_wuser[648] = \<const0> ;
  assign m_axi_wuser[647] = \<const0> ;
  assign m_axi_wuser[646] = \<const0> ;
  assign m_axi_wuser[645] = \<const0> ;
  assign m_axi_wuser[644] = \<const0> ;
  assign m_axi_wuser[643] = \<const0> ;
  assign m_axi_wuser[642] = \<const0> ;
  assign m_axi_wuser[641] = \<const0> ;
  assign m_axi_wuser[640] = \<const0> ;
  assign m_axi_wuser[639] = \<const0> ;
  assign m_axi_wuser[638] = \<const0> ;
  assign m_axi_wuser[637] = \<const0> ;
  assign m_axi_wuser[636] = \<const0> ;
  assign m_axi_wuser[635] = \<const0> ;
  assign m_axi_wuser[634] = \<const0> ;
  assign m_axi_wuser[633] = \<const0> ;
  assign m_axi_wuser[632] = \<const0> ;
  assign m_axi_wuser[631] = \<const0> ;
  assign m_axi_wuser[630] = \<const0> ;
  assign m_axi_wuser[629] = \<const0> ;
  assign m_axi_wuser[628] = \<const0> ;
  assign m_axi_wuser[627] = \<const0> ;
  assign m_axi_wuser[626] = \<const0> ;
  assign m_axi_wuser[625] = \<const0> ;
  assign m_axi_wuser[624] = \<const0> ;
  assign m_axi_wuser[623] = \<const0> ;
  assign m_axi_wuser[622] = \<const0> ;
  assign m_axi_wuser[621] = \<const0> ;
  assign m_axi_wuser[620] = \<const0> ;
  assign m_axi_wuser[619] = \<const0> ;
  assign m_axi_wuser[618] = \<const0> ;
  assign m_axi_wuser[617] = \<const0> ;
  assign m_axi_wuser[616] = \<const0> ;
  assign m_axi_wuser[615] = \<const0> ;
  assign m_axi_wuser[614] = \<const0> ;
  assign m_axi_wuser[613] = \<const0> ;
  assign m_axi_wuser[612] = \<const0> ;
  assign m_axi_wuser[611] = \<const0> ;
  assign m_axi_wuser[610] = \<const0> ;
  assign m_axi_wuser[609] = \<const0> ;
  assign m_axi_wuser[608] = \<const0> ;
  assign m_axi_wuser[607] = \<const0> ;
  assign m_axi_wuser[606] = \<const0> ;
  assign m_axi_wuser[605] = \<const0> ;
  assign m_axi_wuser[604] = \<const0> ;
  assign m_axi_wuser[603] = \<const0> ;
  assign m_axi_wuser[602] = \<const0> ;
  assign m_axi_wuser[601] = \<const0> ;
  assign m_axi_wuser[600] = \<const0> ;
  assign m_axi_wuser[599] = \<const0> ;
  assign m_axi_wuser[598] = \<const0> ;
  assign m_axi_wuser[597] = \<const0> ;
  assign m_axi_wuser[596] = \<const0> ;
  assign m_axi_wuser[595] = \<const0> ;
  assign m_axi_wuser[594] = \<const0> ;
  assign m_axi_wuser[593] = \<const0> ;
  assign m_axi_wuser[592] = \<const0> ;
  assign m_axi_wuser[591] = \<const0> ;
  assign m_axi_wuser[590] = \<const0> ;
  assign m_axi_wuser[589] = \<const0> ;
  assign m_axi_wuser[588] = \<const0> ;
  assign m_axi_wuser[587] = \<const0> ;
  assign m_axi_wuser[586] = \<const0> ;
  assign m_axi_wuser[585] = \<const0> ;
  assign m_axi_wuser[584] = \<const0> ;
  assign m_axi_wuser[583] = \<const0> ;
  assign m_axi_wuser[582] = \<const0> ;
  assign m_axi_wuser[581] = \<const0> ;
  assign m_axi_wuser[580] = \<const0> ;
  assign m_axi_wuser[579] = \<const0> ;
  assign m_axi_wuser[578] = \<const0> ;
  assign m_axi_wuser[577] = \<const0> ;
  assign m_axi_wuser[576] = \<const0> ;
  assign m_axi_wuser[575] = \<const0> ;
  assign m_axi_wuser[574] = \<const0> ;
  assign m_axi_wuser[573] = \<const0> ;
  assign m_axi_wuser[572] = \<const0> ;
  assign m_axi_wuser[571] = \<const0> ;
  assign m_axi_wuser[570] = \<const0> ;
  assign m_axi_wuser[569] = \<const0> ;
  assign m_axi_wuser[568] = \<const0> ;
  assign m_axi_wuser[567] = \<const0> ;
  assign m_axi_wuser[566] = \<const0> ;
  assign m_axi_wuser[565] = \<const0> ;
  assign m_axi_wuser[564] = \<const0> ;
  assign m_axi_wuser[563] = \<const0> ;
  assign m_axi_wuser[562] = \<const0> ;
  assign m_axi_wuser[561] = \<const0> ;
  assign m_axi_wuser[560] = \<const0> ;
  assign m_axi_wuser[559] = \<const0> ;
  assign m_axi_wuser[558] = \<const0> ;
  assign m_axi_wuser[557] = \<const0> ;
  assign m_axi_wuser[556] = \<const0> ;
  assign m_axi_wuser[555] = \<const0> ;
  assign m_axi_wuser[554] = \<const0> ;
  assign m_axi_wuser[553] = \<const0> ;
  assign m_axi_wuser[552] = \<const0> ;
  assign m_axi_wuser[551] = \<const0> ;
  assign m_axi_wuser[550] = \<const0> ;
  assign m_axi_wuser[549] = \<const0> ;
  assign m_axi_wuser[548] = \<const0> ;
  assign m_axi_wuser[547] = \<const0> ;
  assign m_axi_wuser[546] = \<const0> ;
  assign m_axi_wuser[545] = \<const0> ;
  assign m_axi_wuser[544] = \<const0> ;
  assign m_axi_wuser[543] = \<const0> ;
  assign m_axi_wuser[542] = \<const0> ;
  assign m_axi_wuser[541] = \<const0> ;
  assign m_axi_wuser[540] = \<const0> ;
  assign m_axi_wuser[539] = \<const0> ;
  assign m_axi_wuser[538] = \<const0> ;
  assign m_axi_wuser[537] = \<const0> ;
  assign m_axi_wuser[536] = \<const0> ;
  assign m_axi_wuser[535] = \<const0> ;
  assign m_axi_wuser[534] = \<const0> ;
  assign m_axi_wuser[533] = \<const0> ;
  assign m_axi_wuser[532] = \<const0> ;
  assign m_axi_wuser[531] = \<const0> ;
  assign m_axi_wuser[530] = \<const0> ;
  assign m_axi_wuser[529] = \<const0> ;
  assign m_axi_wuser[528] = \<const0> ;
  assign m_axi_wuser[527] = \<const0> ;
  assign m_axi_wuser[526] = \<const0> ;
  assign m_axi_wuser[525] = \<const0> ;
  assign m_axi_wuser[524] = \<const0> ;
  assign m_axi_wuser[523] = \<const0> ;
  assign m_axi_wuser[522] = \<const0> ;
  assign m_axi_wuser[521] = \<const0> ;
  assign m_axi_wuser[520] = \<const0> ;
  assign m_axi_wuser[519] = \<const0> ;
  assign m_axi_wuser[518] = \<const0> ;
  assign m_axi_wuser[517] = \<const0> ;
  assign m_axi_wuser[516] = \<const0> ;
  assign m_axi_wuser[515] = \<const0> ;
  assign m_axi_wuser[514] = \<const0> ;
  assign m_axi_wuser[513] = \<const0> ;
  assign m_axi_wuser[512] = \<const0> ;
  assign m_axi_wuser[511] = \<const0> ;
  assign m_axi_wuser[510] = \<const0> ;
  assign m_axi_wuser[509] = \<const0> ;
  assign m_axi_wuser[508] = \<const0> ;
  assign m_axi_wuser[507] = \<const0> ;
  assign m_axi_wuser[506] = \<const0> ;
  assign m_axi_wuser[505] = \<const0> ;
  assign m_axi_wuser[504] = \<const0> ;
  assign m_axi_wuser[503] = \<const0> ;
  assign m_axi_wuser[502] = \<const0> ;
  assign m_axi_wuser[501] = \<const0> ;
  assign m_axi_wuser[500] = \<const0> ;
  assign m_axi_wuser[499] = \<const0> ;
  assign m_axi_wuser[498] = \<const0> ;
  assign m_axi_wuser[497] = \<const0> ;
  assign m_axi_wuser[496] = \<const0> ;
  assign m_axi_wuser[495] = \<const0> ;
  assign m_axi_wuser[494] = \<const0> ;
  assign m_axi_wuser[493] = \<const0> ;
  assign m_axi_wuser[492] = \<const0> ;
  assign m_axi_wuser[491] = \<const0> ;
  assign m_axi_wuser[490] = \<const0> ;
  assign m_axi_wuser[489] = \<const0> ;
  assign m_axi_wuser[488] = \<const0> ;
  assign m_axi_wuser[487] = \<const0> ;
  assign m_axi_wuser[486] = \<const0> ;
  assign m_axi_wuser[485] = \<const0> ;
  assign m_axi_wuser[484] = \<const0> ;
  assign m_axi_wuser[483] = \<const0> ;
  assign m_axi_wuser[482] = \<const0> ;
  assign m_axi_wuser[481] = \<const0> ;
  assign m_axi_wuser[480] = \<const0> ;
  assign m_axi_wuser[479] = \<const0> ;
  assign m_axi_wuser[478] = \<const0> ;
  assign m_axi_wuser[477] = \<const0> ;
  assign m_axi_wuser[476] = \<const0> ;
  assign m_axi_wuser[475] = \<const0> ;
  assign m_axi_wuser[474] = \<const0> ;
  assign m_axi_wuser[473] = \<const0> ;
  assign m_axi_wuser[472] = \<const0> ;
  assign m_axi_wuser[471] = \<const0> ;
  assign m_axi_wuser[470] = \<const0> ;
  assign m_axi_wuser[469] = \<const0> ;
  assign m_axi_wuser[468] = \<const0> ;
  assign m_axi_wuser[467] = \<const0> ;
  assign m_axi_wuser[466] = \<const0> ;
  assign m_axi_wuser[465] = \<const0> ;
  assign m_axi_wuser[464] = \<const0> ;
  assign m_axi_wuser[463] = \<const0> ;
  assign m_axi_wuser[462] = \<const0> ;
  assign m_axi_wuser[461] = \<const0> ;
  assign m_axi_wuser[460] = \<const0> ;
  assign m_axi_wuser[459] = \<const0> ;
  assign m_axi_wuser[458] = \<const0> ;
  assign m_axi_wuser[457] = \<const0> ;
  assign m_axi_wuser[456] = \<const0> ;
  assign m_axi_wuser[455] = \<const0> ;
  assign m_axi_wuser[454] = \<const0> ;
  assign m_axi_wuser[453] = \<const0> ;
  assign m_axi_wuser[452] = \<const0> ;
  assign m_axi_wuser[451] = \<const0> ;
  assign m_axi_wuser[450] = \<const0> ;
  assign m_axi_wuser[449] = \<const0> ;
  assign m_axi_wuser[448] = \<const0> ;
  assign m_axi_wuser[447] = \<const0> ;
  assign m_axi_wuser[446] = \<const0> ;
  assign m_axi_wuser[445] = \<const0> ;
  assign m_axi_wuser[444] = \<const0> ;
  assign m_axi_wuser[443] = \<const0> ;
  assign m_axi_wuser[442] = \<const0> ;
  assign m_axi_wuser[441] = \<const0> ;
  assign m_axi_wuser[440] = \<const0> ;
  assign m_axi_wuser[439] = \<const0> ;
  assign m_axi_wuser[438] = \<const0> ;
  assign m_axi_wuser[437] = \<const0> ;
  assign m_axi_wuser[436] = \<const0> ;
  assign m_axi_wuser[435] = \<const0> ;
  assign m_axi_wuser[434] = \<const0> ;
  assign m_axi_wuser[433] = \<const0> ;
  assign m_axi_wuser[432] = \<const0> ;
  assign m_axi_wuser[431] = \<const0> ;
  assign m_axi_wuser[430] = \<const0> ;
  assign m_axi_wuser[429] = \<const0> ;
  assign m_axi_wuser[428] = \<const0> ;
  assign m_axi_wuser[427] = \<const0> ;
  assign m_axi_wuser[426] = \<const0> ;
  assign m_axi_wuser[425] = \<const0> ;
  assign m_axi_wuser[424] = \<const0> ;
  assign m_axi_wuser[423] = \<const0> ;
  assign m_axi_wuser[422] = \<const0> ;
  assign m_axi_wuser[421] = \<const0> ;
  assign m_axi_wuser[420] = \<const0> ;
  assign m_axi_wuser[419] = \<const0> ;
  assign m_axi_wuser[418] = \<const0> ;
  assign m_axi_wuser[417] = \<const0> ;
  assign m_axi_wuser[416] = \<const0> ;
  assign m_axi_wuser[415] = \<const0> ;
  assign m_axi_wuser[414] = \<const0> ;
  assign m_axi_wuser[413] = \<const0> ;
  assign m_axi_wuser[412] = \<const0> ;
  assign m_axi_wuser[411] = \<const0> ;
  assign m_axi_wuser[410] = \<const0> ;
  assign m_axi_wuser[409] = \<const0> ;
  assign m_axi_wuser[408] = \<const0> ;
  assign m_axi_wuser[407] = \<const0> ;
  assign m_axi_wuser[406] = \<const0> ;
  assign m_axi_wuser[405] = \<const0> ;
  assign m_axi_wuser[404] = \<const0> ;
  assign m_axi_wuser[403] = \<const0> ;
  assign m_axi_wuser[402] = \<const0> ;
  assign m_axi_wuser[401] = \<const0> ;
  assign m_axi_wuser[400] = \<const0> ;
  assign m_axi_wuser[399] = \<const0> ;
  assign m_axi_wuser[398] = \<const0> ;
  assign m_axi_wuser[397] = \<const0> ;
  assign m_axi_wuser[396] = \<const0> ;
  assign m_axi_wuser[395] = \<const0> ;
  assign m_axi_wuser[394] = \<const0> ;
  assign m_axi_wuser[393] = \<const0> ;
  assign m_axi_wuser[392] = \<const0> ;
  assign m_axi_wuser[391] = \<const0> ;
  assign m_axi_wuser[390] = \<const0> ;
  assign m_axi_wuser[389] = \<const0> ;
  assign m_axi_wuser[388] = \<const0> ;
  assign m_axi_wuser[387] = \<const0> ;
  assign m_axi_wuser[386] = \<const0> ;
  assign m_axi_wuser[385] = \<const0> ;
  assign m_axi_wuser[384] = \<const0> ;
  assign m_axi_wuser[383] = \<const0> ;
  assign m_axi_wuser[382] = \<const0> ;
  assign m_axi_wuser[381] = \<const0> ;
  assign m_axi_wuser[380] = \<const0> ;
  assign m_axi_wuser[379] = \<const0> ;
  assign m_axi_wuser[378] = \<const0> ;
  assign m_axi_wuser[377] = \<const0> ;
  assign m_axi_wuser[376] = \<const0> ;
  assign m_axi_wuser[375] = \<const0> ;
  assign m_axi_wuser[374] = \<const0> ;
  assign m_axi_wuser[373] = \<const0> ;
  assign m_axi_wuser[372] = \<const0> ;
  assign m_axi_wuser[371] = \<const0> ;
  assign m_axi_wuser[370] = \<const0> ;
  assign m_axi_wuser[369] = \<const0> ;
  assign m_axi_wuser[368] = \<const0> ;
  assign m_axi_wuser[367] = \<const0> ;
  assign m_axi_wuser[366] = \<const0> ;
  assign m_axi_wuser[365] = \<const0> ;
  assign m_axi_wuser[364] = \<const0> ;
  assign m_axi_wuser[363] = \<const0> ;
  assign m_axi_wuser[362] = \<const0> ;
  assign m_axi_wuser[361] = \<const0> ;
  assign m_axi_wuser[360] = \<const0> ;
  assign m_axi_wuser[359] = \<const0> ;
  assign m_axi_wuser[358] = \<const0> ;
  assign m_axi_wuser[357] = \<const0> ;
  assign m_axi_wuser[356] = \<const0> ;
  assign m_axi_wuser[355] = \<const0> ;
  assign m_axi_wuser[354] = \<const0> ;
  assign m_axi_wuser[353] = \<const0> ;
  assign m_axi_wuser[352] = \<const0> ;
  assign m_axi_wuser[351] = \<const0> ;
  assign m_axi_wuser[350] = \<const0> ;
  assign m_axi_wuser[349] = \<const0> ;
  assign m_axi_wuser[348] = \<const0> ;
  assign m_axi_wuser[347] = \<const0> ;
  assign m_axi_wuser[346] = \<const0> ;
  assign m_axi_wuser[345] = \<const0> ;
  assign m_axi_wuser[344] = \<const0> ;
  assign m_axi_wuser[343] = \<const0> ;
  assign m_axi_wuser[342] = \<const0> ;
  assign m_axi_wuser[341] = \<const0> ;
  assign m_axi_wuser[340] = \<const0> ;
  assign m_axi_wuser[339] = \<const0> ;
  assign m_axi_wuser[338] = \<const0> ;
  assign m_axi_wuser[337] = \<const0> ;
  assign m_axi_wuser[336] = \<const0> ;
  assign m_axi_wuser[335] = \<const0> ;
  assign m_axi_wuser[334] = \<const0> ;
  assign m_axi_wuser[333] = \<const0> ;
  assign m_axi_wuser[332] = \<const0> ;
  assign m_axi_wuser[331] = \<const0> ;
  assign m_axi_wuser[330] = \<const0> ;
  assign m_axi_wuser[329] = \<const0> ;
  assign m_axi_wuser[328] = \<const0> ;
  assign m_axi_wuser[327] = \<const0> ;
  assign m_axi_wuser[326] = \<const0> ;
  assign m_axi_wuser[325] = \<const0> ;
  assign m_axi_wuser[324] = \<const0> ;
  assign m_axi_wuser[323] = \<const0> ;
  assign m_axi_wuser[322] = \<const0> ;
  assign m_axi_wuser[321] = \<const0> ;
  assign m_axi_wuser[320] = \<const0> ;
  assign m_axi_wuser[319] = \<const0> ;
  assign m_axi_wuser[318] = \<const0> ;
  assign m_axi_wuser[317] = \<const0> ;
  assign m_axi_wuser[316] = \<const0> ;
  assign m_axi_wuser[315] = \<const0> ;
  assign m_axi_wuser[314] = \<const0> ;
  assign m_axi_wuser[313] = \<const0> ;
  assign m_axi_wuser[312] = \<const0> ;
  assign m_axi_wuser[311] = \<const0> ;
  assign m_axi_wuser[310] = \<const0> ;
  assign m_axi_wuser[309] = \<const0> ;
  assign m_axi_wuser[308] = \<const0> ;
  assign m_axi_wuser[307] = \<const0> ;
  assign m_axi_wuser[306] = \<const0> ;
  assign m_axi_wuser[305] = \<const0> ;
  assign m_axi_wuser[304] = \<const0> ;
  assign m_axi_wuser[303] = \<const0> ;
  assign m_axi_wuser[302] = \<const0> ;
  assign m_axi_wuser[301] = \<const0> ;
  assign m_axi_wuser[300] = \<const0> ;
  assign m_axi_wuser[299] = \<const0> ;
  assign m_axi_wuser[298] = \<const0> ;
  assign m_axi_wuser[297] = \<const0> ;
  assign m_axi_wuser[296] = \<const0> ;
  assign m_axi_wuser[295] = \<const0> ;
  assign m_axi_wuser[294] = \<const0> ;
  assign m_axi_wuser[293] = \<const0> ;
  assign m_axi_wuser[292] = \<const0> ;
  assign m_axi_wuser[291] = \<const0> ;
  assign m_axi_wuser[290] = \<const0> ;
  assign m_axi_wuser[289] = \<const0> ;
  assign m_axi_wuser[288] = \<const0> ;
  assign m_axi_wuser[287] = \<const0> ;
  assign m_axi_wuser[286] = \<const0> ;
  assign m_axi_wuser[285] = \<const0> ;
  assign m_axi_wuser[284] = \<const0> ;
  assign m_axi_wuser[283] = \<const0> ;
  assign m_axi_wuser[282] = \<const0> ;
  assign m_axi_wuser[281] = \<const0> ;
  assign m_axi_wuser[280] = \<const0> ;
  assign m_axi_wuser[279] = \<const0> ;
  assign m_axi_wuser[278] = \<const0> ;
  assign m_axi_wuser[277] = \<const0> ;
  assign m_axi_wuser[276] = \<const0> ;
  assign m_axi_wuser[275] = \<const0> ;
  assign m_axi_wuser[274] = \<const0> ;
  assign m_axi_wuser[273] = \<const0> ;
  assign m_axi_wuser[272] = \<const0> ;
  assign m_axi_wuser[271] = \<const0> ;
  assign m_axi_wuser[270] = \<const0> ;
  assign m_axi_wuser[269] = \<const0> ;
  assign m_axi_wuser[268] = \<const0> ;
  assign m_axi_wuser[267] = \<const0> ;
  assign m_axi_wuser[266] = \<const0> ;
  assign m_axi_wuser[265] = \<const0> ;
  assign m_axi_wuser[264] = \<const0> ;
  assign m_axi_wuser[263] = \<const0> ;
  assign m_axi_wuser[262] = \<const0> ;
  assign m_axi_wuser[261] = \<const0> ;
  assign m_axi_wuser[260] = \<const0> ;
  assign m_axi_wuser[259] = \<const0> ;
  assign m_axi_wuser[258] = \<const0> ;
  assign m_axi_wuser[257] = \<const0> ;
  assign m_axi_wuser[256] = \<const0> ;
  assign m_axi_wuser[255] = \<const0> ;
  assign m_axi_wuser[254] = \<const0> ;
  assign m_axi_wuser[253] = \<const0> ;
  assign m_axi_wuser[252] = \<const0> ;
  assign m_axi_wuser[251] = \<const0> ;
  assign m_axi_wuser[250] = \<const0> ;
  assign m_axi_wuser[249] = \<const0> ;
  assign m_axi_wuser[248] = \<const0> ;
  assign m_axi_wuser[247] = \<const0> ;
  assign m_axi_wuser[246] = \<const0> ;
  assign m_axi_wuser[245] = \<const0> ;
  assign m_axi_wuser[244] = \<const0> ;
  assign m_axi_wuser[243] = \<const0> ;
  assign m_axi_wuser[242] = \<const0> ;
  assign m_axi_wuser[241] = \<const0> ;
  assign m_axi_wuser[240] = \<const0> ;
  assign m_axi_wuser[239] = \<const0> ;
  assign m_axi_wuser[238] = \<const0> ;
  assign m_axi_wuser[237] = \<const0> ;
  assign m_axi_wuser[236] = \<const0> ;
  assign m_axi_wuser[235] = \<const0> ;
  assign m_axi_wuser[234] = \<const0> ;
  assign m_axi_wuser[233] = \<const0> ;
  assign m_axi_wuser[232] = \<const0> ;
  assign m_axi_wuser[231] = \<const0> ;
  assign m_axi_wuser[230] = \<const0> ;
  assign m_axi_wuser[229] = \<const0> ;
  assign m_axi_wuser[228] = \<const0> ;
  assign m_axi_wuser[227] = \<const0> ;
  assign m_axi_wuser[226] = \<const0> ;
  assign m_axi_wuser[225] = \<const0> ;
  assign m_axi_wuser[224] = \<const0> ;
  assign m_axi_wuser[223] = \<const0> ;
  assign m_axi_wuser[222] = \<const0> ;
  assign m_axi_wuser[221] = \<const0> ;
  assign m_axi_wuser[220] = \<const0> ;
  assign m_axi_wuser[219] = \<const0> ;
  assign m_axi_wuser[218] = \<const0> ;
  assign m_axi_wuser[217] = \<const0> ;
  assign m_axi_wuser[216] = \<const0> ;
  assign m_axi_wuser[215] = \<const0> ;
  assign m_axi_wuser[214] = \<const0> ;
  assign m_axi_wuser[213] = \<const0> ;
  assign m_axi_wuser[212] = \<const0> ;
  assign m_axi_wuser[211] = \<const0> ;
  assign m_axi_wuser[210] = \<const0> ;
  assign m_axi_wuser[209] = \<const0> ;
  assign m_axi_wuser[208] = \<const0> ;
  assign m_axi_wuser[207] = \<const0> ;
  assign m_axi_wuser[206] = \<const0> ;
  assign m_axi_wuser[205] = \<const0> ;
  assign m_axi_wuser[204] = \<const0> ;
  assign m_axi_wuser[203] = \<const0> ;
  assign m_axi_wuser[202] = \<const0> ;
  assign m_axi_wuser[201] = \<const0> ;
  assign m_axi_wuser[200] = \<const0> ;
  assign m_axi_wuser[199] = \<const0> ;
  assign m_axi_wuser[198] = \<const0> ;
  assign m_axi_wuser[197] = \<const0> ;
  assign m_axi_wuser[196] = \<const0> ;
  assign m_axi_wuser[195] = \<const0> ;
  assign m_axi_wuser[194] = \<const0> ;
  assign m_axi_wuser[193] = \<const0> ;
  assign m_axi_wuser[192] = \<const0> ;
  assign m_axi_wuser[191] = \<const0> ;
  assign m_axi_wuser[190] = \<const0> ;
  assign m_axi_wuser[189] = \<const0> ;
  assign m_axi_wuser[188] = \<const0> ;
  assign m_axi_wuser[187] = \<const0> ;
  assign m_axi_wuser[186] = \<const0> ;
  assign m_axi_wuser[185] = \<const0> ;
  assign m_axi_wuser[184] = \<const0> ;
  assign m_axi_wuser[183] = \<const0> ;
  assign m_axi_wuser[182] = \<const0> ;
  assign m_axi_wuser[181] = \<const0> ;
  assign m_axi_wuser[180] = \<const0> ;
  assign m_axi_wuser[179] = \<const0> ;
  assign m_axi_wuser[178] = \<const0> ;
  assign m_axi_wuser[177] = \<const0> ;
  assign m_axi_wuser[176] = \<const0> ;
  assign m_axi_wuser[175] = \<const0> ;
  assign m_axi_wuser[174] = \<const0> ;
  assign m_axi_wuser[173] = \<const0> ;
  assign m_axi_wuser[172] = \<const0> ;
  assign m_axi_wuser[171] = \<const0> ;
  assign m_axi_wuser[170] = \<const0> ;
  assign m_axi_wuser[169] = \<const0> ;
  assign m_axi_wuser[168] = \<const0> ;
  assign m_axi_wuser[167] = \<const0> ;
  assign m_axi_wuser[166] = \<const0> ;
  assign m_axi_wuser[165] = \<const0> ;
  assign m_axi_wuser[164] = \<const0> ;
  assign m_axi_wuser[163] = \<const0> ;
  assign m_axi_wuser[162] = \<const0> ;
  assign m_axi_wuser[161] = \<const0> ;
  assign m_axi_wuser[160] = \<const0> ;
  assign m_axi_wuser[159] = \<const0> ;
  assign m_axi_wuser[158] = \<const0> ;
  assign m_axi_wuser[157] = \<const0> ;
  assign m_axi_wuser[156] = \<const0> ;
  assign m_axi_wuser[155] = \<const0> ;
  assign m_axi_wuser[154] = \<const0> ;
  assign m_axi_wuser[153] = \<const0> ;
  assign m_axi_wuser[152] = \<const0> ;
  assign m_axi_wuser[151] = \<const0> ;
  assign m_axi_wuser[150] = \<const0> ;
  assign m_axi_wuser[149] = \<const0> ;
  assign m_axi_wuser[148] = \<const0> ;
  assign m_axi_wuser[147] = \<const0> ;
  assign m_axi_wuser[146] = \<const0> ;
  assign m_axi_wuser[145] = \<const0> ;
  assign m_axi_wuser[144] = \<const0> ;
  assign m_axi_wuser[143] = \<const0> ;
  assign m_axi_wuser[142] = \<const0> ;
  assign m_axi_wuser[141] = \<const0> ;
  assign m_axi_wuser[140] = \<const0> ;
  assign m_axi_wuser[139] = \<const0> ;
  assign m_axi_wuser[138] = \<const0> ;
  assign m_axi_wuser[137] = \<const0> ;
  assign m_axi_wuser[136] = \<const0> ;
  assign m_axi_wuser[135] = \<const0> ;
  assign m_axi_wuser[134] = \<const0> ;
  assign m_axi_wuser[133] = \<const0> ;
  assign m_axi_wuser[132] = \<const0> ;
  assign m_axi_wuser[131] = \<const0> ;
  assign m_axi_wuser[130] = \<const0> ;
  assign m_axi_wuser[129] = \<const0> ;
  assign m_axi_wuser[128] = \<const0> ;
  assign m_axi_wuser[127] = \<const0> ;
  assign m_axi_wuser[126] = \<const0> ;
  assign m_axi_wuser[125] = \<const0> ;
  assign m_axi_wuser[124] = \<const0> ;
  assign m_axi_wuser[123] = \<const0> ;
  assign m_axi_wuser[122] = \<const0> ;
  assign m_axi_wuser[121] = \<const0> ;
  assign m_axi_wuser[120] = \<const0> ;
  assign m_axi_wuser[119] = \<const0> ;
  assign m_axi_wuser[118] = \<const0> ;
  assign m_axi_wuser[117] = \<const0> ;
  assign m_axi_wuser[116] = \<const0> ;
  assign m_axi_wuser[115] = \<const0> ;
  assign m_axi_wuser[114] = \<const0> ;
  assign m_axi_wuser[113] = \<const0> ;
  assign m_axi_wuser[112] = \<const0> ;
  assign m_axi_wuser[111] = \<const0> ;
  assign m_axi_wuser[110] = \<const0> ;
  assign m_axi_wuser[109] = \<const0> ;
  assign m_axi_wuser[108] = \<const0> ;
  assign m_axi_wuser[107] = \<const0> ;
  assign m_axi_wuser[106] = \<const0> ;
  assign m_axi_wuser[105] = \<const0> ;
  assign m_axi_wuser[104] = \<const0> ;
  assign m_axi_wuser[103] = \<const0> ;
  assign m_axi_wuser[102] = \<const0> ;
  assign m_axi_wuser[101] = \<const0> ;
  assign m_axi_wuser[100] = \<const0> ;
  assign m_axi_wuser[99] = \<const0> ;
  assign m_axi_wuser[98] = \<const0> ;
  assign m_axi_wuser[97] = \<const0> ;
  assign m_axi_wuser[96] = \<const0> ;
  assign m_axi_wuser[95] = \<const0> ;
  assign m_axi_wuser[94] = \<const0> ;
  assign m_axi_wuser[93] = \<const0> ;
  assign m_axi_wuser[92] = \<const0> ;
  assign m_axi_wuser[91] = \<const0> ;
  assign m_axi_wuser[90] = \<const0> ;
  assign m_axi_wuser[89] = \<const0> ;
  assign m_axi_wuser[88] = \<const0> ;
  assign m_axi_wuser[87] = \<const0> ;
  assign m_axi_wuser[86] = \<const0> ;
  assign m_axi_wuser[85] = \<const0> ;
  assign m_axi_wuser[84] = \<const0> ;
  assign m_axi_wuser[83] = \<const0> ;
  assign m_axi_wuser[82] = \<const0> ;
  assign m_axi_wuser[81] = \<const0> ;
  assign m_axi_wuser[80] = \<const0> ;
  assign m_axi_wuser[79] = \<const0> ;
  assign m_axi_wuser[78] = \<const0> ;
  assign m_axi_wuser[77] = \<const0> ;
  assign m_axi_wuser[76] = \<const0> ;
  assign m_axi_wuser[75] = \<const0> ;
  assign m_axi_wuser[74] = \<const0> ;
  assign m_axi_wuser[73] = \<const0> ;
  assign m_axi_wuser[72] = \<const0> ;
  assign m_axi_wuser[71] = \<const0> ;
  assign m_axi_wuser[70] = \<const0> ;
  assign m_axi_wuser[69] = \<const0> ;
  assign m_axi_wuser[68] = \<const0> ;
  assign m_axi_wuser[67] = \<const0> ;
  assign m_axi_wuser[66] = \<const0> ;
  assign m_axi_wuser[65] = \<const0> ;
  assign m_axi_wuser[64] = \<const0> ;
  assign m_axi_wuser[63] = \<const0> ;
  assign m_axi_wuser[62] = \<const0> ;
  assign m_axi_wuser[61] = \<const0> ;
  assign m_axi_wuser[60] = \<const0> ;
  assign m_axi_wuser[59] = \<const0> ;
  assign m_axi_wuser[58] = \<const0> ;
  assign m_axi_wuser[57] = \<const0> ;
  assign m_axi_wuser[56] = \<const0> ;
  assign m_axi_wuser[55] = \<const0> ;
  assign m_axi_wuser[54] = \<const0> ;
  assign m_axi_wuser[53] = \<const0> ;
  assign m_axi_wuser[52] = \<const0> ;
  assign m_axi_wuser[51] = \<const0> ;
  assign m_axi_wuser[50] = \<const0> ;
  assign m_axi_wuser[49] = \<const0> ;
  assign m_axi_wuser[48] = \<const0> ;
  assign m_axi_wuser[47] = \<const0> ;
  assign m_axi_wuser[46] = \<const0> ;
  assign m_axi_wuser[45] = \<const0> ;
  assign m_axi_wuser[44] = \<const0> ;
  assign m_axi_wuser[43] = \<const0> ;
  assign m_axi_wuser[42] = \<const0> ;
  assign m_axi_wuser[41] = \<const0> ;
  assign m_axi_wuser[40] = \<const0> ;
  assign m_axi_wuser[39] = \<const0> ;
  assign m_axi_wuser[38] = \<const0> ;
  assign m_axi_wuser[37] = \<const0> ;
  assign m_axi_wuser[36] = \<const0> ;
  assign m_axi_wuser[35] = \<const0> ;
  assign m_axi_wuser[34] = \<const0> ;
  assign m_axi_wuser[33] = \<const0> ;
  assign m_axi_wuser[32] = \<const0> ;
  assign m_axi_wuser[31] = \<const0> ;
  assign m_axi_wuser[30] = \<const0> ;
  assign m_axi_wuser[29] = \<const0> ;
  assign m_axi_wuser[28] = \<const0> ;
  assign m_axi_wuser[27] = \<const0> ;
  assign m_axi_wuser[26] = \<const0> ;
  assign m_axi_wuser[25] = \<const0> ;
  assign m_axi_wuser[24] = \<const0> ;
  assign m_axi_wuser[23] = \<const0> ;
  assign m_axi_wuser[22] = \<const0> ;
  assign m_axi_wuser[21] = \<const0> ;
  assign m_axi_wuser[20] = \<const0> ;
  assign m_axi_wuser[19] = \<const0> ;
  assign m_axi_wuser[18] = \<const0> ;
  assign m_axi_wuser[17] = \<const0> ;
  assign m_axi_wuser[16] = \<const0> ;
  assign m_axi_wuser[15] = \<const0> ;
  assign m_axi_wuser[14] = \<const0> ;
  assign m_axi_wuser[13] = \<const0> ;
  assign m_axi_wuser[12] = \<const0> ;
  assign m_axi_wuser[11] = \<const0> ;
  assign m_axi_wuser[10] = \<const0> ;
  assign m_axi_wuser[9] = \<const0> ;
  assign m_axi_wuser[8] = \<const0> ;
  assign m_axi_wuser[7] = \<const0> ;
  assign m_axi_wuser[6] = \<const0> ;
  assign m_axi_wuser[5] = \<const0> ;
  assign m_axi_wuser[4] = \<const0> ;
  assign m_axi_wuser[3] = \<const0> ;
  assign m_axi_wuser[2] = \<const0> ;
  assign m_axi_wuser[1] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    areset_i_1
       (.I0(aresetn),
        .O(areset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_reg
       (.C(aclk),
        .CE(1'b1),
        .D(areset_i_1_n_0),
        .Q(areset),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall aw_reg_stall
       (.Q(\gen_endpoint.w_cnt_reg__0 [5]),
        .aclk(aclk),
        .areset(areset),
        .\gen_axi.gen_write.s_axi_awready_i_reg (aw_reg_stall_n_3),
        .\gen_endpoint.err_awready (\gen_endpoint.err_awready ),
        .\gen_endpoint.err_bvalid (\gen_endpoint.err_bvalid ),
        .\gen_endpoint.w_cnt_reg[5] (aw_reg_stall_n_5),
        .\gen_endpoint.w_state (\gen_endpoint.w_state ),
        .\gen_endpoint.w_state_reg[0] (aw_reg_stall_n_2),
        .\gen_endpoint.w_trigger_decerr (\gen_endpoint.w_trigger_decerr ),
        .\gen_pipe[1].pipe_reg[1][139] ({m_axi_awcache,m_axi_awqos,m_axi_awprot,m_axi_awlock,m_axi_awlen,m_axi_awaddr}),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .\m_vector_i_reg[1061]_0 (aw_reg_stall_n_4),
        .\m_vector_i_reg[1144]_0 ({s_awvector_d[1144:1125],s_awvector_d[1092:1061]}),
        .mr_axi_awready(mr_axi_awready),
        .mr_axi_awvalid(mr_axi_awvalid),
        .s_axi_awready_d(s_axi_awready_d),
        .s_split_awvalid(s_split_awvalid),
        .sr_axi_awvalid(sr_axi_awvalid),
        .\state_reg[m_valid_i]_0 (aw_reg_stall_n_1),
        .\state_reg[s_ready_i]_0 (m_axi_bready),
        .w_resume(w_resume));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_33 aw_sreg
       (.D({s_axi_awcache,s_axi_awqos,s_axi_awprot,s_axi_awlock,s_axi_awlen,s_axi_awaddr,s_axi_awburst}),
        .E(aw_sreg_n_7),
        .Q({\gen_endpoint.w_cnt_reg__0 [5],\gen_endpoint.w_cnt_reg__0 [1:0]}),
        .S02_AXI_awready(s_axi_awready),
        .aclk(aclk),
        .areset(areset),
        .areset_reg(\gen_endpoint.w_enable_i_5_n_0 ),
        .\gen_endpoint.b_cnt_reg[3] (\gen_endpoint.b_cnt[5]_i_3_n_0 ),
        .\gen_endpoint.w_cnt_reg[1] (\gen_endpoint.w_cnt[5]_i_3_n_0 ),
        .\gen_endpoint.w_cnt_reg[2] (\gen_endpoint.w_enable_i_2_n_0 ),
        .\gen_endpoint.w_enable_reg (aw_sreg_n_4),
        .\gen_endpoint.w_enable_reg_0 (\gen_endpoint.w_enable_reg_n_0 ),
        .\gen_endpoint.w_state (\gen_endpoint.w_state ),
        .\gen_endpoint.w_state_reg[0] (aw_sreg_n_3),
        .\gen_endpoint.w_state_reg[1] (aw_sreg_n_2),
        .\gen_endpoint.w_state_reg[1]_0 (\gen_endpoint.w_state[1]_i_6_n_0 ),
        .\gen_endpoint.w_trigger_decerr (\gen_endpoint.w_trigger_decerr ),
        .m_axi_bvalid(m_axi_bvalid),
        .p_13_in(p_13_in),
        .s_axi_awready_d(s_axi_awready_d),
        .s_axi_awvalid(s_axi_awvalid),
        .s_split_awvalid(s_split_awvalid),
        .\skid_buffer_reg[1144]_0 ({s_awvector_d[1144:1125],s_awvector_d[1092:1061]}),
        .sr_axi_awvalid(sr_axi_awvalid),
        .\state_reg[m_valid_i]_0 (w_sreg_n_45),
        .\state_reg[m_valid_i]_1 (aw_reg_stall_n_2),
        .\state_reg[s_ready_i]_0 (aw_reg_stall_n_1),
        .\state_reg[s_ready_i]_1 (m_axi_bready));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_34 b_sreg
       (.D({b_sreg_n_2,b_sreg_n_3,b_sreg_n_4,b_sreg_n_5,b_sreg_n_6}),
        .Q(\gen_endpoint.b_cnt_reg__0 ),
        .S02_AXI_bvalid(s_axi_bvalid),
        .aclk(aclk),
        .areset(areset),
        .\gen_endpoint.b_cnt_reg[3] (\gen_endpoint.b_cnt[5]_i_3_n_0 ),
        .\gen_endpoint.w_state (\gen_endpoint.w_state ),
        .\gen_endpoint.w_state_reg[0] (aw_reg_stall_n_4),
        .\gen_endpoint.w_trigger_decerr (\gen_endpoint.w_trigger_decerr ),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .mr_axi_bvalid(mr_axi_bvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .\state_reg[s_ready_i]_0 (m_axi_bready),
        .\state_reg[s_ready_i]_1 (aw_reg_stall_n_5));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_endpoint.b_cnt[0]_i_1 
       (.I0(\gen_endpoint.b_cnt_reg__0 [0]),
        .O(\gen_endpoint.b_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \gen_endpoint.b_cnt[5]_i_3 
       (.I0(\gen_endpoint.b_cnt_reg__0 [3]),
        .I1(\gen_endpoint.b_cnt_reg__0 [2]),
        .I2(\gen_endpoint.b_cnt_reg__0 [4]),
        .I3(\gen_endpoint.b_cnt_reg__0 [5]),
        .I4(\gen_endpoint.b_cnt_reg__0 [0]),
        .I5(\gen_endpoint.b_cnt_reg__0 [1]),
        .O(\gen_endpoint.b_cnt[5]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[0] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(\gen_endpoint.b_cnt[0]_i_1_n_0 ),
        .Q(\gen_endpoint.b_cnt_reg__0 [0]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[1] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(b_sreg_n_6),
        .Q(\gen_endpoint.b_cnt_reg__0 [1]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[2] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(b_sreg_n_5),
        .Q(\gen_endpoint.b_cnt_reg__0 [2]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[3] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(b_sreg_n_4),
        .Q(\gen_endpoint.b_cnt_reg__0 [3]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[4] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(b_sreg_n_3),
        .Q(\gen_endpoint.b_cnt_reg__0 [4]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.b_cnt_reg[5] 
       (.C(aclk),
        .CE(aw_sreg_n_7),
        .D(b_sreg_n_2),
        .Q(\gen_endpoint.b_cnt_reg__0 [5]),
        .R(areset));
  ADC_axi_smc_0_sc_mmu_v1_0_5_decerr_slave \gen_endpoint.decerr_slave_inst 
       (.Q(m_axi_wlast),
        .aclk(aclk),
        .areset(areset),
        .\gen_endpoint.err_awready (\gen_endpoint.err_awready ),
        .\gen_endpoint.err_bvalid (\gen_endpoint.err_bvalid ),
        .\gen_endpoint.w_enable_reg (\gen_endpoint.w_enable_reg_n_0 ),
        .\gen_endpoint.w_state (\gen_endpoint.w_state ),
        .m_axi_awready(m_axi_awready),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_wready(m_axi_wready),
        .mr_axi_awready(mr_axi_awready),
        .mr_axi_awvalid(mr_axi_awvalid),
        .mr_axi_bvalid(mr_axi_bvalid),
        .mr_axi_wready(mr_axi_wready),
        .mr_axi_wvalid(mr_axi_wvalid),
        .\state_reg[m_valid_i] (aw_reg_stall_n_3),
        .\state_reg[m_valid_i]_0 (w_sreg_n_46),
        .\state_reg[s_ready_i] (m_axi_bready));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_endpoint.w_cnt[0]_i_1 
       (.I0(\gen_endpoint.w_cnt_reg__0 [0]),
        .O(\gen_endpoint.w_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \gen_endpoint.w_cnt[5]_i_3 
       (.I0(\gen_endpoint.w_cnt_reg__0 [1]),
        .I1(\gen_endpoint.w_cnt_reg__0 [0]),
        .I2(\gen_endpoint.w_cnt_reg__0 [4]),
        .I3(\gen_endpoint.w_cnt_reg__0 [5]),
        .I4(\gen_endpoint.w_cnt_reg__0 [3]),
        .I5(\gen_endpoint.w_cnt_reg__0 [2]),
        .O(\gen_endpoint.w_cnt[5]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[0] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(\gen_endpoint.w_cnt[0]_i_1_n_0 ),
        .Q(\gen_endpoint.w_cnt_reg__0 [0]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[1] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(w_sreg_n_7),
        .Q(\gen_endpoint.w_cnt_reg__0 [1]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[2] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(w_sreg_n_6),
        .Q(\gen_endpoint.w_cnt_reg__0 [2]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[3] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(w_sreg_n_5),
        .Q(\gen_endpoint.w_cnt_reg__0 [3]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[4] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(w_sreg_n_4),
        .Q(\gen_endpoint.w_cnt_reg__0 [4]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_cnt_reg[5] 
       (.C(aclk),
        .CE(w_sreg_n_47),
        .D(w_sreg_n_3),
        .Q(\gen_endpoint.w_cnt_reg__0 [5]),
        .R(areset));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gen_endpoint.w_enable_i_2 
       (.I0(\gen_endpoint.w_cnt_reg__0 [2]),
        .I1(\gen_endpoint.w_cnt_reg__0 [3]),
        .I2(\gen_endpoint.w_cnt_reg__0 [5]),
        .I3(\gen_endpoint.w_cnt_reg__0 [4]),
        .O(\gen_endpoint.w_enable_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \gen_endpoint.w_enable_i_5 
       (.I0(areset),
        .I1(\gen_endpoint.w_cnt_reg__0 [5]),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.w_state [0]),
        .O(\gen_endpoint.w_enable_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_enable_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(aw_sreg_n_4),
        .Q(\gen_endpoint.w_enable_reg_n_0 ),
        .R(areset));
  LUT4 #(
    .INIT(16'h0004)) 
    \gen_endpoint.w_resume_i_1 
       (.I0(\gen_endpoint.w_cnt[5]_i_3_n_0 ),
        .I1(\gen_endpoint.w_state [1]),
        .I2(\gen_endpoint.w_state [0]),
        .I3(\gen_endpoint.b_cnt[5]_i_3_n_0 ),
        .O(\gen_endpoint.w_resume_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_resume_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_endpoint.w_resume_i_1_n_0 ),
        .Q(w_resume),
        .R(areset));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_endpoint.w_state[1]_i_6 
       (.I0(\gen_endpoint.w_state [1]),
        .I1(\gen_endpoint.w_state [0]),
        .O(\gen_endpoint.w_state[1]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_state_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(aw_sreg_n_3),
        .Q(\gen_endpoint.w_state [0]),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_endpoint.w_state_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(aw_sreg_n_2),
        .Q(\gen_endpoint.w_state [1]),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_35 w_sreg
       (.D({w_sreg_n_3,w_sreg_n_4,w_sreg_n_5,w_sreg_n_6,w_sreg_n_7}),
        .E(w_sreg_n_47),
        .Q(\gen_endpoint.w_cnt_reg__0 ),
        .S02_AXI_wready(s_axi_wready),
        .\S02_AXI_wstrb[3] ({s_axi_wstrb,s_axi_wdata,s_axi_wlast}),
        .aclk(aclk),
        .areset(areset),
        .\gen_axi.gen_write.s_axi_bvalid_i_reg (w_sreg_n_46),
        .\gen_endpoint.w_cnt_reg[1] (\gen_endpoint.w_cnt[5]_i_3_n_0 ),
        .\gen_endpoint.w_enable_reg (w_sreg_n_45),
        .\gen_endpoint.w_enable_reg_0 (\gen_endpoint.w_enable_reg_n_0 ),
        .\gen_endpoint.w_state (\gen_endpoint.w_state ),
        .\gen_endpoint.w_trigger_decerr (\gen_endpoint.w_trigger_decerr ),
        .\gen_w_ch.accum_reg[bytes][7][strb] ({m_axi_wstrb,m_axi_wdata,m_axi_wlast}),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .mr_axi_wready(mr_axi_wready),
        .mr_axi_wvalid(mr_axi_wvalid),
        .p_13_in(p_13_in),
        .s_axi_wvalid(s_axi_wvalid),
        .\state_reg[s_ready_i]_0 (aw_reg_stall_n_5));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_arb_alg_rr" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_arb_alg_rr
   (p_4_in,
    \gen_pipe[1].pipe_reg[1][2] ,
    E,
    \gen_pipelined.mesg_reg_reg[2] ,
    \gen_wr.afull_r_reg ,
    areset_r_reg,
    s_sc_aclk,
    \gen_wr.afull_r_reg_0 ,
    s_sc_send,
    Q);
  output p_4_in;
  output \gen_pipe[1].pipe_reg[1][2] ;
  output [0:0]E;
  output \gen_pipelined.mesg_reg_reg[2] ;
  output \gen_wr.afull_r_reg ;
  input areset_r_reg;
  input s_sc_aclk;
  input \gen_wr.afull_r_reg_0 ;
  input [0:0]s_sc_send;
  input [0:0]Q;

  wire [0:0]E;
  wire [0:0]Q;
  wire areset_r_reg;
  wire \gen_pipe[1].pipe_reg[1][2] ;
  wire \gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_wr.afull_r_reg ;
  wire \gen_wr.afull_r_reg_0 ;
  wire p_4_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \gen_pipelined.mesg_reg[2]_i_2 
       (.I0(\gen_pipe[1].pipe_reg[1][2] ),
        .I1(s_sc_send),
        .O(\gen_pipelined.mesg_reg_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \gen_wr.afull_r_i_10 
       (.I0(s_sc_send),
        .I1(\gen_pipe[1].pipe_reg[1][2] ),
        .I2(Q),
        .O(\gen_wr.afull_r_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \grant_i_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r_reg_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][2] ),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    \last_grant_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(p_4_in),
        .Q(p_4_in),
        .S(areset_r_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \shift_reg_reg[0]_srl1_i_2 
       (.I0(s_sc_send),
        .I1(\gen_pipe[1].pipe_reg[1][2] ),
        .O(E));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fi_regulator" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fi_regulator
   (allow_transfer_r,
    \gen_delay.delay_reg ,
    arb_stall,
    \gen_wr.full_r_reg ,
    s_sc_aclk);
  output allow_transfer_r;
  output \gen_delay.delay_reg ;
  output arb_stall;
  input \gen_wr.full_r_reg ;
  input s_sc_aclk;

  wire allow_transfer_r;
  wire arb_stall;
  wire \gen_delay.delay_reg ;
  wire \gen_wr.full_r_reg ;
  wire s_sc_aclk;

  FDRE #(
    .INIT(1'b0)) 
    allow_transfer_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r_reg ),
        .Q(allow_transfer_r),
        .R(1'b0));
  FDRE \gen_delay.delay_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(allow_transfer_r),
        .Q(\gen_delay.delay_reg ),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_pipe[1].pipe[1][0]_i_1 
       (.I0(allow_transfer_r),
        .O(arb_stall));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo
   (\gen_wr.afull_r ,
    s_sc_aclk,
    SR,
    areset_r_reg,
    arb_stall_late,
    s_sc_send,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_valid,
    m_sc_recv,
    \gen_normal_area.fifo_node_payld_empty );
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input arb_stall_late;
  input [0:0]s_sc_send;
  input \gen_normal_area.m_sc_handshake0 ;
  input s_sc_valid;
  input [0:0]m_sc_recv;
  input \gen_normal_area.fifo_node_payld_empty ;

  wire [0:0]SR;
  wire arb_stall_late;
  wire [0:0]areset_r_reg;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_wr.afull_r ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo \gen_xpm_memory_fifo.inst_fifo 
       (.SR(SR),
        .arb_stall_late(arb_stall_late),
        .areset_r_reg(areset_r_reg),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized0
   (m_sc_payld,
    m_sc_send,
    \gen_normal_area.fifo_node_payld_empty ,
    \count_r_reg[4] ,
    \count_r_reg[0] ,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    m_sc_recv,
    E);
  output [52:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \gen_normal_area.fifo_node_payld_empty ;
  output \count_r_reg[4] ;
  output [0:0]\count_r_reg[0] ;
  input s_sc_aclk;
  input [139:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire [0:0]\count_r_reg[0] ;
  wire \count_r_reg[4] ;
  wire [139:0]dina;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire [52:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized0 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[0] (\gen_normal_area.fifo_node_payld_empty ),
        .\count_r_reg[0]_0 (\count_r_reg[0] ),
        .\count_r_reg[4] (\count_r_reg[4] ),
        .dina(dina),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized1
   (doutb,
    \gen_rd.fifo_empty_r ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    \gen_normal_area.fifo_send_ready ,
    p_0_in3_in,
    E);
  output [0:0]doutb;
  output \gen_rd.fifo_empty_r ;
  input s_sc_aclk;
  input [0:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input \gen_normal_area.fifo_send_ready ;
  input p_0_in3_in;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire [0:0]doutb;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_payld;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized1 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r(areset_r),
        .doutb(doutb),
        .\gen_AB_reg_slice.state_reg[1] (\gen_rd.fifo_empty_r ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized2
   (m_sc_payld,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[2] ,
    p_0_in3_in,
    \gen_AB_reg_slice.payld_o_reg[2]_0 ,
    E);
  output [6:0]m_sc_payld;
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [3:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[2] ;
  input p_0_in3_in;
  input \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_AB_reg_slice.payld_o_reg[2] ;
  wire \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  wire \gen_wr.afull_r ;
  wire [6:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [3:0]s_sc_payld;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized2 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r(areset_r),
        .\gen_AB_reg_slice.payld_o_reg[2] (\gen_AB_reg_slice.payld_o_reg[2] ),
        .\gen_AB_reg_slice.payld_o_reg[2]_0 (\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3
   (p_0_out,
    s_axis_arb_tready,
    s_sc_aclk,
    s_sc_info,
    rstb,
    s_axis_arb_tdata,
    \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ,
    s_axis_arb_tvalid,
    s_sc_send,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    s_sc_req);
  output p_0_out;
  output s_axis_arb_tready;
  input s_sc_aclk;
  input [0:0]s_sc_info;
  input rstb;
  input [0:0]s_axis_arb_tdata;
  input \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  input s_axis_arb_tvalid;
  input [0:0]s_sc_send;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]s_sc_req;

  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  wire p_0_out;
  wire rstb;
  wire [0:0]s_axis_arb_tdata;
  wire s_axis_arb_tready;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire [0:0]s_sc_info;
  wire [0:0]s_sc_req;
  wire [0:0]s_sc_send;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3 \gen_xpm_memory_fifo.inst_fifo 
       (.\count_r_reg[0] (p_0_out),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late (\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .rstb(rstb),
        .s_axis_arb_tdata(s_axis_arb_tdata),
        .s_axis_arb_tready(s_axis_arb_tready),
        .s_axis_arb_tvalid(s_axis_arb_tvalid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_info(s_sc_info),
        .s_sc_req(s_sc_req),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3__xdcDup__1
   (s_sc_aclk,
    rstb);
  input s_sc_aclk;
  input rstb;

  wire rstb;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3__xdcDup__1 \gen_xpm_memory_fifo.inst_fifo 
       (.rstb(rstb),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3__xdcDup__2
   (s_sc_aclk,
    rstb);
  input s_sc_aclk;
  input rstb;

  wire rstb;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3__xdcDup__2 \gen_xpm_memory_fifo.inst_fifo 
       (.rstb(rstb),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized4
   (m_sc_payld,
    m_sc_send,
    \gen_normal_area.fifo_node_payld_empty ,
    \count_r_reg[0] ,
    s_sc_aclk,
    dina,
    m_sc_areset_r,
    SR,
    m_sc_recv,
    E);
  output [71:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \gen_normal_area.fifo_node_payld_empty ;
  output [0:0]\count_r_reg[0] ;
  input s_sc_aclk;
  input [87:0]dina;
  input m_sc_areset_r;
  input [0:0]SR;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]\count_r_reg[0] ;
  wire [87:0]dina;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire m_sc_areset_r;
  wire [71:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized4 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .\count_r_reg[0] (\gen_normal_area.fifo_node_payld_empty ),
        .\count_r_reg[0]_0 (\count_r_reg[0] ),
        .dina(dina),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized5
   (\gen_rd.fifo_empty_r ,
    s_sc_aclk,
    SR,
    areset_r,
    \gen_normal_area.fifo_send_ready ,
    p_0_in3_in,
    E);
  output \gen_rd.fifo_empty_r ;
  input s_sc_aclk;
  input [0:0]SR;
  input areset_r;
  input \gen_normal_area.fifo_send_ready ;
  input p_0_in3_in;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire p_0_in3_in;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized5 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r(areset_r),
        .\gen_AB_reg_slice.state_reg[0] (\gen_rd.fifo_empty_r ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized6
   (m_sc_payld,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    p_0_in3_in,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    E);
  output [138:0]m_sc_payld;
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [64:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input p_0_in3_in;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire \gen_wr.afull_r ;
  wire [138:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [64:0]s_sc_payld;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized6 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r(areset_r),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized7
   (m_sc_payld,
    m_sc_send,
    \gen_normal_area.fifo_node_payld_empty ,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r_reg,
    m_sc_recv,
    E);
  output [1:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \gen_normal_area.fifo_node_payld_empty ;
  output \gen_normal_area.m_sc_handshake0 ;
  input s_sc_aclk;
  input [6:0]s_sc_payld;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire [1:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire [6:0]s_sc_payld;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized7 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[0] (\gen_normal_area.fifo_node_payld_empty ),
        .\count_r_reg[0]_0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized8
   (m_sc_info,
    \gen_rd.fifo_empty_r ,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    E,
    \gen_normal_area.fifo_send_ready ,
    \gen_AB_reg_slice.state_reg[1] );
  output [0:0]m_sc_info;
  output \gen_rd.fifo_empty_r ;
  input s_sc_aclk;
  input [4:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input \gen_normal_area.fifo_send_ready ;
  input [0:0]\gen_AB_reg_slice.state_reg[1] ;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire [4:0]dina;
  wire [0:0]\gen_AB_reg_slice.state_reg[1] ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire [0:0]m_sc_info;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized8 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .areset_r_reg(areset_r_reg),
        .dina(dina),
        .\gen_AB_reg_slice.state_reg[0] (\gen_rd.fifo_empty_r ),
        .\gen_AB_reg_slice.state_reg[1] (\gen_AB_reg_slice.state_reg[1] ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .m_sc_info(m_sc_info),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized9
   (m_sc_payld,
    allow_transfer_r_reg,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    m_sc_recv,
    allow_transfer_r,
    \gen_delay.delay_reg ,
    E,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    \gen_AB_reg_slice.payld_o_reg[0]_1 );
  output [86:0]m_sc_payld;
  output allow_transfer_r_reg;
  input s_sc_aclk;
  input [86:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]m_sc_recv;
  input allow_transfer_r;
  input \gen_delay.delay_reg ;
  input [0:0]E;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;

  wire [0:0]E;
  wire [0:0]SR;
  wire allow_transfer_r;
  wire allow_transfer_r_reg;
  wire [0:0]areset_r_reg;
  wire [86:0]dina;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;
  wire \gen_delay.delay_reg ;
  wire [86:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized9 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .SR(SR),
        .allow_transfer_r(allow_transfer_r),
        .allow_transfer_r_reg(allow_transfer_r_reg),
        .areset_r_reg(areset_r_reg),
        .dina(dina),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .\gen_AB_reg_slice.payld_o_reg[0]_1 (\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .\gen_delay.delay_reg (\gen_delay.delay_reg ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__xdcDup__1
   (\gen_wr.afull_r ,
    Q,
    s_sc_aclk,
    SR,
    areset_r_reg,
    \grant_i_reg[2] ,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv,
    \grant_i_reg[2]_0 ,
    s_sc_send,
    \gen_rd.fifo_empty_r_reg ,
    E,
    S_AXI_AREADY_I_reg);
  output \gen_wr.afull_r ;
  output [0:0]Q;
  input s_sc_aclk;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input \grant_i_reg[2] ;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;
  input \grant_i_reg[2]_0 ;
  input [0:0]s_sc_send;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]E;
  input [0:0]S_AXI_AREADY_I_reg;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]S_AXI_AREADY_I_reg;
  wire [0:0]areset_r_reg;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_wr.afull_r ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__xdcDup__1 \gen_xpm_memory_fifo.inst_fifo 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .S_AXI_AREADY_I_reg(S_AXI_AREADY_I_reg),
        .areset_r_reg(areset_r_reg),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_rd.fifo_empty_r_reg (\gen_rd.fifo_empty_r_reg ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .\grant_i_reg[2] (\grant_i_reg[2] ),
        .\grant_i_reg[2]_0 (\grant_i_reg[2]_0 ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_fifo" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_fifo__xdcDup__2
   (allow_transfer,
    s_sc_aclk,
    m_sc_areset_r,
    areset_r,
    p_0_in2_out,
    \gen_normal_area.m_sc_handshake0 ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv);
  output allow_transfer;
  input s_sc_aclk;
  input m_sc_areset_r;
  input areset_r;
  input [0:0]p_0_in2_out;
  input \gen_normal_area.m_sc_handshake0 ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;

  wire allow_transfer;
  wire areset_r;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire m_sc_areset_r;
  wire [0:0]m_sc_recv;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__xdcDup__2 \gen_xpm_memory_fifo.inst_fifo 
       (.allow_transfer(allow_transfer),
        .areset_r(areset_r),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_recv(m_sc_recv),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_ingress" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_ingress
   (dina,
    \count_r_reg[5] ,
    areset_r_reg,
    E,
    s_sc_aclk,
    \grant_i_reg[2] );
  output [0:0]dina;
  output [0:0]\count_r_reg[5] ;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input s_sc_aclk;
  input \grant_i_reg[2] ;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire [0:0]\count_r_reg[5] ;
  wire [0:0]dina;
  wire \grant_i_reg[2] ;
  wire s_sc_aclk;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized3_54 inst_pipeline_recv
       (.dina(dina),
        .\grant_i_reg[2] (\grant_i_reg[2] ),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_55 inst_pipeline_valid
       (.E(E),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[5] (\count_r_reg[5] ),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_ingress" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_ingress__parameterized1
   (dina,
    E,
    SR,
    p_0_in2_out,
    s_sc_aclk,
    s_sc_recv);
  output [0:0]dina;
  output [0:0]E;
  input [0:0]SR;
  input [0:0]p_0_in2_out;
  input s_sc_aclk;
  input [0:0]s_sc_recv;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]dina;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized3 inst_pipeline_recv
       (.dina(dina),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_38 inst_pipeline_valid
       (.E(E),
        .SR(SR),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_ingress" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_ingress__parameterized3
   (E,
    areset_r_reg,
    s_sc_valid,
    s_sc_aclk);
  output [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_valid;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire s_sc_aclk;
  wire s_sc_valid;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_5 inst_pipeline_valid
       (.E(E),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_valid(s_sc_valid));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler
   (m_sc_payld,
    m_sc_send,
    areset_r_reg_0,
    \gen_wr.afull_r ,
    Q,
    s_sc_aclk,
    SR,
    s_sc_payld,
    E,
    \grant_i_reg[2] ,
    \grant_i_reg[2]_0 ,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    m_sc_recv,
    s_sc_send,
    s_sc_aresetn);
  output [52:0]m_sc_payld;
  output [0:0]m_sc_send;
  output areset_r_reg_0;
  output \gen_wr.afull_r ;
  output [0:0]Q;
  input s_sc_aclk;
  input [0:0]SR;
  input [138:0]s_sc_payld;
  input [0:0]E;
  input \grant_i_reg[2] ;
  input \grant_i_reg[2]_0 ;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]m_sc_recv;
  input [0:0]s_sc_send;
  input s_sc_aresetn;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]SR;
  wire areset_r;
  wire areset_r_reg_0;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.inst_fifo_node_payld_n_55 ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire [1:1]\gen_normal_area.upsizer_reqsend[req][source] ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire \gen_wr.afull_r ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire [52:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_aresetn;
  wire [138:0]s_sc_payld;
  wire [0:0]s_sc_send;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__xdcDup__1 \gen_normal_area.gen_node_prog_full.inst_node_prog_full 
       (.E(E),
        .Q(Q),
        .SR(SR),
        .S_AXI_AREADY_I_reg(\gen_normal_area.m_sc_handshake0 ),
        .areset_r_reg(areset_r),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_rd.fifo_empty_r_reg (\gen_normal_area.inst_fifo_node_payld_n_55 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .\grant_i_reg[2] (\grant_i_reg[2]_0 ),
        .\grant_i_reg[2]_0 (\grant_i_reg[2] ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized0 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(SR),
        .areset_r_reg(areset_r),
        .\count_r_reg[0] (\gen_normal_area.m_sc_handshake0 ),
        .\count_r_reg[4] (\gen_normal_area.inst_fifo_node_payld_n_55 ),
        .dina({\gen_normal_area.upsizer_reqsend[req][source] ,s_sc_payld}),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_ingress inst_ingress
       (.E(E),
        .areset_r_reg(areset_r),
        .\count_r_reg[5] (\gen_normal_area.upsizer_valid ),
        .dina(\gen_normal_area.upsizer_reqsend[req][source] ),
        .\grant_i_reg[2] (\grant_i_reg[2] ),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized0
   (m_sc_payld,
    areset_r_reg_0,
    \gen_wr.afull_r ,
    \gen_AB_reg_slice.sel_rd_reg ,
    s_sc_aclk,
    s_sc_payld,
    s_sc_areset,
    m_sc_recv,
    p_0_in3_in,
    s_sc_aresetn);
  output [6:0]m_sc_payld;
  output areset_r_reg_0;
  output \gen_wr.afull_r ;
  output \gen_AB_reg_slice.sel_rd_reg ;
  input s_sc_aclk;
  input [4:0]s_sc_payld;
  input s_sc_areset;
  input [0:0]m_sc_recv;
  input p_0_in3_in;
  input s_sc_aresetn;

  wire areset_r;
  wire areset_r_reg_0;
  wire \gen_AB_reg_slice.sel_rd_reg ;
  wire \gen_AB_reg_slice.sel_wr0_out ;
  wire [2:2]\gen_normal_area.fifo_req_reqsend[req][sc_route] ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_normal_area.inst_fifo_send_n_3 ;
  wire \gen_normal_area.inst_fifo_send_n_4 ;
  wire \gen_rd.fifo_empty_r ;
  wire \gen_wr.afull_r ;
  wire m_sc_areset_r;
  wire [6:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [4:0]s_sc_payld;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized1 \gen_normal_area.gen_fifo_req.inst_fifo_req 
       (.E(\gen_AB_reg_slice.sel_wr0_out ),
        .SR(m_sc_areset_r),
        .areset_r(areset_r),
        .doutb(\gen_normal_area.fifo_req_reqsend[req][sc_route] ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld[0]));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized2 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.inst_fifo_send_n_3 ),
        .SR(m_sc_areset_r),
        .areset_r(areset_r),
        .\gen_AB_reg_slice.payld_o_reg[2] (\gen_AB_reg_slice.sel_rd_reg ),
        .\gen_AB_reg_slice.payld_o_reg[2]_0 (\gen_normal_area.inst_fifo_send_n_4 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld[4:1]));
  ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized0 \gen_normal_area.inst_fifo_send 
       (.E(\gen_AB_reg_slice.sel_wr0_out ),
        .SR(m_sc_areset_r),
        .\count_r_reg[4] (\gen_normal_area.inst_fifo_send_n_4 ),
        .\count_r_reg[5] (\gen_normal_area.inst_fifo_send_n_3 ),
        .doutb(\gen_normal_area.fifo_req_reqsend[req][sc_route] ),
        .\gen_AB_reg_slice.sel_rd_reg_0 (\gen_AB_reg_slice.sel_rd_reg ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  FDRE #(
    .INIT(1'b0)) 
    m_sc_areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(m_sc_areset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized1
   (m_sc_payld,
    m_sc_send,
    areset_r_reg_0,
    allow_transfer,
    s_sc_aclk,
    m_sc_areset_r,
    s_sc_payld,
    p_0_in2_out,
    s_sc_recv,
    m_sc_recv,
    s_sc_aresetn);
  output [71:0]m_sc_payld;
  output [0:0]m_sc_send;
  output areset_r_reg_0;
  output allow_transfer;
  input s_sc_aclk;
  input m_sc_areset_r;
  input [86:0]s_sc_payld;
  input [0:0]p_0_in2_out;
  input [0:0]s_sc_recv;
  input [0:0]m_sc_recv;
  input s_sc_aresetn;

  wire allow_transfer;
  wire areset_r;
  wire areset_r_reg_0;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire [1:1]\gen_normal_area.upsizer_reqsend[req][source] ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire m_sc_areset_r;
  wire [71:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;
  wire s_sc_aresetn;
  wire [86:0]s_sc_payld;
  wire [0:0]s_sc_recv;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__xdcDup__2 \gen_normal_area.gen_node_prog_full.inst_node_prog_full 
       (.allow_transfer(allow_transfer),
        .areset_r(areset_r),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_recv(m_sc_recv),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized4 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(areset_r),
        .\count_r_reg[0] (\gen_normal_area.m_sc_handshake0 ),
        .dina({s_sc_payld[7],s_sc_payld[0],\gen_normal_area.upsizer_reqsend[req][source] ,s_sc_payld[14],s_sc_payld[86:15],s_sc_payld[13:8],s_sc_payld[6:1]}),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_ingress__parameterized1 inst_ingress
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(areset_r),
        .dina(\gen_normal_area.upsizer_reqsend[req][source] ),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized2
   (m_sc_payld,
    areset_r_reg_0,
    \gen_wr.afull_r ,
    \gen_AB_reg_slice.valid_payld_o_reg ,
    m_sc_req,
    s_sc_aclk,
    s_sc_payld,
    s_sc_areset,
    m_sc_recv,
    p_0_in3_in,
    s_sc_aresetn);
  output [138:0]m_sc_payld;
  output areset_r_reg_0;
  output \gen_wr.afull_r ;
  output \gen_AB_reg_slice.valid_payld_o_reg ;
  output [0:0]m_sc_req;
  input s_sc_aclk;
  input [64:0]s_sc_payld;
  input s_sc_areset;
  input [0:0]m_sc_recv;
  input p_0_in3_in;
  input s_sc_aresetn;

  wire areset_r;
  wire areset_r_reg_0;
  wire \gen_AB_reg_slice.valid_payld_o_reg ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_normal_area.inst_fifo_send_n_4 ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_rd.fifo_empty_r ;
  wire \gen_wr.afull_r ;
  wire m_sc_areset_r;
  wire [138:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [64:0]s_sc_payld;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized5 \gen_normal_area.gen_fifo_req.inst_fifo_req 
       (.E(m_sc_req),
        .SR(m_sc_areset_r),
        .areset_r(areset_r),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized6 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.m_sc_handshake0 ),
        .SR(m_sc_areset_r),
        .areset_r(areset_r),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.valid_payld_o_reg ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_normal_area.inst_fifo_send_n_4 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
  ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized1_13 \gen_normal_area.inst_fifo_send 
       (.E(\gen_normal_area.m_sc_handshake0 ),
        .SR(m_sc_areset_r),
        .\count_r_reg[4] (\gen_normal_area.inst_fifo_send_n_4 ),
        .\gen_AB_reg_slice.valid_payld_o_reg_0 (\gen_AB_reg_slice.valid_payld_o_reg ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .m_sc_recv(m_sc_recv),
        .m_sc_req(m_sc_req),
        .s_sc_aclk(s_sc_aclk));
  FDRE #(
    .INIT(1'b0)) 
    m_sc_areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(m_sc_areset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized3
   (m_sc_payld,
    m_sc_send,
    areset_r_reg_0,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_payld,
    s_sc_areset,
    s_sc_valid,
    arb_stall_late,
    s_sc_send,
    m_sc_recv,
    s_sc_aresetn);
  output [1:0]m_sc_payld;
  output [0:0]m_sc_send;
  output areset_r_reg_0;
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [6:0]s_sc_payld;
  input s_sc_areset;
  input s_sc_valid;
  input arb_stall_late;
  input [0:0]s_sc_send;
  input [0:0]m_sc_recv;
  input s_sc_aresetn;

  wire arb_stall_late;
  wire areset_r;
  wire areset_r_reg_0;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire \gen_wr.afull_r ;
  wire m_sc_areset_r;
  wire [1:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [6:0]s_sc_payld;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo \gen_normal_area.gen_node_prog_full.inst_node_prog_full 
       (.SR(m_sc_areset_r),
        .arb_stall_late(arb_stall_late),
        .areset_r_reg(areset_r),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized7 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(m_sc_areset_r),
        .areset_r_reg(areset_r),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
  ADC_axi_smc_0_sc_node_v1_0_7_ingress__parameterized3 inst_ingress
       (.E(\gen_normal_area.upsizer_valid ),
        .areset_r_reg(areset_r),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_valid(s_sc_valid));
  FDRE #(
    .INIT(1'b0)) 
    m_sc_areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(m_sc_areset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_mi_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized4
   (m_sc_info,
    m_sc_payld,
    areset_r_reg_0,
    \count_r_reg[0] ,
    m_sc_req,
    arb_stall,
    s_sc_aclk,
    s_sc_areset,
    s_sc_payld,
    ingress_valid,
    m_sc_recv,
    s_sc_aresetn);
  output [0:0]m_sc_info;
  output [86:0]m_sc_payld;
  output areset_r_reg_0;
  output \count_r_reg[0] ;
  output [0:0]m_sc_req;
  output arb_stall;
  input s_sc_aclk;
  input s_sc_areset;
  input [50:0]s_sc_payld;
  input ingress_valid;
  input [0:0]m_sc_recv;
  input s_sc_aresetn;

  wire allow_transfer_r;
  wire arb_stall;
  wire areset_r;
  wire areset_r_reg_0;
  wire \count_r_reg[0] ;
  wire \gen_delay.delay_reg ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_1 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_10 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_11 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_12 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_13 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_14 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_15 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_16 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_17 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_19 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_2 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_20 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_21 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_22 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_23 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_24 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_25 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_26 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_28 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_29 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_3 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_30 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_31 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_32 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_33 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_34 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_35 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_37 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_38 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_39 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_4 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_40 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_41 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_42 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_43 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_44 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_45 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_46 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_47 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_48 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_49 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_5 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_50 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_51 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_52 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_53 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_54 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_55 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_56 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_57 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_58 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_59 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_6 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_60 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_61 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_62 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_63 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_64 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_65 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_66 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_67 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_68 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_69 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_7 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_70 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_71 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_72 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_73 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_74 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_75 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_76 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_77 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_78 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_79 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_8 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_80 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_81 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_82 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_83 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_84 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_85 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_86 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_87 ;
  wire \gen_normal_area.gen_upsizer.inst_upsizer_n_92 ;
  wire \gen_normal_area.inst_fifo_node_payld_n_87 ;
  wire \gen_normal_area.inst_fifo_send_n_4 ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire [79:52]\gen_normal_area.upsizer_node_payld ;
  wire \gen_normal_area.upsizer_reqsend[req][sc_route] ;
  wire [0:0]\gen_normal_area.upsizer_reqsend[send][end_pntr] ;
  wire \gen_normal_area.upsizer_reqsend[send][repeat_count] ;
  wire [0:0]\gen_normal_area.upsizer_reqsend[send][start_pntr] ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire \gen_rd.fifo_empty_r ;
  wire ingress_valid;
  wire m_sc_areset_r;
  wire [0:0]m_sc_info;
  wire [86:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [50:0]s_sc_payld;

  LUT1 #(
    .INIT(2'h1)) 
    areset_r_i_1
       (.I0(s_sc_aresetn),
        .O(areset_r_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(areset_r_reg_0),
        .Q(areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_node_v1_0_7_fi_regulator \gen_normal_area.gen_fi_regulator.inst_fi_regulator 
       (.allow_transfer_r(allow_transfer_r),
        .arb_stall(arb_stall),
        .\gen_delay.delay_reg (\gen_delay.delay_reg ),
        .\gen_wr.full_r_reg (\gen_normal_area.inst_fifo_node_payld_n_87 ),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized8 \gen_normal_area.gen_fifo_req.inst_fifo_req 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(m_sc_areset_r),
        .areset_r_reg(areset_r),
        .dina({\gen_normal_area.upsizer_reqsend[send][end_pntr] ,\gen_normal_area.upsizer_reqsend[send][start_pntr] ,\gen_normal_area.upsizer_reqsend[send][repeat_count] ,\gen_normal_area.upsizer_reqsend[req][sc_route] ,\gen_normal_area.gen_upsizer.inst_upsizer_n_92 }),
        .\gen_AB_reg_slice.state_reg[1] (m_sc_req),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .m_sc_info(m_sc_info),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_upsizer \gen_normal_area.gen_upsizer.inst_upsizer 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(areset_r),
        .dina({\gen_normal_area.gen_upsizer.inst_upsizer_n_1 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_2 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_3 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_4 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_5 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_6 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_7 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_8 ,\gen_normal_area.upsizer_node_payld [79],\gen_normal_area.gen_upsizer.inst_upsizer_n_10 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_11 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_12 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_13 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_14 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_15 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_16 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_17 ,\gen_normal_area.upsizer_node_payld [70],\gen_normal_area.gen_upsizer.inst_upsizer_n_19 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_20 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_21 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_22 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_23 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_24 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_25 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_26 ,\gen_normal_area.upsizer_node_payld [61],\gen_normal_area.gen_upsizer.inst_upsizer_n_28 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_29 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_30 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_31 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_32 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_33 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_34 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_35 ,\gen_normal_area.upsizer_node_payld [52],\gen_normal_area.gen_upsizer.inst_upsizer_n_37 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_38 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_39 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_40 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_41 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_42 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_43 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_44 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_45 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_46 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_47 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_48 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_49 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_50 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_51 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_52 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_53 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_54 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_55 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_56 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_57 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_58 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_59 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_60 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_61 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_62 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_63 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_64 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_65 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_66 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_67 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_68 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_69 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_70 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_71 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_72 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_73 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_74 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_75 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_76 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_77 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_78 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_79 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_80 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_81 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_82 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_83 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_84 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_85 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_86 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_87 }),
        .\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ({\gen_normal_area.upsizer_reqsend[send][end_pntr] ,\gen_normal_area.upsizer_reqsend[send][start_pntr] ,\gen_normal_area.upsizer_reqsend[send][repeat_count] ,\gen_normal_area.upsizer_reqsend[req][sc_route] ,\gen_normal_area.gen_upsizer.inst_upsizer_n_92 }),
        .ingress_valid(ingress_valid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld(s_sc_payld));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized9 \gen_normal_area.inst_fifo_node_payld 
       (.E(\gen_normal_area.upsizer_valid ),
        .SR(m_sc_areset_r),
        .allow_transfer_r(allow_transfer_r),
        .allow_transfer_r_reg(\gen_normal_area.inst_fifo_node_payld_n_87 ),
        .areset_r_reg(areset_r),
        .dina({\gen_normal_area.gen_upsizer.inst_upsizer_n_1 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_2 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_3 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_4 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_5 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_6 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_7 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_8 ,\gen_normal_area.upsizer_node_payld [79],\gen_normal_area.gen_upsizer.inst_upsizer_n_10 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_11 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_12 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_13 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_14 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_15 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_16 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_17 ,\gen_normal_area.upsizer_node_payld [70],\gen_normal_area.gen_upsizer.inst_upsizer_n_19 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_20 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_21 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_22 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_23 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_24 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_25 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_26 ,\gen_normal_area.upsizer_node_payld [61],\gen_normal_area.gen_upsizer.inst_upsizer_n_28 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_29 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_30 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_31 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_32 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_33 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_34 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_35 ,\gen_normal_area.upsizer_node_payld [52],\gen_normal_area.gen_upsizer.inst_upsizer_n_37 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_38 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_39 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_40 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_41 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_42 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_43 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_44 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_45 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_46 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_47 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_48 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_49 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_50 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_51 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_52 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_53 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_54 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_55 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_56 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_57 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_58 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_59 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_60 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_61 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_62 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_63 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_64 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_65 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_66 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_67 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_68 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_69 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_70 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_71 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_72 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_73 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_74 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_75 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_76 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_77 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_78 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_79 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_80 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_81 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_82 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_83 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_84 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_85 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_86 ,\gen_normal_area.gen_upsizer.inst_upsizer_n_87 }),
        .\gen_AB_reg_slice.payld_o_reg[0] (\count_r_reg[0] ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_normal_area.inst_fifo_send_n_4 ),
        .\gen_AB_reg_slice.payld_o_reg[0]_1 (\gen_normal_area.m_sc_handshake0 ),
        .\gen_delay.delay_reg (\gen_delay.delay_reg ),
        .m_sc_payld(m_sc_payld),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized1 \gen_normal_area.inst_fifo_send 
       (.SR(m_sc_areset_r),
        .\count_r_reg[0] (\count_r_reg[0] ),
        .\count_r_reg[0]_0 (\gen_normal_area.m_sc_handshake0 ),
        .\count_r_reg[4] (\gen_normal_area.inst_fifo_send_n_4 ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r (\gen_rd.fifo_empty_r ),
        .m_sc_recv(m_sc_recv),
        .m_sc_req(m_sc_req),
        .s_sc_aclk(s_sc_aclk));
  FDRE #(
    .INIT(1'b0)) 
    m_sc_areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(m_sc_areset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_reg_slice3" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized0
   (\gen_AB_reg_slice.sel_rd_reg_0 ,
    \gen_normal_area.fifo_send_ready ,
    E,
    \count_r_reg[5] ,
    \count_r_reg[4] ,
    doutb,
    s_sc_aclk,
    SR,
    \gen_rd.fifo_empty_r ,
    m_sc_recv);
  output \gen_AB_reg_slice.sel_rd_reg_0 ;
  output \gen_normal_area.fifo_send_ready ;
  output [0:0]E;
  output [0:0]\count_r_reg[5] ;
  output \count_r_reg[4] ;
  input [0:0]doutb;
  input s_sc_aclk;
  input [0:0]SR;
  input \gen_rd.fifo_empty_r ;
  input [0:0]m_sc_recv;

  wire [0:0]E;
  wire [0:0]SR;
  wire \count_r_reg[4] ;
  wire [0:0]\count_r_reg[5] ;
  wire [0:0]doutb;
  wire \gen_AB_reg_slice.payld_a ;
  wire \gen_AB_reg_slice.payld_a_reg_n_0_[2] ;
  wire \gen_AB_reg_slice.payld_b ;
  wire \gen_AB_reg_slice.payld_b_reg_n_0_[2] ;
  wire \gen_AB_reg_slice.payld_o1 ;
  wire \gen_AB_reg_slice.payld_o[2]_i_1_n_0 ;
  wire \gen_AB_reg_slice.payld_o[2]_i_2_n_0 ;
  wire \gen_AB_reg_slice.sel_rd_i_1_n_0 ;
  wire \gen_AB_reg_slice.sel_rd_reg_0 ;
  wire \gen_AB_reg_slice.sel_rd_reg_n_0 ;
  wire \gen_AB_reg_slice.sel_wr ;
  wire \gen_AB_reg_slice.sel_wr_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[0]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[1]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state_reg_n_0_[0] ;
  wire \gen_AB_reg_slice.valid_payld_o_reg_n_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \count_r[4]_i_2 
       (.I0(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I1(m_sc_recv),
        .O(\count_r_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_1 
       (.I0(\gen_normal_area.fifo_send_ready ),
        .I1(\gen_rd.fifo_empty_r ),
        .O(E));
  LUT2 #(
    .INIT(4'h8)) 
    \count_r[5]_i_1__0 
       (.I0(m_sc_recv),
        .I1(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .O(\count_r_reg[5] ));
  LUT3 #(
    .INIT(8'h45)) 
    \gen_AB_reg_slice.payld_a[2]_i_1 
       (.I0(\gen_AB_reg_slice.sel_wr ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_a ));
  FDRE \gen_AB_reg_slice.payld_a_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_a ),
        .D(doutb),
        .Q(\gen_AB_reg_slice.payld_a_reg_n_0_[2] ),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h8A)) 
    \gen_AB_reg_slice.payld_b[2]_i_1 
       (.I0(\gen_AB_reg_slice.sel_wr ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_b ));
  FDRE \gen_AB_reg_slice.payld_b_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_b ),
        .D(doutb),
        .Q(\gen_AB_reg_slice.payld_b_reg_n_0_[2] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFF00E2E2FF000000)) 
    \gen_AB_reg_slice.payld_o[2]_i_1 
       (.I0(\gen_AB_reg_slice.payld_a_reg_n_0_[2] ),
        .I1(\gen_AB_reg_slice.sel_rd_reg_n_0 ),
        .I2(\gen_AB_reg_slice.payld_b_reg_n_0_[2] ),
        .I3(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I4(\gen_AB_reg_slice.payld_o[2]_i_2_n_0 ),
        .I5(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \gen_AB_reg_slice.payld_o[2]_i_2 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .O(\gen_AB_reg_slice.payld_o[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.payld_o_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o[2]_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'h2AFFD500)) 
    \gen_AB_reg_slice.sel_rd_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .I4(\gen_AB_reg_slice.sel_rd_reg_n_0 ),
        .O(\gen_AB_reg_slice.sel_rd_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.sel_rd_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.sel_rd_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.sel_rd_reg_n_0 ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \gen_AB_reg_slice.sel_wr_i_1 
       (.I0(\gen_rd.fifo_empty_r ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.sel_wr ),
        .O(\gen_AB_reg_slice.sel_wr_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.sel_wr_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.sel_wr_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.sel_wr ),
        .R(SR));
  LUT6 #(
    .INIT(64'h2A00FF00FFFFFF00)) 
    \gen_AB_reg_slice.state[0]_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .I4(\gen_normal_area.fifo_send_ready ),
        .I5(\gen_rd.fifo_empty_r ),
        .O(\gen_AB_reg_slice.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF88FF8FFF88FF)) 
    \gen_AB_reg_slice.state[1]_i_1 
       (.I0(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .I4(\gen_normal_area.fifo_send_ready ),
        .I5(\gen_rd.fifo_empty_r ),
        .O(\gen_AB_reg_slice.state[1]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[0]_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .R(SR));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[1]_i_1_n_0 ),
        .Q(\gen_normal_area.fifo_send_ready ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hFF2A)) 
    \gen_AB_reg_slice.valid_payld_o_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.sel_rd_reg_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.valid_payld_o_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o1 ),
        .Q(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_reg_slice3" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized1
   (\count_r_reg[0] ,
    \gen_normal_area.fifo_send_ready ,
    m_sc_req,
    \count_r_reg[0]_0 ,
    \count_r_reg[4] ,
    SR,
    s_sc_aclk,
    \gen_rd.fifo_empty_r ,
    m_sc_recv);
  output \count_r_reg[0] ;
  output \gen_normal_area.fifo_send_ready ;
  output [0:0]m_sc_req;
  output [0:0]\count_r_reg[0]_0 ;
  output \count_r_reg[4] ;
  input [0:0]SR;
  input s_sc_aclk;
  input \gen_rd.fifo_empty_r ;
  input [0:0]m_sc_recv;

  wire [0:0]SR;
  wire \count_r_reg[0] ;
  wire [0:0]\count_r_reg[0]_0 ;
  wire \count_r_reg[4] ;
  wire \gen_AB_reg_slice.payld_o1 ;
  wire \gen_AB_reg_slice.payld_o[0]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[0]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[1]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state_reg_n_0_[0] ;
  wire \gen_AB_reg_slice.valid_payld_o_reg_n_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \count_r[4]_i_2 
       (.I0(m_sc_recv),
        .I1(\count_r_reg[0] ),
        .O(\count_r_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \count_r[5]_i_1__4 
       (.I0(\count_r_reg[0] ),
        .I1(m_sc_recv),
        .O(\count_r_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT4 #(
    .INIT(16'hDD08)) 
    \gen_AB_reg_slice.payld_o[0]_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.payld_o_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o[0]_i_1_n_0 ),
        .Q(\count_r_reg[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h7FFF777744444444)) 
    \gen_AB_reg_slice.state[0]_i_1 
       (.I0(\gen_rd.fifo_empty_r ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(m_sc_recv),
        .I3(\count_r_reg[0] ),
        .I4(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I5(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFD0D0D0FFFFFFFF)) 
    \gen_AB_reg_slice.state[1]_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(\gen_rd.fifo_empty_r ),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(m_sc_recv),
        .I4(\count_r_reg[0] ),
        .I5(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.state[1]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[0]_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .R(SR));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[1]_i_1_n_0 ),
        .Q(\gen_normal_area.fifo_send_ready ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'hFF2A)) 
    \gen_AB_reg_slice.valid_payld_o_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.valid_payld_o_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o1 ),
        .Q(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .R(SR));
  LUT2 #(
    .INIT(4'h2)) 
    \m_sc_req[0]_INST_0 
       (.I0(\gen_normal_area.fifo_send_ready ),
        .I1(\gen_rd.fifo_empty_r ),
        .O(m_sc_req));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_reg_slice3" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_reg_slice3__parameterized1_13
   (\gen_AB_reg_slice.valid_payld_o_reg_0 ,
    \gen_normal_area.fifo_send_ready ,
    m_sc_req,
    E,
    \count_r_reg[4] ,
    SR,
    s_sc_aclk,
    m_sc_recv,
    \gen_rd.fifo_empty_r );
  output \gen_AB_reg_slice.valid_payld_o_reg_0 ;
  output \gen_normal_area.fifo_send_ready ;
  output [0:0]m_sc_req;
  output [0:0]E;
  output \count_r_reg[4] ;
  input [0:0]SR;
  input s_sc_aclk;
  input [0:0]m_sc_recv;
  input \gen_rd.fifo_empty_r ;

  wire [0:0]E;
  wire [0:0]SR;
  wire \count_r_reg[4] ;
  wire \gen_AB_reg_slice.payld_o1 ;
  wire \gen_AB_reg_slice.payld_o[0]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[0]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state[1]_i_1_n_0 ;
  wire \gen_AB_reg_slice.state_reg_n_0_[0] ;
  wire \gen_AB_reg_slice.valid_payld_o_reg_0 ;
  wire \gen_AB_reg_slice.valid_payld_o_reg_n_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \count_r[4]_i_2__0 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .I1(m_sc_recv),
        .O(\count_r_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \count_r[5]_i_1__0 
       (.I0(m_sc_recv),
        .I1(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT4 #(
    .INIT(16'hF520)) 
    \gen_AB_reg_slice.payld_o[0]_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.payld_o_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o[0]_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h7000FF00FFFFFF00)) 
    \gen_AB_reg_slice.state[0]_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .I4(\gen_normal_area.fifo_send_ready ),
        .I5(\gen_rd.fifo_empty_r ),
        .O(\gen_AB_reg_slice.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF888FCCCFFFFFFFF)) 
    \gen_AB_reg_slice.state[1]_i_1 
       (.I0(\gen_rd.fifo_empty_r ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .I3(m_sc_recv),
        .I4(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I5(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.state[1]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[0]_i_1_n_0 ),
        .Q(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .R(SR));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.state_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.state[1]_i_1_n_0 ),
        .Q(\gen_normal_area.fifo_send_ready ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'hFF2A)) 
    \gen_AB_reg_slice.valid_payld_o_i_1 
       (.I0(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.valid_payld_o_reg_0 ),
        .I3(\gen_AB_reg_slice.state_reg_n_0_[0] ),
        .O(\gen_AB_reg_slice.payld_o1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_AB_reg_slice.valid_payld_o_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_AB_reg_slice.payld_o1 ),
        .Q(\gen_AB_reg_slice.valid_payld_o_reg_n_0 ),
        .R(SR));
  LUT2 #(
    .INIT(4'h2)) 
    \m_sc_req[0]_INST_0 
       (.I0(\gen_normal_area.fifo_send_ready ),
        .I1(\gen_rd.fifo_empty_r ),
        .O(m_sc_req));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler
   (E,
    SR,
    \gen_pipe[1].pipe_reg[1][2] ,
    m_axis_arb_tdata,
    \fifoaddr_reg[0] ,
    \gen_pipelined.mesg_reg_reg[2] ,
    \gen_wr.afull_r_reg ,
    s_sc_aclk,
    s_sc_areset,
    \gen_wr.afull_r ,
    s_sc_send,
    m_axis_arb_tready,
    s_sc_req,
    Q);
  output [0:0]E;
  output [0:0]SR;
  output \gen_pipe[1].pipe_reg[1][2] ;
  output [0:0]m_axis_arb_tdata;
  output \fifoaddr_reg[0] ;
  output \gen_pipelined.mesg_reg_reg[2] ;
  output \gen_wr.afull_r_reg ;
  input s_sc_aclk;
  input s_sc_areset;
  input \gen_wr.afull_r ;
  input [0:0]s_sc_send;
  input m_axis_arb_tready;
  input [0:0]s_sc_req;
  input [0:0]Q;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]SR;
  wire \fifoaddr_reg[0] ;
  wire \gen_m_axis_arb_fifo.inst_axis_arb_fifo_n_1 ;
  wire \gen_pipe[1].pipe_reg[1][2] ;
  wire \gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_si_handler.gen_request_counters.gen_req_counter[2].inst_req_counter_n_0 ;
  wire \gen_wr.afull_r ;
  wire \gen_wr.afull_r_reg ;
  wire [0:0]m_axis_arb_tdata;
  wire m_axis_arb_tready;
  wire p_4_in;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire [0:0]s_sc_req;
  wire [0:0]s_sc_send;

  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(SR),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized4 \gen_m_axis_arb_fifo.inst_axis_arb_fifo 
       (.E(E),
        .areset_r_reg(SR),
        .\fifoaddr_reg[0]_0 (\fifoaddr_reg[0] ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .\grant_i_reg[2] (\gen_m_axis_arb_fifo.inst_axis_arb_fifo_n_1 ),
        .\grant_i_reg[2]_0 (\gen_pipe[1].pipe_reg[1][2] ),
        .\grant_i_reg[2]_1 (\gen_pipelined.mesg_reg_reg[2] ),
        .is_zero_r_reg(\gen_si_handler.gen_request_counters.gen_req_counter[2].inst_req_counter_n_0 ),
        .m_axis_arb_tdata(m_axis_arb_tdata),
        .m_axis_arb_tready(m_axis_arb_tready),
        .p_4_in(p_4_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  ADC_axi_smc_0_sc_node_v1_0_7_arb_alg_rr \gen_si_handler.gen_arbiter_rr_normal_area.inst_arbiter 
       (.E(E),
        .Q(Q),
        .areset_r_reg(SR),
        .\gen_pipe[1].pipe_reg[1][2] (\gen_pipe[1].pipe_reg[1][2] ),
        .\gen_pipelined.mesg_reg_reg[2] (\gen_pipelined.mesg_reg_reg[2] ),
        .\gen_wr.afull_r_reg (\gen_wr.afull_r_reg ),
        .\gen_wr.afull_r_reg_0 (\gen_m_axis_arb_fifo.inst_axis_arb_fifo_n_1 ),
        .p_4_in(p_4_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  ADC_axi_smc_0_sc_util_v1_0_2_counter \gen_si_handler.gen_request_counters.gen_req_counter[2].inst_req_counter 
       (.areset_r_reg(SR),
        .\grant_i_reg[2] (\gen_pipe[1].pipe_reg[1][2] ),
        .is_zero_r_reg_0(\gen_si_handler.gen_request_counters.gen_req_counter[2].inst_req_counter_n_0 ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_req(s_sc_req),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized0
   (arb_stall_late,
    s_sc_valid,
    s_sc_recv,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output arb_stall_late;
  output s_sc_valid;
  output [0:0]s_sc_recv;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall_late;
  wire \gen_wr.afull_r ;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_4 inst_arb_stall_late
       (.arb_stall_late(arb_stall_late),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized0_45
   (s_sc_recv,
    p_0_in3_in,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output p_0_in3_in;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire \gen_wr.afull_r ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_46 inst_arb_stall_late
       (.\gen_wr.afull_r (\gen_wr.afull_r ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized1
   (m_sc_areset_r,
    s_axis_arb_tready,
    p_0_in2_out,
    s_sc_recv,
    s_sc_aclk,
    s_sc_info,
    s_sc_areset,
    allow_transfer,
    s_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_sc_send,
    s_sc_req);
  output m_sc_areset_r;
  output s_axis_arb_tready;
  output [0:0]p_0_in2_out;
  output [0:0]s_sc_recv;
  input s_sc_aclk;
  input [0:0]s_sc_info;
  input s_sc_areset;
  input allow_transfer;
  input [0:0]s_axis_arb_tdata;
  input s_axis_arb_tvalid;
  input [0:0]s_sc_send;
  input [0:0]s_sc_req;

  wire allow_transfer;
  wire \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  wire m_sc_areset_r;
  wire [0:0]p_0_in2_out;
  wire p_0_out;
  wire [0:0]s_axis_arb_tdata;
  wire s_axis_arb_tready;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire [0:0]s_sc_info;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_req;
  wire [0:0]s_sc_send;

  FDRE #(
    .INIT(1'b0)) 
    areset_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_areset),
        .Q(m_sc_areset_r),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_36 \gen_si_handler.gen_axis_packet_slave_normal_area.inst_allow_transfer_late 
       (.allow_transfer(allow_transfer),
        .\gen_pipe[1].pipe_reg[1][0]_0 (p_0_in2_out),
        .\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late (\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .p_0_out(p_0_out),
        .s_axis_arb_tdata(s_axis_arb_tdata),
        .s_axis_arb_tvalid(s_axis_arb_tvalid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3__xdcDup__1 \gen_si_handler.gen_request_fifos.gen_req_fifo[0].inst_req_fifo 
       (.rstb(m_sc_areset_r),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3__xdcDup__2 \gen_si_handler.gen_request_fifos.gen_req_fifo[1].inst_req_fifo 
       (.rstb(m_sc_areset_r),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_node_v1_0_7_fifo__parameterized3 \gen_si_handler.gen_request_fifos.gen_req_fifo[2].inst_req_fifo 
       (.\gen_AB_reg_slice.payld_o_reg[0] (p_0_in2_out),
        .\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late (\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .p_0_out(p_0_out),
        .rstb(m_sc_areset_r),
        .s_axis_arb_tdata(s_axis_arb_tdata),
        .s_axis_arb_tready(s_axis_arb_tready),
        .s_axis_arb_tvalid(s_axis_arb_tvalid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_info(s_sc_info),
        .s_sc_req(s_sc_req),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized2
   (s_sc_recv,
    p_0_in3_in,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output p_0_in3_in;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire \gen_wr.afull_r ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline_12 inst_arb_stall_late
       (.\gen_wr.afull_r (\gen_wr.afull_r ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_si_handler" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized3
   (s_sc_recv,
    ingress_valid,
    arb_stall,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output ingress_valid;
  input arb_stall;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall;
  wire ingress_valid;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  ADC_axi_smc_0_sc_util_v1_0_2_pipeline inst_arb_stall_late
       (.arb_stall(arb_stall),
        .ingress_valid(ingress_valid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "3" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "8" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "0" *) (* C_NUM_MI = "1" *) (* C_NUM_SI = "3" *) 
(* C_PAYLD_WIDTH = "140" *) (* C_SC_ROUTE_WIDTH = "1" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "1" *) (* C_S_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "0" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "1" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "1" *) (* LP_LOG_NUM_SI = "2" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "1" *) 
(* LP_M_MAX_NUM_BYTES = "8" *) (* LP_M_MIN_NUM_BYTES = "8" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "1" *) 
(* LP_NODE_USER_WIDTH = "0" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "8" *) (* LP_S_MIN_NUM_BYTES = "8" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "1" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [2:0]s_sc_send;
  output [2:0]s_sc_recv;
  input [139:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [0:0]m_sc_recv;
  output [0:0]m_sc_send;
  output [0:0]m_sc_req;
  output [0:0]m_sc_info;
  output [139:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  wire \gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_mem_rep[0].inst_wr_addra/count_r ;
  wire [0:0]\gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_wr.wr_addra_p1 ;
  wire \gen_wr.afull_r ;
  wire inst_mi_handler_n_54;
  wire inst_si_handler_n_5;
  wire inst_si_handler_n_6;
  wire [2:2]\^m_axis_arb_tdata ;
  wire m_axis_arb_tready;
  wire m_axis_arb_tvalid;
  wire m_sc_areset_r;
  wire [139:1]\^m_sc_payld ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [139:0]s_sc_payld;
  wire [2:2]\^s_sc_recv ;
  wire [2:0]s_sc_req;
  wire [2:0]s_sc_send;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \^m_axis_arb_tdata [2];
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[139:129] = \^m_sc_payld [139:129];
  assign m_sc_payld[128] = \<const0> ;
  assign m_sc_payld[127:94] = \^m_sc_payld [127:94];
  assign m_sc_payld[93] = \<const0> ;
  assign m_sc_payld[92] = \<const0> ;
  assign m_sc_payld[91] = \<const0> ;
  assign m_sc_payld[90] = \<const0> ;
  assign m_sc_payld[89] = \<const0> ;
  assign m_sc_payld[88] = \<const0> ;
  assign m_sc_payld[87] = \<const0> ;
  assign m_sc_payld[86] = \<const0> ;
  assign m_sc_payld[85] = \<const0> ;
  assign m_sc_payld[84] = \<const0> ;
  assign m_sc_payld[83] = \<const0> ;
  assign m_sc_payld[82] = \<const0> ;
  assign m_sc_payld[81] = \<const0> ;
  assign m_sc_payld[80] = \<const0> ;
  assign m_sc_payld[79] = \<const0> ;
  assign m_sc_payld[78] = \<const0> ;
  assign m_sc_payld[77] = \<const0> ;
  assign m_sc_payld[76] = \<const0> ;
  assign m_sc_payld[75] = \<const0> ;
  assign m_sc_payld[74] = \<const0> ;
  assign m_sc_payld[73] = \<const0> ;
  assign m_sc_payld[72] = \<const0> ;
  assign m_sc_payld[71] = \<const0> ;
  assign m_sc_payld[70] = \<const0> ;
  assign m_sc_payld[69] = \<const0> ;
  assign m_sc_payld[68] = \<const0> ;
  assign m_sc_payld[67] = \<const0> ;
  assign m_sc_payld[66] = \<const0> ;
  assign m_sc_payld[65] = \<const0> ;
  assign m_sc_payld[64] = \<const0> ;
  assign m_sc_payld[63] = \<const0> ;
  assign m_sc_payld[62] = \<const0> ;
  assign m_sc_payld[61] = \<const0> ;
  assign m_sc_payld[60] = \<const0> ;
  assign m_sc_payld[59] = \<const0> ;
  assign m_sc_payld[58] = \<const0> ;
  assign m_sc_payld[57] = \<const0> ;
  assign m_sc_payld[56] = \<const0> ;
  assign m_sc_payld[55] = \<const0> ;
  assign m_sc_payld[54] = \<const0> ;
  assign m_sc_payld[53] = \<const0> ;
  assign m_sc_payld[52] = \<const0> ;
  assign m_sc_payld[51] = \<const0> ;
  assign m_sc_payld[50] = \<const0> ;
  assign m_sc_payld[49] = \<const0> ;
  assign m_sc_payld[48] = \<const0> ;
  assign m_sc_payld[47] = \<const0> ;
  assign m_sc_payld[46] = \<const0> ;
  assign m_sc_payld[45] = \<const0> ;
  assign m_sc_payld[44] = \<const0> ;
  assign m_sc_payld[43] = \<const0> ;
  assign m_sc_payld[42] = \<const0> ;
  assign m_sc_payld[41] = \<const0> ;
  assign m_sc_payld[40] = \<const0> ;
  assign m_sc_payld[39] = \<const0> ;
  assign m_sc_payld[38] = \<const0> ;
  assign m_sc_payld[37] = \<const0> ;
  assign m_sc_payld[36] = \<const0> ;
  assign m_sc_payld[35] = \<const0> ;
  assign m_sc_payld[34] = \<const0> ;
  assign m_sc_payld[33] = \<const0> ;
  assign m_sc_payld[32] = \<const0> ;
  assign m_sc_payld[31] = \<const0> ;
  assign m_sc_payld[30] = \<const0> ;
  assign m_sc_payld[29] = \<const0> ;
  assign m_sc_payld[28] = \<const0> ;
  assign m_sc_payld[27] = \<const0> ;
  assign m_sc_payld[26] = \<const0> ;
  assign m_sc_payld[25] = \<const0> ;
  assign m_sc_payld[24] = \<const0> ;
  assign m_sc_payld[23] = \<const0> ;
  assign m_sc_payld[22] = \<const0> ;
  assign m_sc_payld[21] = \<const0> ;
  assign m_sc_payld[20] = \<const0> ;
  assign m_sc_payld[19] = \<const0> ;
  assign m_sc_payld[18] = \<const0> ;
  assign m_sc_payld[17] = \<const0> ;
  assign m_sc_payld[16] = \<const0> ;
  assign m_sc_payld[15] = \<const0> ;
  assign m_sc_payld[14] = \<const0> ;
  assign m_sc_payld[13] = \<const0> ;
  assign m_sc_payld[12] = \<const0> ;
  assign m_sc_payld[11] = \<const0> ;
  assign m_sc_payld[10] = \<const0> ;
  assign m_sc_payld[9] = \<const0> ;
  assign m_sc_payld[8:1] = \^m_sc_payld [8:1];
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign s_axis_arb_tready = \<const0> ;
  assign s_sc_recv[2] = \^s_sc_recv [2];
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler inst_mi_handler
       (.E(\gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_mem_rep[0].inst_wr_addra/count_r ),
        .Q(\gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_wr.wr_addra_p1 ),
        .SR(m_sc_areset_r),
        .areset_r_reg_0(inst_mi_handler_n_54),
        .\gen_AB_reg_slice.payld_o_reg[0] (inst_si_handler_n_6),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .\grant_i_reg[2] (\^s_sc_recv ),
        .\grant_i_reg[2]_0 (inst_si_handler_n_5),
        .m_sc_payld({\^m_sc_payld [139:129],\^m_sc_payld [127:94],\^m_sc_payld [8:1]}),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld(s_sc_payld[139:1]),
        .s_sc_send(s_sc_send[2]));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler inst_si_handler
       (.E(\gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_mem_rep[0].inst_wr_addra/count_r ),
        .Q(\gen_normal_area.gen_node_prog_full.inst_node_prog_full/gen_xpm_memory_fifo.inst_fifo/gen_wr.wr_addra_p1 ),
        .SR(m_sc_areset_r),
        .\fifoaddr_reg[0] (m_axis_arb_tvalid),
        .\gen_pipe[1].pipe_reg[1][2] (\^s_sc_recv ),
        .\gen_pipelined.mesg_reg_reg[2] (inst_si_handler_n_5),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .\gen_wr.afull_r_reg (inst_si_handler_n_6),
        .m_axis_arb_tdata(\^m_axis_arb_tdata ),
        .m_axis_arb_tready(m_axis_arb_tready),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_req(s_sc_req[2]),
        .s_sc_send(s_sc_send[2]));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_54),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "4" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "1" *) (* C_NUM_MI = "3" *) (* C_NUM_SI = "1" *) 
(* C_PAYLD_WIDTH = "8" *) (* C_SC_ROUTE_WIDTH = "3" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "0" *) (* C_S_NUM_BYTES_ARRAY = "8" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "0" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "1" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "2" *) (* LP_LOG_NUM_SI = "1" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "1" *) 
(* LP_M_MAX_NUM_BYTES = "8" *) (* LP_M_MIN_NUM_BYTES = "8" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "3" *) 
(* LP_NODE_USER_WIDTH = "0" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "8" *) (* LP_S_MIN_NUM_BYTES = "8" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "1" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized0
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [0:0]s_sc_req;
  input [0:0]s_sc_info;
  input [0:0]s_sc_send;
  output [0:0]s_sc_recv;
  input [7:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [7:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire \gen_wr.afull_r ;
  wire inst_mi_handler_n_7;
  wire [7:1]\^m_sc_payld ;
  wire [2:0]m_sc_recv;
  wire [2:2]\^m_sc_send ;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [7:0]s_sc_payld;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \<const0> ;
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_axis_arb_tvalid = \<const0> ;
  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[7:1] = \^m_sc_payld [7:1];
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \^m_sc_send [2];
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_axis_arb_tready = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized0 inst_mi_handler
       (.areset_r_reg_0(inst_mi_handler_n_7),
        .\gen_AB_reg_slice.sel_rd_reg (\^m_sc_send ),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv[2]),
        .p_0_in3_in(\gen_normal_area.upsizer_valid ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld({s_sc_payld[7:4],s_sc_payld[2]}));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized0_45 inst_si_handler
       (.\gen_wr.afull_r (\gen_wr.afull_r ),
        .p_0_in3_in(\gen_normal_area.upsizer_valid ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_7),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "1" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "8" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "0" *) (* C_NUM_MI = "1" *) (* C_NUM_SI = "3" *) 
(* C_PAYLD_WIDTH = "88" *) (* C_SC_ROUTE_WIDTH = "1" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "1" *) (* C_S_NUM_BYTES_ARRAY = "96'b000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000001000" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "0" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "2" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "1" *) (* LP_LOG_NUM_SI = "2" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "1" *) 
(* LP_M_MAX_NUM_BYTES = "8" *) (* LP_M_MIN_NUM_BYTES = "8" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "1" *) 
(* LP_NODE_USER_WIDTH = "1" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "8" *) (* LP_S_MIN_NUM_BYTES = "8" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "1" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized1
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [2:0]s_sc_send;
  output [2:0]s_sc_recv;
  input [87:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [0:0]m_sc_recv;
  output [0:0]m_sc_send;
  output [0:0]m_sc_req;
  output [0:0]m_sc_info;
  output [87:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  wire allow_transfer;
  wire inst_mi_handler_n_73;
  wire m_sc_areset_r;
  wire [87:16]\^m_sc_payld ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire [2:2]p_0_in2_out;
  wire [15:0]s_axis_arb_tdata;
  wire s_axis_arb_tready;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [2:0]s_sc_info;
  wire [87:0]s_sc_payld;
  wire [2:2]\^s_sc_recv ;
  wire [2:0]s_sc_req;
  wire [2:0]s_sc_send;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \<const0> ;
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_axis_arb_tvalid = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[87:16] = \^m_sc_payld [87:16];
  assign m_sc_payld[15] = \<const0> ;
  assign m_sc_payld[14] = \<const0> ;
  assign m_sc_payld[13] = \<const0> ;
  assign m_sc_payld[12] = \<const0> ;
  assign m_sc_payld[11] = \<const0> ;
  assign m_sc_payld[10] = \<const0> ;
  assign m_sc_payld[9] = \<const0> ;
  assign m_sc_payld[8] = \<const0> ;
  assign m_sc_payld[7] = \<const0> ;
  assign m_sc_payld[6] = \<const0> ;
  assign m_sc_payld[5] = \<const0> ;
  assign m_sc_payld[4] = \<const0> ;
  assign m_sc_payld[3] = \<const0> ;
  assign m_sc_payld[2] = \<const0> ;
  assign m_sc_payld[1] = \<const0> ;
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign s_sc_recv[2] = \^s_sc_recv [2];
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized1 inst_mi_handler
       (.allow_transfer(allow_transfer),
        .areset_r_reg_0(inst_mi_handler_n_73),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld(s_sc_payld[87:1]),
        .s_sc_recv(\^s_sc_recv ));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized1 inst_si_handler
       (.allow_transfer(allow_transfer),
        .m_sc_areset_r(m_sc_areset_r),
        .p_0_in2_out(p_0_in2_out),
        .s_axis_arb_tdata(s_axis_arb_tdata[2]),
        .s_axis_arb_tready(s_axis_arb_tready),
        .s_axis_arb_tvalid(s_axis_arb_tvalid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_info(s_sc_info[2]),
        .s_sc_recv(\^s_sc_recv ),
        .s_sc_req(s_sc_req[2]),
        .s_sc_send(s_sc_send[2]));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_73),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "3" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "8" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "1" *) (* C_NUM_MI = "1" *) (* C_NUM_SI = "1" *) 
(* C_PAYLD_WIDTH = "140" *) (* C_SC_ROUTE_WIDTH = "1" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "0" *) (* C_S_NUM_BYTES_ARRAY = "4" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "0" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "1" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "1" *) (* LP_LOG_NUM_SI = "1" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "1" *) 
(* LP_M_MAX_NUM_BYTES = "8" *) (* LP_M_MIN_NUM_BYTES = "8" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "1" *) 
(* LP_NODE_USER_WIDTH = "0" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "4" *) (* LP_S_MIN_NUM_BYTES = "4" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "1" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized2
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [0:0]s_sc_req;
  input [0:0]s_sc_info;
  input [0:0]s_sc_send;
  output [0:0]s_sc_recv;
  input [139:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [0:0]m_sc_recv;
  output [0:0]m_sc_send;
  output [0:0]m_sc_req;
  output [0:0]m_sc_info;
  output [139:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_normal_area.upsizer_valid ;
  wire \gen_wr.afull_r ;
  wire inst_mi_handler_n_139;
  wire [139:1]\^m_sc_payld ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [139:0]s_sc_payld;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \<const0> ;
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_axis_arb_tvalid = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[139:1] = \^m_sc_payld [139:1];
  assign m_sc_payld[0] = \<const0> ;
  assign s_axis_arb_tready = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized2 inst_mi_handler
       (.areset_r_reg_0(inst_mi_handler_n_139),
        .\gen_AB_reg_slice.valid_payld_o_reg (m_sc_send),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv),
        .m_sc_req(m_sc_req),
        .p_0_in3_in(\gen_normal_area.upsizer_valid ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld({s_sc_payld[139:96],s_sc_payld[92:88],s_sc_payld[83:76],s_sc_payld[8:1]}));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized2 inst_si_handler
       (.\gen_wr.afull_r (\gen_wr.afull_r ),
        .p_0_in3_in(\gen_normal_area.upsizer_valid ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_139),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "4" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "4" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "0" *) (* C_NUM_MI = "1" *) (* C_NUM_SI = "1" *) 
(* C_PAYLD_WIDTH = "8" *) (* C_SC_ROUTE_WIDTH = "3" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "1" *) (* C_S_NUM_BYTES_ARRAY = "8" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "0" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "1" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "1" *) (* LP_LOG_NUM_SI = "1" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "1" *) 
(* LP_M_MAX_NUM_BYTES = "4" *) (* LP_M_MIN_NUM_BYTES = "4" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "3" *) 
(* LP_NODE_USER_WIDTH = "0" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "8" *) (* LP_S_MIN_NUM_BYTES = "8" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "0" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized3
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [0:0]s_sc_req;
  input [0:0]s_sc_info;
  input [0:0]s_sc_send;
  output [0:0]s_sc_recv;
  input [7:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [0:0]m_sc_recv;
  output [0:0]m_sc_send;
  output [0:0]m_sc_req;
  output [0:0]m_sc_info;
  output [7:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  wire arb_stall_late;
  wire \gen_wr.afull_r ;
  wire inst_mi_handler_n_3;
  wire [7:6]\^m_sc_payld ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [7:0]s_sc_payld;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \<const0> ;
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_axis_arb_tvalid = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[7:6] = \^m_sc_payld [7:6];
  assign m_sc_payld[5] = \<const0> ;
  assign m_sc_payld[4] = \<const0> ;
  assign m_sc_payld[3] = \<const0> ;
  assign m_sc_payld[2] = \<const0> ;
  assign m_sc_payld[1] = \<const0> ;
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign s_axis_arb_tready = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized3 inst_mi_handler
       (.arb_stall_late(arb_stall_late),
        .areset_r_reg_0(inst_mi_handler_n_3),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv),
        .m_sc_send(m_sc_send),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld(s_sc_payld[7:1]),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized0 inst_si_handler
       (.arb_stall_late(arb_stall_late),
        .\gen_wr.afull_r (\gen_wr.afull_r ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_3),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* C_ACLKEN_CONVERSION = "0" *) (* C_ACLK_RELATIONSHIP = "1" *) (* C_ADDR_WIDTH = "32" *) 
(* C_ARBITER_MODE = "1" *) (* C_CHANNEL = "1" *) (* C_DISABLE_IP = "0" *) 
(* C_ENABLE_PIPELINING = "8'b00000001" *) (* C_FAMILY = "zynq" *) (* C_FIFO_IP = "0" *) 
(* C_FIFO_SIZE = "5" *) (* C_FIFO_TYPE = "0" *) (* C_ID_WIDTH = "2" *) 
(* C_MAX_PAYLD_BYTES = "8" *) (* C_M_NUM_BYTES_ARRAY = "8" *) (* C_M_PIPELINE = "0" *) 
(* C_M_SEND_PIPELINE = "1" *) (* C_NUM_MI = "1" *) (* C_NUM_SI = "1" *) 
(* C_PAYLD_WIDTH = "88" *) (* C_SC_ROUTE_WIDTH = "1" *) (* C_SYNCHRONIZATION_STAGES = "3" *) 
(* C_S_LATENCY = "0" *) (* C_S_NUM_BYTES_ARRAY = "4" *) (* C_S_PIPELINE = "0" *) 
(* C_USER_BITS_PER_BYTE = "0" *) (* C_USER_WIDTH = "512" *) (* LP_ACLK_RELATIONSHIP = "1" *) 
(* LP_ARBITER_MODE = "2" *) (* LP_DT_REG = "false" *) (* LP_FIFO_OUTPUT_REG = "0" *) 
(* LP_FIFO_TYPE = "0" *) (* LP_LOG_MAX_DOWNSIZER_RATIO = "1" *) (* LP_LOG_MAX_UPSIZER_RATIO = "1" *) 
(* LP_LOG_NUM_MI = "1" *) (* LP_LOG_NUM_SI = "1" *) (* LP_MAX_DOWNSIZER_RATIO = "1" *) 
(* LP_MAX_FANOUT = "200" *) (* LP_MAX_NUM_BYTES = "8" *) (* LP_MAX_UPSIZER_RATIO = "2" *) 
(* LP_M_MAX_NUM_BYTES = "8" *) (* LP_M_MIN_NUM_BYTES = "8" *) (* LP_M_STATIC_DWIDTH = "1" *) 
(* LP_NODE_ADDR_WIDTH = "32" *) (* LP_NODE_ID_WIDTH = "2" *) (* LP_NODE_ROUTE_WIDTH = "1" *) 
(* LP_NODE_USER_WIDTH = "1" *) (* LP_SYNCHRONIZATION_STAGES = "2" *) (* LP_S_AXIS_REG_SLICE_CONFIG = "0" *) 
(* LP_S_MAX_NUM_BYTES = "4" *) (* LP_S_MIN_NUM_BYTES = "4" *) (* LP_S_PIPELINE = "0" *) 
(* LP_S_STATIC_DWIDTH = "1" *) (* LP_ZERO_ROUTE_WIDTH = "1" *) (* ORIG_REF_NAME = "sc_node_v1_0_7_top" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_top__parameterized4
   (s_sc_aclk,
    s_sc_aclken,
    s_sc_aresetn,
    s_sc_req,
    s_sc_info,
    s_sc_send,
    s_sc_recv,
    s_sc_payld,
    m_sc_aclk,
    m_sc_aclken,
    m_sc_aresetn,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld,
    m_axis_arb_tvalid,
    m_axis_arb_tready,
    m_axis_arb_tdata,
    s_axis_arb_tvalid,
    s_axis_arb_tready,
    s_axis_arb_tdata);
  input s_sc_aclk;
  input s_sc_aclken;
  input s_sc_aresetn;
  input [0:0]s_sc_req;
  input [0:0]s_sc_info;
  input [0:0]s_sc_send;
  output [0:0]s_sc_recv;
  input [87:0]s_sc_payld;
  input m_sc_aclk;
  input m_sc_aclken;
  input m_sc_aresetn;
  input [0:0]m_sc_recv;
  output [0:0]m_sc_send;
  output [0:0]m_sc_req;
  output [0:0]m_sc_info;
  output [87:0]m_sc_payld;
  output m_axis_arb_tvalid;
  input m_axis_arb_tready;
  output [15:0]m_axis_arb_tdata;
  input s_axis_arb_tvalid;
  output s_axis_arb_tready;
  input [15:0]s_axis_arb_tdata;

  wire \<const0> ;
  wire arb_stall;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire ingress_valid;
  wire inst_mi_handler_n_88;
  wire [0:0]m_sc_info;
  wire [87:1]\^m_sc_payld ;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_req;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire s_sc_areset;
  wire s_sc_aresetn;
  wire [87:0]s_sc_payld;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  assign m_axis_arb_tdata[15] = \<const0> ;
  assign m_axis_arb_tdata[14] = \<const0> ;
  assign m_axis_arb_tdata[13] = \<const0> ;
  assign m_axis_arb_tdata[12] = \<const0> ;
  assign m_axis_arb_tdata[11] = \<const0> ;
  assign m_axis_arb_tdata[10] = \<const0> ;
  assign m_axis_arb_tdata[9] = \<const0> ;
  assign m_axis_arb_tdata[8] = \<const0> ;
  assign m_axis_arb_tdata[7] = \<const0> ;
  assign m_axis_arb_tdata[6] = \<const0> ;
  assign m_axis_arb_tdata[5] = \<const0> ;
  assign m_axis_arb_tdata[4] = \<const0> ;
  assign m_axis_arb_tdata[3] = \<const0> ;
  assign m_axis_arb_tdata[2] = \<const0> ;
  assign m_axis_arb_tdata[1] = \<const0> ;
  assign m_axis_arb_tdata[0] = \<const0> ;
  assign m_axis_arb_tvalid = \<const0> ;
  assign m_sc_payld[87:1] = \^m_sc_payld [87:1];
  assign m_sc_payld[0] = \<const0> ;
  assign s_axis_arb_tready = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_node_v1_0_7_mi_handler__parameterized4 inst_mi_handler
       (.arb_stall(arb_stall),
        .areset_r_reg_0(inst_mi_handler_n_88),
        .\count_r_reg[0] (m_sc_send),
        .ingress_valid(ingress_valid),
        .m_sc_info(m_sc_info),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv),
        .m_sc_req(m_sc_req),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_areset(s_sc_areset),
        .s_sc_aresetn(s_sc_aresetn),
        .s_sc_payld(s_sc_payld[51:1]));
  ADC_axi_smc_0_sc_node_v1_0_7_si_handler__parameterized3 inst_si_handler
       (.arb_stall(arb_stall),
        .ingress_valid(ingress_valid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_recv(s_sc_recv),
        .s_sc_send(s_sc_send));
  (* DONT_TOUCH = 0 *) 
  FDRE #(
    .INIT(1'b0)) 
    s_sc_areset_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(inst_mi_handler_n_88),
        .Q(s_sc_areset),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_node_v1_0_7_upsizer" *) 
module ADC_axi_smc_0_sc_node_v1_0_7_upsizer
   (E,
    dina,
    \gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ,
    s_sc_payld,
    s_sc_aclk,
    SR,
    ingress_valid);
  output [0:0]E;
  output [86:0]dina;
  output [4:0]\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ;
  input [50:0]s_sc_payld;
  input s_sc_aclk;
  input [0:0]SR;
  input ingress_valid;

  wire [0:0]E;
  wire [0:0]SR;
  wire accum_empty;
  wire accum_empty_i_1_n_0;
  wire [86:0]dina;
  wire first_xfer;
  wire \gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ;
  wire \gen_w_ch.accum[bytes][2][strb]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][0]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][1]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][2]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][3]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][4]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][5]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][6]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][2][userdata][7]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][strb]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][0]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][1]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][2]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][3]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][4]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][5]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][6]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][3][userdata][7]_i_1_n_0 ;
  wire \gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ;
  wire \gen_w_ch.accum_reg[bytes][0][strb]__0 ;
  wire \gen_w_ch.accum_reg[bytes][1][strb]__0 ;
  wire \gen_w_ch.accum_reg[bytes][1][strb_n_0_] ;
  wire [7:0]\gen_w_ch.accum_reg[bytes][1][userdata]__0 ;
  wire \gen_w_ch.accum_reg[bytes][2][strb]__0 ;
  wire \gen_w_ch.accum_reg[bytes][3][strb]__0 ;
  wire \gen_w_ch.accum_reg[bytes][4][strb]__0 ;
  wire \gen_w_ch.accum_reg[bytes][5][strb_n_0_] ;
  wire \gen_w_ch.accum_reg[bytes][6][strb_n_0_] ;
  wire \gen_w_ch.accum_reg[bytes][7][strb]__0 ;
  wire [4:0]\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ;
  wire ingress_valid;
  wire \pntr[0]_i_1_n_0 ;
  wire \pntr_reg_n_0_[0] ;
  wire s_sc_aclk;
  wire [50:0]s_sc_payld;
  wire upsizer_valid_i_1_n_0;

  LUT3 #(
    .INIT(8'h54)) 
    accum_empty_i_1
       (.I0(ingress_valid),
        .I1(accum_empty),
        .I2(E),
        .O(accum_empty_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    accum_empty_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(accum_empty_i_1_n_0),
        .Q(accum_empty),
        .S(SR));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_mem_rep[0].inst_xpm_memory_i_2 
       (.I0(\gen_w_ch.accum_reg[bytes][7][strb]__0 ),
        .I1(dina[9]),
        .O(dina[78]));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_mem_rep[0].inst_xpm_memory_i_3 
       (.I0(\gen_w_ch.accum_reg[bytes][6][strb_n_0_] ),
        .I1(dina[9]),
        .O(dina[69]));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_mem_rep[0].inst_xpm_memory_i_4 
       (.I0(\gen_w_ch.accum_reg[bytes][5][strb_n_0_] ),
        .I1(dina[9]),
        .O(dina[60]));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_mem_rep[0].inst_xpm_memory_i_5 
       (.I0(\gen_w_ch.accum_reg[bytes][4][strb]__0 ),
        .I1(dina[9]),
        .O(dina[51]));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_mem_rep[0].inst_xpm_memory_i_6 
       (.I0(\gen_w_ch.accum_reg[bytes][3][strb]__0 ),
        .I1(dina[2]),
        .O(dina[42]));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_mem_rep[0].inst_xpm_memory_i_7 
       (.I0(\gen_w_ch.accum_reg[bytes][2][strb]__0 ),
        .I1(dina[2]),
        .O(dina[33]));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_mem_rep[0].inst_xpm_memory_i_8 
       (.I0(\gen_w_ch.accum_reg[bytes][1][strb_n_0_] ),
        .I1(dina[2]),
        .O(dina[24]));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_mem_rep[0].inst_xpm_memory_i_9 
       (.I0(\gen_w_ch.accum_reg[bytes][0][strb]__0 ),
        .I1(dina[2]),
        .O(dina[15]));
  LUT5 #(
    .INIT(32'h0004CCC4)) 
    \gen_w_ch.accum[bytes][0][userdata][7]_i_1 
       (.I0(\pntr_reg_n_0_[0] ),
        .I1(ingress_valid),
        .I2(E),
        .I3(accum_empty),
        .I4(s_sc_payld[2]),
        .O(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][strb]_i_1 
       (.I0(s_sc_payld[15]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[24]),
        .O(\gen_w_ch.accum_reg[bytes][1][strb]__0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][0]_i_1 
       (.I0(s_sc_payld[16]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[25]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][1]_i_1 
       (.I0(s_sc_payld[17]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[26]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][2]_i_1 
       (.I0(s_sc_payld[18]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[27]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][3]_i_1 
       (.I0(s_sc_payld[19]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[28]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][4]_i_1 
       (.I0(s_sc_payld[20]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[29]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][5]_i_1 
       (.I0(s_sc_payld[21]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[30]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][6]_i_1 
       (.I0(s_sc_payld[22]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[31]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][1][userdata][7]_i_1 
       (.I0(s_sc_payld[23]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[32]),
        .O(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [7]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT5 #(
    .INIT(32'hABBBA888)) 
    \gen_w_ch.accum[bytes][1][userdata][7]_i_2 
       (.I0(s_sc_payld[2]),
        .I1(accum_empty),
        .I2(E),
        .I3(ingress_valid),
        .I4(\pntr_reg_n_0_[0] ),
        .O(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][strb]_i_1 
       (.I0(s_sc_payld[15]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[33]),
        .O(\gen_w_ch.accum[bytes][2][strb]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][0]_i_1 
       (.I0(s_sc_payld[16]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[34]),
        .O(\gen_w_ch.accum[bytes][2][userdata][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][1]_i_1 
       (.I0(s_sc_payld[17]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[35]),
        .O(\gen_w_ch.accum[bytes][2][userdata][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][2]_i_1 
       (.I0(s_sc_payld[18]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[36]),
        .O(\gen_w_ch.accum[bytes][2][userdata][2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][3]_i_1 
       (.I0(s_sc_payld[19]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[37]),
        .O(\gen_w_ch.accum[bytes][2][userdata][3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][4]_i_1 
       (.I0(s_sc_payld[20]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[38]),
        .O(\gen_w_ch.accum[bytes][2][userdata][4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][5]_i_1 
       (.I0(s_sc_payld[21]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[39]),
        .O(\gen_w_ch.accum[bytes][2][userdata][5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][6]_i_1 
       (.I0(s_sc_payld[22]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[40]),
        .O(\gen_w_ch.accum[bytes][2][userdata][6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][2][userdata][7]_i_1 
       (.I0(s_sc_payld[23]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[41]),
        .O(\gen_w_ch.accum[bytes][2][userdata][7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][strb]_i_1 
       (.I0(s_sc_payld[15]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[42]),
        .O(\gen_w_ch.accum[bytes][3][strb]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][0]_i_1 
       (.I0(s_sc_payld[16]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[43]),
        .O(\gen_w_ch.accum[bytes][3][userdata][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][1]_i_1 
       (.I0(s_sc_payld[17]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[44]),
        .O(\gen_w_ch.accum[bytes][3][userdata][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][2]_i_1 
       (.I0(s_sc_payld[18]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[45]),
        .O(\gen_w_ch.accum[bytes][3][userdata][2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][3]_i_1 
       (.I0(s_sc_payld[19]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[46]),
        .O(\gen_w_ch.accum[bytes][3][userdata][3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][4]_i_1 
       (.I0(s_sc_payld[20]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[47]),
        .O(\gen_w_ch.accum[bytes][3][userdata][4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][5]_i_1 
       (.I0(s_sc_payld[21]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[48]),
        .O(\gen_w_ch.accum[bytes][3][userdata][5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][6]_i_1 
       (.I0(s_sc_payld[22]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[49]),
        .O(\gen_w_ch.accum[bytes][3][userdata][6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_w_ch.accum[bytes][3][userdata][7]_i_1 
       (.I0(s_sc_payld[23]),
        .I1(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I2(s_sc_payld[50]),
        .O(\gen_w_ch.accum[bytes][3][userdata][7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFE020000)) 
    \gen_w_ch.accum[bytes][4][userdata][7]_i_1 
       (.I0(\pntr_reg_n_0_[0] ),
        .I1(E),
        .I2(accum_empty),
        .I3(s_sc_payld[2]),
        .I4(ingress_valid),
        .O(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \gen_w_ch.accum[first_offset][6]_i_1 
       (.I0(accum_empty),
        .I1(E),
        .I2(ingress_valid),
        .O(first_xfer));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[15]),
        .Q(\gen_w_ch.accum_reg[bytes][0][strb]__0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[16]),
        .Q(dina[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[17]),
        .Q(dina[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[18]),
        .Q(dina[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[19]),
        .Q(dina[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[20]),
        .Q(dina[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[21]),
        .Q(dina[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[22]),
        .Q(dina[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][0][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[23]),
        .Q(dina[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][strb]__0 ),
        .Q(\gen_w_ch.accum_reg[bytes][1][strb_n_0_] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [0]),
        .Q(dina[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [1]),
        .Q(dina[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [2]),
        .Q(dina[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [3]),
        .Q(dina[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [4]),
        .Q(dina[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [5]),
        .Q(dina[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [6]),
        .Q(dina[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][1][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum_reg[bytes][1][userdata]__0 [7]),
        .Q(dina[32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][strb]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][2][strb]__0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][0]_i_1_n_0 ),
        .Q(dina[34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][1]_i_1_n_0 ),
        .Q(dina[35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][2]_i_1_n_0 ),
        .Q(dina[36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][3]_i_1_n_0 ),
        .Q(dina[37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][4]_i_1_n_0 ),
        .Q(dina[38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][5]_i_1_n_0 ),
        .Q(dina[39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][6]_i_1_n_0 ),
        .Q(dina[40]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][2][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][2][userdata][7]_i_1_n_0 ),
        .Q(dina[41]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][strb]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][3][strb]__0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][0]_i_1_n_0 ),
        .Q(dina[43]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][1]_i_1_n_0 ),
        .Q(dina[44]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][2]_i_1_n_0 ),
        .Q(dina[45]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][3]_i_1_n_0 ),
        .Q(dina[46]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][4]_i_1_n_0 ),
        .Q(dina[47]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][5]_i_1_n_0 ),
        .Q(dina[48]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][6]_i_1_n_0 ),
        .Q(dina[49]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][3][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][0][userdata][7]_i_1_n_0 ),
        .D(\gen_w_ch.accum[bytes][3][userdata][7]_i_1_n_0 ),
        .Q(dina[50]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[15]),
        .Q(\gen_w_ch.accum_reg[bytes][4][strb]__0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[16]),
        .Q(dina[52]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[17]),
        .Q(dina[53]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[18]),
        .Q(dina[54]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[19]),
        .Q(dina[55]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[20]),
        .Q(dina[56]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[21]),
        .Q(dina[57]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[22]),
        .Q(dina[58]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][4][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[23]),
        .Q(dina[59]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[24]),
        .Q(\gen_w_ch.accum_reg[bytes][5][strb_n_0_] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[25]),
        .Q(dina[61]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[26]),
        .Q(dina[62]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[27]),
        .Q(dina[63]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[28]),
        .Q(dina[64]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[29]),
        .Q(dina[65]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[30]),
        .Q(dina[66]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[31]),
        .Q(dina[67]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][5][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[32]),
        .Q(dina[68]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[33]),
        .Q(\gen_w_ch.accum_reg[bytes][6][strb_n_0_] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[34]),
        .Q(dina[70]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[35]),
        .Q(dina[71]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[36]),
        .Q(dina[72]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[37]),
        .Q(dina[73]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[38]),
        .Q(dina[74]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[39]),
        .Q(dina[75]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[40]),
        .Q(dina[76]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][6][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[41]),
        .Q(dina[77]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][strb] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[42]),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb]__0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][0] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[43]),
        .Q(dina[79]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][1] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[44]),
        .Q(dina[80]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][2] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[45]),
        .Q(dina[81]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][3] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[46]),
        .Q(dina[82]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][4] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[47]),
        .Q(dina[83]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][5] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[48]),
        .Q(dina[84]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][6] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[49]),
        .Q(dina[85]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[bytes][7][userdata][7] 
       (.C(s_sc_aclk),
        .CE(\gen_w_ch.accum[bytes][4][userdata][7]_i_1_n_0 ),
        .D(s_sc_payld[50]),
        .Q(dina[86]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][0] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[0]),
        .Q(dina[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][1] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[1]),
        .Q(dina[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][2] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[2]),
        .Q(dina[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][3] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[3]),
        .Q(dina[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][4] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[4]),
        .Q(dina[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][5] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[5]),
        .Q(dina[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[first_offset][6] 
       (.C(s_sc_aclk),
        .CE(first_xfer),
        .D(s_sc_payld[6]),
        .Q(dina[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[14]),
        .Q(dina[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[7]),
        .Q(dina[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[8]),
        .Q(dina[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[9]),
        .Q(dina[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][3] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[10]),
        .Q(dina[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][4] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[11]),
        .Q(dina[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][5] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[12]),
        .Q(dina[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_w_ch.accum_reg[last_offset][6] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[13]),
        .Q(dina[13]),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized6 inst_upsizer_target_pipeline
       (.\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 (\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_payld({s_sc_payld[14],s_sc_payld[7],s_sc_payld[0]}));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT5 #(
    .INIT(32'h0EFF1F00)) 
    \pntr[0]_i_1 
       (.I0(E),
        .I1(accum_empty),
        .I2(s_sc_payld[2]),
        .I3(ingress_valid),
        .I4(\pntr_reg_n_0_[0] ),
        .O(\pntr[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pntr_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\pntr[0]_i_1_n_0 ),
        .Q(\pntr_reg_n_0_[0] ),
        .R(SR));
  LUT4 #(
    .INIT(16'h00E0)) 
    upsizer_valid_i_1
       (.I0(\gen_w_ch.accum[bytes][1][userdata][7]_i_2_n_0 ),
        .I1(s_sc_payld[14]),
        .I2(ingress_valid),
        .I3(SR),
        .O(upsizer_valid_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    upsizer_valid_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(upsizer_valid_i_1_n_0),
        .Q(E),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_si_converter_v1_0_5_splitter" *) 
module ADC_axi_smc_0_sc_si_converter_v1_0_5_splitter
   (m_axi_awuser,
    s_axi_awready,
    s_axi_wready,
    m_axi_wvalid,
    m_axi_awvalid,
    m_axi_wuser,
    aclk,
    s_axi_awaddr,
    areset,
    m_axi_awready,
    s_axi_awvalid,
    m_axi_wready,
    s_axi_wvalid,
    s_axi_wlast,
    s_axi_awlen);
  output [4:0]m_axi_awuser;
  output s_axi_awready;
  output s_axi_wready;
  output m_axi_wvalid;
  output m_axi_awvalid;
  output [13:0]m_axi_wuser;
  input aclk;
  input [6:0]s_axi_awaddr;
  input areset;
  input m_axi_awready;
  input s_axi_awvalid;
  input m_axi_wready;
  input s_axi_wvalid;
  input s_axi_wlast;
  input [4:0]s_axi_awlen;

  wire aclk;
  wire areset;
  wire \gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo_n_23 ;
  wire \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ;
  wire m_axi_awready;
  wire [4:0]m_axi_awuser;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire [13:0]m_axi_wuser;
  wire m_axi_wvalid;
  wire [6:0]s_axi_awaddr;
  wire [4:0]s_axi_awlen;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire s_axi_wvalid;

  ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized5 \gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo 
       (.aclk(aclk),
        .areset(areset),
        .\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue (\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg (\gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo_n_23 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_awuser(m_axi_awuser),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wuser(m_axi_wuser),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid));
  FDRE #(
    .INIT(1'b0)) 
    \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo_n_23 ),
        .Q(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .R(areset));
endmodule

(* C_ADDR_WIDTH = "32" *) (* C_ENABLE_PIPELINING = "1'b1" *) (* C_HAS_BURST = "0" *) 
(* C_ID_WIDTH = "2" *) (* C_IS_CASCADED = "0" *) (* C_LIMIT_READ_LENGTH = "0" *) 
(* C_LIMIT_WRITE_LENGTH = "0" *) (* C_MAX_RUSER_BITS_PER_BYTE = "0" *) (* C_MAX_WUSER_BITS_PER_BYTE = "0" *) 
(* C_MEP_IDENTIFIER_WIDTH = "2" *) (* C_MSC_RDATA_WIDTH_ARRAY = "64" *) (* C_MSC_WDATA_WIDTH_ARRAY = "64" *) 
(* C_NUM_MSC = "1" *) (* C_NUM_READ_THREADS = "1" *) (* C_NUM_SEG = "1" *) 
(* C_NUM_WRITE_THREADS = "1" *) (* C_RDATA_WIDTH = "32" *) (* C_READ_ACCEPTANCE = "32" *) 
(* C_READ_WATERMARK = "0" *) (* C_SEP_PROTOCOL_ARRAY = "1" *) (* C_SEP_RDATA_WIDTH_ARRAY = "64" *) 
(* C_SEP_WDATA_WIDTH_ARRAY = "64" *) (* C_SINGLE_ISSUING = "0" *) (* C_SUPPORTS_NARROW = "0" *) 
(* C_S_RUSER_BITS_PER_BYTE = "0" *) (* C_S_WUSER_BITS_PER_BYTE = "0" *) (* C_WDATA_WIDTH = "32" *) 
(* C_WRITE_ACCEPTANCE = "32" *) (* C_WRITE_WATERMARK = "0" *) (* ORIG_REF_NAME = "sc_si_converter_v1_0_5_top" *) 
(* P_EXOK = "2'b01" *) (* P_FULLY_PIPELINED = "2" *) (* P_ID_WIDTH = "2" *) 
(* P_MAX_RUSER_BITS_PER_BYTE = "1" *) (* P_MAX_WUSER_BITS_PER_BYTE = "1" *) (* P_R_DWBYTES = "4" *) 
(* P_R_DWSIZE = "2" *) (* P_S_RUSER_BITS_PER_BYTE = "1" *) (* P_S_WUSER_BITS_PER_BYTE = "1" *) 
(* P_W_DWBYTES = "4" *) (* P_W_DWSIZE = "2" *) (* P_ZERO_LATENCY = "1" *) 
module ADC_axi_smc_0_sc_si_converter_v1_0_5_top
   (aclk,
    aclken,
    aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready);
  input aclk;
  input aclken;
  input aresetn;
  input [1:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [1023:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input [1023:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [1:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [1023:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  input [1:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [1023:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [1:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [1023:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [1:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [1023:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output m_axi_wlast;
  output [1023:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [1:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [1023:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  output [1:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [1023:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [1:0]m_axi_rid;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [1023:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;

  wire \<const0> ;
  wire aclk;
  wire areset;
  wire areset_i_1_n_0;
  wire aresetn;
  wire m_axi_awready;
  wire [185:64]\^m_axi_awuser ;
  wire \m_axi_awuser[71]_INST_0_i_1_n_0 ;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire [77:64]\^m_axi_wuser ;
  wire m_axi_wvalid;
  wire [31:0]s_axi_awaddr;
  wire [7:0]s_axi_awlen;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire s_axi_wvalid;

  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_aruser[1023] = \<const0> ;
  assign m_axi_aruser[1022] = \<const0> ;
  assign m_axi_aruser[1021] = \<const0> ;
  assign m_axi_aruser[1020] = \<const0> ;
  assign m_axi_aruser[1019] = \<const0> ;
  assign m_axi_aruser[1018] = \<const0> ;
  assign m_axi_aruser[1017] = \<const0> ;
  assign m_axi_aruser[1016] = \<const0> ;
  assign m_axi_aruser[1015] = \<const0> ;
  assign m_axi_aruser[1014] = \<const0> ;
  assign m_axi_aruser[1013] = \<const0> ;
  assign m_axi_aruser[1012] = \<const0> ;
  assign m_axi_aruser[1011] = \<const0> ;
  assign m_axi_aruser[1010] = \<const0> ;
  assign m_axi_aruser[1009] = \<const0> ;
  assign m_axi_aruser[1008] = \<const0> ;
  assign m_axi_aruser[1007] = \<const0> ;
  assign m_axi_aruser[1006] = \<const0> ;
  assign m_axi_aruser[1005] = \<const0> ;
  assign m_axi_aruser[1004] = \<const0> ;
  assign m_axi_aruser[1003] = \<const0> ;
  assign m_axi_aruser[1002] = \<const0> ;
  assign m_axi_aruser[1001] = \<const0> ;
  assign m_axi_aruser[1000] = \<const0> ;
  assign m_axi_aruser[999] = \<const0> ;
  assign m_axi_aruser[998] = \<const0> ;
  assign m_axi_aruser[997] = \<const0> ;
  assign m_axi_aruser[996] = \<const0> ;
  assign m_axi_aruser[995] = \<const0> ;
  assign m_axi_aruser[994] = \<const0> ;
  assign m_axi_aruser[993] = \<const0> ;
  assign m_axi_aruser[992] = \<const0> ;
  assign m_axi_aruser[991] = \<const0> ;
  assign m_axi_aruser[990] = \<const0> ;
  assign m_axi_aruser[989] = \<const0> ;
  assign m_axi_aruser[988] = \<const0> ;
  assign m_axi_aruser[987] = \<const0> ;
  assign m_axi_aruser[986] = \<const0> ;
  assign m_axi_aruser[985] = \<const0> ;
  assign m_axi_aruser[984] = \<const0> ;
  assign m_axi_aruser[983] = \<const0> ;
  assign m_axi_aruser[982] = \<const0> ;
  assign m_axi_aruser[981] = \<const0> ;
  assign m_axi_aruser[980] = \<const0> ;
  assign m_axi_aruser[979] = \<const0> ;
  assign m_axi_aruser[978] = \<const0> ;
  assign m_axi_aruser[977] = \<const0> ;
  assign m_axi_aruser[976] = \<const0> ;
  assign m_axi_aruser[975] = \<const0> ;
  assign m_axi_aruser[974] = \<const0> ;
  assign m_axi_aruser[973] = \<const0> ;
  assign m_axi_aruser[972] = \<const0> ;
  assign m_axi_aruser[971] = \<const0> ;
  assign m_axi_aruser[970] = \<const0> ;
  assign m_axi_aruser[969] = \<const0> ;
  assign m_axi_aruser[968] = \<const0> ;
  assign m_axi_aruser[967] = \<const0> ;
  assign m_axi_aruser[966] = \<const0> ;
  assign m_axi_aruser[965] = \<const0> ;
  assign m_axi_aruser[964] = \<const0> ;
  assign m_axi_aruser[963] = \<const0> ;
  assign m_axi_aruser[962] = \<const0> ;
  assign m_axi_aruser[961] = \<const0> ;
  assign m_axi_aruser[960] = \<const0> ;
  assign m_axi_aruser[959] = \<const0> ;
  assign m_axi_aruser[958] = \<const0> ;
  assign m_axi_aruser[957] = \<const0> ;
  assign m_axi_aruser[956] = \<const0> ;
  assign m_axi_aruser[955] = \<const0> ;
  assign m_axi_aruser[954] = \<const0> ;
  assign m_axi_aruser[953] = \<const0> ;
  assign m_axi_aruser[952] = \<const0> ;
  assign m_axi_aruser[951] = \<const0> ;
  assign m_axi_aruser[950] = \<const0> ;
  assign m_axi_aruser[949] = \<const0> ;
  assign m_axi_aruser[948] = \<const0> ;
  assign m_axi_aruser[947] = \<const0> ;
  assign m_axi_aruser[946] = \<const0> ;
  assign m_axi_aruser[945] = \<const0> ;
  assign m_axi_aruser[944] = \<const0> ;
  assign m_axi_aruser[943] = \<const0> ;
  assign m_axi_aruser[942] = \<const0> ;
  assign m_axi_aruser[941] = \<const0> ;
  assign m_axi_aruser[940] = \<const0> ;
  assign m_axi_aruser[939] = \<const0> ;
  assign m_axi_aruser[938] = \<const0> ;
  assign m_axi_aruser[937] = \<const0> ;
  assign m_axi_aruser[936] = \<const0> ;
  assign m_axi_aruser[935] = \<const0> ;
  assign m_axi_aruser[934] = \<const0> ;
  assign m_axi_aruser[933] = \<const0> ;
  assign m_axi_aruser[932] = \<const0> ;
  assign m_axi_aruser[931] = \<const0> ;
  assign m_axi_aruser[930] = \<const0> ;
  assign m_axi_aruser[929] = \<const0> ;
  assign m_axi_aruser[928] = \<const0> ;
  assign m_axi_aruser[927] = \<const0> ;
  assign m_axi_aruser[926] = \<const0> ;
  assign m_axi_aruser[925] = \<const0> ;
  assign m_axi_aruser[924] = \<const0> ;
  assign m_axi_aruser[923] = \<const0> ;
  assign m_axi_aruser[922] = \<const0> ;
  assign m_axi_aruser[921] = \<const0> ;
  assign m_axi_aruser[920] = \<const0> ;
  assign m_axi_aruser[919] = \<const0> ;
  assign m_axi_aruser[918] = \<const0> ;
  assign m_axi_aruser[917] = \<const0> ;
  assign m_axi_aruser[916] = \<const0> ;
  assign m_axi_aruser[915] = \<const0> ;
  assign m_axi_aruser[914] = \<const0> ;
  assign m_axi_aruser[913] = \<const0> ;
  assign m_axi_aruser[912] = \<const0> ;
  assign m_axi_aruser[911] = \<const0> ;
  assign m_axi_aruser[910] = \<const0> ;
  assign m_axi_aruser[909] = \<const0> ;
  assign m_axi_aruser[908] = \<const0> ;
  assign m_axi_aruser[907] = \<const0> ;
  assign m_axi_aruser[906] = \<const0> ;
  assign m_axi_aruser[905] = \<const0> ;
  assign m_axi_aruser[904] = \<const0> ;
  assign m_axi_aruser[903] = \<const0> ;
  assign m_axi_aruser[902] = \<const0> ;
  assign m_axi_aruser[901] = \<const0> ;
  assign m_axi_aruser[900] = \<const0> ;
  assign m_axi_aruser[899] = \<const0> ;
  assign m_axi_aruser[898] = \<const0> ;
  assign m_axi_aruser[897] = \<const0> ;
  assign m_axi_aruser[896] = \<const0> ;
  assign m_axi_aruser[895] = \<const0> ;
  assign m_axi_aruser[894] = \<const0> ;
  assign m_axi_aruser[893] = \<const0> ;
  assign m_axi_aruser[892] = \<const0> ;
  assign m_axi_aruser[891] = \<const0> ;
  assign m_axi_aruser[890] = \<const0> ;
  assign m_axi_aruser[889] = \<const0> ;
  assign m_axi_aruser[888] = \<const0> ;
  assign m_axi_aruser[887] = \<const0> ;
  assign m_axi_aruser[886] = \<const0> ;
  assign m_axi_aruser[885] = \<const0> ;
  assign m_axi_aruser[884] = \<const0> ;
  assign m_axi_aruser[883] = \<const0> ;
  assign m_axi_aruser[882] = \<const0> ;
  assign m_axi_aruser[881] = \<const0> ;
  assign m_axi_aruser[880] = \<const0> ;
  assign m_axi_aruser[879] = \<const0> ;
  assign m_axi_aruser[878] = \<const0> ;
  assign m_axi_aruser[877] = \<const0> ;
  assign m_axi_aruser[876] = \<const0> ;
  assign m_axi_aruser[875] = \<const0> ;
  assign m_axi_aruser[874] = \<const0> ;
  assign m_axi_aruser[873] = \<const0> ;
  assign m_axi_aruser[872] = \<const0> ;
  assign m_axi_aruser[871] = \<const0> ;
  assign m_axi_aruser[870] = \<const0> ;
  assign m_axi_aruser[869] = \<const0> ;
  assign m_axi_aruser[868] = \<const0> ;
  assign m_axi_aruser[867] = \<const0> ;
  assign m_axi_aruser[866] = \<const0> ;
  assign m_axi_aruser[865] = \<const0> ;
  assign m_axi_aruser[864] = \<const0> ;
  assign m_axi_aruser[863] = \<const0> ;
  assign m_axi_aruser[862] = \<const0> ;
  assign m_axi_aruser[861] = \<const0> ;
  assign m_axi_aruser[860] = \<const0> ;
  assign m_axi_aruser[859] = \<const0> ;
  assign m_axi_aruser[858] = \<const0> ;
  assign m_axi_aruser[857] = \<const0> ;
  assign m_axi_aruser[856] = \<const0> ;
  assign m_axi_aruser[855] = \<const0> ;
  assign m_axi_aruser[854] = \<const0> ;
  assign m_axi_aruser[853] = \<const0> ;
  assign m_axi_aruser[852] = \<const0> ;
  assign m_axi_aruser[851] = \<const0> ;
  assign m_axi_aruser[850] = \<const0> ;
  assign m_axi_aruser[849] = \<const0> ;
  assign m_axi_aruser[848] = \<const0> ;
  assign m_axi_aruser[847] = \<const0> ;
  assign m_axi_aruser[846] = \<const0> ;
  assign m_axi_aruser[845] = \<const0> ;
  assign m_axi_aruser[844] = \<const0> ;
  assign m_axi_aruser[843] = \<const0> ;
  assign m_axi_aruser[842] = \<const0> ;
  assign m_axi_aruser[841] = \<const0> ;
  assign m_axi_aruser[840] = \<const0> ;
  assign m_axi_aruser[839] = \<const0> ;
  assign m_axi_aruser[838] = \<const0> ;
  assign m_axi_aruser[837] = \<const0> ;
  assign m_axi_aruser[836] = \<const0> ;
  assign m_axi_aruser[835] = \<const0> ;
  assign m_axi_aruser[834] = \<const0> ;
  assign m_axi_aruser[833] = \<const0> ;
  assign m_axi_aruser[832] = \<const0> ;
  assign m_axi_aruser[831] = \<const0> ;
  assign m_axi_aruser[830] = \<const0> ;
  assign m_axi_aruser[829] = \<const0> ;
  assign m_axi_aruser[828] = \<const0> ;
  assign m_axi_aruser[827] = \<const0> ;
  assign m_axi_aruser[826] = \<const0> ;
  assign m_axi_aruser[825] = \<const0> ;
  assign m_axi_aruser[824] = \<const0> ;
  assign m_axi_aruser[823] = \<const0> ;
  assign m_axi_aruser[822] = \<const0> ;
  assign m_axi_aruser[821] = \<const0> ;
  assign m_axi_aruser[820] = \<const0> ;
  assign m_axi_aruser[819] = \<const0> ;
  assign m_axi_aruser[818] = \<const0> ;
  assign m_axi_aruser[817] = \<const0> ;
  assign m_axi_aruser[816] = \<const0> ;
  assign m_axi_aruser[815] = \<const0> ;
  assign m_axi_aruser[814] = \<const0> ;
  assign m_axi_aruser[813] = \<const0> ;
  assign m_axi_aruser[812] = \<const0> ;
  assign m_axi_aruser[811] = \<const0> ;
  assign m_axi_aruser[810] = \<const0> ;
  assign m_axi_aruser[809] = \<const0> ;
  assign m_axi_aruser[808] = \<const0> ;
  assign m_axi_aruser[807] = \<const0> ;
  assign m_axi_aruser[806] = \<const0> ;
  assign m_axi_aruser[805] = \<const0> ;
  assign m_axi_aruser[804] = \<const0> ;
  assign m_axi_aruser[803] = \<const0> ;
  assign m_axi_aruser[802] = \<const0> ;
  assign m_axi_aruser[801] = \<const0> ;
  assign m_axi_aruser[800] = \<const0> ;
  assign m_axi_aruser[799] = \<const0> ;
  assign m_axi_aruser[798] = \<const0> ;
  assign m_axi_aruser[797] = \<const0> ;
  assign m_axi_aruser[796] = \<const0> ;
  assign m_axi_aruser[795] = \<const0> ;
  assign m_axi_aruser[794] = \<const0> ;
  assign m_axi_aruser[793] = \<const0> ;
  assign m_axi_aruser[792] = \<const0> ;
  assign m_axi_aruser[791] = \<const0> ;
  assign m_axi_aruser[790] = \<const0> ;
  assign m_axi_aruser[789] = \<const0> ;
  assign m_axi_aruser[788] = \<const0> ;
  assign m_axi_aruser[787] = \<const0> ;
  assign m_axi_aruser[786] = \<const0> ;
  assign m_axi_aruser[785] = \<const0> ;
  assign m_axi_aruser[784] = \<const0> ;
  assign m_axi_aruser[783] = \<const0> ;
  assign m_axi_aruser[782] = \<const0> ;
  assign m_axi_aruser[781] = \<const0> ;
  assign m_axi_aruser[780] = \<const0> ;
  assign m_axi_aruser[779] = \<const0> ;
  assign m_axi_aruser[778] = \<const0> ;
  assign m_axi_aruser[777] = \<const0> ;
  assign m_axi_aruser[776] = \<const0> ;
  assign m_axi_aruser[775] = \<const0> ;
  assign m_axi_aruser[774] = \<const0> ;
  assign m_axi_aruser[773] = \<const0> ;
  assign m_axi_aruser[772] = \<const0> ;
  assign m_axi_aruser[771] = \<const0> ;
  assign m_axi_aruser[770] = \<const0> ;
  assign m_axi_aruser[769] = \<const0> ;
  assign m_axi_aruser[768] = \<const0> ;
  assign m_axi_aruser[767] = \<const0> ;
  assign m_axi_aruser[766] = \<const0> ;
  assign m_axi_aruser[765] = \<const0> ;
  assign m_axi_aruser[764] = \<const0> ;
  assign m_axi_aruser[763] = \<const0> ;
  assign m_axi_aruser[762] = \<const0> ;
  assign m_axi_aruser[761] = \<const0> ;
  assign m_axi_aruser[760] = \<const0> ;
  assign m_axi_aruser[759] = \<const0> ;
  assign m_axi_aruser[758] = \<const0> ;
  assign m_axi_aruser[757] = \<const0> ;
  assign m_axi_aruser[756] = \<const0> ;
  assign m_axi_aruser[755] = \<const0> ;
  assign m_axi_aruser[754] = \<const0> ;
  assign m_axi_aruser[753] = \<const0> ;
  assign m_axi_aruser[752] = \<const0> ;
  assign m_axi_aruser[751] = \<const0> ;
  assign m_axi_aruser[750] = \<const0> ;
  assign m_axi_aruser[749] = \<const0> ;
  assign m_axi_aruser[748] = \<const0> ;
  assign m_axi_aruser[747] = \<const0> ;
  assign m_axi_aruser[746] = \<const0> ;
  assign m_axi_aruser[745] = \<const0> ;
  assign m_axi_aruser[744] = \<const0> ;
  assign m_axi_aruser[743] = \<const0> ;
  assign m_axi_aruser[742] = \<const0> ;
  assign m_axi_aruser[741] = \<const0> ;
  assign m_axi_aruser[740] = \<const0> ;
  assign m_axi_aruser[739] = \<const0> ;
  assign m_axi_aruser[738] = \<const0> ;
  assign m_axi_aruser[737] = \<const0> ;
  assign m_axi_aruser[736] = \<const0> ;
  assign m_axi_aruser[735] = \<const0> ;
  assign m_axi_aruser[734] = \<const0> ;
  assign m_axi_aruser[733] = \<const0> ;
  assign m_axi_aruser[732] = \<const0> ;
  assign m_axi_aruser[731] = \<const0> ;
  assign m_axi_aruser[730] = \<const0> ;
  assign m_axi_aruser[729] = \<const0> ;
  assign m_axi_aruser[728] = \<const0> ;
  assign m_axi_aruser[727] = \<const0> ;
  assign m_axi_aruser[726] = \<const0> ;
  assign m_axi_aruser[725] = \<const0> ;
  assign m_axi_aruser[724] = \<const0> ;
  assign m_axi_aruser[723] = \<const0> ;
  assign m_axi_aruser[722] = \<const0> ;
  assign m_axi_aruser[721] = \<const0> ;
  assign m_axi_aruser[720] = \<const0> ;
  assign m_axi_aruser[719] = \<const0> ;
  assign m_axi_aruser[718] = \<const0> ;
  assign m_axi_aruser[717] = \<const0> ;
  assign m_axi_aruser[716] = \<const0> ;
  assign m_axi_aruser[715] = \<const0> ;
  assign m_axi_aruser[714] = \<const0> ;
  assign m_axi_aruser[713] = \<const0> ;
  assign m_axi_aruser[712] = \<const0> ;
  assign m_axi_aruser[711] = \<const0> ;
  assign m_axi_aruser[710] = \<const0> ;
  assign m_axi_aruser[709] = \<const0> ;
  assign m_axi_aruser[708] = \<const0> ;
  assign m_axi_aruser[707] = \<const0> ;
  assign m_axi_aruser[706] = \<const0> ;
  assign m_axi_aruser[705] = \<const0> ;
  assign m_axi_aruser[704] = \<const0> ;
  assign m_axi_aruser[703] = \<const0> ;
  assign m_axi_aruser[702] = \<const0> ;
  assign m_axi_aruser[701] = \<const0> ;
  assign m_axi_aruser[700] = \<const0> ;
  assign m_axi_aruser[699] = \<const0> ;
  assign m_axi_aruser[698] = \<const0> ;
  assign m_axi_aruser[697] = \<const0> ;
  assign m_axi_aruser[696] = \<const0> ;
  assign m_axi_aruser[695] = \<const0> ;
  assign m_axi_aruser[694] = \<const0> ;
  assign m_axi_aruser[693] = \<const0> ;
  assign m_axi_aruser[692] = \<const0> ;
  assign m_axi_aruser[691] = \<const0> ;
  assign m_axi_aruser[690] = \<const0> ;
  assign m_axi_aruser[689] = \<const0> ;
  assign m_axi_aruser[688] = \<const0> ;
  assign m_axi_aruser[687] = \<const0> ;
  assign m_axi_aruser[686] = \<const0> ;
  assign m_axi_aruser[685] = \<const0> ;
  assign m_axi_aruser[684] = \<const0> ;
  assign m_axi_aruser[683] = \<const0> ;
  assign m_axi_aruser[682] = \<const0> ;
  assign m_axi_aruser[681] = \<const0> ;
  assign m_axi_aruser[680] = \<const0> ;
  assign m_axi_aruser[679] = \<const0> ;
  assign m_axi_aruser[678] = \<const0> ;
  assign m_axi_aruser[677] = \<const0> ;
  assign m_axi_aruser[676] = \<const0> ;
  assign m_axi_aruser[675] = \<const0> ;
  assign m_axi_aruser[674] = \<const0> ;
  assign m_axi_aruser[673] = \<const0> ;
  assign m_axi_aruser[672] = \<const0> ;
  assign m_axi_aruser[671] = \<const0> ;
  assign m_axi_aruser[670] = \<const0> ;
  assign m_axi_aruser[669] = \<const0> ;
  assign m_axi_aruser[668] = \<const0> ;
  assign m_axi_aruser[667] = \<const0> ;
  assign m_axi_aruser[666] = \<const0> ;
  assign m_axi_aruser[665] = \<const0> ;
  assign m_axi_aruser[664] = \<const0> ;
  assign m_axi_aruser[663] = \<const0> ;
  assign m_axi_aruser[662] = \<const0> ;
  assign m_axi_aruser[661] = \<const0> ;
  assign m_axi_aruser[660] = \<const0> ;
  assign m_axi_aruser[659] = \<const0> ;
  assign m_axi_aruser[658] = \<const0> ;
  assign m_axi_aruser[657] = \<const0> ;
  assign m_axi_aruser[656] = \<const0> ;
  assign m_axi_aruser[655] = \<const0> ;
  assign m_axi_aruser[654] = \<const0> ;
  assign m_axi_aruser[653] = \<const0> ;
  assign m_axi_aruser[652] = \<const0> ;
  assign m_axi_aruser[651] = \<const0> ;
  assign m_axi_aruser[650] = \<const0> ;
  assign m_axi_aruser[649] = \<const0> ;
  assign m_axi_aruser[648] = \<const0> ;
  assign m_axi_aruser[647] = \<const0> ;
  assign m_axi_aruser[646] = \<const0> ;
  assign m_axi_aruser[645] = \<const0> ;
  assign m_axi_aruser[644] = \<const0> ;
  assign m_axi_aruser[643] = \<const0> ;
  assign m_axi_aruser[642] = \<const0> ;
  assign m_axi_aruser[641] = \<const0> ;
  assign m_axi_aruser[640] = \<const0> ;
  assign m_axi_aruser[639] = \<const0> ;
  assign m_axi_aruser[638] = \<const0> ;
  assign m_axi_aruser[637] = \<const0> ;
  assign m_axi_aruser[636] = \<const0> ;
  assign m_axi_aruser[635] = \<const0> ;
  assign m_axi_aruser[634] = \<const0> ;
  assign m_axi_aruser[633] = \<const0> ;
  assign m_axi_aruser[632] = \<const0> ;
  assign m_axi_aruser[631] = \<const0> ;
  assign m_axi_aruser[630] = \<const0> ;
  assign m_axi_aruser[629] = \<const0> ;
  assign m_axi_aruser[628] = \<const0> ;
  assign m_axi_aruser[627] = \<const0> ;
  assign m_axi_aruser[626] = \<const0> ;
  assign m_axi_aruser[625] = \<const0> ;
  assign m_axi_aruser[624] = \<const0> ;
  assign m_axi_aruser[623] = \<const0> ;
  assign m_axi_aruser[622] = \<const0> ;
  assign m_axi_aruser[621] = \<const0> ;
  assign m_axi_aruser[620] = \<const0> ;
  assign m_axi_aruser[619] = \<const0> ;
  assign m_axi_aruser[618] = \<const0> ;
  assign m_axi_aruser[617] = \<const0> ;
  assign m_axi_aruser[616] = \<const0> ;
  assign m_axi_aruser[615] = \<const0> ;
  assign m_axi_aruser[614] = \<const0> ;
  assign m_axi_aruser[613] = \<const0> ;
  assign m_axi_aruser[612] = \<const0> ;
  assign m_axi_aruser[611] = \<const0> ;
  assign m_axi_aruser[610] = \<const0> ;
  assign m_axi_aruser[609] = \<const0> ;
  assign m_axi_aruser[608] = \<const0> ;
  assign m_axi_aruser[607] = \<const0> ;
  assign m_axi_aruser[606] = \<const0> ;
  assign m_axi_aruser[605] = \<const0> ;
  assign m_axi_aruser[604] = \<const0> ;
  assign m_axi_aruser[603] = \<const0> ;
  assign m_axi_aruser[602] = \<const0> ;
  assign m_axi_aruser[601] = \<const0> ;
  assign m_axi_aruser[600] = \<const0> ;
  assign m_axi_aruser[599] = \<const0> ;
  assign m_axi_aruser[598] = \<const0> ;
  assign m_axi_aruser[597] = \<const0> ;
  assign m_axi_aruser[596] = \<const0> ;
  assign m_axi_aruser[595] = \<const0> ;
  assign m_axi_aruser[594] = \<const0> ;
  assign m_axi_aruser[593] = \<const0> ;
  assign m_axi_aruser[592] = \<const0> ;
  assign m_axi_aruser[591] = \<const0> ;
  assign m_axi_aruser[590] = \<const0> ;
  assign m_axi_aruser[589] = \<const0> ;
  assign m_axi_aruser[588] = \<const0> ;
  assign m_axi_aruser[587] = \<const0> ;
  assign m_axi_aruser[586] = \<const0> ;
  assign m_axi_aruser[585] = \<const0> ;
  assign m_axi_aruser[584] = \<const0> ;
  assign m_axi_aruser[583] = \<const0> ;
  assign m_axi_aruser[582] = \<const0> ;
  assign m_axi_aruser[581] = \<const0> ;
  assign m_axi_aruser[580] = \<const0> ;
  assign m_axi_aruser[579] = \<const0> ;
  assign m_axi_aruser[578] = \<const0> ;
  assign m_axi_aruser[577] = \<const0> ;
  assign m_axi_aruser[576] = \<const0> ;
  assign m_axi_aruser[575] = \<const0> ;
  assign m_axi_aruser[574] = \<const0> ;
  assign m_axi_aruser[573] = \<const0> ;
  assign m_axi_aruser[572] = \<const0> ;
  assign m_axi_aruser[571] = \<const0> ;
  assign m_axi_aruser[570] = \<const0> ;
  assign m_axi_aruser[569] = \<const0> ;
  assign m_axi_aruser[568] = \<const0> ;
  assign m_axi_aruser[567] = \<const0> ;
  assign m_axi_aruser[566] = \<const0> ;
  assign m_axi_aruser[565] = \<const0> ;
  assign m_axi_aruser[564] = \<const0> ;
  assign m_axi_aruser[563] = \<const0> ;
  assign m_axi_aruser[562] = \<const0> ;
  assign m_axi_aruser[561] = \<const0> ;
  assign m_axi_aruser[560] = \<const0> ;
  assign m_axi_aruser[559] = \<const0> ;
  assign m_axi_aruser[558] = \<const0> ;
  assign m_axi_aruser[557] = \<const0> ;
  assign m_axi_aruser[556] = \<const0> ;
  assign m_axi_aruser[555] = \<const0> ;
  assign m_axi_aruser[554] = \<const0> ;
  assign m_axi_aruser[553] = \<const0> ;
  assign m_axi_aruser[552] = \<const0> ;
  assign m_axi_aruser[551] = \<const0> ;
  assign m_axi_aruser[550] = \<const0> ;
  assign m_axi_aruser[549] = \<const0> ;
  assign m_axi_aruser[548] = \<const0> ;
  assign m_axi_aruser[547] = \<const0> ;
  assign m_axi_aruser[546] = \<const0> ;
  assign m_axi_aruser[545] = \<const0> ;
  assign m_axi_aruser[544] = \<const0> ;
  assign m_axi_aruser[543] = \<const0> ;
  assign m_axi_aruser[542] = \<const0> ;
  assign m_axi_aruser[541] = \<const0> ;
  assign m_axi_aruser[540] = \<const0> ;
  assign m_axi_aruser[539] = \<const0> ;
  assign m_axi_aruser[538] = \<const0> ;
  assign m_axi_aruser[537] = \<const0> ;
  assign m_axi_aruser[536] = \<const0> ;
  assign m_axi_aruser[535] = \<const0> ;
  assign m_axi_aruser[534] = \<const0> ;
  assign m_axi_aruser[533] = \<const0> ;
  assign m_axi_aruser[532] = \<const0> ;
  assign m_axi_aruser[531] = \<const0> ;
  assign m_axi_aruser[530] = \<const0> ;
  assign m_axi_aruser[529] = \<const0> ;
  assign m_axi_aruser[528] = \<const0> ;
  assign m_axi_aruser[527] = \<const0> ;
  assign m_axi_aruser[526] = \<const0> ;
  assign m_axi_aruser[525] = \<const0> ;
  assign m_axi_aruser[524] = \<const0> ;
  assign m_axi_aruser[523] = \<const0> ;
  assign m_axi_aruser[522] = \<const0> ;
  assign m_axi_aruser[521] = \<const0> ;
  assign m_axi_aruser[520] = \<const0> ;
  assign m_axi_aruser[519] = \<const0> ;
  assign m_axi_aruser[518] = \<const0> ;
  assign m_axi_aruser[517] = \<const0> ;
  assign m_axi_aruser[516] = \<const0> ;
  assign m_axi_aruser[515] = \<const0> ;
  assign m_axi_aruser[514] = \<const0> ;
  assign m_axi_aruser[513] = \<const0> ;
  assign m_axi_aruser[512] = \<const0> ;
  assign m_axi_aruser[511] = \<const0> ;
  assign m_axi_aruser[510] = \<const0> ;
  assign m_axi_aruser[509] = \<const0> ;
  assign m_axi_aruser[508] = \<const0> ;
  assign m_axi_aruser[507] = \<const0> ;
  assign m_axi_aruser[506] = \<const0> ;
  assign m_axi_aruser[505] = \<const0> ;
  assign m_axi_aruser[504] = \<const0> ;
  assign m_axi_aruser[503] = \<const0> ;
  assign m_axi_aruser[502] = \<const0> ;
  assign m_axi_aruser[501] = \<const0> ;
  assign m_axi_aruser[500] = \<const0> ;
  assign m_axi_aruser[499] = \<const0> ;
  assign m_axi_aruser[498] = \<const0> ;
  assign m_axi_aruser[497] = \<const0> ;
  assign m_axi_aruser[496] = \<const0> ;
  assign m_axi_aruser[495] = \<const0> ;
  assign m_axi_aruser[494] = \<const0> ;
  assign m_axi_aruser[493] = \<const0> ;
  assign m_axi_aruser[492] = \<const0> ;
  assign m_axi_aruser[491] = \<const0> ;
  assign m_axi_aruser[490] = \<const0> ;
  assign m_axi_aruser[489] = \<const0> ;
  assign m_axi_aruser[488] = \<const0> ;
  assign m_axi_aruser[487] = \<const0> ;
  assign m_axi_aruser[486] = \<const0> ;
  assign m_axi_aruser[485] = \<const0> ;
  assign m_axi_aruser[484] = \<const0> ;
  assign m_axi_aruser[483] = \<const0> ;
  assign m_axi_aruser[482] = \<const0> ;
  assign m_axi_aruser[481] = \<const0> ;
  assign m_axi_aruser[480] = \<const0> ;
  assign m_axi_aruser[479] = \<const0> ;
  assign m_axi_aruser[478] = \<const0> ;
  assign m_axi_aruser[477] = \<const0> ;
  assign m_axi_aruser[476] = \<const0> ;
  assign m_axi_aruser[475] = \<const0> ;
  assign m_axi_aruser[474] = \<const0> ;
  assign m_axi_aruser[473] = \<const0> ;
  assign m_axi_aruser[472] = \<const0> ;
  assign m_axi_aruser[471] = \<const0> ;
  assign m_axi_aruser[470] = \<const0> ;
  assign m_axi_aruser[469] = \<const0> ;
  assign m_axi_aruser[468] = \<const0> ;
  assign m_axi_aruser[467] = \<const0> ;
  assign m_axi_aruser[466] = \<const0> ;
  assign m_axi_aruser[465] = \<const0> ;
  assign m_axi_aruser[464] = \<const0> ;
  assign m_axi_aruser[463] = \<const0> ;
  assign m_axi_aruser[462] = \<const0> ;
  assign m_axi_aruser[461] = \<const0> ;
  assign m_axi_aruser[460] = \<const0> ;
  assign m_axi_aruser[459] = \<const0> ;
  assign m_axi_aruser[458] = \<const0> ;
  assign m_axi_aruser[457] = \<const0> ;
  assign m_axi_aruser[456] = \<const0> ;
  assign m_axi_aruser[455] = \<const0> ;
  assign m_axi_aruser[454] = \<const0> ;
  assign m_axi_aruser[453] = \<const0> ;
  assign m_axi_aruser[452] = \<const0> ;
  assign m_axi_aruser[451] = \<const0> ;
  assign m_axi_aruser[450] = \<const0> ;
  assign m_axi_aruser[449] = \<const0> ;
  assign m_axi_aruser[448] = \<const0> ;
  assign m_axi_aruser[447] = \<const0> ;
  assign m_axi_aruser[446] = \<const0> ;
  assign m_axi_aruser[445] = \<const0> ;
  assign m_axi_aruser[444] = \<const0> ;
  assign m_axi_aruser[443] = \<const0> ;
  assign m_axi_aruser[442] = \<const0> ;
  assign m_axi_aruser[441] = \<const0> ;
  assign m_axi_aruser[440] = \<const0> ;
  assign m_axi_aruser[439] = \<const0> ;
  assign m_axi_aruser[438] = \<const0> ;
  assign m_axi_aruser[437] = \<const0> ;
  assign m_axi_aruser[436] = \<const0> ;
  assign m_axi_aruser[435] = \<const0> ;
  assign m_axi_aruser[434] = \<const0> ;
  assign m_axi_aruser[433] = \<const0> ;
  assign m_axi_aruser[432] = \<const0> ;
  assign m_axi_aruser[431] = \<const0> ;
  assign m_axi_aruser[430] = \<const0> ;
  assign m_axi_aruser[429] = \<const0> ;
  assign m_axi_aruser[428] = \<const0> ;
  assign m_axi_aruser[427] = \<const0> ;
  assign m_axi_aruser[426] = \<const0> ;
  assign m_axi_aruser[425] = \<const0> ;
  assign m_axi_aruser[424] = \<const0> ;
  assign m_axi_aruser[423] = \<const0> ;
  assign m_axi_aruser[422] = \<const0> ;
  assign m_axi_aruser[421] = \<const0> ;
  assign m_axi_aruser[420] = \<const0> ;
  assign m_axi_aruser[419] = \<const0> ;
  assign m_axi_aruser[418] = \<const0> ;
  assign m_axi_aruser[417] = \<const0> ;
  assign m_axi_aruser[416] = \<const0> ;
  assign m_axi_aruser[415] = \<const0> ;
  assign m_axi_aruser[414] = \<const0> ;
  assign m_axi_aruser[413] = \<const0> ;
  assign m_axi_aruser[412] = \<const0> ;
  assign m_axi_aruser[411] = \<const0> ;
  assign m_axi_aruser[410] = \<const0> ;
  assign m_axi_aruser[409] = \<const0> ;
  assign m_axi_aruser[408] = \<const0> ;
  assign m_axi_aruser[407] = \<const0> ;
  assign m_axi_aruser[406] = \<const0> ;
  assign m_axi_aruser[405] = \<const0> ;
  assign m_axi_aruser[404] = \<const0> ;
  assign m_axi_aruser[403] = \<const0> ;
  assign m_axi_aruser[402] = \<const0> ;
  assign m_axi_aruser[401] = \<const0> ;
  assign m_axi_aruser[400] = \<const0> ;
  assign m_axi_aruser[399] = \<const0> ;
  assign m_axi_aruser[398] = \<const0> ;
  assign m_axi_aruser[397] = \<const0> ;
  assign m_axi_aruser[396] = \<const0> ;
  assign m_axi_aruser[395] = \<const0> ;
  assign m_axi_aruser[394] = \<const0> ;
  assign m_axi_aruser[393] = \<const0> ;
  assign m_axi_aruser[392] = \<const0> ;
  assign m_axi_aruser[391] = \<const0> ;
  assign m_axi_aruser[390] = \<const0> ;
  assign m_axi_aruser[389] = \<const0> ;
  assign m_axi_aruser[388] = \<const0> ;
  assign m_axi_aruser[387] = \<const0> ;
  assign m_axi_aruser[386] = \<const0> ;
  assign m_axi_aruser[385] = \<const0> ;
  assign m_axi_aruser[384] = \<const0> ;
  assign m_axi_aruser[383] = \<const0> ;
  assign m_axi_aruser[382] = \<const0> ;
  assign m_axi_aruser[381] = \<const0> ;
  assign m_axi_aruser[380] = \<const0> ;
  assign m_axi_aruser[379] = \<const0> ;
  assign m_axi_aruser[378] = \<const0> ;
  assign m_axi_aruser[377] = \<const0> ;
  assign m_axi_aruser[376] = \<const0> ;
  assign m_axi_aruser[375] = \<const0> ;
  assign m_axi_aruser[374] = \<const0> ;
  assign m_axi_aruser[373] = \<const0> ;
  assign m_axi_aruser[372] = \<const0> ;
  assign m_axi_aruser[371] = \<const0> ;
  assign m_axi_aruser[370] = \<const0> ;
  assign m_axi_aruser[369] = \<const0> ;
  assign m_axi_aruser[368] = \<const0> ;
  assign m_axi_aruser[367] = \<const0> ;
  assign m_axi_aruser[366] = \<const0> ;
  assign m_axi_aruser[365] = \<const0> ;
  assign m_axi_aruser[364] = \<const0> ;
  assign m_axi_aruser[363] = \<const0> ;
  assign m_axi_aruser[362] = \<const0> ;
  assign m_axi_aruser[361] = \<const0> ;
  assign m_axi_aruser[360] = \<const0> ;
  assign m_axi_aruser[359] = \<const0> ;
  assign m_axi_aruser[358] = \<const0> ;
  assign m_axi_aruser[357] = \<const0> ;
  assign m_axi_aruser[356] = \<const0> ;
  assign m_axi_aruser[355] = \<const0> ;
  assign m_axi_aruser[354] = \<const0> ;
  assign m_axi_aruser[353] = \<const0> ;
  assign m_axi_aruser[352] = \<const0> ;
  assign m_axi_aruser[351] = \<const0> ;
  assign m_axi_aruser[350] = \<const0> ;
  assign m_axi_aruser[349] = \<const0> ;
  assign m_axi_aruser[348] = \<const0> ;
  assign m_axi_aruser[347] = \<const0> ;
  assign m_axi_aruser[346] = \<const0> ;
  assign m_axi_aruser[345] = \<const0> ;
  assign m_axi_aruser[344] = \<const0> ;
  assign m_axi_aruser[343] = \<const0> ;
  assign m_axi_aruser[342] = \<const0> ;
  assign m_axi_aruser[341] = \<const0> ;
  assign m_axi_aruser[340] = \<const0> ;
  assign m_axi_aruser[339] = \<const0> ;
  assign m_axi_aruser[338] = \<const0> ;
  assign m_axi_aruser[337] = \<const0> ;
  assign m_axi_aruser[336] = \<const0> ;
  assign m_axi_aruser[335] = \<const0> ;
  assign m_axi_aruser[334] = \<const0> ;
  assign m_axi_aruser[333] = \<const0> ;
  assign m_axi_aruser[332] = \<const0> ;
  assign m_axi_aruser[331] = \<const0> ;
  assign m_axi_aruser[330] = \<const0> ;
  assign m_axi_aruser[329] = \<const0> ;
  assign m_axi_aruser[328] = \<const0> ;
  assign m_axi_aruser[327] = \<const0> ;
  assign m_axi_aruser[326] = \<const0> ;
  assign m_axi_aruser[325] = \<const0> ;
  assign m_axi_aruser[324] = \<const0> ;
  assign m_axi_aruser[323] = \<const0> ;
  assign m_axi_aruser[322] = \<const0> ;
  assign m_axi_aruser[321] = \<const0> ;
  assign m_axi_aruser[320] = \<const0> ;
  assign m_axi_aruser[319] = \<const0> ;
  assign m_axi_aruser[318] = \<const0> ;
  assign m_axi_aruser[317] = \<const0> ;
  assign m_axi_aruser[316] = \<const0> ;
  assign m_axi_aruser[315] = \<const0> ;
  assign m_axi_aruser[314] = \<const0> ;
  assign m_axi_aruser[313] = \<const0> ;
  assign m_axi_aruser[312] = \<const0> ;
  assign m_axi_aruser[311] = \<const0> ;
  assign m_axi_aruser[310] = \<const0> ;
  assign m_axi_aruser[309] = \<const0> ;
  assign m_axi_aruser[308] = \<const0> ;
  assign m_axi_aruser[307] = \<const0> ;
  assign m_axi_aruser[306] = \<const0> ;
  assign m_axi_aruser[305] = \<const0> ;
  assign m_axi_aruser[304] = \<const0> ;
  assign m_axi_aruser[303] = \<const0> ;
  assign m_axi_aruser[302] = \<const0> ;
  assign m_axi_aruser[301] = \<const0> ;
  assign m_axi_aruser[300] = \<const0> ;
  assign m_axi_aruser[299] = \<const0> ;
  assign m_axi_aruser[298] = \<const0> ;
  assign m_axi_aruser[297] = \<const0> ;
  assign m_axi_aruser[296] = \<const0> ;
  assign m_axi_aruser[295] = \<const0> ;
  assign m_axi_aruser[294] = \<const0> ;
  assign m_axi_aruser[293] = \<const0> ;
  assign m_axi_aruser[292] = \<const0> ;
  assign m_axi_aruser[291] = \<const0> ;
  assign m_axi_aruser[290] = \<const0> ;
  assign m_axi_aruser[289] = \<const0> ;
  assign m_axi_aruser[288] = \<const0> ;
  assign m_axi_aruser[287] = \<const0> ;
  assign m_axi_aruser[286] = \<const0> ;
  assign m_axi_aruser[285] = \<const0> ;
  assign m_axi_aruser[284] = \<const0> ;
  assign m_axi_aruser[283] = \<const0> ;
  assign m_axi_aruser[282] = \<const0> ;
  assign m_axi_aruser[281] = \<const0> ;
  assign m_axi_aruser[280] = \<const0> ;
  assign m_axi_aruser[279] = \<const0> ;
  assign m_axi_aruser[278] = \<const0> ;
  assign m_axi_aruser[277] = \<const0> ;
  assign m_axi_aruser[276] = \<const0> ;
  assign m_axi_aruser[275] = \<const0> ;
  assign m_axi_aruser[274] = \<const0> ;
  assign m_axi_aruser[273] = \<const0> ;
  assign m_axi_aruser[272] = \<const0> ;
  assign m_axi_aruser[271] = \<const0> ;
  assign m_axi_aruser[270] = \<const0> ;
  assign m_axi_aruser[269] = \<const0> ;
  assign m_axi_aruser[268] = \<const0> ;
  assign m_axi_aruser[267] = \<const0> ;
  assign m_axi_aruser[266] = \<const0> ;
  assign m_axi_aruser[265] = \<const0> ;
  assign m_axi_aruser[264] = \<const0> ;
  assign m_axi_aruser[263] = \<const0> ;
  assign m_axi_aruser[262] = \<const0> ;
  assign m_axi_aruser[261] = \<const0> ;
  assign m_axi_aruser[260] = \<const0> ;
  assign m_axi_aruser[259] = \<const0> ;
  assign m_axi_aruser[258] = \<const0> ;
  assign m_axi_aruser[257] = \<const0> ;
  assign m_axi_aruser[256] = \<const0> ;
  assign m_axi_aruser[255] = \<const0> ;
  assign m_axi_aruser[254] = \<const0> ;
  assign m_axi_aruser[253] = \<const0> ;
  assign m_axi_aruser[252] = \<const0> ;
  assign m_axi_aruser[251] = \<const0> ;
  assign m_axi_aruser[250] = \<const0> ;
  assign m_axi_aruser[249] = \<const0> ;
  assign m_axi_aruser[248] = \<const0> ;
  assign m_axi_aruser[247] = \<const0> ;
  assign m_axi_aruser[246] = \<const0> ;
  assign m_axi_aruser[245] = \<const0> ;
  assign m_axi_aruser[244] = \<const0> ;
  assign m_axi_aruser[243] = \<const0> ;
  assign m_axi_aruser[242] = \<const0> ;
  assign m_axi_aruser[241] = \<const0> ;
  assign m_axi_aruser[240] = \<const0> ;
  assign m_axi_aruser[239] = \<const0> ;
  assign m_axi_aruser[238] = \<const0> ;
  assign m_axi_aruser[237] = \<const0> ;
  assign m_axi_aruser[236] = \<const0> ;
  assign m_axi_aruser[235] = \<const0> ;
  assign m_axi_aruser[234] = \<const0> ;
  assign m_axi_aruser[233] = \<const0> ;
  assign m_axi_aruser[232] = \<const0> ;
  assign m_axi_aruser[231] = \<const0> ;
  assign m_axi_aruser[230] = \<const0> ;
  assign m_axi_aruser[229] = \<const0> ;
  assign m_axi_aruser[228] = \<const0> ;
  assign m_axi_aruser[227] = \<const0> ;
  assign m_axi_aruser[226] = \<const0> ;
  assign m_axi_aruser[225] = \<const0> ;
  assign m_axi_aruser[224] = \<const0> ;
  assign m_axi_aruser[223] = \<const0> ;
  assign m_axi_aruser[222] = \<const0> ;
  assign m_axi_aruser[221] = \<const0> ;
  assign m_axi_aruser[220] = \<const0> ;
  assign m_axi_aruser[219] = \<const0> ;
  assign m_axi_aruser[218] = \<const0> ;
  assign m_axi_aruser[217] = \<const0> ;
  assign m_axi_aruser[216] = \<const0> ;
  assign m_axi_aruser[215] = \<const0> ;
  assign m_axi_aruser[214] = \<const0> ;
  assign m_axi_aruser[213] = \<const0> ;
  assign m_axi_aruser[212] = \<const0> ;
  assign m_axi_aruser[211] = \<const0> ;
  assign m_axi_aruser[210] = \<const0> ;
  assign m_axi_aruser[209] = \<const0> ;
  assign m_axi_aruser[208] = \<const0> ;
  assign m_axi_aruser[207] = \<const0> ;
  assign m_axi_aruser[206] = \<const0> ;
  assign m_axi_aruser[205] = \<const0> ;
  assign m_axi_aruser[204] = \<const0> ;
  assign m_axi_aruser[203] = \<const0> ;
  assign m_axi_aruser[202] = \<const0> ;
  assign m_axi_aruser[201] = \<const0> ;
  assign m_axi_aruser[200] = \<const0> ;
  assign m_axi_aruser[199] = \<const0> ;
  assign m_axi_aruser[198] = \<const0> ;
  assign m_axi_aruser[197] = \<const0> ;
  assign m_axi_aruser[196] = \<const0> ;
  assign m_axi_aruser[195] = \<const0> ;
  assign m_axi_aruser[194] = \<const0> ;
  assign m_axi_aruser[193] = \<const0> ;
  assign m_axi_aruser[192] = \<const0> ;
  assign m_axi_aruser[191] = \<const0> ;
  assign m_axi_aruser[190] = \<const0> ;
  assign m_axi_aruser[189] = \<const0> ;
  assign m_axi_aruser[188] = \<const0> ;
  assign m_axi_aruser[187] = \<const0> ;
  assign m_axi_aruser[186] = \<const0> ;
  assign m_axi_aruser[185] = \<const0> ;
  assign m_axi_aruser[184] = \<const0> ;
  assign m_axi_aruser[183] = \<const0> ;
  assign m_axi_aruser[182] = \<const0> ;
  assign m_axi_aruser[181] = \<const0> ;
  assign m_axi_aruser[180] = \<const0> ;
  assign m_axi_aruser[179] = \<const0> ;
  assign m_axi_aruser[178] = \<const0> ;
  assign m_axi_aruser[177] = \<const0> ;
  assign m_axi_aruser[176] = \<const0> ;
  assign m_axi_aruser[175] = \<const0> ;
  assign m_axi_aruser[174] = \<const0> ;
  assign m_axi_aruser[173] = \<const0> ;
  assign m_axi_aruser[172] = \<const0> ;
  assign m_axi_aruser[171] = \<const0> ;
  assign m_axi_aruser[170] = \<const0> ;
  assign m_axi_aruser[169] = \<const0> ;
  assign m_axi_aruser[168] = \<const0> ;
  assign m_axi_aruser[167] = \<const0> ;
  assign m_axi_aruser[166] = \<const0> ;
  assign m_axi_aruser[165] = \<const0> ;
  assign m_axi_aruser[164] = \<const0> ;
  assign m_axi_aruser[163] = \<const0> ;
  assign m_axi_aruser[162] = \<const0> ;
  assign m_axi_aruser[161] = \<const0> ;
  assign m_axi_aruser[160] = \<const0> ;
  assign m_axi_aruser[159] = \<const0> ;
  assign m_axi_aruser[158] = \<const0> ;
  assign m_axi_aruser[157] = \<const0> ;
  assign m_axi_aruser[156] = \<const0> ;
  assign m_axi_aruser[155] = \<const0> ;
  assign m_axi_aruser[154] = \<const0> ;
  assign m_axi_aruser[153] = \<const0> ;
  assign m_axi_aruser[152] = \<const0> ;
  assign m_axi_aruser[151] = \<const0> ;
  assign m_axi_aruser[150] = \<const0> ;
  assign m_axi_aruser[149] = \<const0> ;
  assign m_axi_aruser[148] = \<const0> ;
  assign m_axi_aruser[147] = \<const0> ;
  assign m_axi_aruser[146] = \<const0> ;
  assign m_axi_aruser[145] = \<const0> ;
  assign m_axi_aruser[144] = \<const0> ;
  assign m_axi_aruser[143] = \<const0> ;
  assign m_axi_aruser[142] = \<const0> ;
  assign m_axi_aruser[141] = \<const0> ;
  assign m_axi_aruser[140] = \<const0> ;
  assign m_axi_aruser[139] = \<const0> ;
  assign m_axi_aruser[138] = \<const0> ;
  assign m_axi_aruser[137] = \<const0> ;
  assign m_axi_aruser[136] = \<const0> ;
  assign m_axi_aruser[135] = \<const0> ;
  assign m_axi_aruser[134] = \<const0> ;
  assign m_axi_aruser[133] = \<const0> ;
  assign m_axi_aruser[132] = \<const0> ;
  assign m_axi_aruser[131] = \<const0> ;
  assign m_axi_aruser[130] = \<const0> ;
  assign m_axi_aruser[129] = \<const0> ;
  assign m_axi_aruser[128] = \<const0> ;
  assign m_axi_aruser[127] = \<const0> ;
  assign m_axi_aruser[126] = \<const0> ;
  assign m_axi_aruser[125] = \<const0> ;
  assign m_axi_aruser[124] = \<const0> ;
  assign m_axi_aruser[123] = \<const0> ;
  assign m_axi_aruser[122] = \<const0> ;
  assign m_axi_aruser[121] = \<const0> ;
  assign m_axi_aruser[120] = \<const0> ;
  assign m_axi_aruser[119] = \<const0> ;
  assign m_axi_aruser[118] = \<const0> ;
  assign m_axi_aruser[117] = \<const0> ;
  assign m_axi_aruser[116] = \<const0> ;
  assign m_axi_aruser[115] = \<const0> ;
  assign m_axi_aruser[114] = \<const0> ;
  assign m_axi_aruser[113] = \<const0> ;
  assign m_axi_aruser[112] = \<const0> ;
  assign m_axi_aruser[111] = \<const0> ;
  assign m_axi_aruser[110] = \<const0> ;
  assign m_axi_aruser[109] = \<const0> ;
  assign m_axi_aruser[108] = \<const0> ;
  assign m_axi_aruser[107] = \<const0> ;
  assign m_axi_aruser[106] = \<const0> ;
  assign m_axi_aruser[105] = \<const0> ;
  assign m_axi_aruser[104] = \<const0> ;
  assign m_axi_aruser[103] = \<const0> ;
  assign m_axi_aruser[102] = \<const0> ;
  assign m_axi_aruser[101] = \<const0> ;
  assign m_axi_aruser[100] = \<const0> ;
  assign m_axi_aruser[99] = \<const0> ;
  assign m_axi_aruser[98] = \<const0> ;
  assign m_axi_aruser[97] = \<const0> ;
  assign m_axi_aruser[96] = \<const0> ;
  assign m_axi_aruser[95] = \<const0> ;
  assign m_axi_aruser[94] = \<const0> ;
  assign m_axi_aruser[93] = \<const0> ;
  assign m_axi_aruser[92] = \<const0> ;
  assign m_axi_aruser[91] = \<const0> ;
  assign m_axi_aruser[90] = \<const0> ;
  assign m_axi_aruser[89] = \<const0> ;
  assign m_axi_aruser[88] = \<const0> ;
  assign m_axi_aruser[87] = \<const0> ;
  assign m_axi_aruser[86] = \<const0> ;
  assign m_axi_aruser[85] = \<const0> ;
  assign m_axi_aruser[84] = \<const0> ;
  assign m_axi_aruser[83] = \<const0> ;
  assign m_axi_aruser[82] = \<const0> ;
  assign m_axi_aruser[81] = \<const0> ;
  assign m_axi_aruser[80] = \<const0> ;
  assign m_axi_aruser[79] = \<const0> ;
  assign m_axi_aruser[78] = \<const0> ;
  assign m_axi_aruser[77] = \<const0> ;
  assign m_axi_aruser[76] = \<const0> ;
  assign m_axi_aruser[75] = \<const0> ;
  assign m_axi_aruser[74] = \<const0> ;
  assign m_axi_aruser[73] = \<const0> ;
  assign m_axi_aruser[72] = \<const0> ;
  assign m_axi_aruser[71] = \<const0> ;
  assign m_axi_aruser[70] = \<const0> ;
  assign m_axi_aruser[69] = \<const0> ;
  assign m_axi_aruser[68] = \<const0> ;
  assign m_axi_aruser[67] = \<const0> ;
  assign m_axi_aruser[66] = \<const0> ;
  assign m_axi_aruser[65] = \<const0> ;
  assign m_axi_aruser[64] = \<const0> ;
  assign m_axi_aruser[63] = \<const0> ;
  assign m_axi_aruser[62] = \<const0> ;
  assign m_axi_aruser[61] = \<const0> ;
  assign m_axi_aruser[60] = \<const0> ;
  assign m_axi_aruser[59] = \<const0> ;
  assign m_axi_aruser[58] = \<const0> ;
  assign m_axi_aruser[57] = \<const0> ;
  assign m_axi_aruser[56] = \<const0> ;
  assign m_axi_aruser[55] = \<const0> ;
  assign m_axi_aruser[54] = \<const0> ;
  assign m_axi_aruser[53] = \<const0> ;
  assign m_axi_aruser[52] = \<const0> ;
  assign m_axi_aruser[51] = \<const0> ;
  assign m_axi_aruser[50] = \<const0> ;
  assign m_axi_aruser[49] = \<const0> ;
  assign m_axi_aruser[48] = \<const0> ;
  assign m_axi_aruser[47] = \<const0> ;
  assign m_axi_aruser[46] = \<const0> ;
  assign m_axi_aruser[45] = \<const0> ;
  assign m_axi_aruser[44] = \<const0> ;
  assign m_axi_aruser[43] = \<const0> ;
  assign m_axi_aruser[42] = \<const0> ;
  assign m_axi_aruser[41] = \<const0> ;
  assign m_axi_aruser[40] = \<const0> ;
  assign m_axi_aruser[39] = \<const0> ;
  assign m_axi_aruser[38] = \<const0> ;
  assign m_axi_aruser[37] = \<const0> ;
  assign m_axi_aruser[36] = \<const0> ;
  assign m_axi_aruser[35] = \<const0> ;
  assign m_axi_aruser[34] = \<const0> ;
  assign m_axi_aruser[33] = \<const0> ;
  assign m_axi_aruser[32] = \<const0> ;
  assign m_axi_aruser[31] = \<const0> ;
  assign m_axi_aruser[30] = \<const0> ;
  assign m_axi_aruser[29] = \<const0> ;
  assign m_axi_aruser[28] = \<const0> ;
  assign m_axi_aruser[27] = \<const0> ;
  assign m_axi_aruser[26] = \<const0> ;
  assign m_axi_aruser[25] = \<const0> ;
  assign m_axi_aruser[24] = \<const0> ;
  assign m_axi_aruser[23] = \<const0> ;
  assign m_axi_aruser[22] = \<const0> ;
  assign m_axi_aruser[21] = \<const0> ;
  assign m_axi_aruser[20] = \<const0> ;
  assign m_axi_aruser[19] = \<const0> ;
  assign m_axi_aruser[18] = \<const0> ;
  assign m_axi_aruser[17] = \<const0> ;
  assign m_axi_aruser[16] = \<const0> ;
  assign m_axi_aruser[15] = \<const0> ;
  assign m_axi_aruser[14] = \<const0> ;
  assign m_axi_aruser[13] = \<const0> ;
  assign m_axi_aruser[12] = \<const0> ;
  assign m_axi_aruser[11] = \<const0> ;
  assign m_axi_aruser[10] = \<const0> ;
  assign m_axi_aruser[9] = \<const0> ;
  assign m_axi_aruser[8] = \<const0> ;
  assign m_axi_aruser[7] = \<const0> ;
  assign m_axi_aruser[6] = \<const0> ;
  assign m_axi_aruser[5] = \<const0> ;
  assign m_axi_aruser[4] = \<const0> ;
  assign m_axi_aruser[3] = \<const0> ;
  assign m_axi_aruser[2] = \<const0> ;
  assign m_axi_aruser[1] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awuser[1023] = \<const0> ;
  assign m_axi_awuser[1022] = \<const0> ;
  assign m_axi_awuser[1021] = \<const0> ;
  assign m_axi_awuser[1020] = \<const0> ;
  assign m_axi_awuser[1019] = \<const0> ;
  assign m_axi_awuser[1018] = \<const0> ;
  assign m_axi_awuser[1017] = \<const0> ;
  assign m_axi_awuser[1016] = \<const0> ;
  assign m_axi_awuser[1015] = \<const0> ;
  assign m_axi_awuser[1014] = \<const0> ;
  assign m_axi_awuser[1013] = \<const0> ;
  assign m_axi_awuser[1012] = \<const0> ;
  assign m_axi_awuser[1011] = \<const0> ;
  assign m_axi_awuser[1010] = \<const0> ;
  assign m_axi_awuser[1009] = \<const0> ;
  assign m_axi_awuser[1008] = \<const0> ;
  assign m_axi_awuser[1007] = \<const0> ;
  assign m_axi_awuser[1006] = \<const0> ;
  assign m_axi_awuser[1005] = \<const0> ;
  assign m_axi_awuser[1004] = \<const0> ;
  assign m_axi_awuser[1003] = \<const0> ;
  assign m_axi_awuser[1002] = \<const0> ;
  assign m_axi_awuser[1001] = \<const0> ;
  assign m_axi_awuser[1000] = \<const0> ;
  assign m_axi_awuser[999] = \<const0> ;
  assign m_axi_awuser[998] = \<const0> ;
  assign m_axi_awuser[997] = \<const0> ;
  assign m_axi_awuser[996] = \<const0> ;
  assign m_axi_awuser[995] = \<const0> ;
  assign m_axi_awuser[994] = \<const0> ;
  assign m_axi_awuser[993] = \<const0> ;
  assign m_axi_awuser[992] = \<const0> ;
  assign m_axi_awuser[991] = \<const0> ;
  assign m_axi_awuser[990] = \<const0> ;
  assign m_axi_awuser[989] = \<const0> ;
  assign m_axi_awuser[988] = \<const0> ;
  assign m_axi_awuser[987] = \<const0> ;
  assign m_axi_awuser[986] = \<const0> ;
  assign m_axi_awuser[985] = \<const0> ;
  assign m_axi_awuser[984] = \<const0> ;
  assign m_axi_awuser[983] = \<const0> ;
  assign m_axi_awuser[982] = \<const0> ;
  assign m_axi_awuser[981] = \<const0> ;
  assign m_axi_awuser[980] = \<const0> ;
  assign m_axi_awuser[979] = \<const0> ;
  assign m_axi_awuser[978] = \<const0> ;
  assign m_axi_awuser[977] = \<const0> ;
  assign m_axi_awuser[976] = \<const0> ;
  assign m_axi_awuser[975] = \<const0> ;
  assign m_axi_awuser[974] = \<const0> ;
  assign m_axi_awuser[973] = \<const0> ;
  assign m_axi_awuser[972] = \<const0> ;
  assign m_axi_awuser[971] = \<const0> ;
  assign m_axi_awuser[970] = \<const0> ;
  assign m_axi_awuser[969] = \<const0> ;
  assign m_axi_awuser[968] = \<const0> ;
  assign m_axi_awuser[967] = \<const0> ;
  assign m_axi_awuser[966] = \<const0> ;
  assign m_axi_awuser[965] = \<const0> ;
  assign m_axi_awuser[964] = \<const0> ;
  assign m_axi_awuser[963] = \<const0> ;
  assign m_axi_awuser[962] = \<const0> ;
  assign m_axi_awuser[961] = \<const0> ;
  assign m_axi_awuser[960] = \<const0> ;
  assign m_axi_awuser[959] = \<const0> ;
  assign m_axi_awuser[958] = \<const0> ;
  assign m_axi_awuser[957] = \<const0> ;
  assign m_axi_awuser[956] = \<const0> ;
  assign m_axi_awuser[955] = \<const0> ;
  assign m_axi_awuser[954] = \<const0> ;
  assign m_axi_awuser[953] = \<const0> ;
  assign m_axi_awuser[952] = \<const0> ;
  assign m_axi_awuser[951] = \<const0> ;
  assign m_axi_awuser[950] = \<const0> ;
  assign m_axi_awuser[949] = \<const0> ;
  assign m_axi_awuser[948] = \<const0> ;
  assign m_axi_awuser[947] = \<const0> ;
  assign m_axi_awuser[946] = \<const0> ;
  assign m_axi_awuser[945] = \<const0> ;
  assign m_axi_awuser[944] = \<const0> ;
  assign m_axi_awuser[943] = \<const0> ;
  assign m_axi_awuser[942] = \<const0> ;
  assign m_axi_awuser[941] = \<const0> ;
  assign m_axi_awuser[940] = \<const0> ;
  assign m_axi_awuser[939] = \<const0> ;
  assign m_axi_awuser[938] = \<const0> ;
  assign m_axi_awuser[937] = \<const0> ;
  assign m_axi_awuser[936] = \<const0> ;
  assign m_axi_awuser[935] = \<const0> ;
  assign m_axi_awuser[934] = \<const0> ;
  assign m_axi_awuser[933] = \<const0> ;
  assign m_axi_awuser[932] = \<const0> ;
  assign m_axi_awuser[931] = \<const0> ;
  assign m_axi_awuser[930] = \<const0> ;
  assign m_axi_awuser[929] = \<const0> ;
  assign m_axi_awuser[928] = \<const0> ;
  assign m_axi_awuser[927] = \<const0> ;
  assign m_axi_awuser[926] = \<const0> ;
  assign m_axi_awuser[925] = \<const0> ;
  assign m_axi_awuser[924] = \<const0> ;
  assign m_axi_awuser[923] = \<const0> ;
  assign m_axi_awuser[922] = \<const0> ;
  assign m_axi_awuser[921] = \<const0> ;
  assign m_axi_awuser[920] = \<const0> ;
  assign m_axi_awuser[919] = \<const0> ;
  assign m_axi_awuser[918] = \<const0> ;
  assign m_axi_awuser[917] = \<const0> ;
  assign m_axi_awuser[916] = \<const0> ;
  assign m_axi_awuser[915] = \<const0> ;
  assign m_axi_awuser[914] = \<const0> ;
  assign m_axi_awuser[913] = \<const0> ;
  assign m_axi_awuser[912] = \<const0> ;
  assign m_axi_awuser[911] = \<const0> ;
  assign m_axi_awuser[910] = \<const0> ;
  assign m_axi_awuser[909] = \<const0> ;
  assign m_axi_awuser[908] = \<const0> ;
  assign m_axi_awuser[907] = \<const0> ;
  assign m_axi_awuser[906] = \<const0> ;
  assign m_axi_awuser[905] = \<const0> ;
  assign m_axi_awuser[904] = \<const0> ;
  assign m_axi_awuser[903] = \<const0> ;
  assign m_axi_awuser[902] = \<const0> ;
  assign m_axi_awuser[901] = \<const0> ;
  assign m_axi_awuser[900] = \<const0> ;
  assign m_axi_awuser[899] = \<const0> ;
  assign m_axi_awuser[898] = \<const0> ;
  assign m_axi_awuser[897] = \<const0> ;
  assign m_axi_awuser[896] = \<const0> ;
  assign m_axi_awuser[895] = \<const0> ;
  assign m_axi_awuser[894] = \<const0> ;
  assign m_axi_awuser[893] = \<const0> ;
  assign m_axi_awuser[892] = \<const0> ;
  assign m_axi_awuser[891] = \<const0> ;
  assign m_axi_awuser[890] = \<const0> ;
  assign m_axi_awuser[889] = \<const0> ;
  assign m_axi_awuser[888] = \<const0> ;
  assign m_axi_awuser[887] = \<const0> ;
  assign m_axi_awuser[886] = \<const0> ;
  assign m_axi_awuser[885] = \<const0> ;
  assign m_axi_awuser[884] = \<const0> ;
  assign m_axi_awuser[883] = \<const0> ;
  assign m_axi_awuser[882] = \<const0> ;
  assign m_axi_awuser[881] = \<const0> ;
  assign m_axi_awuser[880] = \<const0> ;
  assign m_axi_awuser[879] = \<const0> ;
  assign m_axi_awuser[878] = \<const0> ;
  assign m_axi_awuser[877] = \<const0> ;
  assign m_axi_awuser[876] = \<const0> ;
  assign m_axi_awuser[875] = \<const0> ;
  assign m_axi_awuser[874] = \<const0> ;
  assign m_axi_awuser[873] = \<const0> ;
  assign m_axi_awuser[872] = \<const0> ;
  assign m_axi_awuser[871] = \<const0> ;
  assign m_axi_awuser[870] = \<const0> ;
  assign m_axi_awuser[869] = \<const0> ;
  assign m_axi_awuser[868] = \<const0> ;
  assign m_axi_awuser[867] = \<const0> ;
  assign m_axi_awuser[866] = \<const0> ;
  assign m_axi_awuser[865] = \<const0> ;
  assign m_axi_awuser[864] = \<const0> ;
  assign m_axi_awuser[863] = \<const0> ;
  assign m_axi_awuser[862] = \<const0> ;
  assign m_axi_awuser[861] = \<const0> ;
  assign m_axi_awuser[860] = \<const0> ;
  assign m_axi_awuser[859] = \<const0> ;
  assign m_axi_awuser[858] = \<const0> ;
  assign m_axi_awuser[857] = \<const0> ;
  assign m_axi_awuser[856] = \<const0> ;
  assign m_axi_awuser[855] = \<const0> ;
  assign m_axi_awuser[854] = \<const0> ;
  assign m_axi_awuser[853] = \<const0> ;
  assign m_axi_awuser[852] = \<const0> ;
  assign m_axi_awuser[851] = \<const0> ;
  assign m_axi_awuser[850] = \<const0> ;
  assign m_axi_awuser[849] = \<const0> ;
  assign m_axi_awuser[848] = \<const0> ;
  assign m_axi_awuser[847] = \<const0> ;
  assign m_axi_awuser[846] = \<const0> ;
  assign m_axi_awuser[845] = \<const0> ;
  assign m_axi_awuser[844] = \<const0> ;
  assign m_axi_awuser[843] = \<const0> ;
  assign m_axi_awuser[842] = \<const0> ;
  assign m_axi_awuser[841] = \<const0> ;
  assign m_axi_awuser[840] = \<const0> ;
  assign m_axi_awuser[839] = \<const0> ;
  assign m_axi_awuser[838] = \<const0> ;
  assign m_axi_awuser[837] = \<const0> ;
  assign m_axi_awuser[836] = \<const0> ;
  assign m_axi_awuser[835] = \<const0> ;
  assign m_axi_awuser[834] = \<const0> ;
  assign m_axi_awuser[833] = \<const0> ;
  assign m_axi_awuser[832] = \<const0> ;
  assign m_axi_awuser[831] = \<const0> ;
  assign m_axi_awuser[830] = \<const0> ;
  assign m_axi_awuser[829] = \<const0> ;
  assign m_axi_awuser[828] = \<const0> ;
  assign m_axi_awuser[827] = \<const0> ;
  assign m_axi_awuser[826] = \<const0> ;
  assign m_axi_awuser[825] = \<const0> ;
  assign m_axi_awuser[824] = \<const0> ;
  assign m_axi_awuser[823] = \<const0> ;
  assign m_axi_awuser[822] = \<const0> ;
  assign m_axi_awuser[821] = \<const0> ;
  assign m_axi_awuser[820] = \<const0> ;
  assign m_axi_awuser[819] = \<const0> ;
  assign m_axi_awuser[818] = \<const0> ;
  assign m_axi_awuser[817] = \<const0> ;
  assign m_axi_awuser[816] = \<const0> ;
  assign m_axi_awuser[815] = \<const0> ;
  assign m_axi_awuser[814] = \<const0> ;
  assign m_axi_awuser[813] = \<const0> ;
  assign m_axi_awuser[812] = \<const0> ;
  assign m_axi_awuser[811] = \<const0> ;
  assign m_axi_awuser[810] = \<const0> ;
  assign m_axi_awuser[809] = \<const0> ;
  assign m_axi_awuser[808] = \<const0> ;
  assign m_axi_awuser[807] = \<const0> ;
  assign m_axi_awuser[806] = \<const0> ;
  assign m_axi_awuser[805] = \<const0> ;
  assign m_axi_awuser[804] = \<const0> ;
  assign m_axi_awuser[803] = \<const0> ;
  assign m_axi_awuser[802] = \<const0> ;
  assign m_axi_awuser[801] = \<const0> ;
  assign m_axi_awuser[800] = \<const0> ;
  assign m_axi_awuser[799] = \<const0> ;
  assign m_axi_awuser[798] = \<const0> ;
  assign m_axi_awuser[797] = \<const0> ;
  assign m_axi_awuser[796] = \<const0> ;
  assign m_axi_awuser[795] = \<const0> ;
  assign m_axi_awuser[794] = \<const0> ;
  assign m_axi_awuser[793] = \<const0> ;
  assign m_axi_awuser[792] = \<const0> ;
  assign m_axi_awuser[791] = \<const0> ;
  assign m_axi_awuser[790] = \<const0> ;
  assign m_axi_awuser[789] = \<const0> ;
  assign m_axi_awuser[788] = \<const0> ;
  assign m_axi_awuser[787] = \<const0> ;
  assign m_axi_awuser[786] = \<const0> ;
  assign m_axi_awuser[785] = \<const0> ;
  assign m_axi_awuser[784] = \<const0> ;
  assign m_axi_awuser[783] = \<const0> ;
  assign m_axi_awuser[782] = \<const0> ;
  assign m_axi_awuser[781] = \<const0> ;
  assign m_axi_awuser[780] = \<const0> ;
  assign m_axi_awuser[779] = \<const0> ;
  assign m_axi_awuser[778] = \<const0> ;
  assign m_axi_awuser[777] = \<const0> ;
  assign m_axi_awuser[776] = \<const0> ;
  assign m_axi_awuser[775] = \<const0> ;
  assign m_axi_awuser[774] = \<const0> ;
  assign m_axi_awuser[773] = \<const0> ;
  assign m_axi_awuser[772] = \<const0> ;
  assign m_axi_awuser[771] = \<const0> ;
  assign m_axi_awuser[770] = \<const0> ;
  assign m_axi_awuser[769] = \<const0> ;
  assign m_axi_awuser[768] = \<const0> ;
  assign m_axi_awuser[767] = \<const0> ;
  assign m_axi_awuser[766] = \<const0> ;
  assign m_axi_awuser[765] = \<const0> ;
  assign m_axi_awuser[764] = \<const0> ;
  assign m_axi_awuser[763] = \<const0> ;
  assign m_axi_awuser[762] = \<const0> ;
  assign m_axi_awuser[761] = \<const0> ;
  assign m_axi_awuser[760] = \<const0> ;
  assign m_axi_awuser[759] = \<const0> ;
  assign m_axi_awuser[758] = \<const0> ;
  assign m_axi_awuser[757] = \<const0> ;
  assign m_axi_awuser[756] = \<const0> ;
  assign m_axi_awuser[755] = \<const0> ;
  assign m_axi_awuser[754] = \<const0> ;
  assign m_axi_awuser[753] = \<const0> ;
  assign m_axi_awuser[752] = \<const0> ;
  assign m_axi_awuser[751] = \<const0> ;
  assign m_axi_awuser[750] = \<const0> ;
  assign m_axi_awuser[749] = \<const0> ;
  assign m_axi_awuser[748] = \<const0> ;
  assign m_axi_awuser[747] = \<const0> ;
  assign m_axi_awuser[746] = \<const0> ;
  assign m_axi_awuser[745] = \<const0> ;
  assign m_axi_awuser[744] = \<const0> ;
  assign m_axi_awuser[743] = \<const0> ;
  assign m_axi_awuser[742] = \<const0> ;
  assign m_axi_awuser[741] = \<const0> ;
  assign m_axi_awuser[740] = \<const0> ;
  assign m_axi_awuser[739] = \<const0> ;
  assign m_axi_awuser[738] = \<const0> ;
  assign m_axi_awuser[737] = \<const0> ;
  assign m_axi_awuser[736] = \<const0> ;
  assign m_axi_awuser[735] = \<const0> ;
  assign m_axi_awuser[734] = \<const0> ;
  assign m_axi_awuser[733] = \<const0> ;
  assign m_axi_awuser[732] = \<const0> ;
  assign m_axi_awuser[731] = \<const0> ;
  assign m_axi_awuser[730] = \<const0> ;
  assign m_axi_awuser[729] = \<const0> ;
  assign m_axi_awuser[728] = \<const0> ;
  assign m_axi_awuser[727] = \<const0> ;
  assign m_axi_awuser[726] = \<const0> ;
  assign m_axi_awuser[725] = \<const0> ;
  assign m_axi_awuser[724] = \<const0> ;
  assign m_axi_awuser[723] = \<const0> ;
  assign m_axi_awuser[722] = \<const0> ;
  assign m_axi_awuser[721] = \<const0> ;
  assign m_axi_awuser[720] = \<const0> ;
  assign m_axi_awuser[719] = \<const0> ;
  assign m_axi_awuser[718] = \<const0> ;
  assign m_axi_awuser[717] = \<const0> ;
  assign m_axi_awuser[716] = \<const0> ;
  assign m_axi_awuser[715] = \<const0> ;
  assign m_axi_awuser[714] = \<const0> ;
  assign m_axi_awuser[713] = \<const0> ;
  assign m_axi_awuser[712] = \<const0> ;
  assign m_axi_awuser[711] = \<const0> ;
  assign m_axi_awuser[710] = \<const0> ;
  assign m_axi_awuser[709] = \<const0> ;
  assign m_axi_awuser[708] = \<const0> ;
  assign m_axi_awuser[707] = \<const0> ;
  assign m_axi_awuser[706] = \<const0> ;
  assign m_axi_awuser[705] = \<const0> ;
  assign m_axi_awuser[704] = \<const0> ;
  assign m_axi_awuser[703] = \<const0> ;
  assign m_axi_awuser[702] = \<const0> ;
  assign m_axi_awuser[701] = \<const0> ;
  assign m_axi_awuser[700] = \<const0> ;
  assign m_axi_awuser[699] = \<const0> ;
  assign m_axi_awuser[698] = \<const0> ;
  assign m_axi_awuser[697] = \<const0> ;
  assign m_axi_awuser[696] = \<const0> ;
  assign m_axi_awuser[695] = \<const0> ;
  assign m_axi_awuser[694] = \<const0> ;
  assign m_axi_awuser[693] = \<const0> ;
  assign m_axi_awuser[692] = \<const0> ;
  assign m_axi_awuser[691] = \<const0> ;
  assign m_axi_awuser[690] = \<const0> ;
  assign m_axi_awuser[689] = \<const0> ;
  assign m_axi_awuser[688] = \<const0> ;
  assign m_axi_awuser[687] = \<const0> ;
  assign m_axi_awuser[686] = \<const0> ;
  assign m_axi_awuser[685] = \<const0> ;
  assign m_axi_awuser[684] = \<const0> ;
  assign m_axi_awuser[683] = \<const0> ;
  assign m_axi_awuser[682] = \<const0> ;
  assign m_axi_awuser[681] = \<const0> ;
  assign m_axi_awuser[680] = \<const0> ;
  assign m_axi_awuser[679] = \<const0> ;
  assign m_axi_awuser[678] = \<const0> ;
  assign m_axi_awuser[677] = \<const0> ;
  assign m_axi_awuser[676] = \<const0> ;
  assign m_axi_awuser[675] = \<const0> ;
  assign m_axi_awuser[674] = \<const0> ;
  assign m_axi_awuser[673] = \<const0> ;
  assign m_axi_awuser[672] = \<const0> ;
  assign m_axi_awuser[671] = \<const0> ;
  assign m_axi_awuser[670] = \<const0> ;
  assign m_axi_awuser[669] = \<const0> ;
  assign m_axi_awuser[668] = \<const0> ;
  assign m_axi_awuser[667] = \<const0> ;
  assign m_axi_awuser[666] = \<const0> ;
  assign m_axi_awuser[665] = \<const0> ;
  assign m_axi_awuser[664] = \<const0> ;
  assign m_axi_awuser[663] = \<const0> ;
  assign m_axi_awuser[662] = \<const0> ;
  assign m_axi_awuser[661] = \<const0> ;
  assign m_axi_awuser[660] = \<const0> ;
  assign m_axi_awuser[659] = \<const0> ;
  assign m_axi_awuser[658] = \<const0> ;
  assign m_axi_awuser[657] = \<const0> ;
  assign m_axi_awuser[656] = \<const0> ;
  assign m_axi_awuser[655] = \<const0> ;
  assign m_axi_awuser[654] = \<const0> ;
  assign m_axi_awuser[653] = \<const0> ;
  assign m_axi_awuser[652] = \<const0> ;
  assign m_axi_awuser[651] = \<const0> ;
  assign m_axi_awuser[650] = \<const0> ;
  assign m_axi_awuser[649] = \<const0> ;
  assign m_axi_awuser[648] = \<const0> ;
  assign m_axi_awuser[647] = \<const0> ;
  assign m_axi_awuser[646] = \<const0> ;
  assign m_axi_awuser[645] = \<const0> ;
  assign m_axi_awuser[644] = \<const0> ;
  assign m_axi_awuser[643] = \<const0> ;
  assign m_axi_awuser[642] = \<const0> ;
  assign m_axi_awuser[641] = \<const0> ;
  assign m_axi_awuser[640] = \<const0> ;
  assign m_axi_awuser[639] = \<const0> ;
  assign m_axi_awuser[638] = \<const0> ;
  assign m_axi_awuser[637] = \<const0> ;
  assign m_axi_awuser[636] = \<const0> ;
  assign m_axi_awuser[635] = \<const0> ;
  assign m_axi_awuser[634] = \<const0> ;
  assign m_axi_awuser[633] = \<const0> ;
  assign m_axi_awuser[632] = \<const0> ;
  assign m_axi_awuser[631] = \<const0> ;
  assign m_axi_awuser[630] = \<const0> ;
  assign m_axi_awuser[629] = \<const0> ;
  assign m_axi_awuser[628] = \<const0> ;
  assign m_axi_awuser[627] = \<const0> ;
  assign m_axi_awuser[626] = \<const0> ;
  assign m_axi_awuser[625] = \<const0> ;
  assign m_axi_awuser[624] = \<const0> ;
  assign m_axi_awuser[623] = \<const0> ;
  assign m_axi_awuser[622] = \<const0> ;
  assign m_axi_awuser[621] = \<const0> ;
  assign m_axi_awuser[620] = \<const0> ;
  assign m_axi_awuser[619] = \<const0> ;
  assign m_axi_awuser[618] = \<const0> ;
  assign m_axi_awuser[617] = \<const0> ;
  assign m_axi_awuser[616] = \<const0> ;
  assign m_axi_awuser[615] = \<const0> ;
  assign m_axi_awuser[614] = \<const0> ;
  assign m_axi_awuser[613] = \<const0> ;
  assign m_axi_awuser[612] = \<const0> ;
  assign m_axi_awuser[611] = \<const0> ;
  assign m_axi_awuser[610] = \<const0> ;
  assign m_axi_awuser[609] = \<const0> ;
  assign m_axi_awuser[608] = \<const0> ;
  assign m_axi_awuser[607] = \<const0> ;
  assign m_axi_awuser[606] = \<const0> ;
  assign m_axi_awuser[605] = \<const0> ;
  assign m_axi_awuser[604] = \<const0> ;
  assign m_axi_awuser[603] = \<const0> ;
  assign m_axi_awuser[602] = \<const0> ;
  assign m_axi_awuser[601] = \<const0> ;
  assign m_axi_awuser[600] = \<const0> ;
  assign m_axi_awuser[599] = \<const0> ;
  assign m_axi_awuser[598] = \<const0> ;
  assign m_axi_awuser[597] = \<const0> ;
  assign m_axi_awuser[596] = \<const0> ;
  assign m_axi_awuser[595] = \<const0> ;
  assign m_axi_awuser[594] = \<const0> ;
  assign m_axi_awuser[593] = \<const0> ;
  assign m_axi_awuser[592] = \<const0> ;
  assign m_axi_awuser[591] = \<const0> ;
  assign m_axi_awuser[590] = \<const0> ;
  assign m_axi_awuser[589] = \<const0> ;
  assign m_axi_awuser[588] = \<const0> ;
  assign m_axi_awuser[587] = \<const0> ;
  assign m_axi_awuser[586] = \<const0> ;
  assign m_axi_awuser[585] = \<const0> ;
  assign m_axi_awuser[584] = \<const0> ;
  assign m_axi_awuser[583] = \<const0> ;
  assign m_axi_awuser[582] = \<const0> ;
  assign m_axi_awuser[581] = \<const0> ;
  assign m_axi_awuser[580] = \<const0> ;
  assign m_axi_awuser[579] = \<const0> ;
  assign m_axi_awuser[578] = \<const0> ;
  assign m_axi_awuser[577] = \<const0> ;
  assign m_axi_awuser[576] = \<const0> ;
  assign m_axi_awuser[575] = \<const0> ;
  assign m_axi_awuser[574] = \<const0> ;
  assign m_axi_awuser[573] = \<const0> ;
  assign m_axi_awuser[572] = \<const0> ;
  assign m_axi_awuser[571] = \<const0> ;
  assign m_axi_awuser[570] = \<const0> ;
  assign m_axi_awuser[569] = \<const0> ;
  assign m_axi_awuser[568] = \<const0> ;
  assign m_axi_awuser[567] = \<const0> ;
  assign m_axi_awuser[566] = \<const0> ;
  assign m_axi_awuser[565] = \<const0> ;
  assign m_axi_awuser[564] = \<const0> ;
  assign m_axi_awuser[563] = \<const0> ;
  assign m_axi_awuser[562] = \<const0> ;
  assign m_axi_awuser[561] = \<const0> ;
  assign m_axi_awuser[560] = \<const0> ;
  assign m_axi_awuser[559] = \<const0> ;
  assign m_axi_awuser[558] = \<const0> ;
  assign m_axi_awuser[557] = \<const0> ;
  assign m_axi_awuser[556] = \<const0> ;
  assign m_axi_awuser[555] = \<const0> ;
  assign m_axi_awuser[554] = \<const0> ;
  assign m_axi_awuser[553] = \<const0> ;
  assign m_axi_awuser[552] = \<const0> ;
  assign m_axi_awuser[551] = \<const0> ;
  assign m_axi_awuser[550] = \<const0> ;
  assign m_axi_awuser[549] = \<const0> ;
  assign m_axi_awuser[548] = \<const0> ;
  assign m_axi_awuser[547] = \<const0> ;
  assign m_axi_awuser[546] = \<const0> ;
  assign m_axi_awuser[545] = \<const0> ;
  assign m_axi_awuser[544] = \<const0> ;
  assign m_axi_awuser[543] = \<const0> ;
  assign m_axi_awuser[542] = \<const0> ;
  assign m_axi_awuser[541] = \<const0> ;
  assign m_axi_awuser[540] = \<const0> ;
  assign m_axi_awuser[539] = \<const0> ;
  assign m_axi_awuser[538] = \<const0> ;
  assign m_axi_awuser[537] = \<const0> ;
  assign m_axi_awuser[536] = \<const0> ;
  assign m_axi_awuser[535] = \<const0> ;
  assign m_axi_awuser[534] = \<const0> ;
  assign m_axi_awuser[533] = \<const0> ;
  assign m_axi_awuser[532] = \<const0> ;
  assign m_axi_awuser[531] = \<const0> ;
  assign m_axi_awuser[530] = \<const0> ;
  assign m_axi_awuser[529] = \<const0> ;
  assign m_axi_awuser[528] = \<const0> ;
  assign m_axi_awuser[527] = \<const0> ;
  assign m_axi_awuser[526] = \<const0> ;
  assign m_axi_awuser[525] = \<const0> ;
  assign m_axi_awuser[524] = \<const0> ;
  assign m_axi_awuser[523] = \<const0> ;
  assign m_axi_awuser[522] = \<const0> ;
  assign m_axi_awuser[521] = \<const0> ;
  assign m_axi_awuser[520] = \<const0> ;
  assign m_axi_awuser[519] = \<const0> ;
  assign m_axi_awuser[518] = \<const0> ;
  assign m_axi_awuser[517] = \<const0> ;
  assign m_axi_awuser[516] = \<const0> ;
  assign m_axi_awuser[515] = \<const0> ;
  assign m_axi_awuser[514] = \<const0> ;
  assign m_axi_awuser[513] = \<const0> ;
  assign m_axi_awuser[512] = \<const0> ;
  assign m_axi_awuser[511] = \<const0> ;
  assign m_axi_awuser[510] = \<const0> ;
  assign m_axi_awuser[509] = \<const0> ;
  assign m_axi_awuser[508] = \<const0> ;
  assign m_axi_awuser[507] = \<const0> ;
  assign m_axi_awuser[506] = \<const0> ;
  assign m_axi_awuser[505] = \<const0> ;
  assign m_axi_awuser[504] = \<const0> ;
  assign m_axi_awuser[503] = \<const0> ;
  assign m_axi_awuser[502] = \<const0> ;
  assign m_axi_awuser[501] = \<const0> ;
  assign m_axi_awuser[500] = \<const0> ;
  assign m_axi_awuser[499] = \<const0> ;
  assign m_axi_awuser[498] = \<const0> ;
  assign m_axi_awuser[497] = \<const0> ;
  assign m_axi_awuser[496] = \<const0> ;
  assign m_axi_awuser[495] = \<const0> ;
  assign m_axi_awuser[494] = \<const0> ;
  assign m_axi_awuser[493] = \<const0> ;
  assign m_axi_awuser[492] = \<const0> ;
  assign m_axi_awuser[491] = \<const0> ;
  assign m_axi_awuser[490] = \<const0> ;
  assign m_axi_awuser[489] = \<const0> ;
  assign m_axi_awuser[488] = \<const0> ;
  assign m_axi_awuser[487] = \<const0> ;
  assign m_axi_awuser[486] = \<const0> ;
  assign m_axi_awuser[485] = \<const0> ;
  assign m_axi_awuser[484] = \<const0> ;
  assign m_axi_awuser[483] = \<const0> ;
  assign m_axi_awuser[482] = \<const0> ;
  assign m_axi_awuser[481] = \<const0> ;
  assign m_axi_awuser[480] = \<const0> ;
  assign m_axi_awuser[479] = \<const0> ;
  assign m_axi_awuser[478] = \<const0> ;
  assign m_axi_awuser[477] = \<const0> ;
  assign m_axi_awuser[476] = \<const0> ;
  assign m_axi_awuser[475] = \<const0> ;
  assign m_axi_awuser[474] = \<const0> ;
  assign m_axi_awuser[473] = \<const0> ;
  assign m_axi_awuser[472] = \<const0> ;
  assign m_axi_awuser[471] = \<const0> ;
  assign m_axi_awuser[470] = \<const0> ;
  assign m_axi_awuser[469] = \<const0> ;
  assign m_axi_awuser[468] = \<const0> ;
  assign m_axi_awuser[467] = \<const0> ;
  assign m_axi_awuser[466] = \<const0> ;
  assign m_axi_awuser[465] = \<const0> ;
  assign m_axi_awuser[464] = \<const0> ;
  assign m_axi_awuser[463] = \<const0> ;
  assign m_axi_awuser[462] = \<const0> ;
  assign m_axi_awuser[461] = \<const0> ;
  assign m_axi_awuser[460] = \<const0> ;
  assign m_axi_awuser[459] = \<const0> ;
  assign m_axi_awuser[458] = \<const0> ;
  assign m_axi_awuser[457] = \<const0> ;
  assign m_axi_awuser[456] = \<const0> ;
  assign m_axi_awuser[455] = \<const0> ;
  assign m_axi_awuser[454] = \<const0> ;
  assign m_axi_awuser[453] = \<const0> ;
  assign m_axi_awuser[452] = \<const0> ;
  assign m_axi_awuser[451] = \<const0> ;
  assign m_axi_awuser[450] = \<const0> ;
  assign m_axi_awuser[449] = \<const0> ;
  assign m_axi_awuser[448] = \<const0> ;
  assign m_axi_awuser[447] = \<const0> ;
  assign m_axi_awuser[446] = \<const0> ;
  assign m_axi_awuser[445] = \<const0> ;
  assign m_axi_awuser[444] = \<const0> ;
  assign m_axi_awuser[443] = \<const0> ;
  assign m_axi_awuser[442] = \<const0> ;
  assign m_axi_awuser[441] = \<const0> ;
  assign m_axi_awuser[440] = \<const0> ;
  assign m_axi_awuser[439] = \<const0> ;
  assign m_axi_awuser[438] = \<const0> ;
  assign m_axi_awuser[437] = \<const0> ;
  assign m_axi_awuser[436] = \<const0> ;
  assign m_axi_awuser[435] = \<const0> ;
  assign m_axi_awuser[434] = \<const0> ;
  assign m_axi_awuser[433] = \<const0> ;
  assign m_axi_awuser[432] = \<const0> ;
  assign m_axi_awuser[431] = \<const0> ;
  assign m_axi_awuser[430] = \<const0> ;
  assign m_axi_awuser[429] = \<const0> ;
  assign m_axi_awuser[428] = \<const0> ;
  assign m_axi_awuser[427] = \<const0> ;
  assign m_axi_awuser[426] = \<const0> ;
  assign m_axi_awuser[425] = \<const0> ;
  assign m_axi_awuser[424] = \<const0> ;
  assign m_axi_awuser[423] = \<const0> ;
  assign m_axi_awuser[422] = \<const0> ;
  assign m_axi_awuser[421] = \<const0> ;
  assign m_axi_awuser[420] = \<const0> ;
  assign m_axi_awuser[419] = \<const0> ;
  assign m_axi_awuser[418] = \<const0> ;
  assign m_axi_awuser[417] = \<const0> ;
  assign m_axi_awuser[416] = \<const0> ;
  assign m_axi_awuser[415] = \<const0> ;
  assign m_axi_awuser[414] = \<const0> ;
  assign m_axi_awuser[413] = \<const0> ;
  assign m_axi_awuser[412] = \<const0> ;
  assign m_axi_awuser[411] = \<const0> ;
  assign m_axi_awuser[410] = \<const0> ;
  assign m_axi_awuser[409] = \<const0> ;
  assign m_axi_awuser[408] = \<const0> ;
  assign m_axi_awuser[407] = \<const0> ;
  assign m_axi_awuser[406] = \<const0> ;
  assign m_axi_awuser[405] = \<const0> ;
  assign m_axi_awuser[404] = \<const0> ;
  assign m_axi_awuser[403] = \<const0> ;
  assign m_axi_awuser[402] = \<const0> ;
  assign m_axi_awuser[401] = \<const0> ;
  assign m_axi_awuser[400] = \<const0> ;
  assign m_axi_awuser[399] = \<const0> ;
  assign m_axi_awuser[398] = \<const0> ;
  assign m_axi_awuser[397] = \<const0> ;
  assign m_axi_awuser[396] = \<const0> ;
  assign m_axi_awuser[395] = \<const0> ;
  assign m_axi_awuser[394] = \<const0> ;
  assign m_axi_awuser[393] = \<const0> ;
  assign m_axi_awuser[392] = \<const0> ;
  assign m_axi_awuser[391] = \<const0> ;
  assign m_axi_awuser[390] = \<const0> ;
  assign m_axi_awuser[389] = \<const0> ;
  assign m_axi_awuser[388] = \<const0> ;
  assign m_axi_awuser[387] = \<const0> ;
  assign m_axi_awuser[386] = \<const0> ;
  assign m_axi_awuser[385] = \<const0> ;
  assign m_axi_awuser[384] = \<const0> ;
  assign m_axi_awuser[383] = \<const0> ;
  assign m_axi_awuser[382] = \<const0> ;
  assign m_axi_awuser[381] = \<const0> ;
  assign m_axi_awuser[380] = \<const0> ;
  assign m_axi_awuser[379] = \<const0> ;
  assign m_axi_awuser[378] = \<const0> ;
  assign m_axi_awuser[377] = \<const0> ;
  assign m_axi_awuser[376] = \<const0> ;
  assign m_axi_awuser[375] = \<const0> ;
  assign m_axi_awuser[374] = \<const0> ;
  assign m_axi_awuser[373] = \<const0> ;
  assign m_axi_awuser[372] = \<const0> ;
  assign m_axi_awuser[371] = \<const0> ;
  assign m_axi_awuser[370] = \<const0> ;
  assign m_axi_awuser[369] = \<const0> ;
  assign m_axi_awuser[368] = \<const0> ;
  assign m_axi_awuser[367] = \<const0> ;
  assign m_axi_awuser[366] = \<const0> ;
  assign m_axi_awuser[365] = \<const0> ;
  assign m_axi_awuser[364] = \<const0> ;
  assign m_axi_awuser[363] = \<const0> ;
  assign m_axi_awuser[362] = \<const0> ;
  assign m_axi_awuser[361] = \<const0> ;
  assign m_axi_awuser[360] = \<const0> ;
  assign m_axi_awuser[359] = \<const0> ;
  assign m_axi_awuser[358] = \<const0> ;
  assign m_axi_awuser[357] = \<const0> ;
  assign m_axi_awuser[356] = \<const0> ;
  assign m_axi_awuser[355] = \<const0> ;
  assign m_axi_awuser[354] = \<const0> ;
  assign m_axi_awuser[353] = \<const0> ;
  assign m_axi_awuser[352] = \<const0> ;
  assign m_axi_awuser[351] = \<const0> ;
  assign m_axi_awuser[350] = \<const0> ;
  assign m_axi_awuser[349] = \<const0> ;
  assign m_axi_awuser[348] = \<const0> ;
  assign m_axi_awuser[347] = \<const0> ;
  assign m_axi_awuser[346] = \<const0> ;
  assign m_axi_awuser[345] = \<const0> ;
  assign m_axi_awuser[344] = \<const0> ;
  assign m_axi_awuser[343] = \<const0> ;
  assign m_axi_awuser[342] = \<const0> ;
  assign m_axi_awuser[341] = \<const0> ;
  assign m_axi_awuser[340] = \<const0> ;
  assign m_axi_awuser[339] = \<const0> ;
  assign m_axi_awuser[338] = \<const0> ;
  assign m_axi_awuser[337] = \<const0> ;
  assign m_axi_awuser[336] = \<const0> ;
  assign m_axi_awuser[335] = \<const0> ;
  assign m_axi_awuser[334] = \<const0> ;
  assign m_axi_awuser[333] = \<const0> ;
  assign m_axi_awuser[332] = \<const0> ;
  assign m_axi_awuser[331] = \<const0> ;
  assign m_axi_awuser[330] = \<const0> ;
  assign m_axi_awuser[329] = \<const0> ;
  assign m_axi_awuser[328] = \<const0> ;
  assign m_axi_awuser[327] = \<const0> ;
  assign m_axi_awuser[326] = \<const0> ;
  assign m_axi_awuser[325] = \<const0> ;
  assign m_axi_awuser[324] = \<const0> ;
  assign m_axi_awuser[323] = \<const0> ;
  assign m_axi_awuser[322] = \<const0> ;
  assign m_axi_awuser[321] = \<const0> ;
  assign m_axi_awuser[320] = \<const0> ;
  assign m_axi_awuser[319] = \<const0> ;
  assign m_axi_awuser[318] = \<const0> ;
  assign m_axi_awuser[317] = \<const0> ;
  assign m_axi_awuser[316] = \<const0> ;
  assign m_axi_awuser[315] = \<const0> ;
  assign m_axi_awuser[314] = \<const0> ;
  assign m_axi_awuser[313] = \<const0> ;
  assign m_axi_awuser[312] = \<const0> ;
  assign m_axi_awuser[311] = \<const0> ;
  assign m_axi_awuser[310] = \<const0> ;
  assign m_axi_awuser[309] = \<const0> ;
  assign m_axi_awuser[308] = \<const0> ;
  assign m_axi_awuser[307] = \<const0> ;
  assign m_axi_awuser[306] = \<const0> ;
  assign m_axi_awuser[305] = \<const0> ;
  assign m_axi_awuser[304] = \<const0> ;
  assign m_axi_awuser[303] = \<const0> ;
  assign m_axi_awuser[302] = \<const0> ;
  assign m_axi_awuser[301] = \<const0> ;
  assign m_axi_awuser[300] = \<const0> ;
  assign m_axi_awuser[299] = \<const0> ;
  assign m_axi_awuser[298] = \<const0> ;
  assign m_axi_awuser[297] = \<const0> ;
  assign m_axi_awuser[296] = \<const0> ;
  assign m_axi_awuser[295] = \<const0> ;
  assign m_axi_awuser[294] = \<const0> ;
  assign m_axi_awuser[293] = \<const0> ;
  assign m_axi_awuser[292] = \<const0> ;
  assign m_axi_awuser[291] = \<const0> ;
  assign m_axi_awuser[290] = \<const0> ;
  assign m_axi_awuser[289] = \<const0> ;
  assign m_axi_awuser[288] = \<const0> ;
  assign m_axi_awuser[287] = \<const0> ;
  assign m_axi_awuser[286] = \<const0> ;
  assign m_axi_awuser[285] = \<const0> ;
  assign m_axi_awuser[284] = \<const0> ;
  assign m_axi_awuser[283] = \<const0> ;
  assign m_axi_awuser[282] = \<const0> ;
  assign m_axi_awuser[281] = \<const0> ;
  assign m_axi_awuser[280] = \<const0> ;
  assign m_axi_awuser[279] = \<const0> ;
  assign m_axi_awuser[278] = \<const0> ;
  assign m_axi_awuser[277] = \<const0> ;
  assign m_axi_awuser[276] = \<const0> ;
  assign m_axi_awuser[275] = \<const0> ;
  assign m_axi_awuser[274] = \<const0> ;
  assign m_axi_awuser[273] = \<const0> ;
  assign m_axi_awuser[272] = \<const0> ;
  assign m_axi_awuser[271] = \<const0> ;
  assign m_axi_awuser[270] = \<const0> ;
  assign m_axi_awuser[269] = \<const0> ;
  assign m_axi_awuser[268] = \<const0> ;
  assign m_axi_awuser[267] = \<const0> ;
  assign m_axi_awuser[266] = \<const0> ;
  assign m_axi_awuser[265] = \<const0> ;
  assign m_axi_awuser[264] = \<const0> ;
  assign m_axi_awuser[263] = \<const0> ;
  assign m_axi_awuser[262] = \<const0> ;
  assign m_axi_awuser[261] = \<const0> ;
  assign m_axi_awuser[260] = \<const0> ;
  assign m_axi_awuser[259] = \<const0> ;
  assign m_axi_awuser[258] = \<const0> ;
  assign m_axi_awuser[257] = \<const0> ;
  assign m_axi_awuser[256] = \<const0> ;
  assign m_axi_awuser[255] = \<const0> ;
  assign m_axi_awuser[254] = \<const0> ;
  assign m_axi_awuser[253] = \<const0> ;
  assign m_axi_awuser[252] = \<const0> ;
  assign m_axi_awuser[251] = \<const0> ;
  assign m_axi_awuser[250] = \<const0> ;
  assign m_axi_awuser[249] = \<const0> ;
  assign m_axi_awuser[248] = \<const0> ;
  assign m_axi_awuser[247] = \<const0> ;
  assign m_axi_awuser[246] = \<const0> ;
  assign m_axi_awuser[245] = \<const0> ;
  assign m_axi_awuser[244] = \<const0> ;
  assign m_axi_awuser[243] = \<const0> ;
  assign m_axi_awuser[242] = \<const0> ;
  assign m_axi_awuser[241] = \<const0> ;
  assign m_axi_awuser[240] = \<const0> ;
  assign m_axi_awuser[239] = \<const0> ;
  assign m_axi_awuser[238] = \<const0> ;
  assign m_axi_awuser[237] = \<const0> ;
  assign m_axi_awuser[236] = \<const0> ;
  assign m_axi_awuser[235] = \<const0> ;
  assign m_axi_awuser[234] = \<const0> ;
  assign m_axi_awuser[233] = \<const0> ;
  assign m_axi_awuser[232] = \<const0> ;
  assign m_axi_awuser[231] = \<const0> ;
  assign m_axi_awuser[230] = \<const0> ;
  assign m_axi_awuser[229] = \<const0> ;
  assign m_axi_awuser[228] = \<const0> ;
  assign m_axi_awuser[227] = \<const0> ;
  assign m_axi_awuser[226] = \<const0> ;
  assign m_axi_awuser[225] = \<const0> ;
  assign m_axi_awuser[224] = \<const0> ;
  assign m_axi_awuser[223] = \<const0> ;
  assign m_axi_awuser[222] = \<const0> ;
  assign m_axi_awuser[221] = \<const0> ;
  assign m_axi_awuser[220] = \<const0> ;
  assign m_axi_awuser[219] = \<const0> ;
  assign m_axi_awuser[218] = \<const0> ;
  assign m_axi_awuser[217] = \<const0> ;
  assign m_axi_awuser[216] = \<const0> ;
  assign m_axi_awuser[215] = \<const0> ;
  assign m_axi_awuser[214] = \<const0> ;
  assign m_axi_awuser[213] = \<const0> ;
  assign m_axi_awuser[212] = \<const0> ;
  assign m_axi_awuser[211] = \<const0> ;
  assign m_axi_awuser[210] = \<const0> ;
  assign m_axi_awuser[209] = \<const0> ;
  assign m_axi_awuser[208] = \<const0> ;
  assign m_axi_awuser[207] = \<const0> ;
  assign m_axi_awuser[206] = \<const0> ;
  assign m_axi_awuser[205] = \<const0> ;
  assign m_axi_awuser[204] = \<const0> ;
  assign m_axi_awuser[203] = \<const0> ;
  assign m_axi_awuser[202] = \<const0> ;
  assign m_axi_awuser[201] = \<const0> ;
  assign m_axi_awuser[200] = \<const0> ;
  assign m_axi_awuser[199] = \<const0> ;
  assign m_axi_awuser[198] = \<const0> ;
  assign m_axi_awuser[197] = \<const0> ;
  assign m_axi_awuser[196] = \<const0> ;
  assign m_axi_awuser[195] = \<const0> ;
  assign m_axi_awuser[194] = \<const0> ;
  assign m_axi_awuser[193] = \<const0> ;
  assign m_axi_awuser[192] = \<const0> ;
  assign m_axi_awuser[191] = \<const0> ;
  assign m_axi_awuser[190] = \<const0> ;
  assign m_axi_awuser[189] = \<const0> ;
  assign m_axi_awuser[188] = \<const0> ;
  assign m_axi_awuser[187] = \<const0> ;
  assign m_axi_awuser[186] = \<const0> ;
  assign m_axi_awuser[185:181] = \^m_axi_awuser [185:181];
  assign m_axi_awuser[180] = \<const0> ;
  assign m_axi_awuser[179] = \<const0> ;
  assign m_axi_awuser[178] = \<const0> ;
  assign m_axi_awuser[177] = \<const0> ;
  assign m_axi_awuser[176] = \<const0> ;
  assign m_axi_awuser[175] = \<const0> ;
  assign m_axi_awuser[174] = \<const0> ;
  assign m_axi_awuser[173] = \<const0> ;
  assign m_axi_awuser[172] = \<const0> ;
  assign m_axi_awuser[171] = \<const0> ;
  assign m_axi_awuser[170] = \<const0> ;
  assign m_axi_awuser[169] = \<const0> ;
  assign m_axi_awuser[168] = \<const0> ;
  assign m_axi_awuser[167] = \<const0> ;
  assign m_axi_awuser[166] = \<const0> ;
  assign m_axi_awuser[165] = \<const0> ;
  assign m_axi_awuser[164] = \<const0> ;
  assign m_axi_awuser[163] = \<const0> ;
  assign m_axi_awuser[162] = \<const0> ;
  assign m_axi_awuser[161] = \<const0> ;
  assign m_axi_awuser[160] = \<const0> ;
  assign m_axi_awuser[159] = \<const0> ;
  assign m_axi_awuser[158] = \<const0> ;
  assign m_axi_awuser[157] = \<const0> ;
  assign m_axi_awuser[156] = \<const0> ;
  assign m_axi_awuser[155] = \<const0> ;
  assign m_axi_awuser[154] = \<const0> ;
  assign m_axi_awuser[153] = \<const0> ;
  assign m_axi_awuser[152] = \<const0> ;
  assign m_axi_awuser[151] = \<const0> ;
  assign m_axi_awuser[150] = \<const0> ;
  assign m_axi_awuser[149] = \<const0> ;
  assign m_axi_awuser[148] = \<const0> ;
  assign m_axi_awuser[147] = \<const0> ;
  assign m_axi_awuser[146] = \<const0> ;
  assign m_axi_awuser[145] = \<const0> ;
  assign m_axi_awuser[144] = \<const0> ;
  assign m_axi_awuser[143] = \<const0> ;
  assign m_axi_awuser[142] = \<const0> ;
  assign m_axi_awuser[141] = \<const0> ;
  assign m_axi_awuser[140] = \<const0> ;
  assign m_axi_awuser[139] = \<const0> ;
  assign m_axi_awuser[138] = \<const0> ;
  assign m_axi_awuser[137] = \<const0> ;
  assign m_axi_awuser[136] = \<const0> ;
  assign m_axi_awuser[135] = \<const0> ;
  assign m_axi_awuser[134] = \<const0> ;
  assign m_axi_awuser[133] = \<const0> ;
  assign m_axi_awuser[132] = \<const0> ;
  assign m_axi_awuser[131] = \<const0> ;
  assign m_axi_awuser[130] = \<const0> ;
  assign m_axi_awuser[129] = \<const0> ;
  assign m_axi_awuser[128] = \<const0> ;
  assign m_axi_awuser[127] = \<const0> ;
  assign m_axi_awuser[126] = \<const0> ;
  assign m_axi_awuser[125] = \<const0> ;
  assign m_axi_awuser[124] = \<const0> ;
  assign m_axi_awuser[123] = \<const0> ;
  assign m_axi_awuser[122] = \<const0> ;
  assign m_axi_awuser[121] = \<const0> ;
  assign m_axi_awuser[120] = \<const0> ;
  assign m_axi_awuser[119] = \<const0> ;
  assign m_axi_awuser[118] = \<const0> ;
  assign m_axi_awuser[117] = \<const0> ;
  assign m_axi_awuser[116] = \<const0> ;
  assign m_axi_awuser[115] = \<const0> ;
  assign m_axi_awuser[114] = \<const0> ;
  assign m_axi_awuser[113] = \<const0> ;
  assign m_axi_awuser[112] = \<const0> ;
  assign m_axi_awuser[111] = \<const0> ;
  assign m_axi_awuser[110] = \<const0> ;
  assign m_axi_awuser[109] = \<const0> ;
  assign m_axi_awuser[108] = \<const0> ;
  assign m_axi_awuser[107] = \<const0> ;
  assign m_axi_awuser[106] = \<const0> ;
  assign m_axi_awuser[105] = \<const0> ;
  assign m_axi_awuser[104] = \<const0> ;
  assign m_axi_awuser[103] = \<const0> ;
  assign m_axi_awuser[102] = \<const0> ;
  assign m_axi_awuser[101] = \<const0> ;
  assign m_axi_awuser[100] = \<const0> ;
  assign m_axi_awuser[99] = \<const0> ;
  assign m_axi_awuser[98] = \<const0> ;
  assign m_axi_awuser[97] = \<const0> ;
  assign m_axi_awuser[96] = \<const0> ;
  assign m_axi_awuser[95] = \<const0> ;
  assign m_axi_awuser[94] = \<const0> ;
  assign m_axi_awuser[93] = \<const0> ;
  assign m_axi_awuser[92] = \<const0> ;
  assign m_axi_awuser[91] = \<const0> ;
  assign m_axi_awuser[90] = \<const0> ;
  assign m_axi_awuser[89] = \<const0> ;
  assign m_axi_awuser[88] = \<const0> ;
  assign m_axi_awuser[87] = \<const0> ;
  assign m_axi_awuser[86] = \<const0> ;
  assign m_axi_awuser[85] = \<const0> ;
  assign m_axi_awuser[84] = \<const0> ;
  assign m_axi_awuser[83] = \<const0> ;
  assign m_axi_awuser[82] = \<const0> ;
  assign m_axi_awuser[81] = \<const0> ;
  assign m_axi_awuser[80] = \<const0> ;
  assign m_axi_awuser[79] = \<const0> ;
  assign m_axi_awuser[78] = \<const0> ;
  assign m_axi_awuser[77] = \<const0> ;
  assign m_axi_awuser[76] = \<const0> ;
  assign m_axi_awuser[75] = \<const0> ;
  assign m_axi_awuser[74] = \<const0> ;
  assign m_axi_awuser[73] = \<const0> ;
  assign m_axi_awuser[72] = \<const0> ;
  assign m_axi_awuser[71:64] = \^m_axi_awuser [71:64];
  assign m_axi_awuser[63] = \<const0> ;
  assign m_axi_awuser[62] = \<const0> ;
  assign m_axi_awuser[61] = \<const0> ;
  assign m_axi_awuser[60] = \<const0> ;
  assign m_axi_awuser[59] = \<const0> ;
  assign m_axi_awuser[58] = \<const0> ;
  assign m_axi_awuser[57] = \<const0> ;
  assign m_axi_awuser[56] = \<const0> ;
  assign m_axi_awuser[55] = \<const0> ;
  assign m_axi_awuser[54] = \<const0> ;
  assign m_axi_awuser[53] = \<const0> ;
  assign m_axi_awuser[52] = \<const0> ;
  assign m_axi_awuser[51] = \<const0> ;
  assign m_axi_awuser[50] = \<const0> ;
  assign m_axi_awuser[49] = \<const0> ;
  assign m_axi_awuser[48] = \<const0> ;
  assign m_axi_awuser[47] = \<const0> ;
  assign m_axi_awuser[46] = \<const0> ;
  assign m_axi_awuser[45] = \<const0> ;
  assign m_axi_awuser[44] = \<const0> ;
  assign m_axi_awuser[43] = \<const0> ;
  assign m_axi_awuser[42] = \<const0> ;
  assign m_axi_awuser[41] = \<const0> ;
  assign m_axi_awuser[40] = \<const0> ;
  assign m_axi_awuser[39] = \<const0> ;
  assign m_axi_awuser[38] = \<const0> ;
  assign m_axi_awuser[37] = \<const0> ;
  assign m_axi_awuser[36] = \<const0> ;
  assign m_axi_awuser[35] = \<const0> ;
  assign m_axi_awuser[34] = \<const0> ;
  assign m_axi_awuser[33] = \<const0> ;
  assign m_axi_awuser[32] = \<const0> ;
  assign m_axi_awuser[31] = \<const0> ;
  assign m_axi_awuser[30] = \<const0> ;
  assign m_axi_awuser[29] = \<const0> ;
  assign m_axi_awuser[28] = \<const0> ;
  assign m_axi_awuser[27] = \<const0> ;
  assign m_axi_awuser[26] = \<const0> ;
  assign m_axi_awuser[25] = \<const0> ;
  assign m_axi_awuser[24] = \<const0> ;
  assign m_axi_awuser[23] = \<const0> ;
  assign m_axi_awuser[22] = \<const0> ;
  assign m_axi_awuser[21] = \<const0> ;
  assign m_axi_awuser[20] = \<const0> ;
  assign m_axi_awuser[19] = \<const0> ;
  assign m_axi_awuser[18] = \<const0> ;
  assign m_axi_awuser[17] = \<const0> ;
  assign m_axi_awuser[16] = \<const0> ;
  assign m_axi_awuser[15] = \<const0> ;
  assign m_axi_awuser[14] = \<const0> ;
  assign m_axi_awuser[13] = \<const0> ;
  assign m_axi_awuser[12] = \<const0> ;
  assign m_axi_awuser[11] = \<const0> ;
  assign m_axi_awuser[10] = \<const0> ;
  assign m_axi_awuser[9] = \<const0> ;
  assign m_axi_awuser[8] = \<const0> ;
  assign m_axi_awuser[7] = \<const0> ;
  assign m_axi_awuser[6] = \<const0> ;
  assign m_axi_awuser[5] = \<const0> ;
  assign m_axi_awuser[4] = \<const0> ;
  assign m_axi_awuser[3] = \<const0> ;
  assign m_axi_awuser[2] = \<const0> ;
  assign m_axi_awuser[1] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[1023] = \<const0> ;
  assign m_axi_wuser[1022] = \<const0> ;
  assign m_axi_wuser[1021] = \<const0> ;
  assign m_axi_wuser[1020] = \<const0> ;
  assign m_axi_wuser[1019] = \<const0> ;
  assign m_axi_wuser[1018] = \<const0> ;
  assign m_axi_wuser[1017] = \<const0> ;
  assign m_axi_wuser[1016] = \<const0> ;
  assign m_axi_wuser[1015] = \<const0> ;
  assign m_axi_wuser[1014] = \<const0> ;
  assign m_axi_wuser[1013] = \<const0> ;
  assign m_axi_wuser[1012] = \<const0> ;
  assign m_axi_wuser[1011] = \<const0> ;
  assign m_axi_wuser[1010] = \<const0> ;
  assign m_axi_wuser[1009] = \<const0> ;
  assign m_axi_wuser[1008] = \<const0> ;
  assign m_axi_wuser[1007] = \<const0> ;
  assign m_axi_wuser[1006] = \<const0> ;
  assign m_axi_wuser[1005] = \<const0> ;
  assign m_axi_wuser[1004] = \<const0> ;
  assign m_axi_wuser[1003] = \<const0> ;
  assign m_axi_wuser[1002] = \<const0> ;
  assign m_axi_wuser[1001] = \<const0> ;
  assign m_axi_wuser[1000] = \<const0> ;
  assign m_axi_wuser[999] = \<const0> ;
  assign m_axi_wuser[998] = \<const0> ;
  assign m_axi_wuser[997] = \<const0> ;
  assign m_axi_wuser[996] = \<const0> ;
  assign m_axi_wuser[995] = \<const0> ;
  assign m_axi_wuser[994] = \<const0> ;
  assign m_axi_wuser[993] = \<const0> ;
  assign m_axi_wuser[992] = \<const0> ;
  assign m_axi_wuser[991] = \<const0> ;
  assign m_axi_wuser[990] = \<const0> ;
  assign m_axi_wuser[989] = \<const0> ;
  assign m_axi_wuser[988] = \<const0> ;
  assign m_axi_wuser[987] = \<const0> ;
  assign m_axi_wuser[986] = \<const0> ;
  assign m_axi_wuser[985] = \<const0> ;
  assign m_axi_wuser[984] = \<const0> ;
  assign m_axi_wuser[983] = \<const0> ;
  assign m_axi_wuser[982] = \<const0> ;
  assign m_axi_wuser[981] = \<const0> ;
  assign m_axi_wuser[980] = \<const0> ;
  assign m_axi_wuser[979] = \<const0> ;
  assign m_axi_wuser[978] = \<const0> ;
  assign m_axi_wuser[977] = \<const0> ;
  assign m_axi_wuser[976] = \<const0> ;
  assign m_axi_wuser[975] = \<const0> ;
  assign m_axi_wuser[974] = \<const0> ;
  assign m_axi_wuser[973] = \<const0> ;
  assign m_axi_wuser[972] = \<const0> ;
  assign m_axi_wuser[971] = \<const0> ;
  assign m_axi_wuser[970] = \<const0> ;
  assign m_axi_wuser[969] = \<const0> ;
  assign m_axi_wuser[968] = \<const0> ;
  assign m_axi_wuser[967] = \<const0> ;
  assign m_axi_wuser[966] = \<const0> ;
  assign m_axi_wuser[965] = \<const0> ;
  assign m_axi_wuser[964] = \<const0> ;
  assign m_axi_wuser[963] = \<const0> ;
  assign m_axi_wuser[962] = \<const0> ;
  assign m_axi_wuser[961] = \<const0> ;
  assign m_axi_wuser[960] = \<const0> ;
  assign m_axi_wuser[959] = \<const0> ;
  assign m_axi_wuser[958] = \<const0> ;
  assign m_axi_wuser[957] = \<const0> ;
  assign m_axi_wuser[956] = \<const0> ;
  assign m_axi_wuser[955] = \<const0> ;
  assign m_axi_wuser[954] = \<const0> ;
  assign m_axi_wuser[953] = \<const0> ;
  assign m_axi_wuser[952] = \<const0> ;
  assign m_axi_wuser[951] = \<const0> ;
  assign m_axi_wuser[950] = \<const0> ;
  assign m_axi_wuser[949] = \<const0> ;
  assign m_axi_wuser[948] = \<const0> ;
  assign m_axi_wuser[947] = \<const0> ;
  assign m_axi_wuser[946] = \<const0> ;
  assign m_axi_wuser[945] = \<const0> ;
  assign m_axi_wuser[944] = \<const0> ;
  assign m_axi_wuser[943] = \<const0> ;
  assign m_axi_wuser[942] = \<const0> ;
  assign m_axi_wuser[941] = \<const0> ;
  assign m_axi_wuser[940] = \<const0> ;
  assign m_axi_wuser[939] = \<const0> ;
  assign m_axi_wuser[938] = \<const0> ;
  assign m_axi_wuser[937] = \<const0> ;
  assign m_axi_wuser[936] = \<const0> ;
  assign m_axi_wuser[935] = \<const0> ;
  assign m_axi_wuser[934] = \<const0> ;
  assign m_axi_wuser[933] = \<const0> ;
  assign m_axi_wuser[932] = \<const0> ;
  assign m_axi_wuser[931] = \<const0> ;
  assign m_axi_wuser[930] = \<const0> ;
  assign m_axi_wuser[929] = \<const0> ;
  assign m_axi_wuser[928] = \<const0> ;
  assign m_axi_wuser[927] = \<const0> ;
  assign m_axi_wuser[926] = \<const0> ;
  assign m_axi_wuser[925] = \<const0> ;
  assign m_axi_wuser[924] = \<const0> ;
  assign m_axi_wuser[923] = \<const0> ;
  assign m_axi_wuser[922] = \<const0> ;
  assign m_axi_wuser[921] = \<const0> ;
  assign m_axi_wuser[920] = \<const0> ;
  assign m_axi_wuser[919] = \<const0> ;
  assign m_axi_wuser[918] = \<const0> ;
  assign m_axi_wuser[917] = \<const0> ;
  assign m_axi_wuser[916] = \<const0> ;
  assign m_axi_wuser[915] = \<const0> ;
  assign m_axi_wuser[914] = \<const0> ;
  assign m_axi_wuser[913] = \<const0> ;
  assign m_axi_wuser[912] = \<const0> ;
  assign m_axi_wuser[911] = \<const0> ;
  assign m_axi_wuser[910] = \<const0> ;
  assign m_axi_wuser[909] = \<const0> ;
  assign m_axi_wuser[908] = \<const0> ;
  assign m_axi_wuser[907] = \<const0> ;
  assign m_axi_wuser[906] = \<const0> ;
  assign m_axi_wuser[905] = \<const0> ;
  assign m_axi_wuser[904] = \<const0> ;
  assign m_axi_wuser[903] = \<const0> ;
  assign m_axi_wuser[902] = \<const0> ;
  assign m_axi_wuser[901] = \<const0> ;
  assign m_axi_wuser[900] = \<const0> ;
  assign m_axi_wuser[899] = \<const0> ;
  assign m_axi_wuser[898] = \<const0> ;
  assign m_axi_wuser[897] = \<const0> ;
  assign m_axi_wuser[896] = \<const0> ;
  assign m_axi_wuser[895] = \<const0> ;
  assign m_axi_wuser[894] = \<const0> ;
  assign m_axi_wuser[893] = \<const0> ;
  assign m_axi_wuser[892] = \<const0> ;
  assign m_axi_wuser[891] = \<const0> ;
  assign m_axi_wuser[890] = \<const0> ;
  assign m_axi_wuser[889] = \<const0> ;
  assign m_axi_wuser[888] = \<const0> ;
  assign m_axi_wuser[887] = \<const0> ;
  assign m_axi_wuser[886] = \<const0> ;
  assign m_axi_wuser[885] = \<const0> ;
  assign m_axi_wuser[884] = \<const0> ;
  assign m_axi_wuser[883] = \<const0> ;
  assign m_axi_wuser[882] = \<const0> ;
  assign m_axi_wuser[881] = \<const0> ;
  assign m_axi_wuser[880] = \<const0> ;
  assign m_axi_wuser[879] = \<const0> ;
  assign m_axi_wuser[878] = \<const0> ;
  assign m_axi_wuser[877] = \<const0> ;
  assign m_axi_wuser[876] = \<const0> ;
  assign m_axi_wuser[875] = \<const0> ;
  assign m_axi_wuser[874] = \<const0> ;
  assign m_axi_wuser[873] = \<const0> ;
  assign m_axi_wuser[872] = \<const0> ;
  assign m_axi_wuser[871] = \<const0> ;
  assign m_axi_wuser[870] = \<const0> ;
  assign m_axi_wuser[869] = \<const0> ;
  assign m_axi_wuser[868] = \<const0> ;
  assign m_axi_wuser[867] = \<const0> ;
  assign m_axi_wuser[866] = \<const0> ;
  assign m_axi_wuser[865] = \<const0> ;
  assign m_axi_wuser[864] = \<const0> ;
  assign m_axi_wuser[863] = \<const0> ;
  assign m_axi_wuser[862] = \<const0> ;
  assign m_axi_wuser[861] = \<const0> ;
  assign m_axi_wuser[860] = \<const0> ;
  assign m_axi_wuser[859] = \<const0> ;
  assign m_axi_wuser[858] = \<const0> ;
  assign m_axi_wuser[857] = \<const0> ;
  assign m_axi_wuser[856] = \<const0> ;
  assign m_axi_wuser[855] = \<const0> ;
  assign m_axi_wuser[854] = \<const0> ;
  assign m_axi_wuser[853] = \<const0> ;
  assign m_axi_wuser[852] = \<const0> ;
  assign m_axi_wuser[851] = \<const0> ;
  assign m_axi_wuser[850] = \<const0> ;
  assign m_axi_wuser[849] = \<const0> ;
  assign m_axi_wuser[848] = \<const0> ;
  assign m_axi_wuser[847] = \<const0> ;
  assign m_axi_wuser[846] = \<const0> ;
  assign m_axi_wuser[845] = \<const0> ;
  assign m_axi_wuser[844] = \<const0> ;
  assign m_axi_wuser[843] = \<const0> ;
  assign m_axi_wuser[842] = \<const0> ;
  assign m_axi_wuser[841] = \<const0> ;
  assign m_axi_wuser[840] = \<const0> ;
  assign m_axi_wuser[839] = \<const0> ;
  assign m_axi_wuser[838] = \<const0> ;
  assign m_axi_wuser[837] = \<const0> ;
  assign m_axi_wuser[836] = \<const0> ;
  assign m_axi_wuser[835] = \<const0> ;
  assign m_axi_wuser[834] = \<const0> ;
  assign m_axi_wuser[833] = \<const0> ;
  assign m_axi_wuser[832] = \<const0> ;
  assign m_axi_wuser[831] = \<const0> ;
  assign m_axi_wuser[830] = \<const0> ;
  assign m_axi_wuser[829] = \<const0> ;
  assign m_axi_wuser[828] = \<const0> ;
  assign m_axi_wuser[827] = \<const0> ;
  assign m_axi_wuser[826] = \<const0> ;
  assign m_axi_wuser[825] = \<const0> ;
  assign m_axi_wuser[824] = \<const0> ;
  assign m_axi_wuser[823] = \<const0> ;
  assign m_axi_wuser[822] = \<const0> ;
  assign m_axi_wuser[821] = \<const0> ;
  assign m_axi_wuser[820] = \<const0> ;
  assign m_axi_wuser[819] = \<const0> ;
  assign m_axi_wuser[818] = \<const0> ;
  assign m_axi_wuser[817] = \<const0> ;
  assign m_axi_wuser[816] = \<const0> ;
  assign m_axi_wuser[815] = \<const0> ;
  assign m_axi_wuser[814] = \<const0> ;
  assign m_axi_wuser[813] = \<const0> ;
  assign m_axi_wuser[812] = \<const0> ;
  assign m_axi_wuser[811] = \<const0> ;
  assign m_axi_wuser[810] = \<const0> ;
  assign m_axi_wuser[809] = \<const0> ;
  assign m_axi_wuser[808] = \<const0> ;
  assign m_axi_wuser[807] = \<const0> ;
  assign m_axi_wuser[806] = \<const0> ;
  assign m_axi_wuser[805] = \<const0> ;
  assign m_axi_wuser[804] = \<const0> ;
  assign m_axi_wuser[803] = \<const0> ;
  assign m_axi_wuser[802] = \<const0> ;
  assign m_axi_wuser[801] = \<const0> ;
  assign m_axi_wuser[800] = \<const0> ;
  assign m_axi_wuser[799] = \<const0> ;
  assign m_axi_wuser[798] = \<const0> ;
  assign m_axi_wuser[797] = \<const0> ;
  assign m_axi_wuser[796] = \<const0> ;
  assign m_axi_wuser[795] = \<const0> ;
  assign m_axi_wuser[794] = \<const0> ;
  assign m_axi_wuser[793] = \<const0> ;
  assign m_axi_wuser[792] = \<const0> ;
  assign m_axi_wuser[791] = \<const0> ;
  assign m_axi_wuser[790] = \<const0> ;
  assign m_axi_wuser[789] = \<const0> ;
  assign m_axi_wuser[788] = \<const0> ;
  assign m_axi_wuser[787] = \<const0> ;
  assign m_axi_wuser[786] = \<const0> ;
  assign m_axi_wuser[785] = \<const0> ;
  assign m_axi_wuser[784] = \<const0> ;
  assign m_axi_wuser[783] = \<const0> ;
  assign m_axi_wuser[782] = \<const0> ;
  assign m_axi_wuser[781] = \<const0> ;
  assign m_axi_wuser[780] = \<const0> ;
  assign m_axi_wuser[779] = \<const0> ;
  assign m_axi_wuser[778] = \<const0> ;
  assign m_axi_wuser[777] = \<const0> ;
  assign m_axi_wuser[776] = \<const0> ;
  assign m_axi_wuser[775] = \<const0> ;
  assign m_axi_wuser[774] = \<const0> ;
  assign m_axi_wuser[773] = \<const0> ;
  assign m_axi_wuser[772] = \<const0> ;
  assign m_axi_wuser[771] = \<const0> ;
  assign m_axi_wuser[770] = \<const0> ;
  assign m_axi_wuser[769] = \<const0> ;
  assign m_axi_wuser[768] = \<const0> ;
  assign m_axi_wuser[767] = \<const0> ;
  assign m_axi_wuser[766] = \<const0> ;
  assign m_axi_wuser[765] = \<const0> ;
  assign m_axi_wuser[764] = \<const0> ;
  assign m_axi_wuser[763] = \<const0> ;
  assign m_axi_wuser[762] = \<const0> ;
  assign m_axi_wuser[761] = \<const0> ;
  assign m_axi_wuser[760] = \<const0> ;
  assign m_axi_wuser[759] = \<const0> ;
  assign m_axi_wuser[758] = \<const0> ;
  assign m_axi_wuser[757] = \<const0> ;
  assign m_axi_wuser[756] = \<const0> ;
  assign m_axi_wuser[755] = \<const0> ;
  assign m_axi_wuser[754] = \<const0> ;
  assign m_axi_wuser[753] = \<const0> ;
  assign m_axi_wuser[752] = \<const0> ;
  assign m_axi_wuser[751] = \<const0> ;
  assign m_axi_wuser[750] = \<const0> ;
  assign m_axi_wuser[749] = \<const0> ;
  assign m_axi_wuser[748] = \<const0> ;
  assign m_axi_wuser[747] = \<const0> ;
  assign m_axi_wuser[746] = \<const0> ;
  assign m_axi_wuser[745] = \<const0> ;
  assign m_axi_wuser[744] = \<const0> ;
  assign m_axi_wuser[743] = \<const0> ;
  assign m_axi_wuser[742] = \<const0> ;
  assign m_axi_wuser[741] = \<const0> ;
  assign m_axi_wuser[740] = \<const0> ;
  assign m_axi_wuser[739] = \<const0> ;
  assign m_axi_wuser[738] = \<const0> ;
  assign m_axi_wuser[737] = \<const0> ;
  assign m_axi_wuser[736] = \<const0> ;
  assign m_axi_wuser[735] = \<const0> ;
  assign m_axi_wuser[734] = \<const0> ;
  assign m_axi_wuser[733] = \<const0> ;
  assign m_axi_wuser[732] = \<const0> ;
  assign m_axi_wuser[731] = \<const0> ;
  assign m_axi_wuser[730] = \<const0> ;
  assign m_axi_wuser[729] = \<const0> ;
  assign m_axi_wuser[728] = \<const0> ;
  assign m_axi_wuser[727] = \<const0> ;
  assign m_axi_wuser[726] = \<const0> ;
  assign m_axi_wuser[725] = \<const0> ;
  assign m_axi_wuser[724] = \<const0> ;
  assign m_axi_wuser[723] = \<const0> ;
  assign m_axi_wuser[722] = \<const0> ;
  assign m_axi_wuser[721] = \<const0> ;
  assign m_axi_wuser[720] = \<const0> ;
  assign m_axi_wuser[719] = \<const0> ;
  assign m_axi_wuser[718] = \<const0> ;
  assign m_axi_wuser[717] = \<const0> ;
  assign m_axi_wuser[716] = \<const0> ;
  assign m_axi_wuser[715] = \<const0> ;
  assign m_axi_wuser[714] = \<const0> ;
  assign m_axi_wuser[713] = \<const0> ;
  assign m_axi_wuser[712] = \<const0> ;
  assign m_axi_wuser[711] = \<const0> ;
  assign m_axi_wuser[710] = \<const0> ;
  assign m_axi_wuser[709] = \<const0> ;
  assign m_axi_wuser[708] = \<const0> ;
  assign m_axi_wuser[707] = \<const0> ;
  assign m_axi_wuser[706] = \<const0> ;
  assign m_axi_wuser[705] = \<const0> ;
  assign m_axi_wuser[704] = \<const0> ;
  assign m_axi_wuser[703] = \<const0> ;
  assign m_axi_wuser[702] = \<const0> ;
  assign m_axi_wuser[701] = \<const0> ;
  assign m_axi_wuser[700] = \<const0> ;
  assign m_axi_wuser[699] = \<const0> ;
  assign m_axi_wuser[698] = \<const0> ;
  assign m_axi_wuser[697] = \<const0> ;
  assign m_axi_wuser[696] = \<const0> ;
  assign m_axi_wuser[695] = \<const0> ;
  assign m_axi_wuser[694] = \<const0> ;
  assign m_axi_wuser[693] = \<const0> ;
  assign m_axi_wuser[692] = \<const0> ;
  assign m_axi_wuser[691] = \<const0> ;
  assign m_axi_wuser[690] = \<const0> ;
  assign m_axi_wuser[689] = \<const0> ;
  assign m_axi_wuser[688] = \<const0> ;
  assign m_axi_wuser[687] = \<const0> ;
  assign m_axi_wuser[686] = \<const0> ;
  assign m_axi_wuser[685] = \<const0> ;
  assign m_axi_wuser[684] = \<const0> ;
  assign m_axi_wuser[683] = \<const0> ;
  assign m_axi_wuser[682] = \<const0> ;
  assign m_axi_wuser[681] = \<const0> ;
  assign m_axi_wuser[680] = \<const0> ;
  assign m_axi_wuser[679] = \<const0> ;
  assign m_axi_wuser[678] = \<const0> ;
  assign m_axi_wuser[677] = \<const0> ;
  assign m_axi_wuser[676] = \<const0> ;
  assign m_axi_wuser[675] = \<const0> ;
  assign m_axi_wuser[674] = \<const0> ;
  assign m_axi_wuser[673] = \<const0> ;
  assign m_axi_wuser[672] = \<const0> ;
  assign m_axi_wuser[671] = \<const0> ;
  assign m_axi_wuser[670] = \<const0> ;
  assign m_axi_wuser[669] = \<const0> ;
  assign m_axi_wuser[668] = \<const0> ;
  assign m_axi_wuser[667] = \<const0> ;
  assign m_axi_wuser[666] = \<const0> ;
  assign m_axi_wuser[665] = \<const0> ;
  assign m_axi_wuser[664] = \<const0> ;
  assign m_axi_wuser[663] = \<const0> ;
  assign m_axi_wuser[662] = \<const0> ;
  assign m_axi_wuser[661] = \<const0> ;
  assign m_axi_wuser[660] = \<const0> ;
  assign m_axi_wuser[659] = \<const0> ;
  assign m_axi_wuser[658] = \<const0> ;
  assign m_axi_wuser[657] = \<const0> ;
  assign m_axi_wuser[656] = \<const0> ;
  assign m_axi_wuser[655] = \<const0> ;
  assign m_axi_wuser[654] = \<const0> ;
  assign m_axi_wuser[653] = \<const0> ;
  assign m_axi_wuser[652] = \<const0> ;
  assign m_axi_wuser[651] = \<const0> ;
  assign m_axi_wuser[650] = \<const0> ;
  assign m_axi_wuser[649] = \<const0> ;
  assign m_axi_wuser[648] = \<const0> ;
  assign m_axi_wuser[647] = \<const0> ;
  assign m_axi_wuser[646] = \<const0> ;
  assign m_axi_wuser[645] = \<const0> ;
  assign m_axi_wuser[644] = \<const0> ;
  assign m_axi_wuser[643] = \<const0> ;
  assign m_axi_wuser[642] = \<const0> ;
  assign m_axi_wuser[641] = \<const0> ;
  assign m_axi_wuser[640] = \<const0> ;
  assign m_axi_wuser[639] = \<const0> ;
  assign m_axi_wuser[638] = \<const0> ;
  assign m_axi_wuser[637] = \<const0> ;
  assign m_axi_wuser[636] = \<const0> ;
  assign m_axi_wuser[635] = \<const0> ;
  assign m_axi_wuser[634] = \<const0> ;
  assign m_axi_wuser[633] = \<const0> ;
  assign m_axi_wuser[632] = \<const0> ;
  assign m_axi_wuser[631] = \<const0> ;
  assign m_axi_wuser[630] = \<const0> ;
  assign m_axi_wuser[629] = \<const0> ;
  assign m_axi_wuser[628] = \<const0> ;
  assign m_axi_wuser[627] = \<const0> ;
  assign m_axi_wuser[626] = \<const0> ;
  assign m_axi_wuser[625] = \<const0> ;
  assign m_axi_wuser[624] = \<const0> ;
  assign m_axi_wuser[623] = \<const0> ;
  assign m_axi_wuser[622] = \<const0> ;
  assign m_axi_wuser[621] = \<const0> ;
  assign m_axi_wuser[620] = \<const0> ;
  assign m_axi_wuser[619] = \<const0> ;
  assign m_axi_wuser[618] = \<const0> ;
  assign m_axi_wuser[617] = \<const0> ;
  assign m_axi_wuser[616] = \<const0> ;
  assign m_axi_wuser[615] = \<const0> ;
  assign m_axi_wuser[614] = \<const0> ;
  assign m_axi_wuser[613] = \<const0> ;
  assign m_axi_wuser[612] = \<const0> ;
  assign m_axi_wuser[611] = \<const0> ;
  assign m_axi_wuser[610] = \<const0> ;
  assign m_axi_wuser[609] = \<const0> ;
  assign m_axi_wuser[608] = \<const0> ;
  assign m_axi_wuser[607] = \<const0> ;
  assign m_axi_wuser[606] = \<const0> ;
  assign m_axi_wuser[605] = \<const0> ;
  assign m_axi_wuser[604] = \<const0> ;
  assign m_axi_wuser[603] = \<const0> ;
  assign m_axi_wuser[602] = \<const0> ;
  assign m_axi_wuser[601] = \<const0> ;
  assign m_axi_wuser[600] = \<const0> ;
  assign m_axi_wuser[599] = \<const0> ;
  assign m_axi_wuser[598] = \<const0> ;
  assign m_axi_wuser[597] = \<const0> ;
  assign m_axi_wuser[596] = \<const0> ;
  assign m_axi_wuser[595] = \<const0> ;
  assign m_axi_wuser[594] = \<const0> ;
  assign m_axi_wuser[593] = \<const0> ;
  assign m_axi_wuser[592] = \<const0> ;
  assign m_axi_wuser[591] = \<const0> ;
  assign m_axi_wuser[590] = \<const0> ;
  assign m_axi_wuser[589] = \<const0> ;
  assign m_axi_wuser[588] = \<const0> ;
  assign m_axi_wuser[587] = \<const0> ;
  assign m_axi_wuser[586] = \<const0> ;
  assign m_axi_wuser[585] = \<const0> ;
  assign m_axi_wuser[584] = \<const0> ;
  assign m_axi_wuser[583] = \<const0> ;
  assign m_axi_wuser[582] = \<const0> ;
  assign m_axi_wuser[581] = \<const0> ;
  assign m_axi_wuser[580] = \<const0> ;
  assign m_axi_wuser[579] = \<const0> ;
  assign m_axi_wuser[578] = \<const0> ;
  assign m_axi_wuser[577] = \<const0> ;
  assign m_axi_wuser[576] = \<const0> ;
  assign m_axi_wuser[575] = \<const0> ;
  assign m_axi_wuser[574] = \<const0> ;
  assign m_axi_wuser[573] = \<const0> ;
  assign m_axi_wuser[572] = \<const0> ;
  assign m_axi_wuser[571] = \<const0> ;
  assign m_axi_wuser[570] = \<const0> ;
  assign m_axi_wuser[569] = \<const0> ;
  assign m_axi_wuser[568] = \<const0> ;
  assign m_axi_wuser[567] = \<const0> ;
  assign m_axi_wuser[566] = \<const0> ;
  assign m_axi_wuser[565] = \<const0> ;
  assign m_axi_wuser[564] = \<const0> ;
  assign m_axi_wuser[563] = \<const0> ;
  assign m_axi_wuser[562] = \<const0> ;
  assign m_axi_wuser[561] = \<const0> ;
  assign m_axi_wuser[560] = \<const0> ;
  assign m_axi_wuser[559] = \<const0> ;
  assign m_axi_wuser[558] = \<const0> ;
  assign m_axi_wuser[557] = \<const0> ;
  assign m_axi_wuser[556] = \<const0> ;
  assign m_axi_wuser[555] = \<const0> ;
  assign m_axi_wuser[554] = \<const0> ;
  assign m_axi_wuser[553] = \<const0> ;
  assign m_axi_wuser[552] = \<const0> ;
  assign m_axi_wuser[551] = \<const0> ;
  assign m_axi_wuser[550] = \<const0> ;
  assign m_axi_wuser[549] = \<const0> ;
  assign m_axi_wuser[548] = \<const0> ;
  assign m_axi_wuser[547] = \<const0> ;
  assign m_axi_wuser[546] = \<const0> ;
  assign m_axi_wuser[545] = \<const0> ;
  assign m_axi_wuser[544] = \<const0> ;
  assign m_axi_wuser[543] = \<const0> ;
  assign m_axi_wuser[542] = \<const0> ;
  assign m_axi_wuser[541] = \<const0> ;
  assign m_axi_wuser[540] = \<const0> ;
  assign m_axi_wuser[539] = \<const0> ;
  assign m_axi_wuser[538] = \<const0> ;
  assign m_axi_wuser[537] = \<const0> ;
  assign m_axi_wuser[536] = \<const0> ;
  assign m_axi_wuser[535] = \<const0> ;
  assign m_axi_wuser[534] = \<const0> ;
  assign m_axi_wuser[533] = \<const0> ;
  assign m_axi_wuser[532] = \<const0> ;
  assign m_axi_wuser[531] = \<const0> ;
  assign m_axi_wuser[530] = \<const0> ;
  assign m_axi_wuser[529] = \<const0> ;
  assign m_axi_wuser[528] = \<const0> ;
  assign m_axi_wuser[527] = \<const0> ;
  assign m_axi_wuser[526] = \<const0> ;
  assign m_axi_wuser[525] = \<const0> ;
  assign m_axi_wuser[524] = \<const0> ;
  assign m_axi_wuser[523] = \<const0> ;
  assign m_axi_wuser[522] = \<const0> ;
  assign m_axi_wuser[521] = \<const0> ;
  assign m_axi_wuser[520] = \<const0> ;
  assign m_axi_wuser[519] = \<const0> ;
  assign m_axi_wuser[518] = \<const0> ;
  assign m_axi_wuser[517] = \<const0> ;
  assign m_axi_wuser[516] = \<const0> ;
  assign m_axi_wuser[515] = \<const0> ;
  assign m_axi_wuser[514] = \<const0> ;
  assign m_axi_wuser[513] = \<const0> ;
  assign m_axi_wuser[512] = \<const0> ;
  assign m_axi_wuser[511] = \<const0> ;
  assign m_axi_wuser[510] = \<const0> ;
  assign m_axi_wuser[509] = \<const0> ;
  assign m_axi_wuser[508] = \<const0> ;
  assign m_axi_wuser[507] = \<const0> ;
  assign m_axi_wuser[506] = \<const0> ;
  assign m_axi_wuser[505] = \<const0> ;
  assign m_axi_wuser[504] = \<const0> ;
  assign m_axi_wuser[503] = \<const0> ;
  assign m_axi_wuser[502] = \<const0> ;
  assign m_axi_wuser[501] = \<const0> ;
  assign m_axi_wuser[500] = \<const0> ;
  assign m_axi_wuser[499] = \<const0> ;
  assign m_axi_wuser[498] = \<const0> ;
  assign m_axi_wuser[497] = \<const0> ;
  assign m_axi_wuser[496] = \<const0> ;
  assign m_axi_wuser[495] = \<const0> ;
  assign m_axi_wuser[494] = \<const0> ;
  assign m_axi_wuser[493] = \<const0> ;
  assign m_axi_wuser[492] = \<const0> ;
  assign m_axi_wuser[491] = \<const0> ;
  assign m_axi_wuser[490] = \<const0> ;
  assign m_axi_wuser[489] = \<const0> ;
  assign m_axi_wuser[488] = \<const0> ;
  assign m_axi_wuser[487] = \<const0> ;
  assign m_axi_wuser[486] = \<const0> ;
  assign m_axi_wuser[485] = \<const0> ;
  assign m_axi_wuser[484] = \<const0> ;
  assign m_axi_wuser[483] = \<const0> ;
  assign m_axi_wuser[482] = \<const0> ;
  assign m_axi_wuser[481] = \<const0> ;
  assign m_axi_wuser[480] = \<const0> ;
  assign m_axi_wuser[479] = \<const0> ;
  assign m_axi_wuser[478] = \<const0> ;
  assign m_axi_wuser[477] = \<const0> ;
  assign m_axi_wuser[476] = \<const0> ;
  assign m_axi_wuser[475] = \<const0> ;
  assign m_axi_wuser[474] = \<const0> ;
  assign m_axi_wuser[473] = \<const0> ;
  assign m_axi_wuser[472] = \<const0> ;
  assign m_axi_wuser[471] = \<const0> ;
  assign m_axi_wuser[470] = \<const0> ;
  assign m_axi_wuser[469] = \<const0> ;
  assign m_axi_wuser[468] = \<const0> ;
  assign m_axi_wuser[467] = \<const0> ;
  assign m_axi_wuser[466] = \<const0> ;
  assign m_axi_wuser[465] = \<const0> ;
  assign m_axi_wuser[464] = \<const0> ;
  assign m_axi_wuser[463] = \<const0> ;
  assign m_axi_wuser[462] = \<const0> ;
  assign m_axi_wuser[461] = \<const0> ;
  assign m_axi_wuser[460] = \<const0> ;
  assign m_axi_wuser[459] = \<const0> ;
  assign m_axi_wuser[458] = \<const0> ;
  assign m_axi_wuser[457] = \<const0> ;
  assign m_axi_wuser[456] = \<const0> ;
  assign m_axi_wuser[455] = \<const0> ;
  assign m_axi_wuser[454] = \<const0> ;
  assign m_axi_wuser[453] = \<const0> ;
  assign m_axi_wuser[452] = \<const0> ;
  assign m_axi_wuser[451] = \<const0> ;
  assign m_axi_wuser[450] = \<const0> ;
  assign m_axi_wuser[449] = \<const0> ;
  assign m_axi_wuser[448] = \<const0> ;
  assign m_axi_wuser[447] = \<const0> ;
  assign m_axi_wuser[446] = \<const0> ;
  assign m_axi_wuser[445] = \<const0> ;
  assign m_axi_wuser[444] = \<const0> ;
  assign m_axi_wuser[443] = \<const0> ;
  assign m_axi_wuser[442] = \<const0> ;
  assign m_axi_wuser[441] = \<const0> ;
  assign m_axi_wuser[440] = \<const0> ;
  assign m_axi_wuser[439] = \<const0> ;
  assign m_axi_wuser[438] = \<const0> ;
  assign m_axi_wuser[437] = \<const0> ;
  assign m_axi_wuser[436] = \<const0> ;
  assign m_axi_wuser[435] = \<const0> ;
  assign m_axi_wuser[434] = \<const0> ;
  assign m_axi_wuser[433] = \<const0> ;
  assign m_axi_wuser[432] = \<const0> ;
  assign m_axi_wuser[431] = \<const0> ;
  assign m_axi_wuser[430] = \<const0> ;
  assign m_axi_wuser[429] = \<const0> ;
  assign m_axi_wuser[428] = \<const0> ;
  assign m_axi_wuser[427] = \<const0> ;
  assign m_axi_wuser[426] = \<const0> ;
  assign m_axi_wuser[425] = \<const0> ;
  assign m_axi_wuser[424] = \<const0> ;
  assign m_axi_wuser[423] = \<const0> ;
  assign m_axi_wuser[422] = \<const0> ;
  assign m_axi_wuser[421] = \<const0> ;
  assign m_axi_wuser[420] = \<const0> ;
  assign m_axi_wuser[419] = \<const0> ;
  assign m_axi_wuser[418] = \<const0> ;
  assign m_axi_wuser[417] = \<const0> ;
  assign m_axi_wuser[416] = \<const0> ;
  assign m_axi_wuser[415] = \<const0> ;
  assign m_axi_wuser[414] = \<const0> ;
  assign m_axi_wuser[413] = \<const0> ;
  assign m_axi_wuser[412] = \<const0> ;
  assign m_axi_wuser[411] = \<const0> ;
  assign m_axi_wuser[410] = \<const0> ;
  assign m_axi_wuser[409] = \<const0> ;
  assign m_axi_wuser[408] = \<const0> ;
  assign m_axi_wuser[407] = \<const0> ;
  assign m_axi_wuser[406] = \<const0> ;
  assign m_axi_wuser[405] = \<const0> ;
  assign m_axi_wuser[404] = \<const0> ;
  assign m_axi_wuser[403] = \<const0> ;
  assign m_axi_wuser[402] = \<const0> ;
  assign m_axi_wuser[401] = \<const0> ;
  assign m_axi_wuser[400] = \<const0> ;
  assign m_axi_wuser[399] = \<const0> ;
  assign m_axi_wuser[398] = \<const0> ;
  assign m_axi_wuser[397] = \<const0> ;
  assign m_axi_wuser[396] = \<const0> ;
  assign m_axi_wuser[395] = \<const0> ;
  assign m_axi_wuser[394] = \<const0> ;
  assign m_axi_wuser[393] = \<const0> ;
  assign m_axi_wuser[392] = \<const0> ;
  assign m_axi_wuser[391] = \<const0> ;
  assign m_axi_wuser[390] = \<const0> ;
  assign m_axi_wuser[389] = \<const0> ;
  assign m_axi_wuser[388] = \<const0> ;
  assign m_axi_wuser[387] = \<const0> ;
  assign m_axi_wuser[386] = \<const0> ;
  assign m_axi_wuser[385] = \<const0> ;
  assign m_axi_wuser[384] = \<const0> ;
  assign m_axi_wuser[383] = \<const0> ;
  assign m_axi_wuser[382] = \<const0> ;
  assign m_axi_wuser[381] = \<const0> ;
  assign m_axi_wuser[380] = \<const0> ;
  assign m_axi_wuser[379] = \<const0> ;
  assign m_axi_wuser[378] = \<const0> ;
  assign m_axi_wuser[377] = \<const0> ;
  assign m_axi_wuser[376] = \<const0> ;
  assign m_axi_wuser[375] = \<const0> ;
  assign m_axi_wuser[374] = \<const0> ;
  assign m_axi_wuser[373] = \<const0> ;
  assign m_axi_wuser[372] = \<const0> ;
  assign m_axi_wuser[371] = \<const0> ;
  assign m_axi_wuser[370] = \<const0> ;
  assign m_axi_wuser[369] = \<const0> ;
  assign m_axi_wuser[368] = \<const0> ;
  assign m_axi_wuser[367] = \<const0> ;
  assign m_axi_wuser[366] = \<const0> ;
  assign m_axi_wuser[365] = \<const0> ;
  assign m_axi_wuser[364] = \<const0> ;
  assign m_axi_wuser[363] = \<const0> ;
  assign m_axi_wuser[362] = \<const0> ;
  assign m_axi_wuser[361] = \<const0> ;
  assign m_axi_wuser[360] = \<const0> ;
  assign m_axi_wuser[359] = \<const0> ;
  assign m_axi_wuser[358] = \<const0> ;
  assign m_axi_wuser[357] = \<const0> ;
  assign m_axi_wuser[356] = \<const0> ;
  assign m_axi_wuser[355] = \<const0> ;
  assign m_axi_wuser[354] = \<const0> ;
  assign m_axi_wuser[353] = \<const0> ;
  assign m_axi_wuser[352] = \<const0> ;
  assign m_axi_wuser[351] = \<const0> ;
  assign m_axi_wuser[350] = \<const0> ;
  assign m_axi_wuser[349] = \<const0> ;
  assign m_axi_wuser[348] = \<const0> ;
  assign m_axi_wuser[347] = \<const0> ;
  assign m_axi_wuser[346] = \<const0> ;
  assign m_axi_wuser[345] = \<const0> ;
  assign m_axi_wuser[344] = \<const0> ;
  assign m_axi_wuser[343] = \<const0> ;
  assign m_axi_wuser[342] = \<const0> ;
  assign m_axi_wuser[341] = \<const0> ;
  assign m_axi_wuser[340] = \<const0> ;
  assign m_axi_wuser[339] = \<const0> ;
  assign m_axi_wuser[338] = \<const0> ;
  assign m_axi_wuser[337] = \<const0> ;
  assign m_axi_wuser[336] = \<const0> ;
  assign m_axi_wuser[335] = \<const0> ;
  assign m_axi_wuser[334] = \<const0> ;
  assign m_axi_wuser[333] = \<const0> ;
  assign m_axi_wuser[332] = \<const0> ;
  assign m_axi_wuser[331] = \<const0> ;
  assign m_axi_wuser[330] = \<const0> ;
  assign m_axi_wuser[329] = \<const0> ;
  assign m_axi_wuser[328] = \<const0> ;
  assign m_axi_wuser[327] = \<const0> ;
  assign m_axi_wuser[326] = \<const0> ;
  assign m_axi_wuser[325] = \<const0> ;
  assign m_axi_wuser[324] = \<const0> ;
  assign m_axi_wuser[323] = \<const0> ;
  assign m_axi_wuser[322] = \<const0> ;
  assign m_axi_wuser[321] = \<const0> ;
  assign m_axi_wuser[320] = \<const0> ;
  assign m_axi_wuser[319] = \<const0> ;
  assign m_axi_wuser[318] = \<const0> ;
  assign m_axi_wuser[317] = \<const0> ;
  assign m_axi_wuser[316] = \<const0> ;
  assign m_axi_wuser[315] = \<const0> ;
  assign m_axi_wuser[314] = \<const0> ;
  assign m_axi_wuser[313] = \<const0> ;
  assign m_axi_wuser[312] = \<const0> ;
  assign m_axi_wuser[311] = \<const0> ;
  assign m_axi_wuser[310] = \<const0> ;
  assign m_axi_wuser[309] = \<const0> ;
  assign m_axi_wuser[308] = \<const0> ;
  assign m_axi_wuser[307] = \<const0> ;
  assign m_axi_wuser[306] = \<const0> ;
  assign m_axi_wuser[305] = \<const0> ;
  assign m_axi_wuser[304] = \<const0> ;
  assign m_axi_wuser[303] = \<const0> ;
  assign m_axi_wuser[302] = \<const0> ;
  assign m_axi_wuser[301] = \<const0> ;
  assign m_axi_wuser[300] = \<const0> ;
  assign m_axi_wuser[299] = \<const0> ;
  assign m_axi_wuser[298] = \<const0> ;
  assign m_axi_wuser[297] = \<const0> ;
  assign m_axi_wuser[296] = \<const0> ;
  assign m_axi_wuser[295] = \<const0> ;
  assign m_axi_wuser[294] = \<const0> ;
  assign m_axi_wuser[293] = \<const0> ;
  assign m_axi_wuser[292] = \<const0> ;
  assign m_axi_wuser[291] = \<const0> ;
  assign m_axi_wuser[290] = \<const0> ;
  assign m_axi_wuser[289] = \<const0> ;
  assign m_axi_wuser[288] = \<const0> ;
  assign m_axi_wuser[287] = \<const0> ;
  assign m_axi_wuser[286] = \<const0> ;
  assign m_axi_wuser[285] = \<const0> ;
  assign m_axi_wuser[284] = \<const0> ;
  assign m_axi_wuser[283] = \<const0> ;
  assign m_axi_wuser[282] = \<const0> ;
  assign m_axi_wuser[281] = \<const0> ;
  assign m_axi_wuser[280] = \<const0> ;
  assign m_axi_wuser[279] = \<const0> ;
  assign m_axi_wuser[278] = \<const0> ;
  assign m_axi_wuser[277] = \<const0> ;
  assign m_axi_wuser[276] = \<const0> ;
  assign m_axi_wuser[275] = \<const0> ;
  assign m_axi_wuser[274] = \<const0> ;
  assign m_axi_wuser[273] = \<const0> ;
  assign m_axi_wuser[272] = \<const0> ;
  assign m_axi_wuser[271] = \<const0> ;
  assign m_axi_wuser[270] = \<const0> ;
  assign m_axi_wuser[269] = \<const0> ;
  assign m_axi_wuser[268] = \<const0> ;
  assign m_axi_wuser[267] = \<const0> ;
  assign m_axi_wuser[266] = \<const0> ;
  assign m_axi_wuser[265] = \<const0> ;
  assign m_axi_wuser[264] = \<const0> ;
  assign m_axi_wuser[263] = \<const0> ;
  assign m_axi_wuser[262] = \<const0> ;
  assign m_axi_wuser[261] = \<const0> ;
  assign m_axi_wuser[260] = \<const0> ;
  assign m_axi_wuser[259] = \<const0> ;
  assign m_axi_wuser[258] = \<const0> ;
  assign m_axi_wuser[257] = \<const0> ;
  assign m_axi_wuser[256] = \<const0> ;
  assign m_axi_wuser[255] = \<const0> ;
  assign m_axi_wuser[254] = \<const0> ;
  assign m_axi_wuser[253] = \<const0> ;
  assign m_axi_wuser[252] = \<const0> ;
  assign m_axi_wuser[251] = \<const0> ;
  assign m_axi_wuser[250] = \<const0> ;
  assign m_axi_wuser[249] = \<const0> ;
  assign m_axi_wuser[248] = \<const0> ;
  assign m_axi_wuser[247] = \<const0> ;
  assign m_axi_wuser[246] = \<const0> ;
  assign m_axi_wuser[245] = \<const0> ;
  assign m_axi_wuser[244] = \<const0> ;
  assign m_axi_wuser[243] = \<const0> ;
  assign m_axi_wuser[242] = \<const0> ;
  assign m_axi_wuser[241] = \<const0> ;
  assign m_axi_wuser[240] = \<const0> ;
  assign m_axi_wuser[239] = \<const0> ;
  assign m_axi_wuser[238] = \<const0> ;
  assign m_axi_wuser[237] = \<const0> ;
  assign m_axi_wuser[236] = \<const0> ;
  assign m_axi_wuser[235] = \<const0> ;
  assign m_axi_wuser[234] = \<const0> ;
  assign m_axi_wuser[233] = \<const0> ;
  assign m_axi_wuser[232] = \<const0> ;
  assign m_axi_wuser[231] = \<const0> ;
  assign m_axi_wuser[230] = \<const0> ;
  assign m_axi_wuser[229] = \<const0> ;
  assign m_axi_wuser[228] = \<const0> ;
  assign m_axi_wuser[227] = \<const0> ;
  assign m_axi_wuser[226] = \<const0> ;
  assign m_axi_wuser[225] = \<const0> ;
  assign m_axi_wuser[224] = \<const0> ;
  assign m_axi_wuser[223] = \<const0> ;
  assign m_axi_wuser[222] = \<const0> ;
  assign m_axi_wuser[221] = \<const0> ;
  assign m_axi_wuser[220] = \<const0> ;
  assign m_axi_wuser[219] = \<const0> ;
  assign m_axi_wuser[218] = \<const0> ;
  assign m_axi_wuser[217] = \<const0> ;
  assign m_axi_wuser[216] = \<const0> ;
  assign m_axi_wuser[215] = \<const0> ;
  assign m_axi_wuser[214] = \<const0> ;
  assign m_axi_wuser[213] = \<const0> ;
  assign m_axi_wuser[212] = \<const0> ;
  assign m_axi_wuser[211] = \<const0> ;
  assign m_axi_wuser[210] = \<const0> ;
  assign m_axi_wuser[209] = \<const0> ;
  assign m_axi_wuser[208] = \<const0> ;
  assign m_axi_wuser[207] = \<const0> ;
  assign m_axi_wuser[206] = \<const0> ;
  assign m_axi_wuser[205] = \<const0> ;
  assign m_axi_wuser[204] = \<const0> ;
  assign m_axi_wuser[203] = \<const0> ;
  assign m_axi_wuser[202] = \<const0> ;
  assign m_axi_wuser[201] = \<const0> ;
  assign m_axi_wuser[200] = \<const0> ;
  assign m_axi_wuser[199] = \<const0> ;
  assign m_axi_wuser[198] = \<const0> ;
  assign m_axi_wuser[197] = \<const0> ;
  assign m_axi_wuser[196] = \<const0> ;
  assign m_axi_wuser[195] = \<const0> ;
  assign m_axi_wuser[194] = \<const0> ;
  assign m_axi_wuser[193] = \<const0> ;
  assign m_axi_wuser[192] = \<const0> ;
  assign m_axi_wuser[191] = \<const0> ;
  assign m_axi_wuser[190] = \<const0> ;
  assign m_axi_wuser[189] = \<const0> ;
  assign m_axi_wuser[188] = \<const0> ;
  assign m_axi_wuser[187] = \<const0> ;
  assign m_axi_wuser[186] = \<const0> ;
  assign m_axi_wuser[185] = \<const0> ;
  assign m_axi_wuser[184] = \<const0> ;
  assign m_axi_wuser[183] = \<const0> ;
  assign m_axi_wuser[182] = \<const0> ;
  assign m_axi_wuser[181] = \<const0> ;
  assign m_axi_wuser[180] = \<const0> ;
  assign m_axi_wuser[179] = \<const0> ;
  assign m_axi_wuser[178] = \<const0> ;
  assign m_axi_wuser[177] = \<const0> ;
  assign m_axi_wuser[176] = \<const0> ;
  assign m_axi_wuser[175] = \<const0> ;
  assign m_axi_wuser[174] = \<const0> ;
  assign m_axi_wuser[173] = \<const0> ;
  assign m_axi_wuser[172] = \<const0> ;
  assign m_axi_wuser[171] = \<const0> ;
  assign m_axi_wuser[170] = \<const0> ;
  assign m_axi_wuser[169] = \<const0> ;
  assign m_axi_wuser[168] = \<const0> ;
  assign m_axi_wuser[167] = \<const0> ;
  assign m_axi_wuser[166] = \<const0> ;
  assign m_axi_wuser[165] = \<const0> ;
  assign m_axi_wuser[164] = \<const0> ;
  assign m_axi_wuser[163] = \<const0> ;
  assign m_axi_wuser[162] = \<const0> ;
  assign m_axi_wuser[161] = \<const0> ;
  assign m_axi_wuser[160] = \<const0> ;
  assign m_axi_wuser[159] = \<const0> ;
  assign m_axi_wuser[158] = \<const0> ;
  assign m_axi_wuser[157] = \<const0> ;
  assign m_axi_wuser[156] = \<const0> ;
  assign m_axi_wuser[155] = \<const0> ;
  assign m_axi_wuser[154] = \<const0> ;
  assign m_axi_wuser[153] = \<const0> ;
  assign m_axi_wuser[152] = \<const0> ;
  assign m_axi_wuser[151] = \<const0> ;
  assign m_axi_wuser[150] = \<const0> ;
  assign m_axi_wuser[149] = \<const0> ;
  assign m_axi_wuser[148] = \<const0> ;
  assign m_axi_wuser[147] = \<const0> ;
  assign m_axi_wuser[146] = \<const0> ;
  assign m_axi_wuser[145] = \<const0> ;
  assign m_axi_wuser[144] = \<const0> ;
  assign m_axi_wuser[143] = \<const0> ;
  assign m_axi_wuser[142] = \<const0> ;
  assign m_axi_wuser[141] = \<const0> ;
  assign m_axi_wuser[140] = \<const0> ;
  assign m_axi_wuser[139] = \<const0> ;
  assign m_axi_wuser[138] = \<const0> ;
  assign m_axi_wuser[137] = \<const0> ;
  assign m_axi_wuser[136] = \<const0> ;
  assign m_axi_wuser[135] = \<const0> ;
  assign m_axi_wuser[134] = \<const0> ;
  assign m_axi_wuser[133] = \<const0> ;
  assign m_axi_wuser[132] = \<const0> ;
  assign m_axi_wuser[131] = \<const0> ;
  assign m_axi_wuser[130] = \<const0> ;
  assign m_axi_wuser[129] = \<const0> ;
  assign m_axi_wuser[128] = \<const0> ;
  assign m_axi_wuser[127] = \<const0> ;
  assign m_axi_wuser[126] = \<const0> ;
  assign m_axi_wuser[125] = \<const0> ;
  assign m_axi_wuser[124] = \<const0> ;
  assign m_axi_wuser[123] = \<const0> ;
  assign m_axi_wuser[122] = \<const0> ;
  assign m_axi_wuser[121] = \<const0> ;
  assign m_axi_wuser[120] = \<const0> ;
  assign m_axi_wuser[119] = \<const0> ;
  assign m_axi_wuser[118] = \<const0> ;
  assign m_axi_wuser[117] = \<const0> ;
  assign m_axi_wuser[116] = \<const0> ;
  assign m_axi_wuser[115] = \<const0> ;
  assign m_axi_wuser[114] = \<const0> ;
  assign m_axi_wuser[113] = \<const0> ;
  assign m_axi_wuser[112] = \<const0> ;
  assign m_axi_wuser[111] = \<const0> ;
  assign m_axi_wuser[110] = \<const0> ;
  assign m_axi_wuser[109] = \<const0> ;
  assign m_axi_wuser[108] = \<const0> ;
  assign m_axi_wuser[107] = \<const0> ;
  assign m_axi_wuser[106] = \<const0> ;
  assign m_axi_wuser[105] = \<const0> ;
  assign m_axi_wuser[104] = \<const0> ;
  assign m_axi_wuser[103] = \<const0> ;
  assign m_axi_wuser[102] = \<const0> ;
  assign m_axi_wuser[101] = \<const0> ;
  assign m_axi_wuser[100] = \<const0> ;
  assign m_axi_wuser[99] = \<const0> ;
  assign m_axi_wuser[98] = \<const0> ;
  assign m_axi_wuser[97] = \<const0> ;
  assign m_axi_wuser[96] = \<const0> ;
  assign m_axi_wuser[95] = \<const0> ;
  assign m_axi_wuser[94] = \<const0> ;
  assign m_axi_wuser[93] = \<const0> ;
  assign m_axi_wuser[92] = \<const0> ;
  assign m_axi_wuser[91] = \<const0> ;
  assign m_axi_wuser[90] = \<const0> ;
  assign m_axi_wuser[89] = \<const0> ;
  assign m_axi_wuser[88] = \<const0> ;
  assign m_axi_wuser[87] = \<const0> ;
  assign m_axi_wuser[86] = \<const0> ;
  assign m_axi_wuser[85] = \<const0> ;
  assign m_axi_wuser[84] = \<const0> ;
  assign m_axi_wuser[83] = \<const0> ;
  assign m_axi_wuser[82] = \<const0> ;
  assign m_axi_wuser[81] = \<const0> ;
  assign m_axi_wuser[80] = \<const0> ;
  assign m_axi_wuser[79] = \<const0> ;
  assign m_axi_wuser[78] = \<const0> ;
  assign m_axi_wuser[77:64] = \^m_axi_wuser [77:64];
  assign m_axi_wuser[63] = \<const0> ;
  assign m_axi_wuser[62] = \<const0> ;
  assign m_axi_wuser[61] = \<const0> ;
  assign m_axi_wuser[60] = \<const0> ;
  assign m_axi_wuser[59] = \<const0> ;
  assign m_axi_wuser[58] = \<const0> ;
  assign m_axi_wuser[57] = \<const0> ;
  assign m_axi_wuser[56] = \<const0> ;
  assign m_axi_wuser[55] = \<const0> ;
  assign m_axi_wuser[54] = \<const0> ;
  assign m_axi_wuser[53] = \<const0> ;
  assign m_axi_wuser[52] = \<const0> ;
  assign m_axi_wuser[51] = \<const0> ;
  assign m_axi_wuser[50] = \<const0> ;
  assign m_axi_wuser[49] = \<const0> ;
  assign m_axi_wuser[48] = \<const0> ;
  assign m_axi_wuser[47] = \<const0> ;
  assign m_axi_wuser[46] = \<const0> ;
  assign m_axi_wuser[45] = \<const0> ;
  assign m_axi_wuser[44] = \<const0> ;
  assign m_axi_wuser[43] = \<const0> ;
  assign m_axi_wuser[42] = \<const0> ;
  assign m_axi_wuser[41] = \<const0> ;
  assign m_axi_wuser[40] = \<const0> ;
  assign m_axi_wuser[39] = \<const0> ;
  assign m_axi_wuser[38] = \<const0> ;
  assign m_axi_wuser[37] = \<const0> ;
  assign m_axi_wuser[36] = \<const0> ;
  assign m_axi_wuser[35] = \<const0> ;
  assign m_axi_wuser[34] = \<const0> ;
  assign m_axi_wuser[33] = \<const0> ;
  assign m_axi_wuser[32] = \<const0> ;
  assign m_axi_wuser[31] = \<const0> ;
  assign m_axi_wuser[30] = \<const0> ;
  assign m_axi_wuser[29] = \<const0> ;
  assign m_axi_wuser[28] = \<const0> ;
  assign m_axi_wuser[27] = \<const0> ;
  assign m_axi_wuser[26] = \<const0> ;
  assign m_axi_wuser[25] = \<const0> ;
  assign m_axi_wuser[24] = \<const0> ;
  assign m_axi_wuser[23] = \<const0> ;
  assign m_axi_wuser[22] = \<const0> ;
  assign m_axi_wuser[21] = \<const0> ;
  assign m_axi_wuser[20] = \<const0> ;
  assign m_axi_wuser[19] = \<const0> ;
  assign m_axi_wuser[18] = \<const0> ;
  assign m_axi_wuser[17] = \<const0> ;
  assign m_axi_wuser[16] = \<const0> ;
  assign m_axi_wuser[15] = \<const0> ;
  assign m_axi_wuser[14] = \<const0> ;
  assign m_axi_wuser[13] = \<const0> ;
  assign m_axi_wuser[12] = \<const0> ;
  assign m_axi_wuser[11] = \<const0> ;
  assign m_axi_wuser[10] = \<const0> ;
  assign m_axi_wuser[9] = \<const0> ;
  assign m_axi_wuser[8] = \<const0> ;
  assign m_axi_wuser[7] = \<const0> ;
  assign m_axi_wuser[6] = \<const0> ;
  assign m_axi_wuser[5] = \<const0> ;
  assign m_axi_wuser[4] = \<const0> ;
  assign m_axi_wuser[3] = \<const0> ;
  assign m_axi_wuser[2] = \<const0> ;
  assign m_axi_wuser[1] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[1023] = \<const0> ;
  assign s_axi_buser[1022] = \<const0> ;
  assign s_axi_buser[1021] = \<const0> ;
  assign s_axi_buser[1020] = \<const0> ;
  assign s_axi_buser[1019] = \<const0> ;
  assign s_axi_buser[1018] = \<const0> ;
  assign s_axi_buser[1017] = \<const0> ;
  assign s_axi_buser[1016] = \<const0> ;
  assign s_axi_buser[1015] = \<const0> ;
  assign s_axi_buser[1014] = \<const0> ;
  assign s_axi_buser[1013] = \<const0> ;
  assign s_axi_buser[1012] = \<const0> ;
  assign s_axi_buser[1011] = \<const0> ;
  assign s_axi_buser[1010] = \<const0> ;
  assign s_axi_buser[1009] = \<const0> ;
  assign s_axi_buser[1008] = \<const0> ;
  assign s_axi_buser[1007] = \<const0> ;
  assign s_axi_buser[1006] = \<const0> ;
  assign s_axi_buser[1005] = \<const0> ;
  assign s_axi_buser[1004] = \<const0> ;
  assign s_axi_buser[1003] = \<const0> ;
  assign s_axi_buser[1002] = \<const0> ;
  assign s_axi_buser[1001] = \<const0> ;
  assign s_axi_buser[1000] = \<const0> ;
  assign s_axi_buser[999] = \<const0> ;
  assign s_axi_buser[998] = \<const0> ;
  assign s_axi_buser[997] = \<const0> ;
  assign s_axi_buser[996] = \<const0> ;
  assign s_axi_buser[995] = \<const0> ;
  assign s_axi_buser[994] = \<const0> ;
  assign s_axi_buser[993] = \<const0> ;
  assign s_axi_buser[992] = \<const0> ;
  assign s_axi_buser[991] = \<const0> ;
  assign s_axi_buser[990] = \<const0> ;
  assign s_axi_buser[989] = \<const0> ;
  assign s_axi_buser[988] = \<const0> ;
  assign s_axi_buser[987] = \<const0> ;
  assign s_axi_buser[986] = \<const0> ;
  assign s_axi_buser[985] = \<const0> ;
  assign s_axi_buser[984] = \<const0> ;
  assign s_axi_buser[983] = \<const0> ;
  assign s_axi_buser[982] = \<const0> ;
  assign s_axi_buser[981] = \<const0> ;
  assign s_axi_buser[980] = \<const0> ;
  assign s_axi_buser[979] = \<const0> ;
  assign s_axi_buser[978] = \<const0> ;
  assign s_axi_buser[977] = \<const0> ;
  assign s_axi_buser[976] = \<const0> ;
  assign s_axi_buser[975] = \<const0> ;
  assign s_axi_buser[974] = \<const0> ;
  assign s_axi_buser[973] = \<const0> ;
  assign s_axi_buser[972] = \<const0> ;
  assign s_axi_buser[971] = \<const0> ;
  assign s_axi_buser[970] = \<const0> ;
  assign s_axi_buser[969] = \<const0> ;
  assign s_axi_buser[968] = \<const0> ;
  assign s_axi_buser[967] = \<const0> ;
  assign s_axi_buser[966] = \<const0> ;
  assign s_axi_buser[965] = \<const0> ;
  assign s_axi_buser[964] = \<const0> ;
  assign s_axi_buser[963] = \<const0> ;
  assign s_axi_buser[962] = \<const0> ;
  assign s_axi_buser[961] = \<const0> ;
  assign s_axi_buser[960] = \<const0> ;
  assign s_axi_buser[959] = \<const0> ;
  assign s_axi_buser[958] = \<const0> ;
  assign s_axi_buser[957] = \<const0> ;
  assign s_axi_buser[956] = \<const0> ;
  assign s_axi_buser[955] = \<const0> ;
  assign s_axi_buser[954] = \<const0> ;
  assign s_axi_buser[953] = \<const0> ;
  assign s_axi_buser[952] = \<const0> ;
  assign s_axi_buser[951] = \<const0> ;
  assign s_axi_buser[950] = \<const0> ;
  assign s_axi_buser[949] = \<const0> ;
  assign s_axi_buser[948] = \<const0> ;
  assign s_axi_buser[947] = \<const0> ;
  assign s_axi_buser[946] = \<const0> ;
  assign s_axi_buser[945] = \<const0> ;
  assign s_axi_buser[944] = \<const0> ;
  assign s_axi_buser[943] = \<const0> ;
  assign s_axi_buser[942] = \<const0> ;
  assign s_axi_buser[941] = \<const0> ;
  assign s_axi_buser[940] = \<const0> ;
  assign s_axi_buser[939] = \<const0> ;
  assign s_axi_buser[938] = \<const0> ;
  assign s_axi_buser[937] = \<const0> ;
  assign s_axi_buser[936] = \<const0> ;
  assign s_axi_buser[935] = \<const0> ;
  assign s_axi_buser[934] = \<const0> ;
  assign s_axi_buser[933] = \<const0> ;
  assign s_axi_buser[932] = \<const0> ;
  assign s_axi_buser[931] = \<const0> ;
  assign s_axi_buser[930] = \<const0> ;
  assign s_axi_buser[929] = \<const0> ;
  assign s_axi_buser[928] = \<const0> ;
  assign s_axi_buser[927] = \<const0> ;
  assign s_axi_buser[926] = \<const0> ;
  assign s_axi_buser[925] = \<const0> ;
  assign s_axi_buser[924] = \<const0> ;
  assign s_axi_buser[923] = \<const0> ;
  assign s_axi_buser[922] = \<const0> ;
  assign s_axi_buser[921] = \<const0> ;
  assign s_axi_buser[920] = \<const0> ;
  assign s_axi_buser[919] = \<const0> ;
  assign s_axi_buser[918] = \<const0> ;
  assign s_axi_buser[917] = \<const0> ;
  assign s_axi_buser[916] = \<const0> ;
  assign s_axi_buser[915] = \<const0> ;
  assign s_axi_buser[914] = \<const0> ;
  assign s_axi_buser[913] = \<const0> ;
  assign s_axi_buser[912] = \<const0> ;
  assign s_axi_buser[911] = \<const0> ;
  assign s_axi_buser[910] = \<const0> ;
  assign s_axi_buser[909] = \<const0> ;
  assign s_axi_buser[908] = \<const0> ;
  assign s_axi_buser[907] = \<const0> ;
  assign s_axi_buser[906] = \<const0> ;
  assign s_axi_buser[905] = \<const0> ;
  assign s_axi_buser[904] = \<const0> ;
  assign s_axi_buser[903] = \<const0> ;
  assign s_axi_buser[902] = \<const0> ;
  assign s_axi_buser[901] = \<const0> ;
  assign s_axi_buser[900] = \<const0> ;
  assign s_axi_buser[899] = \<const0> ;
  assign s_axi_buser[898] = \<const0> ;
  assign s_axi_buser[897] = \<const0> ;
  assign s_axi_buser[896] = \<const0> ;
  assign s_axi_buser[895] = \<const0> ;
  assign s_axi_buser[894] = \<const0> ;
  assign s_axi_buser[893] = \<const0> ;
  assign s_axi_buser[892] = \<const0> ;
  assign s_axi_buser[891] = \<const0> ;
  assign s_axi_buser[890] = \<const0> ;
  assign s_axi_buser[889] = \<const0> ;
  assign s_axi_buser[888] = \<const0> ;
  assign s_axi_buser[887] = \<const0> ;
  assign s_axi_buser[886] = \<const0> ;
  assign s_axi_buser[885] = \<const0> ;
  assign s_axi_buser[884] = \<const0> ;
  assign s_axi_buser[883] = \<const0> ;
  assign s_axi_buser[882] = \<const0> ;
  assign s_axi_buser[881] = \<const0> ;
  assign s_axi_buser[880] = \<const0> ;
  assign s_axi_buser[879] = \<const0> ;
  assign s_axi_buser[878] = \<const0> ;
  assign s_axi_buser[877] = \<const0> ;
  assign s_axi_buser[876] = \<const0> ;
  assign s_axi_buser[875] = \<const0> ;
  assign s_axi_buser[874] = \<const0> ;
  assign s_axi_buser[873] = \<const0> ;
  assign s_axi_buser[872] = \<const0> ;
  assign s_axi_buser[871] = \<const0> ;
  assign s_axi_buser[870] = \<const0> ;
  assign s_axi_buser[869] = \<const0> ;
  assign s_axi_buser[868] = \<const0> ;
  assign s_axi_buser[867] = \<const0> ;
  assign s_axi_buser[866] = \<const0> ;
  assign s_axi_buser[865] = \<const0> ;
  assign s_axi_buser[864] = \<const0> ;
  assign s_axi_buser[863] = \<const0> ;
  assign s_axi_buser[862] = \<const0> ;
  assign s_axi_buser[861] = \<const0> ;
  assign s_axi_buser[860] = \<const0> ;
  assign s_axi_buser[859] = \<const0> ;
  assign s_axi_buser[858] = \<const0> ;
  assign s_axi_buser[857] = \<const0> ;
  assign s_axi_buser[856] = \<const0> ;
  assign s_axi_buser[855] = \<const0> ;
  assign s_axi_buser[854] = \<const0> ;
  assign s_axi_buser[853] = \<const0> ;
  assign s_axi_buser[852] = \<const0> ;
  assign s_axi_buser[851] = \<const0> ;
  assign s_axi_buser[850] = \<const0> ;
  assign s_axi_buser[849] = \<const0> ;
  assign s_axi_buser[848] = \<const0> ;
  assign s_axi_buser[847] = \<const0> ;
  assign s_axi_buser[846] = \<const0> ;
  assign s_axi_buser[845] = \<const0> ;
  assign s_axi_buser[844] = \<const0> ;
  assign s_axi_buser[843] = \<const0> ;
  assign s_axi_buser[842] = \<const0> ;
  assign s_axi_buser[841] = \<const0> ;
  assign s_axi_buser[840] = \<const0> ;
  assign s_axi_buser[839] = \<const0> ;
  assign s_axi_buser[838] = \<const0> ;
  assign s_axi_buser[837] = \<const0> ;
  assign s_axi_buser[836] = \<const0> ;
  assign s_axi_buser[835] = \<const0> ;
  assign s_axi_buser[834] = \<const0> ;
  assign s_axi_buser[833] = \<const0> ;
  assign s_axi_buser[832] = \<const0> ;
  assign s_axi_buser[831] = \<const0> ;
  assign s_axi_buser[830] = \<const0> ;
  assign s_axi_buser[829] = \<const0> ;
  assign s_axi_buser[828] = \<const0> ;
  assign s_axi_buser[827] = \<const0> ;
  assign s_axi_buser[826] = \<const0> ;
  assign s_axi_buser[825] = \<const0> ;
  assign s_axi_buser[824] = \<const0> ;
  assign s_axi_buser[823] = \<const0> ;
  assign s_axi_buser[822] = \<const0> ;
  assign s_axi_buser[821] = \<const0> ;
  assign s_axi_buser[820] = \<const0> ;
  assign s_axi_buser[819] = \<const0> ;
  assign s_axi_buser[818] = \<const0> ;
  assign s_axi_buser[817] = \<const0> ;
  assign s_axi_buser[816] = \<const0> ;
  assign s_axi_buser[815] = \<const0> ;
  assign s_axi_buser[814] = \<const0> ;
  assign s_axi_buser[813] = \<const0> ;
  assign s_axi_buser[812] = \<const0> ;
  assign s_axi_buser[811] = \<const0> ;
  assign s_axi_buser[810] = \<const0> ;
  assign s_axi_buser[809] = \<const0> ;
  assign s_axi_buser[808] = \<const0> ;
  assign s_axi_buser[807] = \<const0> ;
  assign s_axi_buser[806] = \<const0> ;
  assign s_axi_buser[805] = \<const0> ;
  assign s_axi_buser[804] = \<const0> ;
  assign s_axi_buser[803] = \<const0> ;
  assign s_axi_buser[802] = \<const0> ;
  assign s_axi_buser[801] = \<const0> ;
  assign s_axi_buser[800] = \<const0> ;
  assign s_axi_buser[799] = \<const0> ;
  assign s_axi_buser[798] = \<const0> ;
  assign s_axi_buser[797] = \<const0> ;
  assign s_axi_buser[796] = \<const0> ;
  assign s_axi_buser[795] = \<const0> ;
  assign s_axi_buser[794] = \<const0> ;
  assign s_axi_buser[793] = \<const0> ;
  assign s_axi_buser[792] = \<const0> ;
  assign s_axi_buser[791] = \<const0> ;
  assign s_axi_buser[790] = \<const0> ;
  assign s_axi_buser[789] = \<const0> ;
  assign s_axi_buser[788] = \<const0> ;
  assign s_axi_buser[787] = \<const0> ;
  assign s_axi_buser[786] = \<const0> ;
  assign s_axi_buser[785] = \<const0> ;
  assign s_axi_buser[784] = \<const0> ;
  assign s_axi_buser[783] = \<const0> ;
  assign s_axi_buser[782] = \<const0> ;
  assign s_axi_buser[781] = \<const0> ;
  assign s_axi_buser[780] = \<const0> ;
  assign s_axi_buser[779] = \<const0> ;
  assign s_axi_buser[778] = \<const0> ;
  assign s_axi_buser[777] = \<const0> ;
  assign s_axi_buser[776] = \<const0> ;
  assign s_axi_buser[775] = \<const0> ;
  assign s_axi_buser[774] = \<const0> ;
  assign s_axi_buser[773] = \<const0> ;
  assign s_axi_buser[772] = \<const0> ;
  assign s_axi_buser[771] = \<const0> ;
  assign s_axi_buser[770] = \<const0> ;
  assign s_axi_buser[769] = \<const0> ;
  assign s_axi_buser[768] = \<const0> ;
  assign s_axi_buser[767] = \<const0> ;
  assign s_axi_buser[766] = \<const0> ;
  assign s_axi_buser[765] = \<const0> ;
  assign s_axi_buser[764] = \<const0> ;
  assign s_axi_buser[763] = \<const0> ;
  assign s_axi_buser[762] = \<const0> ;
  assign s_axi_buser[761] = \<const0> ;
  assign s_axi_buser[760] = \<const0> ;
  assign s_axi_buser[759] = \<const0> ;
  assign s_axi_buser[758] = \<const0> ;
  assign s_axi_buser[757] = \<const0> ;
  assign s_axi_buser[756] = \<const0> ;
  assign s_axi_buser[755] = \<const0> ;
  assign s_axi_buser[754] = \<const0> ;
  assign s_axi_buser[753] = \<const0> ;
  assign s_axi_buser[752] = \<const0> ;
  assign s_axi_buser[751] = \<const0> ;
  assign s_axi_buser[750] = \<const0> ;
  assign s_axi_buser[749] = \<const0> ;
  assign s_axi_buser[748] = \<const0> ;
  assign s_axi_buser[747] = \<const0> ;
  assign s_axi_buser[746] = \<const0> ;
  assign s_axi_buser[745] = \<const0> ;
  assign s_axi_buser[744] = \<const0> ;
  assign s_axi_buser[743] = \<const0> ;
  assign s_axi_buser[742] = \<const0> ;
  assign s_axi_buser[741] = \<const0> ;
  assign s_axi_buser[740] = \<const0> ;
  assign s_axi_buser[739] = \<const0> ;
  assign s_axi_buser[738] = \<const0> ;
  assign s_axi_buser[737] = \<const0> ;
  assign s_axi_buser[736] = \<const0> ;
  assign s_axi_buser[735] = \<const0> ;
  assign s_axi_buser[734] = \<const0> ;
  assign s_axi_buser[733] = \<const0> ;
  assign s_axi_buser[732] = \<const0> ;
  assign s_axi_buser[731] = \<const0> ;
  assign s_axi_buser[730] = \<const0> ;
  assign s_axi_buser[729] = \<const0> ;
  assign s_axi_buser[728] = \<const0> ;
  assign s_axi_buser[727] = \<const0> ;
  assign s_axi_buser[726] = \<const0> ;
  assign s_axi_buser[725] = \<const0> ;
  assign s_axi_buser[724] = \<const0> ;
  assign s_axi_buser[723] = \<const0> ;
  assign s_axi_buser[722] = \<const0> ;
  assign s_axi_buser[721] = \<const0> ;
  assign s_axi_buser[720] = \<const0> ;
  assign s_axi_buser[719] = \<const0> ;
  assign s_axi_buser[718] = \<const0> ;
  assign s_axi_buser[717] = \<const0> ;
  assign s_axi_buser[716] = \<const0> ;
  assign s_axi_buser[715] = \<const0> ;
  assign s_axi_buser[714] = \<const0> ;
  assign s_axi_buser[713] = \<const0> ;
  assign s_axi_buser[712] = \<const0> ;
  assign s_axi_buser[711] = \<const0> ;
  assign s_axi_buser[710] = \<const0> ;
  assign s_axi_buser[709] = \<const0> ;
  assign s_axi_buser[708] = \<const0> ;
  assign s_axi_buser[707] = \<const0> ;
  assign s_axi_buser[706] = \<const0> ;
  assign s_axi_buser[705] = \<const0> ;
  assign s_axi_buser[704] = \<const0> ;
  assign s_axi_buser[703] = \<const0> ;
  assign s_axi_buser[702] = \<const0> ;
  assign s_axi_buser[701] = \<const0> ;
  assign s_axi_buser[700] = \<const0> ;
  assign s_axi_buser[699] = \<const0> ;
  assign s_axi_buser[698] = \<const0> ;
  assign s_axi_buser[697] = \<const0> ;
  assign s_axi_buser[696] = \<const0> ;
  assign s_axi_buser[695] = \<const0> ;
  assign s_axi_buser[694] = \<const0> ;
  assign s_axi_buser[693] = \<const0> ;
  assign s_axi_buser[692] = \<const0> ;
  assign s_axi_buser[691] = \<const0> ;
  assign s_axi_buser[690] = \<const0> ;
  assign s_axi_buser[689] = \<const0> ;
  assign s_axi_buser[688] = \<const0> ;
  assign s_axi_buser[687] = \<const0> ;
  assign s_axi_buser[686] = \<const0> ;
  assign s_axi_buser[685] = \<const0> ;
  assign s_axi_buser[684] = \<const0> ;
  assign s_axi_buser[683] = \<const0> ;
  assign s_axi_buser[682] = \<const0> ;
  assign s_axi_buser[681] = \<const0> ;
  assign s_axi_buser[680] = \<const0> ;
  assign s_axi_buser[679] = \<const0> ;
  assign s_axi_buser[678] = \<const0> ;
  assign s_axi_buser[677] = \<const0> ;
  assign s_axi_buser[676] = \<const0> ;
  assign s_axi_buser[675] = \<const0> ;
  assign s_axi_buser[674] = \<const0> ;
  assign s_axi_buser[673] = \<const0> ;
  assign s_axi_buser[672] = \<const0> ;
  assign s_axi_buser[671] = \<const0> ;
  assign s_axi_buser[670] = \<const0> ;
  assign s_axi_buser[669] = \<const0> ;
  assign s_axi_buser[668] = \<const0> ;
  assign s_axi_buser[667] = \<const0> ;
  assign s_axi_buser[666] = \<const0> ;
  assign s_axi_buser[665] = \<const0> ;
  assign s_axi_buser[664] = \<const0> ;
  assign s_axi_buser[663] = \<const0> ;
  assign s_axi_buser[662] = \<const0> ;
  assign s_axi_buser[661] = \<const0> ;
  assign s_axi_buser[660] = \<const0> ;
  assign s_axi_buser[659] = \<const0> ;
  assign s_axi_buser[658] = \<const0> ;
  assign s_axi_buser[657] = \<const0> ;
  assign s_axi_buser[656] = \<const0> ;
  assign s_axi_buser[655] = \<const0> ;
  assign s_axi_buser[654] = \<const0> ;
  assign s_axi_buser[653] = \<const0> ;
  assign s_axi_buser[652] = \<const0> ;
  assign s_axi_buser[651] = \<const0> ;
  assign s_axi_buser[650] = \<const0> ;
  assign s_axi_buser[649] = \<const0> ;
  assign s_axi_buser[648] = \<const0> ;
  assign s_axi_buser[647] = \<const0> ;
  assign s_axi_buser[646] = \<const0> ;
  assign s_axi_buser[645] = \<const0> ;
  assign s_axi_buser[644] = \<const0> ;
  assign s_axi_buser[643] = \<const0> ;
  assign s_axi_buser[642] = \<const0> ;
  assign s_axi_buser[641] = \<const0> ;
  assign s_axi_buser[640] = \<const0> ;
  assign s_axi_buser[639] = \<const0> ;
  assign s_axi_buser[638] = \<const0> ;
  assign s_axi_buser[637] = \<const0> ;
  assign s_axi_buser[636] = \<const0> ;
  assign s_axi_buser[635] = \<const0> ;
  assign s_axi_buser[634] = \<const0> ;
  assign s_axi_buser[633] = \<const0> ;
  assign s_axi_buser[632] = \<const0> ;
  assign s_axi_buser[631] = \<const0> ;
  assign s_axi_buser[630] = \<const0> ;
  assign s_axi_buser[629] = \<const0> ;
  assign s_axi_buser[628] = \<const0> ;
  assign s_axi_buser[627] = \<const0> ;
  assign s_axi_buser[626] = \<const0> ;
  assign s_axi_buser[625] = \<const0> ;
  assign s_axi_buser[624] = \<const0> ;
  assign s_axi_buser[623] = \<const0> ;
  assign s_axi_buser[622] = \<const0> ;
  assign s_axi_buser[621] = \<const0> ;
  assign s_axi_buser[620] = \<const0> ;
  assign s_axi_buser[619] = \<const0> ;
  assign s_axi_buser[618] = \<const0> ;
  assign s_axi_buser[617] = \<const0> ;
  assign s_axi_buser[616] = \<const0> ;
  assign s_axi_buser[615] = \<const0> ;
  assign s_axi_buser[614] = \<const0> ;
  assign s_axi_buser[613] = \<const0> ;
  assign s_axi_buser[612] = \<const0> ;
  assign s_axi_buser[611] = \<const0> ;
  assign s_axi_buser[610] = \<const0> ;
  assign s_axi_buser[609] = \<const0> ;
  assign s_axi_buser[608] = \<const0> ;
  assign s_axi_buser[607] = \<const0> ;
  assign s_axi_buser[606] = \<const0> ;
  assign s_axi_buser[605] = \<const0> ;
  assign s_axi_buser[604] = \<const0> ;
  assign s_axi_buser[603] = \<const0> ;
  assign s_axi_buser[602] = \<const0> ;
  assign s_axi_buser[601] = \<const0> ;
  assign s_axi_buser[600] = \<const0> ;
  assign s_axi_buser[599] = \<const0> ;
  assign s_axi_buser[598] = \<const0> ;
  assign s_axi_buser[597] = \<const0> ;
  assign s_axi_buser[596] = \<const0> ;
  assign s_axi_buser[595] = \<const0> ;
  assign s_axi_buser[594] = \<const0> ;
  assign s_axi_buser[593] = \<const0> ;
  assign s_axi_buser[592] = \<const0> ;
  assign s_axi_buser[591] = \<const0> ;
  assign s_axi_buser[590] = \<const0> ;
  assign s_axi_buser[589] = \<const0> ;
  assign s_axi_buser[588] = \<const0> ;
  assign s_axi_buser[587] = \<const0> ;
  assign s_axi_buser[586] = \<const0> ;
  assign s_axi_buser[585] = \<const0> ;
  assign s_axi_buser[584] = \<const0> ;
  assign s_axi_buser[583] = \<const0> ;
  assign s_axi_buser[582] = \<const0> ;
  assign s_axi_buser[581] = \<const0> ;
  assign s_axi_buser[580] = \<const0> ;
  assign s_axi_buser[579] = \<const0> ;
  assign s_axi_buser[578] = \<const0> ;
  assign s_axi_buser[577] = \<const0> ;
  assign s_axi_buser[576] = \<const0> ;
  assign s_axi_buser[575] = \<const0> ;
  assign s_axi_buser[574] = \<const0> ;
  assign s_axi_buser[573] = \<const0> ;
  assign s_axi_buser[572] = \<const0> ;
  assign s_axi_buser[571] = \<const0> ;
  assign s_axi_buser[570] = \<const0> ;
  assign s_axi_buser[569] = \<const0> ;
  assign s_axi_buser[568] = \<const0> ;
  assign s_axi_buser[567] = \<const0> ;
  assign s_axi_buser[566] = \<const0> ;
  assign s_axi_buser[565] = \<const0> ;
  assign s_axi_buser[564] = \<const0> ;
  assign s_axi_buser[563] = \<const0> ;
  assign s_axi_buser[562] = \<const0> ;
  assign s_axi_buser[561] = \<const0> ;
  assign s_axi_buser[560] = \<const0> ;
  assign s_axi_buser[559] = \<const0> ;
  assign s_axi_buser[558] = \<const0> ;
  assign s_axi_buser[557] = \<const0> ;
  assign s_axi_buser[556] = \<const0> ;
  assign s_axi_buser[555] = \<const0> ;
  assign s_axi_buser[554] = \<const0> ;
  assign s_axi_buser[553] = \<const0> ;
  assign s_axi_buser[552] = \<const0> ;
  assign s_axi_buser[551] = \<const0> ;
  assign s_axi_buser[550] = \<const0> ;
  assign s_axi_buser[549] = \<const0> ;
  assign s_axi_buser[548] = \<const0> ;
  assign s_axi_buser[547] = \<const0> ;
  assign s_axi_buser[546] = \<const0> ;
  assign s_axi_buser[545] = \<const0> ;
  assign s_axi_buser[544] = \<const0> ;
  assign s_axi_buser[543] = \<const0> ;
  assign s_axi_buser[542] = \<const0> ;
  assign s_axi_buser[541] = \<const0> ;
  assign s_axi_buser[540] = \<const0> ;
  assign s_axi_buser[539] = \<const0> ;
  assign s_axi_buser[538] = \<const0> ;
  assign s_axi_buser[537] = \<const0> ;
  assign s_axi_buser[536] = \<const0> ;
  assign s_axi_buser[535] = \<const0> ;
  assign s_axi_buser[534] = \<const0> ;
  assign s_axi_buser[533] = \<const0> ;
  assign s_axi_buser[532] = \<const0> ;
  assign s_axi_buser[531] = \<const0> ;
  assign s_axi_buser[530] = \<const0> ;
  assign s_axi_buser[529] = \<const0> ;
  assign s_axi_buser[528] = \<const0> ;
  assign s_axi_buser[527] = \<const0> ;
  assign s_axi_buser[526] = \<const0> ;
  assign s_axi_buser[525] = \<const0> ;
  assign s_axi_buser[524] = \<const0> ;
  assign s_axi_buser[523] = \<const0> ;
  assign s_axi_buser[522] = \<const0> ;
  assign s_axi_buser[521] = \<const0> ;
  assign s_axi_buser[520] = \<const0> ;
  assign s_axi_buser[519] = \<const0> ;
  assign s_axi_buser[518] = \<const0> ;
  assign s_axi_buser[517] = \<const0> ;
  assign s_axi_buser[516] = \<const0> ;
  assign s_axi_buser[515] = \<const0> ;
  assign s_axi_buser[514] = \<const0> ;
  assign s_axi_buser[513] = \<const0> ;
  assign s_axi_buser[512] = \<const0> ;
  assign s_axi_buser[511] = \<const0> ;
  assign s_axi_buser[510] = \<const0> ;
  assign s_axi_buser[509] = \<const0> ;
  assign s_axi_buser[508] = \<const0> ;
  assign s_axi_buser[507] = \<const0> ;
  assign s_axi_buser[506] = \<const0> ;
  assign s_axi_buser[505] = \<const0> ;
  assign s_axi_buser[504] = \<const0> ;
  assign s_axi_buser[503] = \<const0> ;
  assign s_axi_buser[502] = \<const0> ;
  assign s_axi_buser[501] = \<const0> ;
  assign s_axi_buser[500] = \<const0> ;
  assign s_axi_buser[499] = \<const0> ;
  assign s_axi_buser[498] = \<const0> ;
  assign s_axi_buser[497] = \<const0> ;
  assign s_axi_buser[496] = \<const0> ;
  assign s_axi_buser[495] = \<const0> ;
  assign s_axi_buser[494] = \<const0> ;
  assign s_axi_buser[493] = \<const0> ;
  assign s_axi_buser[492] = \<const0> ;
  assign s_axi_buser[491] = \<const0> ;
  assign s_axi_buser[490] = \<const0> ;
  assign s_axi_buser[489] = \<const0> ;
  assign s_axi_buser[488] = \<const0> ;
  assign s_axi_buser[487] = \<const0> ;
  assign s_axi_buser[486] = \<const0> ;
  assign s_axi_buser[485] = \<const0> ;
  assign s_axi_buser[484] = \<const0> ;
  assign s_axi_buser[483] = \<const0> ;
  assign s_axi_buser[482] = \<const0> ;
  assign s_axi_buser[481] = \<const0> ;
  assign s_axi_buser[480] = \<const0> ;
  assign s_axi_buser[479] = \<const0> ;
  assign s_axi_buser[478] = \<const0> ;
  assign s_axi_buser[477] = \<const0> ;
  assign s_axi_buser[476] = \<const0> ;
  assign s_axi_buser[475] = \<const0> ;
  assign s_axi_buser[474] = \<const0> ;
  assign s_axi_buser[473] = \<const0> ;
  assign s_axi_buser[472] = \<const0> ;
  assign s_axi_buser[471] = \<const0> ;
  assign s_axi_buser[470] = \<const0> ;
  assign s_axi_buser[469] = \<const0> ;
  assign s_axi_buser[468] = \<const0> ;
  assign s_axi_buser[467] = \<const0> ;
  assign s_axi_buser[466] = \<const0> ;
  assign s_axi_buser[465] = \<const0> ;
  assign s_axi_buser[464] = \<const0> ;
  assign s_axi_buser[463] = \<const0> ;
  assign s_axi_buser[462] = \<const0> ;
  assign s_axi_buser[461] = \<const0> ;
  assign s_axi_buser[460] = \<const0> ;
  assign s_axi_buser[459] = \<const0> ;
  assign s_axi_buser[458] = \<const0> ;
  assign s_axi_buser[457] = \<const0> ;
  assign s_axi_buser[456] = \<const0> ;
  assign s_axi_buser[455] = \<const0> ;
  assign s_axi_buser[454] = \<const0> ;
  assign s_axi_buser[453] = \<const0> ;
  assign s_axi_buser[452] = \<const0> ;
  assign s_axi_buser[451] = \<const0> ;
  assign s_axi_buser[450] = \<const0> ;
  assign s_axi_buser[449] = \<const0> ;
  assign s_axi_buser[448] = \<const0> ;
  assign s_axi_buser[447] = \<const0> ;
  assign s_axi_buser[446] = \<const0> ;
  assign s_axi_buser[445] = \<const0> ;
  assign s_axi_buser[444] = \<const0> ;
  assign s_axi_buser[443] = \<const0> ;
  assign s_axi_buser[442] = \<const0> ;
  assign s_axi_buser[441] = \<const0> ;
  assign s_axi_buser[440] = \<const0> ;
  assign s_axi_buser[439] = \<const0> ;
  assign s_axi_buser[438] = \<const0> ;
  assign s_axi_buser[437] = \<const0> ;
  assign s_axi_buser[436] = \<const0> ;
  assign s_axi_buser[435] = \<const0> ;
  assign s_axi_buser[434] = \<const0> ;
  assign s_axi_buser[433] = \<const0> ;
  assign s_axi_buser[432] = \<const0> ;
  assign s_axi_buser[431] = \<const0> ;
  assign s_axi_buser[430] = \<const0> ;
  assign s_axi_buser[429] = \<const0> ;
  assign s_axi_buser[428] = \<const0> ;
  assign s_axi_buser[427] = \<const0> ;
  assign s_axi_buser[426] = \<const0> ;
  assign s_axi_buser[425] = \<const0> ;
  assign s_axi_buser[424] = \<const0> ;
  assign s_axi_buser[423] = \<const0> ;
  assign s_axi_buser[422] = \<const0> ;
  assign s_axi_buser[421] = \<const0> ;
  assign s_axi_buser[420] = \<const0> ;
  assign s_axi_buser[419] = \<const0> ;
  assign s_axi_buser[418] = \<const0> ;
  assign s_axi_buser[417] = \<const0> ;
  assign s_axi_buser[416] = \<const0> ;
  assign s_axi_buser[415] = \<const0> ;
  assign s_axi_buser[414] = \<const0> ;
  assign s_axi_buser[413] = \<const0> ;
  assign s_axi_buser[412] = \<const0> ;
  assign s_axi_buser[411] = \<const0> ;
  assign s_axi_buser[410] = \<const0> ;
  assign s_axi_buser[409] = \<const0> ;
  assign s_axi_buser[408] = \<const0> ;
  assign s_axi_buser[407] = \<const0> ;
  assign s_axi_buser[406] = \<const0> ;
  assign s_axi_buser[405] = \<const0> ;
  assign s_axi_buser[404] = \<const0> ;
  assign s_axi_buser[403] = \<const0> ;
  assign s_axi_buser[402] = \<const0> ;
  assign s_axi_buser[401] = \<const0> ;
  assign s_axi_buser[400] = \<const0> ;
  assign s_axi_buser[399] = \<const0> ;
  assign s_axi_buser[398] = \<const0> ;
  assign s_axi_buser[397] = \<const0> ;
  assign s_axi_buser[396] = \<const0> ;
  assign s_axi_buser[395] = \<const0> ;
  assign s_axi_buser[394] = \<const0> ;
  assign s_axi_buser[393] = \<const0> ;
  assign s_axi_buser[392] = \<const0> ;
  assign s_axi_buser[391] = \<const0> ;
  assign s_axi_buser[390] = \<const0> ;
  assign s_axi_buser[389] = \<const0> ;
  assign s_axi_buser[388] = \<const0> ;
  assign s_axi_buser[387] = \<const0> ;
  assign s_axi_buser[386] = \<const0> ;
  assign s_axi_buser[385] = \<const0> ;
  assign s_axi_buser[384] = \<const0> ;
  assign s_axi_buser[383] = \<const0> ;
  assign s_axi_buser[382] = \<const0> ;
  assign s_axi_buser[381] = \<const0> ;
  assign s_axi_buser[380] = \<const0> ;
  assign s_axi_buser[379] = \<const0> ;
  assign s_axi_buser[378] = \<const0> ;
  assign s_axi_buser[377] = \<const0> ;
  assign s_axi_buser[376] = \<const0> ;
  assign s_axi_buser[375] = \<const0> ;
  assign s_axi_buser[374] = \<const0> ;
  assign s_axi_buser[373] = \<const0> ;
  assign s_axi_buser[372] = \<const0> ;
  assign s_axi_buser[371] = \<const0> ;
  assign s_axi_buser[370] = \<const0> ;
  assign s_axi_buser[369] = \<const0> ;
  assign s_axi_buser[368] = \<const0> ;
  assign s_axi_buser[367] = \<const0> ;
  assign s_axi_buser[366] = \<const0> ;
  assign s_axi_buser[365] = \<const0> ;
  assign s_axi_buser[364] = \<const0> ;
  assign s_axi_buser[363] = \<const0> ;
  assign s_axi_buser[362] = \<const0> ;
  assign s_axi_buser[361] = \<const0> ;
  assign s_axi_buser[360] = \<const0> ;
  assign s_axi_buser[359] = \<const0> ;
  assign s_axi_buser[358] = \<const0> ;
  assign s_axi_buser[357] = \<const0> ;
  assign s_axi_buser[356] = \<const0> ;
  assign s_axi_buser[355] = \<const0> ;
  assign s_axi_buser[354] = \<const0> ;
  assign s_axi_buser[353] = \<const0> ;
  assign s_axi_buser[352] = \<const0> ;
  assign s_axi_buser[351] = \<const0> ;
  assign s_axi_buser[350] = \<const0> ;
  assign s_axi_buser[349] = \<const0> ;
  assign s_axi_buser[348] = \<const0> ;
  assign s_axi_buser[347] = \<const0> ;
  assign s_axi_buser[346] = \<const0> ;
  assign s_axi_buser[345] = \<const0> ;
  assign s_axi_buser[344] = \<const0> ;
  assign s_axi_buser[343] = \<const0> ;
  assign s_axi_buser[342] = \<const0> ;
  assign s_axi_buser[341] = \<const0> ;
  assign s_axi_buser[340] = \<const0> ;
  assign s_axi_buser[339] = \<const0> ;
  assign s_axi_buser[338] = \<const0> ;
  assign s_axi_buser[337] = \<const0> ;
  assign s_axi_buser[336] = \<const0> ;
  assign s_axi_buser[335] = \<const0> ;
  assign s_axi_buser[334] = \<const0> ;
  assign s_axi_buser[333] = \<const0> ;
  assign s_axi_buser[332] = \<const0> ;
  assign s_axi_buser[331] = \<const0> ;
  assign s_axi_buser[330] = \<const0> ;
  assign s_axi_buser[329] = \<const0> ;
  assign s_axi_buser[328] = \<const0> ;
  assign s_axi_buser[327] = \<const0> ;
  assign s_axi_buser[326] = \<const0> ;
  assign s_axi_buser[325] = \<const0> ;
  assign s_axi_buser[324] = \<const0> ;
  assign s_axi_buser[323] = \<const0> ;
  assign s_axi_buser[322] = \<const0> ;
  assign s_axi_buser[321] = \<const0> ;
  assign s_axi_buser[320] = \<const0> ;
  assign s_axi_buser[319] = \<const0> ;
  assign s_axi_buser[318] = \<const0> ;
  assign s_axi_buser[317] = \<const0> ;
  assign s_axi_buser[316] = \<const0> ;
  assign s_axi_buser[315] = \<const0> ;
  assign s_axi_buser[314] = \<const0> ;
  assign s_axi_buser[313] = \<const0> ;
  assign s_axi_buser[312] = \<const0> ;
  assign s_axi_buser[311] = \<const0> ;
  assign s_axi_buser[310] = \<const0> ;
  assign s_axi_buser[309] = \<const0> ;
  assign s_axi_buser[308] = \<const0> ;
  assign s_axi_buser[307] = \<const0> ;
  assign s_axi_buser[306] = \<const0> ;
  assign s_axi_buser[305] = \<const0> ;
  assign s_axi_buser[304] = \<const0> ;
  assign s_axi_buser[303] = \<const0> ;
  assign s_axi_buser[302] = \<const0> ;
  assign s_axi_buser[301] = \<const0> ;
  assign s_axi_buser[300] = \<const0> ;
  assign s_axi_buser[299] = \<const0> ;
  assign s_axi_buser[298] = \<const0> ;
  assign s_axi_buser[297] = \<const0> ;
  assign s_axi_buser[296] = \<const0> ;
  assign s_axi_buser[295] = \<const0> ;
  assign s_axi_buser[294] = \<const0> ;
  assign s_axi_buser[293] = \<const0> ;
  assign s_axi_buser[292] = \<const0> ;
  assign s_axi_buser[291] = \<const0> ;
  assign s_axi_buser[290] = \<const0> ;
  assign s_axi_buser[289] = \<const0> ;
  assign s_axi_buser[288] = \<const0> ;
  assign s_axi_buser[287] = \<const0> ;
  assign s_axi_buser[286] = \<const0> ;
  assign s_axi_buser[285] = \<const0> ;
  assign s_axi_buser[284] = \<const0> ;
  assign s_axi_buser[283] = \<const0> ;
  assign s_axi_buser[282] = \<const0> ;
  assign s_axi_buser[281] = \<const0> ;
  assign s_axi_buser[280] = \<const0> ;
  assign s_axi_buser[279] = \<const0> ;
  assign s_axi_buser[278] = \<const0> ;
  assign s_axi_buser[277] = \<const0> ;
  assign s_axi_buser[276] = \<const0> ;
  assign s_axi_buser[275] = \<const0> ;
  assign s_axi_buser[274] = \<const0> ;
  assign s_axi_buser[273] = \<const0> ;
  assign s_axi_buser[272] = \<const0> ;
  assign s_axi_buser[271] = \<const0> ;
  assign s_axi_buser[270] = \<const0> ;
  assign s_axi_buser[269] = \<const0> ;
  assign s_axi_buser[268] = \<const0> ;
  assign s_axi_buser[267] = \<const0> ;
  assign s_axi_buser[266] = \<const0> ;
  assign s_axi_buser[265] = \<const0> ;
  assign s_axi_buser[264] = \<const0> ;
  assign s_axi_buser[263] = \<const0> ;
  assign s_axi_buser[262] = \<const0> ;
  assign s_axi_buser[261] = \<const0> ;
  assign s_axi_buser[260] = \<const0> ;
  assign s_axi_buser[259] = \<const0> ;
  assign s_axi_buser[258] = \<const0> ;
  assign s_axi_buser[257] = \<const0> ;
  assign s_axi_buser[256] = \<const0> ;
  assign s_axi_buser[255] = \<const0> ;
  assign s_axi_buser[254] = \<const0> ;
  assign s_axi_buser[253] = \<const0> ;
  assign s_axi_buser[252] = \<const0> ;
  assign s_axi_buser[251] = \<const0> ;
  assign s_axi_buser[250] = \<const0> ;
  assign s_axi_buser[249] = \<const0> ;
  assign s_axi_buser[248] = \<const0> ;
  assign s_axi_buser[247] = \<const0> ;
  assign s_axi_buser[246] = \<const0> ;
  assign s_axi_buser[245] = \<const0> ;
  assign s_axi_buser[244] = \<const0> ;
  assign s_axi_buser[243] = \<const0> ;
  assign s_axi_buser[242] = \<const0> ;
  assign s_axi_buser[241] = \<const0> ;
  assign s_axi_buser[240] = \<const0> ;
  assign s_axi_buser[239] = \<const0> ;
  assign s_axi_buser[238] = \<const0> ;
  assign s_axi_buser[237] = \<const0> ;
  assign s_axi_buser[236] = \<const0> ;
  assign s_axi_buser[235] = \<const0> ;
  assign s_axi_buser[234] = \<const0> ;
  assign s_axi_buser[233] = \<const0> ;
  assign s_axi_buser[232] = \<const0> ;
  assign s_axi_buser[231] = \<const0> ;
  assign s_axi_buser[230] = \<const0> ;
  assign s_axi_buser[229] = \<const0> ;
  assign s_axi_buser[228] = \<const0> ;
  assign s_axi_buser[227] = \<const0> ;
  assign s_axi_buser[226] = \<const0> ;
  assign s_axi_buser[225] = \<const0> ;
  assign s_axi_buser[224] = \<const0> ;
  assign s_axi_buser[223] = \<const0> ;
  assign s_axi_buser[222] = \<const0> ;
  assign s_axi_buser[221] = \<const0> ;
  assign s_axi_buser[220] = \<const0> ;
  assign s_axi_buser[219] = \<const0> ;
  assign s_axi_buser[218] = \<const0> ;
  assign s_axi_buser[217] = \<const0> ;
  assign s_axi_buser[216] = \<const0> ;
  assign s_axi_buser[215] = \<const0> ;
  assign s_axi_buser[214] = \<const0> ;
  assign s_axi_buser[213] = \<const0> ;
  assign s_axi_buser[212] = \<const0> ;
  assign s_axi_buser[211] = \<const0> ;
  assign s_axi_buser[210] = \<const0> ;
  assign s_axi_buser[209] = \<const0> ;
  assign s_axi_buser[208] = \<const0> ;
  assign s_axi_buser[207] = \<const0> ;
  assign s_axi_buser[206] = \<const0> ;
  assign s_axi_buser[205] = \<const0> ;
  assign s_axi_buser[204] = \<const0> ;
  assign s_axi_buser[203] = \<const0> ;
  assign s_axi_buser[202] = \<const0> ;
  assign s_axi_buser[201] = \<const0> ;
  assign s_axi_buser[200] = \<const0> ;
  assign s_axi_buser[199] = \<const0> ;
  assign s_axi_buser[198] = \<const0> ;
  assign s_axi_buser[197] = \<const0> ;
  assign s_axi_buser[196] = \<const0> ;
  assign s_axi_buser[195] = \<const0> ;
  assign s_axi_buser[194] = \<const0> ;
  assign s_axi_buser[193] = \<const0> ;
  assign s_axi_buser[192] = \<const0> ;
  assign s_axi_buser[191] = \<const0> ;
  assign s_axi_buser[190] = \<const0> ;
  assign s_axi_buser[189] = \<const0> ;
  assign s_axi_buser[188] = \<const0> ;
  assign s_axi_buser[187] = \<const0> ;
  assign s_axi_buser[186] = \<const0> ;
  assign s_axi_buser[185] = \<const0> ;
  assign s_axi_buser[184] = \<const0> ;
  assign s_axi_buser[183] = \<const0> ;
  assign s_axi_buser[182] = \<const0> ;
  assign s_axi_buser[181] = \<const0> ;
  assign s_axi_buser[180] = \<const0> ;
  assign s_axi_buser[179] = \<const0> ;
  assign s_axi_buser[178] = \<const0> ;
  assign s_axi_buser[177] = \<const0> ;
  assign s_axi_buser[176] = \<const0> ;
  assign s_axi_buser[175] = \<const0> ;
  assign s_axi_buser[174] = \<const0> ;
  assign s_axi_buser[173] = \<const0> ;
  assign s_axi_buser[172] = \<const0> ;
  assign s_axi_buser[171] = \<const0> ;
  assign s_axi_buser[170] = \<const0> ;
  assign s_axi_buser[169] = \<const0> ;
  assign s_axi_buser[168] = \<const0> ;
  assign s_axi_buser[167] = \<const0> ;
  assign s_axi_buser[166] = \<const0> ;
  assign s_axi_buser[165] = \<const0> ;
  assign s_axi_buser[164] = \<const0> ;
  assign s_axi_buser[163] = \<const0> ;
  assign s_axi_buser[162] = \<const0> ;
  assign s_axi_buser[161] = \<const0> ;
  assign s_axi_buser[160] = \<const0> ;
  assign s_axi_buser[159] = \<const0> ;
  assign s_axi_buser[158] = \<const0> ;
  assign s_axi_buser[157] = \<const0> ;
  assign s_axi_buser[156] = \<const0> ;
  assign s_axi_buser[155] = \<const0> ;
  assign s_axi_buser[154] = \<const0> ;
  assign s_axi_buser[153] = \<const0> ;
  assign s_axi_buser[152] = \<const0> ;
  assign s_axi_buser[151] = \<const0> ;
  assign s_axi_buser[150] = \<const0> ;
  assign s_axi_buser[149] = \<const0> ;
  assign s_axi_buser[148] = \<const0> ;
  assign s_axi_buser[147] = \<const0> ;
  assign s_axi_buser[146] = \<const0> ;
  assign s_axi_buser[145] = \<const0> ;
  assign s_axi_buser[144] = \<const0> ;
  assign s_axi_buser[143] = \<const0> ;
  assign s_axi_buser[142] = \<const0> ;
  assign s_axi_buser[141] = \<const0> ;
  assign s_axi_buser[140] = \<const0> ;
  assign s_axi_buser[139] = \<const0> ;
  assign s_axi_buser[138] = \<const0> ;
  assign s_axi_buser[137] = \<const0> ;
  assign s_axi_buser[136] = \<const0> ;
  assign s_axi_buser[135] = \<const0> ;
  assign s_axi_buser[134] = \<const0> ;
  assign s_axi_buser[133] = \<const0> ;
  assign s_axi_buser[132] = \<const0> ;
  assign s_axi_buser[131] = \<const0> ;
  assign s_axi_buser[130] = \<const0> ;
  assign s_axi_buser[129] = \<const0> ;
  assign s_axi_buser[128] = \<const0> ;
  assign s_axi_buser[127] = \<const0> ;
  assign s_axi_buser[126] = \<const0> ;
  assign s_axi_buser[125] = \<const0> ;
  assign s_axi_buser[124] = \<const0> ;
  assign s_axi_buser[123] = \<const0> ;
  assign s_axi_buser[122] = \<const0> ;
  assign s_axi_buser[121] = \<const0> ;
  assign s_axi_buser[120] = \<const0> ;
  assign s_axi_buser[119] = \<const0> ;
  assign s_axi_buser[118] = \<const0> ;
  assign s_axi_buser[117] = \<const0> ;
  assign s_axi_buser[116] = \<const0> ;
  assign s_axi_buser[115] = \<const0> ;
  assign s_axi_buser[114] = \<const0> ;
  assign s_axi_buser[113] = \<const0> ;
  assign s_axi_buser[112] = \<const0> ;
  assign s_axi_buser[111] = \<const0> ;
  assign s_axi_buser[110] = \<const0> ;
  assign s_axi_buser[109] = \<const0> ;
  assign s_axi_buser[108] = \<const0> ;
  assign s_axi_buser[107] = \<const0> ;
  assign s_axi_buser[106] = \<const0> ;
  assign s_axi_buser[105] = \<const0> ;
  assign s_axi_buser[104] = \<const0> ;
  assign s_axi_buser[103] = \<const0> ;
  assign s_axi_buser[102] = \<const0> ;
  assign s_axi_buser[101] = \<const0> ;
  assign s_axi_buser[100] = \<const0> ;
  assign s_axi_buser[99] = \<const0> ;
  assign s_axi_buser[98] = \<const0> ;
  assign s_axi_buser[97] = \<const0> ;
  assign s_axi_buser[96] = \<const0> ;
  assign s_axi_buser[95] = \<const0> ;
  assign s_axi_buser[94] = \<const0> ;
  assign s_axi_buser[93] = \<const0> ;
  assign s_axi_buser[92] = \<const0> ;
  assign s_axi_buser[91] = \<const0> ;
  assign s_axi_buser[90] = \<const0> ;
  assign s_axi_buser[89] = \<const0> ;
  assign s_axi_buser[88] = \<const0> ;
  assign s_axi_buser[87] = \<const0> ;
  assign s_axi_buser[86] = \<const0> ;
  assign s_axi_buser[85] = \<const0> ;
  assign s_axi_buser[84] = \<const0> ;
  assign s_axi_buser[83] = \<const0> ;
  assign s_axi_buser[82] = \<const0> ;
  assign s_axi_buser[81] = \<const0> ;
  assign s_axi_buser[80] = \<const0> ;
  assign s_axi_buser[79] = \<const0> ;
  assign s_axi_buser[78] = \<const0> ;
  assign s_axi_buser[77] = \<const0> ;
  assign s_axi_buser[76] = \<const0> ;
  assign s_axi_buser[75] = \<const0> ;
  assign s_axi_buser[74] = \<const0> ;
  assign s_axi_buser[73] = \<const0> ;
  assign s_axi_buser[72] = \<const0> ;
  assign s_axi_buser[71] = \<const0> ;
  assign s_axi_buser[70] = \<const0> ;
  assign s_axi_buser[69] = \<const0> ;
  assign s_axi_buser[68] = \<const0> ;
  assign s_axi_buser[67] = \<const0> ;
  assign s_axi_buser[66] = \<const0> ;
  assign s_axi_buser[65] = \<const0> ;
  assign s_axi_buser[64] = \<const0> ;
  assign s_axi_buser[63] = \<const0> ;
  assign s_axi_buser[62] = \<const0> ;
  assign s_axi_buser[61] = \<const0> ;
  assign s_axi_buser[60] = \<const0> ;
  assign s_axi_buser[59] = \<const0> ;
  assign s_axi_buser[58] = \<const0> ;
  assign s_axi_buser[57] = \<const0> ;
  assign s_axi_buser[56] = \<const0> ;
  assign s_axi_buser[55] = \<const0> ;
  assign s_axi_buser[54] = \<const0> ;
  assign s_axi_buser[53] = \<const0> ;
  assign s_axi_buser[52] = \<const0> ;
  assign s_axi_buser[51] = \<const0> ;
  assign s_axi_buser[50] = \<const0> ;
  assign s_axi_buser[49] = \<const0> ;
  assign s_axi_buser[48] = \<const0> ;
  assign s_axi_buser[47] = \<const0> ;
  assign s_axi_buser[46] = \<const0> ;
  assign s_axi_buser[45] = \<const0> ;
  assign s_axi_buser[44] = \<const0> ;
  assign s_axi_buser[43] = \<const0> ;
  assign s_axi_buser[42] = \<const0> ;
  assign s_axi_buser[41] = \<const0> ;
  assign s_axi_buser[40] = \<const0> ;
  assign s_axi_buser[39] = \<const0> ;
  assign s_axi_buser[38] = \<const0> ;
  assign s_axi_buser[37] = \<const0> ;
  assign s_axi_buser[36] = \<const0> ;
  assign s_axi_buser[35] = \<const0> ;
  assign s_axi_buser[34] = \<const0> ;
  assign s_axi_buser[33] = \<const0> ;
  assign s_axi_buser[32] = \<const0> ;
  assign s_axi_buser[31] = \<const0> ;
  assign s_axi_buser[30] = \<const0> ;
  assign s_axi_buser[29] = \<const0> ;
  assign s_axi_buser[28] = \<const0> ;
  assign s_axi_buser[27] = \<const0> ;
  assign s_axi_buser[26] = \<const0> ;
  assign s_axi_buser[25] = \<const0> ;
  assign s_axi_buser[24] = \<const0> ;
  assign s_axi_buser[23] = \<const0> ;
  assign s_axi_buser[22] = \<const0> ;
  assign s_axi_buser[21] = \<const0> ;
  assign s_axi_buser[20] = \<const0> ;
  assign s_axi_buser[19] = \<const0> ;
  assign s_axi_buser[18] = \<const0> ;
  assign s_axi_buser[17] = \<const0> ;
  assign s_axi_buser[16] = \<const0> ;
  assign s_axi_buser[15] = \<const0> ;
  assign s_axi_buser[14] = \<const0> ;
  assign s_axi_buser[13] = \<const0> ;
  assign s_axi_buser[12] = \<const0> ;
  assign s_axi_buser[11] = \<const0> ;
  assign s_axi_buser[10] = \<const0> ;
  assign s_axi_buser[9] = \<const0> ;
  assign s_axi_buser[8] = \<const0> ;
  assign s_axi_buser[7] = \<const0> ;
  assign s_axi_buser[6] = \<const0> ;
  assign s_axi_buser[5] = \<const0> ;
  assign s_axi_buser[4] = \<const0> ;
  assign s_axi_buser[3] = \<const0> ;
  assign s_axi_buser[2] = \<const0> ;
  assign s_axi_buser[1] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[1023] = \<const0> ;
  assign s_axi_ruser[1022] = \<const0> ;
  assign s_axi_ruser[1021] = \<const0> ;
  assign s_axi_ruser[1020] = \<const0> ;
  assign s_axi_ruser[1019] = \<const0> ;
  assign s_axi_ruser[1018] = \<const0> ;
  assign s_axi_ruser[1017] = \<const0> ;
  assign s_axi_ruser[1016] = \<const0> ;
  assign s_axi_ruser[1015] = \<const0> ;
  assign s_axi_ruser[1014] = \<const0> ;
  assign s_axi_ruser[1013] = \<const0> ;
  assign s_axi_ruser[1012] = \<const0> ;
  assign s_axi_ruser[1011] = \<const0> ;
  assign s_axi_ruser[1010] = \<const0> ;
  assign s_axi_ruser[1009] = \<const0> ;
  assign s_axi_ruser[1008] = \<const0> ;
  assign s_axi_ruser[1007] = \<const0> ;
  assign s_axi_ruser[1006] = \<const0> ;
  assign s_axi_ruser[1005] = \<const0> ;
  assign s_axi_ruser[1004] = \<const0> ;
  assign s_axi_ruser[1003] = \<const0> ;
  assign s_axi_ruser[1002] = \<const0> ;
  assign s_axi_ruser[1001] = \<const0> ;
  assign s_axi_ruser[1000] = \<const0> ;
  assign s_axi_ruser[999] = \<const0> ;
  assign s_axi_ruser[998] = \<const0> ;
  assign s_axi_ruser[997] = \<const0> ;
  assign s_axi_ruser[996] = \<const0> ;
  assign s_axi_ruser[995] = \<const0> ;
  assign s_axi_ruser[994] = \<const0> ;
  assign s_axi_ruser[993] = \<const0> ;
  assign s_axi_ruser[992] = \<const0> ;
  assign s_axi_ruser[991] = \<const0> ;
  assign s_axi_ruser[990] = \<const0> ;
  assign s_axi_ruser[989] = \<const0> ;
  assign s_axi_ruser[988] = \<const0> ;
  assign s_axi_ruser[987] = \<const0> ;
  assign s_axi_ruser[986] = \<const0> ;
  assign s_axi_ruser[985] = \<const0> ;
  assign s_axi_ruser[984] = \<const0> ;
  assign s_axi_ruser[983] = \<const0> ;
  assign s_axi_ruser[982] = \<const0> ;
  assign s_axi_ruser[981] = \<const0> ;
  assign s_axi_ruser[980] = \<const0> ;
  assign s_axi_ruser[979] = \<const0> ;
  assign s_axi_ruser[978] = \<const0> ;
  assign s_axi_ruser[977] = \<const0> ;
  assign s_axi_ruser[976] = \<const0> ;
  assign s_axi_ruser[975] = \<const0> ;
  assign s_axi_ruser[974] = \<const0> ;
  assign s_axi_ruser[973] = \<const0> ;
  assign s_axi_ruser[972] = \<const0> ;
  assign s_axi_ruser[971] = \<const0> ;
  assign s_axi_ruser[970] = \<const0> ;
  assign s_axi_ruser[969] = \<const0> ;
  assign s_axi_ruser[968] = \<const0> ;
  assign s_axi_ruser[967] = \<const0> ;
  assign s_axi_ruser[966] = \<const0> ;
  assign s_axi_ruser[965] = \<const0> ;
  assign s_axi_ruser[964] = \<const0> ;
  assign s_axi_ruser[963] = \<const0> ;
  assign s_axi_ruser[962] = \<const0> ;
  assign s_axi_ruser[961] = \<const0> ;
  assign s_axi_ruser[960] = \<const0> ;
  assign s_axi_ruser[959] = \<const0> ;
  assign s_axi_ruser[958] = \<const0> ;
  assign s_axi_ruser[957] = \<const0> ;
  assign s_axi_ruser[956] = \<const0> ;
  assign s_axi_ruser[955] = \<const0> ;
  assign s_axi_ruser[954] = \<const0> ;
  assign s_axi_ruser[953] = \<const0> ;
  assign s_axi_ruser[952] = \<const0> ;
  assign s_axi_ruser[951] = \<const0> ;
  assign s_axi_ruser[950] = \<const0> ;
  assign s_axi_ruser[949] = \<const0> ;
  assign s_axi_ruser[948] = \<const0> ;
  assign s_axi_ruser[947] = \<const0> ;
  assign s_axi_ruser[946] = \<const0> ;
  assign s_axi_ruser[945] = \<const0> ;
  assign s_axi_ruser[944] = \<const0> ;
  assign s_axi_ruser[943] = \<const0> ;
  assign s_axi_ruser[942] = \<const0> ;
  assign s_axi_ruser[941] = \<const0> ;
  assign s_axi_ruser[940] = \<const0> ;
  assign s_axi_ruser[939] = \<const0> ;
  assign s_axi_ruser[938] = \<const0> ;
  assign s_axi_ruser[937] = \<const0> ;
  assign s_axi_ruser[936] = \<const0> ;
  assign s_axi_ruser[935] = \<const0> ;
  assign s_axi_ruser[934] = \<const0> ;
  assign s_axi_ruser[933] = \<const0> ;
  assign s_axi_ruser[932] = \<const0> ;
  assign s_axi_ruser[931] = \<const0> ;
  assign s_axi_ruser[930] = \<const0> ;
  assign s_axi_ruser[929] = \<const0> ;
  assign s_axi_ruser[928] = \<const0> ;
  assign s_axi_ruser[927] = \<const0> ;
  assign s_axi_ruser[926] = \<const0> ;
  assign s_axi_ruser[925] = \<const0> ;
  assign s_axi_ruser[924] = \<const0> ;
  assign s_axi_ruser[923] = \<const0> ;
  assign s_axi_ruser[922] = \<const0> ;
  assign s_axi_ruser[921] = \<const0> ;
  assign s_axi_ruser[920] = \<const0> ;
  assign s_axi_ruser[919] = \<const0> ;
  assign s_axi_ruser[918] = \<const0> ;
  assign s_axi_ruser[917] = \<const0> ;
  assign s_axi_ruser[916] = \<const0> ;
  assign s_axi_ruser[915] = \<const0> ;
  assign s_axi_ruser[914] = \<const0> ;
  assign s_axi_ruser[913] = \<const0> ;
  assign s_axi_ruser[912] = \<const0> ;
  assign s_axi_ruser[911] = \<const0> ;
  assign s_axi_ruser[910] = \<const0> ;
  assign s_axi_ruser[909] = \<const0> ;
  assign s_axi_ruser[908] = \<const0> ;
  assign s_axi_ruser[907] = \<const0> ;
  assign s_axi_ruser[906] = \<const0> ;
  assign s_axi_ruser[905] = \<const0> ;
  assign s_axi_ruser[904] = \<const0> ;
  assign s_axi_ruser[903] = \<const0> ;
  assign s_axi_ruser[902] = \<const0> ;
  assign s_axi_ruser[901] = \<const0> ;
  assign s_axi_ruser[900] = \<const0> ;
  assign s_axi_ruser[899] = \<const0> ;
  assign s_axi_ruser[898] = \<const0> ;
  assign s_axi_ruser[897] = \<const0> ;
  assign s_axi_ruser[896] = \<const0> ;
  assign s_axi_ruser[895] = \<const0> ;
  assign s_axi_ruser[894] = \<const0> ;
  assign s_axi_ruser[893] = \<const0> ;
  assign s_axi_ruser[892] = \<const0> ;
  assign s_axi_ruser[891] = \<const0> ;
  assign s_axi_ruser[890] = \<const0> ;
  assign s_axi_ruser[889] = \<const0> ;
  assign s_axi_ruser[888] = \<const0> ;
  assign s_axi_ruser[887] = \<const0> ;
  assign s_axi_ruser[886] = \<const0> ;
  assign s_axi_ruser[885] = \<const0> ;
  assign s_axi_ruser[884] = \<const0> ;
  assign s_axi_ruser[883] = \<const0> ;
  assign s_axi_ruser[882] = \<const0> ;
  assign s_axi_ruser[881] = \<const0> ;
  assign s_axi_ruser[880] = \<const0> ;
  assign s_axi_ruser[879] = \<const0> ;
  assign s_axi_ruser[878] = \<const0> ;
  assign s_axi_ruser[877] = \<const0> ;
  assign s_axi_ruser[876] = \<const0> ;
  assign s_axi_ruser[875] = \<const0> ;
  assign s_axi_ruser[874] = \<const0> ;
  assign s_axi_ruser[873] = \<const0> ;
  assign s_axi_ruser[872] = \<const0> ;
  assign s_axi_ruser[871] = \<const0> ;
  assign s_axi_ruser[870] = \<const0> ;
  assign s_axi_ruser[869] = \<const0> ;
  assign s_axi_ruser[868] = \<const0> ;
  assign s_axi_ruser[867] = \<const0> ;
  assign s_axi_ruser[866] = \<const0> ;
  assign s_axi_ruser[865] = \<const0> ;
  assign s_axi_ruser[864] = \<const0> ;
  assign s_axi_ruser[863] = \<const0> ;
  assign s_axi_ruser[862] = \<const0> ;
  assign s_axi_ruser[861] = \<const0> ;
  assign s_axi_ruser[860] = \<const0> ;
  assign s_axi_ruser[859] = \<const0> ;
  assign s_axi_ruser[858] = \<const0> ;
  assign s_axi_ruser[857] = \<const0> ;
  assign s_axi_ruser[856] = \<const0> ;
  assign s_axi_ruser[855] = \<const0> ;
  assign s_axi_ruser[854] = \<const0> ;
  assign s_axi_ruser[853] = \<const0> ;
  assign s_axi_ruser[852] = \<const0> ;
  assign s_axi_ruser[851] = \<const0> ;
  assign s_axi_ruser[850] = \<const0> ;
  assign s_axi_ruser[849] = \<const0> ;
  assign s_axi_ruser[848] = \<const0> ;
  assign s_axi_ruser[847] = \<const0> ;
  assign s_axi_ruser[846] = \<const0> ;
  assign s_axi_ruser[845] = \<const0> ;
  assign s_axi_ruser[844] = \<const0> ;
  assign s_axi_ruser[843] = \<const0> ;
  assign s_axi_ruser[842] = \<const0> ;
  assign s_axi_ruser[841] = \<const0> ;
  assign s_axi_ruser[840] = \<const0> ;
  assign s_axi_ruser[839] = \<const0> ;
  assign s_axi_ruser[838] = \<const0> ;
  assign s_axi_ruser[837] = \<const0> ;
  assign s_axi_ruser[836] = \<const0> ;
  assign s_axi_ruser[835] = \<const0> ;
  assign s_axi_ruser[834] = \<const0> ;
  assign s_axi_ruser[833] = \<const0> ;
  assign s_axi_ruser[832] = \<const0> ;
  assign s_axi_ruser[831] = \<const0> ;
  assign s_axi_ruser[830] = \<const0> ;
  assign s_axi_ruser[829] = \<const0> ;
  assign s_axi_ruser[828] = \<const0> ;
  assign s_axi_ruser[827] = \<const0> ;
  assign s_axi_ruser[826] = \<const0> ;
  assign s_axi_ruser[825] = \<const0> ;
  assign s_axi_ruser[824] = \<const0> ;
  assign s_axi_ruser[823] = \<const0> ;
  assign s_axi_ruser[822] = \<const0> ;
  assign s_axi_ruser[821] = \<const0> ;
  assign s_axi_ruser[820] = \<const0> ;
  assign s_axi_ruser[819] = \<const0> ;
  assign s_axi_ruser[818] = \<const0> ;
  assign s_axi_ruser[817] = \<const0> ;
  assign s_axi_ruser[816] = \<const0> ;
  assign s_axi_ruser[815] = \<const0> ;
  assign s_axi_ruser[814] = \<const0> ;
  assign s_axi_ruser[813] = \<const0> ;
  assign s_axi_ruser[812] = \<const0> ;
  assign s_axi_ruser[811] = \<const0> ;
  assign s_axi_ruser[810] = \<const0> ;
  assign s_axi_ruser[809] = \<const0> ;
  assign s_axi_ruser[808] = \<const0> ;
  assign s_axi_ruser[807] = \<const0> ;
  assign s_axi_ruser[806] = \<const0> ;
  assign s_axi_ruser[805] = \<const0> ;
  assign s_axi_ruser[804] = \<const0> ;
  assign s_axi_ruser[803] = \<const0> ;
  assign s_axi_ruser[802] = \<const0> ;
  assign s_axi_ruser[801] = \<const0> ;
  assign s_axi_ruser[800] = \<const0> ;
  assign s_axi_ruser[799] = \<const0> ;
  assign s_axi_ruser[798] = \<const0> ;
  assign s_axi_ruser[797] = \<const0> ;
  assign s_axi_ruser[796] = \<const0> ;
  assign s_axi_ruser[795] = \<const0> ;
  assign s_axi_ruser[794] = \<const0> ;
  assign s_axi_ruser[793] = \<const0> ;
  assign s_axi_ruser[792] = \<const0> ;
  assign s_axi_ruser[791] = \<const0> ;
  assign s_axi_ruser[790] = \<const0> ;
  assign s_axi_ruser[789] = \<const0> ;
  assign s_axi_ruser[788] = \<const0> ;
  assign s_axi_ruser[787] = \<const0> ;
  assign s_axi_ruser[786] = \<const0> ;
  assign s_axi_ruser[785] = \<const0> ;
  assign s_axi_ruser[784] = \<const0> ;
  assign s_axi_ruser[783] = \<const0> ;
  assign s_axi_ruser[782] = \<const0> ;
  assign s_axi_ruser[781] = \<const0> ;
  assign s_axi_ruser[780] = \<const0> ;
  assign s_axi_ruser[779] = \<const0> ;
  assign s_axi_ruser[778] = \<const0> ;
  assign s_axi_ruser[777] = \<const0> ;
  assign s_axi_ruser[776] = \<const0> ;
  assign s_axi_ruser[775] = \<const0> ;
  assign s_axi_ruser[774] = \<const0> ;
  assign s_axi_ruser[773] = \<const0> ;
  assign s_axi_ruser[772] = \<const0> ;
  assign s_axi_ruser[771] = \<const0> ;
  assign s_axi_ruser[770] = \<const0> ;
  assign s_axi_ruser[769] = \<const0> ;
  assign s_axi_ruser[768] = \<const0> ;
  assign s_axi_ruser[767] = \<const0> ;
  assign s_axi_ruser[766] = \<const0> ;
  assign s_axi_ruser[765] = \<const0> ;
  assign s_axi_ruser[764] = \<const0> ;
  assign s_axi_ruser[763] = \<const0> ;
  assign s_axi_ruser[762] = \<const0> ;
  assign s_axi_ruser[761] = \<const0> ;
  assign s_axi_ruser[760] = \<const0> ;
  assign s_axi_ruser[759] = \<const0> ;
  assign s_axi_ruser[758] = \<const0> ;
  assign s_axi_ruser[757] = \<const0> ;
  assign s_axi_ruser[756] = \<const0> ;
  assign s_axi_ruser[755] = \<const0> ;
  assign s_axi_ruser[754] = \<const0> ;
  assign s_axi_ruser[753] = \<const0> ;
  assign s_axi_ruser[752] = \<const0> ;
  assign s_axi_ruser[751] = \<const0> ;
  assign s_axi_ruser[750] = \<const0> ;
  assign s_axi_ruser[749] = \<const0> ;
  assign s_axi_ruser[748] = \<const0> ;
  assign s_axi_ruser[747] = \<const0> ;
  assign s_axi_ruser[746] = \<const0> ;
  assign s_axi_ruser[745] = \<const0> ;
  assign s_axi_ruser[744] = \<const0> ;
  assign s_axi_ruser[743] = \<const0> ;
  assign s_axi_ruser[742] = \<const0> ;
  assign s_axi_ruser[741] = \<const0> ;
  assign s_axi_ruser[740] = \<const0> ;
  assign s_axi_ruser[739] = \<const0> ;
  assign s_axi_ruser[738] = \<const0> ;
  assign s_axi_ruser[737] = \<const0> ;
  assign s_axi_ruser[736] = \<const0> ;
  assign s_axi_ruser[735] = \<const0> ;
  assign s_axi_ruser[734] = \<const0> ;
  assign s_axi_ruser[733] = \<const0> ;
  assign s_axi_ruser[732] = \<const0> ;
  assign s_axi_ruser[731] = \<const0> ;
  assign s_axi_ruser[730] = \<const0> ;
  assign s_axi_ruser[729] = \<const0> ;
  assign s_axi_ruser[728] = \<const0> ;
  assign s_axi_ruser[727] = \<const0> ;
  assign s_axi_ruser[726] = \<const0> ;
  assign s_axi_ruser[725] = \<const0> ;
  assign s_axi_ruser[724] = \<const0> ;
  assign s_axi_ruser[723] = \<const0> ;
  assign s_axi_ruser[722] = \<const0> ;
  assign s_axi_ruser[721] = \<const0> ;
  assign s_axi_ruser[720] = \<const0> ;
  assign s_axi_ruser[719] = \<const0> ;
  assign s_axi_ruser[718] = \<const0> ;
  assign s_axi_ruser[717] = \<const0> ;
  assign s_axi_ruser[716] = \<const0> ;
  assign s_axi_ruser[715] = \<const0> ;
  assign s_axi_ruser[714] = \<const0> ;
  assign s_axi_ruser[713] = \<const0> ;
  assign s_axi_ruser[712] = \<const0> ;
  assign s_axi_ruser[711] = \<const0> ;
  assign s_axi_ruser[710] = \<const0> ;
  assign s_axi_ruser[709] = \<const0> ;
  assign s_axi_ruser[708] = \<const0> ;
  assign s_axi_ruser[707] = \<const0> ;
  assign s_axi_ruser[706] = \<const0> ;
  assign s_axi_ruser[705] = \<const0> ;
  assign s_axi_ruser[704] = \<const0> ;
  assign s_axi_ruser[703] = \<const0> ;
  assign s_axi_ruser[702] = \<const0> ;
  assign s_axi_ruser[701] = \<const0> ;
  assign s_axi_ruser[700] = \<const0> ;
  assign s_axi_ruser[699] = \<const0> ;
  assign s_axi_ruser[698] = \<const0> ;
  assign s_axi_ruser[697] = \<const0> ;
  assign s_axi_ruser[696] = \<const0> ;
  assign s_axi_ruser[695] = \<const0> ;
  assign s_axi_ruser[694] = \<const0> ;
  assign s_axi_ruser[693] = \<const0> ;
  assign s_axi_ruser[692] = \<const0> ;
  assign s_axi_ruser[691] = \<const0> ;
  assign s_axi_ruser[690] = \<const0> ;
  assign s_axi_ruser[689] = \<const0> ;
  assign s_axi_ruser[688] = \<const0> ;
  assign s_axi_ruser[687] = \<const0> ;
  assign s_axi_ruser[686] = \<const0> ;
  assign s_axi_ruser[685] = \<const0> ;
  assign s_axi_ruser[684] = \<const0> ;
  assign s_axi_ruser[683] = \<const0> ;
  assign s_axi_ruser[682] = \<const0> ;
  assign s_axi_ruser[681] = \<const0> ;
  assign s_axi_ruser[680] = \<const0> ;
  assign s_axi_ruser[679] = \<const0> ;
  assign s_axi_ruser[678] = \<const0> ;
  assign s_axi_ruser[677] = \<const0> ;
  assign s_axi_ruser[676] = \<const0> ;
  assign s_axi_ruser[675] = \<const0> ;
  assign s_axi_ruser[674] = \<const0> ;
  assign s_axi_ruser[673] = \<const0> ;
  assign s_axi_ruser[672] = \<const0> ;
  assign s_axi_ruser[671] = \<const0> ;
  assign s_axi_ruser[670] = \<const0> ;
  assign s_axi_ruser[669] = \<const0> ;
  assign s_axi_ruser[668] = \<const0> ;
  assign s_axi_ruser[667] = \<const0> ;
  assign s_axi_ruser[666] = \<const0> ;
  assign s_axi_ruser[665] = \<const0> ;
  assign s_axi_ruser[664] = \<const0> ;
  assign s_axi_ruser[663] = \<const0> ;
  assign s_axi_ruser[662] = \<const0> ;
  assign s_axi_ruser[661] = \<const0> ;
  assign s_axi_ruser[660] = \<const0> ;
  assign s_axi_ruser[659] = \<const0> ;
  assign s_axi_ruser[658] = \<const0> ;
  assign s_axi_ruser[657] = \<const0> ;
  assign s_axi_ruser[656] = \<const0> ;
  assign s_axi_ruser[655] = \<const0> ;
  assign s_axi_ruser[654] = \<const0> ;
  assign s_axi_ruser[653] = \<const0> ;
  assign s_axi_ruser[652] = \<const0> ;
  assign s_axi_ruser[651] = \<const0> ;
  assign s_axi_ruser[650] = \<const0> ;
  assign s_axi_ruser[649] = \<const0> ;
  assign s_axi_ruser[648] = \<const0> ;
  assign s_axi_ruser[647] = \<const0> ;
  assign s_axi_ruser[646] = \<const0> ;
  assign s_axi_ruser[645] = \<const0> ;
  assign s_axi_ruser[644] = \<const0> ;
  assign s_axi_ruser[643] = \<const0> ;
  assign s_axi_ruser[642] = \<const0> ;
  assign s_axi_ruser[641] = \<const0> ;
  assign s_axi_ruser[640] = \<const0> ;
  assign s_axi_ruser[639] = \<const0> ;
  assign s_axi_ruser[638] = \<const0> ;
  assign s_axi_ruser[637] = \<const0> ;
  assign s_axi_ruser[636] = \<const0> ;
  assign s_axi_ruser[635] = \<const0> ;
  assign s_axi_ruser[634] = \<const0> ;
  assign s_axi_ruser[633] = \<const0> ;
  assign s_axi_ruser[632] = \<const0> ;
  assign s_axi_ruser[631] = \<const0> ;
  assign s_axi_ruser[630] = \<const0> ;
  assign s_axi_ruser[629] = \<const0> ;
  assign s_axi_ruser[628] = \<const0> ;
  assign s_axi_ruser[627] = \<const0> ;
  assign s_axi_ruser[626] = \<const0> ;
  assign s_axi_ruser[625] = \<const0> ;
  assign s_axi_ruser[624] = \<const0> ;
  assign s_axi_ruser[623] = \<const0> ;
  assign s_axi_ruser[622] = \<const0> ;
  assign s_axi_ruser[621] = \<const0> ;
  assign s_axi_ruser[620] = \<const0> ;
  assign s_axi_ruser[619] = \<const0> ;
  assign s_axi_ruser[618] = \<const0> ;
  assign s_axi_ruser[617] = \<const0> ;
  assign s_axi_ruser[616] = \<const0> ;
  assign s_axi_ruser[615] = \<const0> ;
  assign s_axi_ruser[614] = \<const0> ;
  assign s_axi_ruser[613] = \<const0> ;
  assign s_axi_ruser[612] = \<const0> ;
  assign s_axi_ruser[611] = \<const0> ;
  assign s_axi_ruser[610] = \<const0> ;
  assign s_axi_ruser[609] = \<const0> ;
  assign s_axi_ruser[608] = \<const0> ;
  assign s_axi_ruser[607] = \<const0> ;
  assign s_axi_ruser[606] = \<const0> ;
  assign s_axi_ruser[605] = \<const0> ;
  assign s_axi_ruser[604] = \<const0> ;
  assign s_axi_ruser[603] = \<const0> ;
  assign s_axi_ruser[602] = \<const0> ;
  assign s_axi_ruser[601] = \<const0> ;
  assign s_axi_ruser[600] = \<const0> ;
  assign s_axi_ruser[599] = \<const0> ;
  assign s_axi_ruser[598] = \<const0> ;
  assign s_axi_ruser[597] = \<const0> ;
  assign s_axi_ruser[596] = \<const0> ;
  assign s_axi_ruser[595] = \<const0> ;
  assign s_axi_ruser[594] = \<const0> ;
  assign s_axi_ruser[593] = \<const0> ;
  assign s_axi_ruser[592] = \<const0> ;
  assign s_axi_ruser[591] = \<const0> ;
  assign s_axi_ruser[590] = \<const0> ;
  assign s_axi_ruser[589] = \<const0> ;
  assign s_axi_ruser[588] = \<const0> ;
  assign s_axi_ruser[587] = \<const0> ;
  assign s_axi_ruser[586] = \<const0> ;
  assign s_axi_ruser[585] = \<const0> ;
  assign s_axi_ruser[584] = \<const0> ;
  assign s_axi_ruser[583] = \<const0> ;
  assign s_axi_ruser[582] = \<const0> ;
  assign s_axi_ruser[581] = \<const0> ;
  assign s_axi_ruser[580] = \<const0> ;
  assign s_axi_ruser[579] = \<const0> ;
  assign s_axi_ruser[578] = \<const0> ;
  assign s_axi_ruser[577] = \<const0> ;
  assign s_axi_ruser[576] = \<const0> ;
  assign s_axi_ruser[575] = \<const0> ;
  assign s_axi_ruser[574] = \<const0> ;
  assign s_axi_ruser[573] = \<const0> ;
  assign s_axi_ruser[572] = \<const0> ;
  assign s_axi_ruser[571] = \<const0> ;
  assign s_axi_ruser[570] = \<const0> ;
  assign s_axi_ruser[569] = \<const0> ;
  assign s_axi_ruser[568] = \<const0> ;
  assign s_axi_ruser[567] = \<const0> ;
  assign s_axi_ruser[566] = \<const0> ;
  assign s_axi_ruser[565] = \<const0> ;
  assign s_axi_ruser[564] = \<const0> ;
  assign s_axi_ruser[563] = \<const0> ;
  assign s_axi_ruser[562] = \<const0> ;
  assign s_axi_ruser[561] = \<const0> ;
  assign s_axi_ruser[560] = \<const0> ;
  assign s_axi_ruser[559] = \<const0> ;
  assign s_axi_ruser[558] = \<const0> ;
  assign s_axi_ruser[557] = \<const0> ;
  assign s_axi_ruser[556] = \<const0> ;
  assign s_axi_ruser[555] = \<const0> ;
  assign s_axi_ruser[554] = \<const0> ;
  assign s_axi_ruser[553] = \<const0> ;
  assign s_axi_ruser[552] = \<const0> ;
  assign s_axi_ruser[551] = \<const0> ;
  assign s_axi_ruser[550] = \<const0> ;
  assign s_axi_ruser[549] = \<const0> ;
  assign s_axi_ruser[548] = \<const0> ;
  assign s_axi_ruser[547] = \<const0> ;
  assign s_axi_ruser[546] = \<const0> ;
  assign s_axi_ruser[545] = \<const0> ;
  assign s_axi_ruser[544] = \<const0> ;
  assign s_axi_ruser[543] = \<const0> ;
  assign s_axi_ruser[542] = \<const0> ;
  assign s_axi_ruser[541] = \<const0> ;
  assign s_axi_ruser[540] = \<const0> ;
  assign s_axi_ruser[539] = \<const0> ;
  assign s_axi_ruser[538] = \<const0> ;
  assign s_axi_ruser[537] = \<const0> ;
  assign s_axi_ruser[536] = \<const0> ;
  assign s_axi_ruser[535] = \<const0> ;
  assign s_axi_ruser[534] = \<const0> ;
  assign s_axi_ruser[533] = \<const0> ;
  assign s_axi_ruser[532] = \<const0> ;
  assign s_axi_ruser[531] = \<const0> ;
  assign s_axi_ruser[530] = \<const0> ;
  assign s_axi_ruser[529] = \<const0> ;
  assign s_axi_ruser[528] = \<const0> ;
  assign s_axi_ruser[527] = \<const0> ;
  assign s_axi_ruser[526] = \<const0> ;
  assign s_axi_ruser[525] = \<const0> ;
  assign s_axi_ruser[524] = \<const0> ;
  assign s_axi_ruser[523] = \<const0> ;
  assign s_axi_ruser[522] = \<const0> ;
  assign s_axi_ruser[521] = \<const0> ;
  assign s_axi_ruser[520] = \<const0> ;
  assign s_axi_ruser[519] = \<const0> ;
  assign s_axi_ruser[518] = \<const0> ;
  assign s_axi_ruser[517] = \<const0> ;
  assign s_axi_ruser[516] = \<const0> ;
  assign s_axi_ruser[515] = \<const0> ;
  assign s_axi_ruser[514] = \<const0> ;
  assign s_axi_ruser[513] = \<const0> ;
  assign s_axi_ruser[512] = \<const0> ;
  assign s_axi_ruser[511] = \<const0> ;
  assign s_axi_ruser[510] = \<const0> ;
  assign s_axi_ruser[509] = \<const0> ;
  assign s_axi_ruser[508] = \<const0> ;
  assign s_axi_ruser[507] = \<const0> ;
  assign s_axi_ruser[506] = \<const0> ;
  assign s_axi_ruser[505] = \<const0> ;
  assign s_axi_ruser[504] = \<const0> ;
  assign s_axi_ruser[503] = \<const0> ;
  assign s_axi_ruser[502] = \<const0> ;
  assign s_axi_ruser[501] = \<const0> ;
  assign s_axi_ruser[500] = \<const0> ;
  assign s_axi_ruser[499] = \<const0> ;
  assign s_axi_ruser[498] = \<const0> ;
  assign s_axi_ruser[497] = \<const0> ;
  assign s_axi_ruser[496] = \<const0> ;
  assign s_axi_ruser[495] = \<const0> ;
  assign s_axi_ruser[494] = \<const0> ;
  assign s_axi_ruser[493] = \<const0> ;
  assign s_axi_ruser[492] = \<const0> ;
  assign s_axi_ruser[491] = \<const0> ;
  assign s_axi_ruser[490] = \<const0> ;
  assign s_axi_ruser[489] = \<const0> ;
  assign s_axi_ruser[488] = \<const0> ;
  assign s_axi_ruser[487] = \<const0> ;
  assign s_axi_ruser[486] = \<const0> ;
  assign s_axi_ruser[485] = \<const0> ;
  assign s_axi_ruser[484] = \<const0> ;
  assign s_axi_ruser[483] = \<const0> ;
  assign s_axi_ruser[482] = \<const0> ;
  assign s_axi_ruser[481] = \<const0> ;
  assign s_axi_ruser[480] = \<const0> ;
  assign s_axi_ruser[479] = \<const0> ;
  assign s_axi_ruser[478] = \<const0> ;
  assign s_axi_ruser[477] = \<const0> ;
  assign s_axi_ruser[476] = \<const0> ;
  assign s_axi_ruser[475] = \<const0> ;
  assign s_axi_ruser[474] = \<const0> ;
  assign s_axi_ruser[473] = \<const0> ;
  assign s_axi_ruser[472] = \<const0> ;
  assign s_axi_ruser[471] = \<const0> ;
  assign s_axi_ruser[470] = \<const0> ;
  assign s_axi_ruser[469] = \<const0> ;
  assign s_axi_ruser[468] = \<const0> ;
  assign s_axi_ruser[467] = \<const0> ;
  assign s_axi_ruser[466] = \<const0> ;
  assign s_axi_ruser[465] = \<const0> ;
  assign s_axi_ruser[464] = \<const0> ;
  assign s_axi_ruser[463] = \<const0> ;
  assign s_axi_ruser[462] = \<const0> ;
  assign s_axi_ruser[461] = \<const0> ;
  assign s_axi_ruser[460] = \<const0> ;
  assign s_axi_ruser[459] = \<const0> ;
  assign s_axi_ruser[458] = \<const0> ;
  assign s_axi_ruser[457] = \<const0> ;
  assign s_axi_ruser[456] = \<const0> ;
  assign s_axi_ruser[455] = \<const0> ;
  assign s_axi_ruser[454] = \<const0> ;
  assign s_axi_ruser[453] = \<const0> ;
  assign s_axi_ruser[452] = \<const0> ;
  assign s_axi_ruser[451] = \<const0> ;
  assign s_axi_ruser[450] = \<const0> ;
  assign s_axi_ruser[449] = \<const0> ;
  assign s_axi_ruser[448] = \<const0> ;
  assign s_axi_ruser[447] = \<const0> ;
  assign s_axi_ruser[446] = \<const0> ;
  assign s_axi_ruser[445] = \<const0> ;
  assign s_axi_ruser[444] = \<const0> ;
  assign s_axi_ruser[443] = \<const0> ;
  assign s_axi_ruser[442] = \<const0> ;
  assign s_axi_ruser[441] = \<const0> ;
  assign s_axi_ruser[440] = \<const0> ;
  assign s_axi_ruser[439] = \<const0> ;
  assign s_axi_ruser[438] = \<const0> ;
  assign s_axi_ruser[437] = \<const0> ;
  assign s_axi_ruser[436] = \<const0> ;
  assign s_axi_ruser[435] = \<const0> ;
  assign s_axi_ruser[434] = \<const0> ;
  assign s_axi_ruser[433] = \<const0> ;
  assign s_axi_ruser[432] = \<const0> ;
  assign s_axi_ruser[431] = \<const0> ;
  assign s_axi_ruser[430] = \<const0> ;
  assign s_axi_ruser[429] = \<const0> ;
  assign s_axi_ruser[428] = \<const0> ;
  assign s_axi_ruser[427] = \<const0> ;
  assign s_axi_ruser[426] = \<const0> ;
  assign s_axi_ruser[425] = \<const0> ;
  assign s_axi_ruser[424] = \<const0> ;
  assign s_axi_ruser[423] = \<const0> ;
  assign s_axi_ruser[422] = \<const0> ;
  assign s_axi_ruser[421] = \<const0> ;
  assign s_axi_ruser[420] = \<const0> ;
  assign s_axi_ruser[419] = \<const0> ;
  assign s_axi_ruser[418] = \<const0> ;
  assign s_axi_ruser[417] = \<const0> ;
  assign s_axi_ruser[416] = \<const0> ;
  assign s_axi_ruser[415] = \<const0> ;
  assign s_axi_ruser[414] = \<const0> ;
  assign s_axi_ruser[413] = \<const0> ;
  assign s_axi_ruser[412] = \<const0> ;
  assign s_axi_ruser[411] = \<const0> ;
  assign s_axi_ruser[410] = \<const0> ;
  assign s_axi_ruser[409] = \<const0> ;
  assign s_axi_ruser[408] = \<const0> ;
  assign s_axi_ruser[407] = \<const0> ;
  assign s_axi_ruser[406] = \<const0> ;
  assign s_axi_ruser[405] = \<const0> ;
  assign s_axi_ruser[404] = \<const0> ;
  assign s_axi_ruser[403] = \<const0> ;
  assign s_axi_ruser[402] = \<const0> ;
  assign s_axi_ruser[401] = \<const0> ;
  assign s_axi_ruser[400] = \<const0> ;
  assign s_axi_ruser[399] = \<const0> ;
  assign s_axi_ruser[398] = \<const0> ;
  assign s_axi_ruser[397] = \<const0> ;
  assign s_axi_ruser[396] = \<const0> ;
  assign s_axi_ruser[395] = \<const0> ;
  assign s_axi_ruser[394] = \<const0> ;
  assign s_axi_ruser[393] = \<const0> ;
  assign s_axi_ruser[392] = \<const0> ;
  assign s_axi_ruser[391] = \<const0> ;
  assign s_axi_ruser[390] = \<const0> ;
  assign s_axi_ruser[389] = \<const0> ;
  assign s_axi_ruser[388] = \<const0> ;
  assign s_axi_ruser[387] = \<const0> ;
  assign s_axi_ruser[386] = \<const0> ;
  assign s_axi_ruser[385] = \<const0> ;
  assign s_axi_ruser[384] = \<const0> ;
  assign s_axi_ruser[383] = \<const0> ;
  assign s_axi_ruser[382] = \<const0> ;
  assign s_axi_ruser[381] = \<const0> ;
  assign s_axi_ruser[380] = \<const0> ;
  assign s_axi_ruser[379] = \<const0> ;
  assign s_axi_ruser[378] = \<const0> ;
  assign s_axi_ruser[377] = \<const0> ;
  assign s_axi_ruser[376] = \<const0> ;
  assign s_axi_ruser[375] = \<const0> ;
  assign s_axi_ruser[374] = \<const0> ;
  assign s_axi_ruser[373] = \<const0> ;
  assign s_axi_ruser[372] = \<const0> ;
  assign s_axi_ruser[371] = \<const0> ;
  assign s_axi_ruser[370] = \<const0> ;
  assign s_axi_ruser[369] = \<const0> ;
  assign s_axi_ruser[368] = \<const0> ;
  assign s_axi_ruser[367] = \<const0> ;
  assign s_axi_ruser[366] = \<const0> ;
  assign s_axi_ruser[365] = \<const0> ;
  assign s_axi_ruser[364] = \<const0> ;
  assign s_axi_ruser[363] = \<const0> ;
  assign s_axi_ruser[362] = \<const0> ;
  assign s_axi_ruser[361] = \<const0> ;
  assign s_axi_ruser[360] = \<const0> ;
  assign s_axi_ruser[359] = \<const0> ;
  assign s_axi_ruser[358] = \<const0> ;
  assign s_axi_ruser[357] = \<const0> ;
  assign s_axi_ruser[356] = \<const0> ;
  assign s_axi_ruser[355] = \<const0> ;
  assign s_axi_ruser[354] = \<const0> ;
  assign s_axi_ruser[353] = \<const0> ;
  assign s_axi_ruser[352] = \<const0> ;
  assign s_axi_ruser[351] = \<const0> ;
  assign s_axi_ruser[350] = \<const0> ;
  assign s_axi_ruser[349] = \<const0> ;
  assign s_axi_ruser[348] = \<const0> ;
  assign s_axi_ruser[347] = \<const0> ;
  assign s_axi_ruser[346] = \<const0> ;
  assign s_axi_ruser[345] = \<const0> ;
  assign s_axi_ruser[344] = \<const0> ;
  assign s_axi_ruser[343] = \<const0> ;
  assign s_axi_ruser[342] = \<const0> ;
  assign s_axi_ruser[341] = \<const0> ;
  assign s_axi_ruser[340] = \<const0> ;
  assign s_axi_ruser[339] = \<const0> ;
  assign s_axi_ruser[338] = \<const0> ;
  assign s_axi_ruser[337] = \<const0> ;
  assign s_axi_ruser[336] = \<const0> ;
  assign s_axi_ruser[335] = \<const0> ;
  assign s_axi_ruser[334] = \<const0> ;
  assign s_axi_ruser[333] = \<const0> ;
  assign s_axi_ruser[332] = \<const0> ;
  assign s_axi_ruser[331] = \<const0> ;
  assign s_axi_ruser[330] = \<const0> ;
  assign s_axi_ruser[329] = \<const0> ;
  assign s_axi_ruser[328] = \<const0> ;
  assign s_axi_ruser[327] = \<const0> ;
  assign s_axi_ruser[326] = \<const0> ;
  assign s_axi_ruser[325] = \<const0> ;
  assign s_axi_ruser[324] = \<const0> ;
  assign s_axi_ruser[323] = \<const0> ;
  assign s_axi_ruser[322] = \<const0> ;
  assign s_axi_ruser[321] = \<const0> ;
  assign s_axi_ruser[320] = \<const0> ;
  assign s_axi_ruser[319] = \<const0> ;
  assign s_axi_ruser[318] = \<const0> ;
  assign s_axi_ruser[317] = \<const0> ;
  assign s_axi_ruser[316] = \<const0> ;
  assign s_axi_ruser[315] = \<const0> ;
  assign s_axi_ruser[314] = \<const0> ;
  assign s_axi_ruser[313] = \<const0> ;
  assign s_axi_ruser[312] = \<const0> ;
  assign s_axi_ruser[311] = \<const0> ;
  assign s_axi_ruser[310] = \<const0> ;
  assign s_axi_ruser[309] = \<const0> ;
  assign s_axi_ruser[308] = \<const0> ;
  assign s_axi_ruser[307] = \<const0> ;
  assign s_axi_ruser[306] = \<const0> ;
  assign s_axi_ruser[305] = \<const0> ;
  assign s_axi_ruser[304] = \<const0> ;
  assign s_axi_ruser[303] = \<const0> ;
  assign s_axi_ruser[302] = \<const0> ;
  assign s_axi_ruser[301] = \<const0> ;
  assign s_axi_ruser[300] = \<const0> ;
  assign s_axi_ruser[299] = \<const0> ;
  assign s_axi_ruser[298] = \<const0> ;
  assign s_axi_ruser[297] = \<const0> ;
  assign s_axi_ruser[296] = \<const0> ;
  assign s_axi_ruser[295] = \<const0> ;
  assign s_axi_ruser[294] = \<const0> ;
  assign s_axi_ruser[293] = \<const0> ;
  assign s_axi_ruser[292] = \<const0> ;
  assign s_axi_ruser[291] = \<const0> ;
  assign s_axi_ruser[290] = \<const0> ;
  assign s_axi_ruser[289] = \<const0> ;
  assign s_axi_ruser[288] = \<const0> ;
  assign s_axi_ruser[287] = \<const0> ;
  assign s_axi_ruser[286] = \<const0> ;
  assign s_axi_ruser[285] = \<const0> ;
  assign s_axi_ruser[284] = \<const0> ;
  assign s_axi_ruser[283] = \<const0> ;
  assign s_axi_ruser[282] = \<const0> ;
  assign s_axi_ruser[281] = \<const0> ;
  assign s_axi_ruser[280] = \<const0> ;
  assign s_axi_ruser[279] = \<const0> ;
  assign s_axi_ruser[278] = \<const0> ;
  assign s_axi_ruser[277] = \<const0> ;
  assign s_axi_ruser[276] = \<const0> ;
  assign s_axi_ruser[275] = \<const0> ;
  assign s_axi_ruser[274] = \<const0> ;
  assign s_axi_ruser[273] = \<const0> ;
  assign s_axi_ruser[272] = \<const0> ;
  assign s_axi_ruser[271] = \<const0> ;
  assign s_axi_ruser[270] = \<const0> ;
  assign s_axi_ruser[269] = \<const0> ;
  assign s_axi_ruser[268] = \<const0> ;
  assign s_axi_ruser[267] = \<const0> ;
  assign s_axi_ruser[266] = \<const0> ;
  assign s_axi_ruser[265] = \<const0> ;
  assign s_axi_ruser[264] = \<const0> ;
  assign s_axi_ruser[263] = \<const0> ;
  assign s_axi_ruser[262] = \<const0> ;
  assign s_axi_ruser[261] = \<const0> ;
  assign s_axi_ruser[260] = \<const0> ;
  assign s_axi_ruser[259] = \<const0> ;
  assign s_axi_ruser[258] = \<const0> ;
  assign s_axi_ruser[257] = \<const0> ;
  assign s_axi_ruser[256] = \<const0> ;
  assign s_axi_ruser[255] = \<const0> ;
  assign s_axi_ruser[254] = \<const0> ;
  assign s_axi_ruser[253] = \<const0> ;
  assign s_axi_ruser[252] = \<const0> ;
  assign s_axi_ruser[251] = \<const0> ;
  assign s_axi_ruser[250] = \<const0> ;
  assign s_axi_ruser[249] = \<const0> ;
  assign s_axi_ruser[248] = \<const0> ;
  assign s_axi_ruser[247] = \<const0> ;
  assign s_axi_ruser[246] = \<const0> ;
  assign s_axi_ruser[245] = \<const0> ;
  assign s_axi_ruser[244] = \<const0> ;
  assign s_axi_ruser[243] = \<const0> ;
  assign s_axi_ruser[242] = \<const0> ;
  assign s_axi_ruser[241] = \<const0> ;
  assign s_axi_ruser[240] = \<const0> ;
  assign s_axi_ruser[239] = \<const0> ;
  assign s_axi_ruser[238] = \<const0> ;
  assign s_axi_ruser[237] = \<const0> ;
  assign s_axi_ruser[236] = \<const0> ;
  assign s_axi_ruser[235] = \<const0> ;
  assign s_axi_ruser[234] = \<const0> ;
  assign s_axi_ruser[233] = \<const0> ;
  assign s_axi_ruser[232] = \<const0> ;
  assign s_axi_ruser[231] = \<const0> ;
  assign s_axi_ruser[230] = \<const0> ;
  assign s_axi_ruser[229] = \<const0> ;
  assign s_axi_ruser[228] = \<const0> ;
  assign s_axi_ruser[227] = \<const0> ;
  assign s_axi_ruser[226] = \<const0> ;
  assign s_axi_ruser[225] = \<const0> ;
  assign s_axi_ruser[224] = \<const0> ;
  assign s_axi_ruser[223] = \<const0> ;
  assign s_axi_ruser[222] = \<const0> ;
  assign s_axi_ruser[221] = \<const0> ;
  assign s_axi_ruser[220] = \<const0> ;
  assign s_axi_ruser[219] = \<const0> ;
  assign s_axi_ruser[218] = \<const0> ;
  assign s_axi_ruser[217] = \<const0> ;
  assign s_axi_ruser[216] = \<const0> ;
  assign s_axi_ruser[215] = \<const0> ;
  assign s_axi_ruser[214] = \<const0> ;
  assign s_axi_ruser[213] = \<const0> ;
  assign s_axi_ruser[212] = \<const0> ;
  assign s_axi_ruser[211] = \<const0> ;
  assign s_axi_ruser[210] = \<const0> ;
  assign s_axi_ruser[209] = \<const0> ;
  assign s_axi_ruser[208] = \<const0> ;
  assign s_axi_ruser[207] = \<const0> ;
  assign s_axi_ruser[206] = \<const0> ;
  assign s_axi_ruser[205] = \<const0> ;
  assign s_axi_ruser[204] = \<const0> ;
  assign s_axi_ruser[203] = \<const0> ;
  assign s_axi_ruser[202] = \<const0> ;
  assign s_axi_ruser[201] = \<const0> ;
  assign s_axi_ruser[200] = \<const0> ;
  assign s_axi_ruser[199] = \<const0> ;
  assign s_axi_ruser[198] = \<const0> ;
  assign s_axi_ruser[197] = \<const0> ;
  assign s_axi_ruser[196] = \<const0> ;
  assign s_axi_ruser[195] = \<const0> ;
  assign s_axi_ruser[194] = \<const0> ;
  assign s_axi_ruser[193] = \<const0> ;
  assign s_axi_ruser[192] = \<const0> ;
  assign s_axi_ruser[191] = \<const0> ;
  assign s_axi_ruser[190] = \<const0> ;
  assign s_axi_ruser[189] = \<const0> ;
  assign s_axi_ruser[188] = \<const0> ;
  assign s_axi_ruser[187] = \<const0> ;
  assign s_axi_ruser[186] = \<const0> ;
  assign s_axi_ruser[185] = \<const0> ;
  assign s_axi_ruser[184] = \<const0> ;
  assign s_axi_ruser[183] = \<const0> ;
  assign s_axi_ruser[182] = \<const0> ;
  assign s_axi_ruser[181] = \<const0> ;
  assign s_axi_ruser[180] = \<const0> ;
  assign s_axi_ruser[179] = \<const0> ;
  assign s_axi_ruser[178] = \<const0> ;
  assign s_axi_ruser[177] = \<const0> ;
  assign s_axi_ruser[176] = \<const0> ;
  assign s_axi_ruser[175] = \<const0> ;
  assign s_axi_ruser[174] = \<const0> ;
  assign s_axi_ruser[173] = \<const0> ;
  assign s_axi_ruser[172] = \<const0> ;
  assign s_axi_ruser[171] = \<const0> ;
  assign s_axi_ruser[170] = \<const0> ;
  assign s_axi_ruser[169] = \<const0> ;
  assign s_axi_ruser[168] = \<const0> ;
  assign s_axi_ruser[167] = \<const0> ;
  assign s_axi_ruser[166] = \<const0> ;
  assign s_axi_ruser[165] = \<const0> ;
  assign s_axi_ruser[164] = \<const0> ;
  assign s_axi_ruser[163] = \<const0> ;
  assign s_axi_ruser[162] = \<const0> ;
  assign s_axi_ruser[161] = \<const0> ;
  assign s_axi_ruser[160] = \<const0> ;
  assign s_axi_ruser[159] = \<const0> ;
  assign s_axi_ruser[158] = \<const0> ;
  assign s_axi_ruser[157] = \<const0> ;
  assign s_axi_ruser[156] = \<const0> ;
  assign s_axi_ruser[155] = \<const0> ;
  assign s_axi_ruser[154] = \<const0> ;
  assign s_axi_ruser[153] = \<const0> ;
  assign s_axi_ruser[152] = \<const0> ;
  assign s_axi_ruser[151] = \<const0> ;
  assign s_axi_ruser[150] = \<const0> ;
  assign s_axi_ruser[149] = \<const0> ;
  assign s_axi_ruser[148] = \<const0> ;
  assign s_axi_ruser[147] = \<const0> ;
  assign s_axi_ruser[146] = \<const0> ;
  assign s_axi_ruser[145] = \<const0> ;
  assign s_axi_ruser[144] = \<const0> ;
  assign s_axi_ruser[143] = \<const0> ;
  assign s_axi_ruser[142] = \<const0> ;
  assign s_axi_ruser[141] = \<const0> ;
  assign s_axi_ruser[140] = \<const0> ;
  assign s_axi_ruser[139] = \<const0> ;
  assign s_axi_ruser[138] = \<const0> ;
  assign s_axi_ruser[137] = \<const0> ;
  assign s_axi_ruser[136] = \<const0> ;
  assign s_axi_ruser[135] = \<const0> ;
  assign s_axi_ruser[134] = \<const0> ;
  assign s_axi_ruser[133] = \<const0> ;
  assign s_axi_ruser[132] = \<const0> ;
  assign s_axi_ruser[131] = \<const0> ;
  assign s_axi_ruser[130] = \<const0> ;
  assign s_axi_ruser[129] = \<const0> ;
  assign s_axi_ruser[128] = \<const0> ;
  assign s_axi_ruser[127] = \<const0> ;
  assign s_axi_ruser[126] = \<const0> ;
  assign s_axi_ruser[125] = \<const0> ;
  assign s_axi_ruser[124] = \<const0> ;
  assign s_axi_ruser[123] = \<const0> ;
  assign s_axi_ruser[122] = \<const0> ;
  assign s_axi_ruser[121] = \<const0> ;
  assign s_axi_ruser[120] = \<const0> ;
  assign s_axi_ruser[119] = \<const0> ;
  assign s_axi_ruser[118] = \<const0> ;
  assign s_axi_ruser[117] = \<const0> ;
  assign s_axi_ruser[116] = \<const0> ;
  assign s_axi_ruser[115] = \<const0> ;
  assign s_axi_ruser[114] = \<const0> ;
  assign s_axi_ruser[113] = \<const0> ;
  assign s_axi_ruser[112] = \<const0> ;
  assign s_axi_ruser[111] = \<const0> ;
  assign s_axi_ruser[110] = \<const0> ;
  assign s_axi_ruser[109] = \<const0> ;
  assign s_axi_ruser[108] = \<const0> ;
  assign s_axi_ruser[107] = \<const0> ;
  assign s_axi_ruser[106] = \<const0> ;
  assign s_axi_ruser[105] = \<const0> ;
  assign s_axi_ruser[104] = \<const0> ;
  assign s_axi_ruser[103] = \<const0> ;
  assign s_axi_ruser[102] = \<const0> ;
  assign s_axi_ruser[101] = \<const0> ;
  assign s_axi_ruser[100] = \<const0> ;
  assign s_axi_ruser[99] = \<const0> ;
  assign s_axi_ruser[98] = \<const0> ;
  assign s_axi_ruser[97] = \<const0> ;
  assign s_axi_ruser[96] = \<const0> ;
  assign s_axi_ruser[95] = \<const0> ;
  assign s_axi_ruser[94] = \<const0> ;
  assign s_axi_ruser[93] = \<const0> ;
  assign s_axi_ruser[92] = \<const0> ;
  assign s_axi_ruser[91] = \<const0> ;
  assign s_axi_ruser[90] = \<const0> ;
  assign s_axi_ruser[89] = \<const0> ;
  assign s_axi_ruser[88] = \<const0> ;
  assign s_axi_ruser[87] = \<const0> ;
  assign s_axi_ruser[86] = \<const0> ;
  assign s_axi_ruser[85] = \<const0> ;
  assign s_axi_ruser[84] = \<const0> ;
  assign s_axi_ruser[83] = \<const0> ;
  assign s_axi_ruser[82] = \<const0> ;
  assign s_axi_ruser[81] = \<const0> ;
  assign s_axi_ruser[80] = \<const0> ;
  assign s_axi_ruser[79] = \<const0> ;
  assign s_axi_ruser[78] = \<const0> ;
  assign s_axi_ruser[77] = \<const0> ;
  assign s_axi_ruser[76] = \<const0> ;
  assign s_axi_ruser[75] = \<const0> ;
  assign s_axi_ruser[74] = \<const0> ;
  assign s_axi_ruser[73] = \<const0> ;
  assign s_axi_ruser[72] = \<const0> ;
  assign s_axi_ruser[71] = \<const0> ;
  assign s_axi_ruser[70] = \<const0> ;
  assign s_axi_ruser[69] = \<const0> ;
  assign s_axi_ruser[68] = \<const0> ;
  assign s_axi_ruser[67] = \<const0> ;
  assign s_axi_ruser[66] = \<const0> ;
  assign s_axi_ruser[65] = \<const0> ;
  assign s_axi_ruser[64] = \<const0> ;
  assign s_axi_ruser[63] = \<const0> ;
  assign s_axi_ruser[62] = \<const0> ;
  assign s_axi_ruser[61] = \<const0> ;
  assign s_axi_ruser[60] = \<const0> ;
  assign s_axi_ruser[59] = \<const0> ;
  assign s_axi_ruser[58] = \<const0> ;
  assign s_axi_ruser[57] = \<const0> ;
  assign s_axi_ruser[56] = \<const0> ;
  assign s_axi_ruser[55] = \<const0> ;
  assign s_axi_ruser[54] = \<const0> ;
  assign s_axi_ruser[53] = \<const0> ;
  assign s_axi_ruser[52] = \<const0> ;
  assign s_axi_ruser[51] = \<const0> ;
  assign s_axi_ruser[50] = \<const0> ;
  assign s_axi_ruser[49] = \<const0> ;
  assign s_axi_ruser[48] = \<const0> ;
  assign s_axi_ruser[47] = \<const0> ;
  assign s_axi_ruser[46] = \<const0> ;
  assign s_axi_ruser[45] = \<const0> ;
  assign s_axi_ruser[44] = \<const0> ;
  assign s_axi_ruser[43] = \<const0> ;
  assign s_axi_ruser[42] = \<const0> ;
  assign s_axi_ruser[41] = \<const0> ;
  assign s_axi_ruser[40] = \<const0> ;
  assign s_axi_ruser[39] = \<const0> ;
  assign s_axi_ruser[38] = \<const0> ;
  assign s_axi_ruser[37] = \<const0> ;
  assign s_axi_ruser[36] = \<const0> ;
  assign s_axi_ruser[35] = \<const0> ;
  assign s_axi_ruser[34] = \<const0> ;
  assign s_axi_ruser[33] = \<const0> ;
  assign s_axi_ruser[32] = \<const0> ;
  assign s_axi_ruser[31] = \<const0> ;
  assign s_axi_ruser[30] = \<const0> ;
  assign s_axi_ruser[29] = \<const0> ;
  assign s_axi_ruser[28] = \<const0> ;
  assign s_axi_ruser[27] = \<const0> ;
  assign s_axi_ruser[26] = \<const0> ;
  assign s_axi_ruser[25] = \<const0> ;
  assign s_axi_ruser[24] = \<const0> ;
  assign s_axi_ruser[23] = \<const0> ;
  assign s_axi_ruser[22] = \<const0> ;
  assign s_axi_ruser[21] = \<const0> ;
  assign s_axi_ruser[20] = \<const0> ;
  assign s_axi_ruser[19] = \<const0> ;
  assign s_axi_ruser[18] = \<const0> ;
  assign s_axi_ruser[17] = \<const0> ;
  assign s_axi_ruser[16] = \<const0> ;
  assign s_axi_ruser[15] = \<const0> ;
  assign s_axi_ruser[14] = \<const0> ;
  assign s_axi_ruser[13] = \<const0> ;
  assign s_axi_ruser[12] = \<const0> ;
  assign s_axi_ruser[11] = \<const0> ;
  assign s_axi_ruser[10] = \<const0> ;
  assign s_axi_ruser[9] = \<const0> ;
  assign s_axi_ruser[8] = \<const0> ;
  assign s_axi_ruser[7] = \<const0> ;
  assign s_axi_ruser[6] = \<const0> ;
  assign s_axi_ruser[5] = \<const0> ;
  assign s_axi_ruser[4] = \<const0> ;
  assign s_axi_ruser[3] = \<const0> ;
  assign s_axi_ruser[2] = \<const0> ;
  assign s_axi_ruser[1] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    areset_i_1
       (.I0(aresetn),
        .O(areset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    areset_reg
       (.C(aclk),
        .CE(1'b1),
        .D(areset_i_1_n_0),
        .Q(areset),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h6A)) 
    \m_axi_awuser[64]_INST_0 
       (.I0(s_axi_awlen[1]),
        .I1(s_axi_awlen[0]),
        .I2(s_axi_awaddr[2]),
        .O(\^m_axi_awuser [64]));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \m_axi_awuser[65]_INST_0 
       (.I0(s_axi_awlen[2]),
        .I1(s_axi_awlen[1]),
        .I2(s_axi_awaddr[2]),
        .I3(s_axi_awlen[0]),
        .O(\^m_axi_awuser [65]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \m_axi_awuser[66]_INST_0 
       (.I0(s_axi_awlen[3]),
        .I1(s_axi_awlen[0]),
        .I2(s_axi_awaddr[2]),
        .I3(s_axi_awlen[1]),
        .I4(s_axi_awlen[2]),
        .O(\^m_axi_awuser [66]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \m_axi_awuser[67]_INST_0 
       (.I0(s_axi_awlen[4]),
        .I1(s_axi_awlen[0]),
        .I2(s_axi_awaddr[2]),
        .I3(s_axi_awlen[1]),
        .I4(s_axi_awlen[2]),
        .I5(s_axi_awlen[3]),
        .O(\^m_axi_awuser [67]));
  LUT2 #(
    .INIT(4'h9)) 
    \m_axi_awuser[68]_INST_0 
       (.I0(s_axi_awlen[5]),
        .I1(\m_axi_awuser[71]_INST_0_i_1_n_0 ),
        .O(\^m_axi_awuser [68]));
  LUT3 #(
    .INIT(8'hB4)) 
    \m_axi_awuser[69]_INST_0 
       (.I0(\m_axi_awuser[71]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen[5]),
        .I2(s_axi_awlen[6]),
        .O(\^m_axi_awuser [69]));
  LUT4 #(
    .INIT(16'h9AAA)) 
    \m_axi_awuser[70]_INST_0 
       (.I0(s_axi_awlen[7]),
        .I1(\m_axi_awuser[71]_INST_0_i_1_n_0 ),
        .I2(s_axi_awlen[5]),
        .I3(s_axi_awlen[6]),
        .O(\^m_axi_awuser [70]));
  LUT4 #(
    .INIT(16'h2000)) 
    \m_axi_awuser[71]_INST_0 
       (.I0(s_axi_awlen[7]),
        .I1(\m_axi_awuser[71]_INST_0_i_1_n_0 ),
        .I2(s_axi_awlen[5]),
        .I3(s_axi_awlen[6]),
        .O(\^m_axi_awuser [71]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \m_axi_awuser[71]_INST_0_i_1 
       (.I0(s_axi_awlen[3]),
        .I1(s_axi_awlen[2]),
        .I2(s_axi_awlen[1]),
        .I3(s_axi_awaddr[2]),
        .I4(s_axi_awlen[0]),
        .I5(s_axi_awlen[4]),
        .O(\m_axi_awuser[71]_INST_0_i_1_n_0 ));
  ADC_axi_smc_0_sc_si_converter_v1_0_5_splitter splitter_inst
       (.aclk(aclk),
        .areset(areset),
        .m_axi_awready(m_axi_awready),
        .m_axi_awuser(\^m_axi_awuser [185:181]),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wuser(\^m_axi_wuser ),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_awaddr(s_axi_awaddr[6:0]),
        .s_axi_awlen(s_axi_awlen[4:0]),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* C_CONNECTIVITY = "3'b100" *) (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) (* C_NUM_MI = "1" *) 
(* C_NUM_SI = "3" *) (* C_PAYLD_WIDTH = "1854" *) (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
(* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) (* C_TESTING_MODE = "0" *) (* K_MAX_INFO_WIDTH = "1" *) 
(* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
(* ORIG_REF_NAME = "sc_switchboard_v1_0_4_top" *) 
module ADC_axi_smc_0_sc_switchboard_v1_0_4_top
   (aclk,
    aclken,
    connectivity,
    s_sc_send,
    s_sc_req,
    s_sc_info,
    s_sc_payld,
    s_sc_recv,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld);
  input aclk;
  input aclken;
  input [2:0]connectivity;
  input [2:0]s_sc_send;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [5561:0]s_sc_payld;
  output [2:0]s_sc_recv;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [1853:0]m_sc_payld;

  wire \<const0> ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire [1:0]\gen_mi[0].m_sc_sel_mi_r ;

  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[1853] = \<const0> ;
  assign m_sc_payld[1852] = \<const0> ;
  assign m_sc_payld[1851] = \<const0> ;
  assign m_sc_payld[1850] = \<const0> ;
  assign m_sc_payld[1849] = \<const0> ;
  assign m_sc_payld[1848] = \<const0> ;
  assign m_sc_payld[1847] = \<const0> ;
  assign m_sc_payld[1846] = \<const0> ;
  assign m_sc_payld[1845] = \<const0> ;
  assign m_sc_payld[1844] = \<const0> ;
  assign m_sc_payld[1843] = \<const0> ;
  assign m_sc_payld[1842] = \<const0> ;
  assign m_sc_payld[1841] = \<const0> ;
  assign m_sc_payld[1840] = \<const0> ;
  assign m_sc_payld[1839] = \<const0> ;
  assign m_sc_payld[1838] = \<const0> ;
  assign m_sc_payld[1837] = \<const0> ;
  assign m_sc_payld[1836] = \<const0> ;
  assign m_sc_payld[1835] = \<const0> ;
  assign m_sc_payld[1834] = \<const0> ;
  assign m_sc_payld[1833] = \<const0> ;
  assign m_sc_payld[1832] = \<const0> ;
  assign m_sc_payld[1831] = \<const0> ;
  assign m_sc_payld[1830] = \<const0> ;
  assign m_sc_payld[1829] = \<const0> ;
  assign m_sc_payld[1828] = \<const0> ;
  assign m_sc_payld[1827] = \<const0> ;
  assign m_sc_payld[1826] = \<const0> ;
  assign m_sc_payld[1825] = \<const0> ;
  assign m_sc_payld[1824] = \<const0> ;
  assign m_sc_payld[1823] = \<const0> ;
  assign m_sc_payld[1822] = \<const0> ;
  assign m_sc_payld[1821] = \<const0> ;
  assign m_sc_payld[1820] = \<const0> ;
  assign m_sc_payld[1819] = \<const0> ;
  assign m_sc_payld[1818] = \<const0> ;
  assign m_sc_payld[1817] = \<const0> ;
  assign m_sc_payld[1816] = \<const0> ;
  assign m_sc_payld[1815] = \<const0> ;
  assign m_sc_payld[1814] = \<const0> ;
  assign m_sc_payld[1813] = \<const0> ;
  assign m_sc_payld[1812] = \<const0> ;
  assign m_sc_payld[1811] = \<const0> ;
  assign m_sc_payld[1810] = \<const0> ;
  assign m_sc_payld[1809] = \<const0> ;
  assign m_sc_payld[1808] = \<const0> ;
  assign m_sc_payld[1807] = \<const0> ;
  assign m_sc_payld[1806] = \<const0> ;
  assign m_sc_payld[1805] = \<const0> ;
  assign m_sc_payld[1804] = \<const0> ;
  assign m_sc_payld[1803] = \<const0> ;
  assign m_sc_payld[1802] = \<const0> ;
  assign m_sc_payld[1801] = \<const0> ;
  assign m_sc_payld[1800] = \<const0> ;
  assign m_sc_payld[1799] = \<const0> ;
  assign m_sc_payld[1798] = \<const0> ;
  assign m_sc_payld[1797] = \<const0> ;
  assign m_sc_payld[1796] = \<const0> ;
  assign m_sc_payld[1795] = \<const0> ;
  assign m_sc_payld[1794] = \<const0> ;
  assign m_sc_payld[1793] = \<const0> ;
  assign m_sc_payld[1792] = \<const0> ;
  assign m_sc_payld[1791] = \<const0> ;
  assign m_sc_payld[1790] = \<const0> ;
  assign m_sc_payld[1789] = \<const0> ;
  assign m_sc_payld[1788] = \<const0> ;
  assign m_sc_payld[1787] = \<const0> ;
  assign m_sc_payld[1786] = \<const0> ;
  assign m_sc_payld[1785] = \<const0> ;
  assign m_sc_payld[1784] = \<const0> ;
  assign m_sc_payld[1783] = \<const0> ;
  assign m_sc_payld[1782] = \<const0> ;
  assign m_sc_payld[1781] = \<const0> ;
  assign m_sc_payld[1780] = \<const0> ;
  assign m_sc_payld[1779] = \<const0> ;
  assign m_sc_payld[1778] = \<const0> ;
  assign m_sc_payld[1777] = \<const0> ;
  assign m_sc_payld[1776] = \<const0> ;
  assign m_sc_payld[1775] = \<const0> ;
  assign m_sc_payld[1774] = \<const0> ;
  assign m_sc_payld[1773] = \<const0> ;
  assign m_sc_payld[1772] = \<const0> ;
  assign m_sc_payld[1771] = \<const0> ;
  assign m_sc_payld[1770] = \<const0> ;
  assign m_sc_payld[1769] = \<const0> ;
  assign m_sc_payld[1768] = \<const0> ;
  assign m_sc_payld[1767] = \<const0> ;
  assign m_sc_payld[1766] = \<const0> ;
  assign m_sc_payld[1765] = \<const0> ;
  assign m_sc_payld[1764] = \<const0> ;
  assign m_sc_payld[1763] = \<const0> ;
  assign m_sc_payld[1762] = \<const0> ;
  assign m_sc_payld[1761] = \<const0> ;
  assign m_sc_payld[1760] = \<const0> ;
  assign m_sc_payld[1759] = \<const0> ;
  assign m_sc_payld[1758] = \<const0> ;
  assign m_sc_payld[1757] = \<const0> ;
  assign m_sc_payld[1756] = \<const0> ;
  assign m_sc_payld[1755] = \<const0> ;
  assign m_sc_payld[1754] = \<const0> ;
  assign m_sc_payld[1753] = \<const0> ;
  assign m_sc_payld[1752] = \<const0> ;
  assign m_sc_payld[1751] = \<const0> ;
  assign m_sc_payld[1750] = \<const0> ;
  assign m_sc_payld[1749] = \<const0> ;
  assign m_sc_payld[1748] = \<const0> ;
  assign m_sc_payld[1747] = \<const0> ;
  assign m_sc_payld[1746] = \<const0> ;
  assign m_sc_payld[1745] = \<const0> ;
  assign m_sc_payld[1744] = \<const0> ;
  assign m_sc_payld[1743] = \<const0> ;
  assign m_sc_payld[1742] = \<const0> ;
  assign m_sc_payld[1741] = \<const0> ;
  assign m_sc_payld[1740] = \<const0> ;
  assign m_sc_payld[1739] = \<const0> ;
  assign m_sc_payld[1738] = \<const0> ;
  assign m_sc_payld[1737] = \<const0> ;
  assign m_sc_payld[1736] = \<const0> ;
  assign m_sc_payld[1735] = \<const0> ;
  assign m_sc_payld[1734] = \<const0> ;
  assign m_sc_payld[1733] = \<const0> ;
  assign m_sc_payld[1732] = \<const0> ;
  assign m_sc_payld[1731] = \<const0> ;
  assign m_sc_payld[1730] = \<const0> ;
  assign m_sc_payld[1729] = \<const0> ;
  assign m_sc_payld[1728] = \<const0> ;
  assign m_sc_payld[1727] = \<const0> ;
  assign m_sc_payld[1726] = \<const0> ;
  assign m_sc_payld[1725] = \<const0> ;
  assign m_sc_payld[1724] = \<const0> ;
  assign m_sc_payld[1723] = \<const0> ;
  assign m_sc_payld[1722] = \<const0> ;
  assign m_sc_payld[1721] = \<const0> ;
  assign m_sc_payld[1720] = \<const0> ;
  assign m_sc_payld[1719] = \<const0> ;
  assign m_sc_payld[1718] = \<const0> ;
  assign m_sc_payld[1717] = \<const0> ;
  assign m_sc_payld[1716] = \<const0> ;
  assign m_sc_payld[1715] = \<const0> ;
  assign m_sc_payld[1714] = \<const0> ;
  assign m_sc_payld[1713] = \<const0> ;
  assign m_sc_payld[1712] = \<const0> ;
  assign m_sc_payld[1711] = \<const0> ;
  assign m_sc_payld[1710] = \<const0> ;
  assign m_sc_payld[1709] = \<const0> ;
  assign m_sc_payld[1708] = \<const0> ;
  assign m_sc_payld[1707] = \<const0> ;
  assign m_sc_payld[1706] = \<const0> ;
  assign m_sc_payld[1705] = \<const0> ;
  assign m_sc_payld[1704] = \<const0> ;
  assign m_sc_payld[1703] = \<const0> ;
  assign m_sc_payld[1702] = \<const0> ;
  assign m_sc_payld[1701] = \<const0> ;
  assign m_sc_payld[1700] = \<const0> ;
  assign m_sc_payld[1699] = \<const0> ;
  assign m_sc_payld[1698] = \<const0> ;
  assign m_sc_payld[1697] = \<const0> ;
  assign m_sc_payld[1696] = \<const0> ;
  assign m_sc_payld[1695] = \<const0> ;
  assign m_sc_payld[1694] = \<const0> ;
  assign m_sc_payld[1693] = \<const0> ;
  assign m_sc_payld[1692] = \<const0> ;
  assign m_sc_payld[1691] = \<const0> ;
  assign m_sc_payld[1690] = \<const0> ;
  assign m_sc_payld[1689] = \<const0> ;
  assign m_sc_payld[1688] = \<const0> ;
  assign m_sc_payld[1687] = \<const0> ;
  assign m_sc_payld[1686] = \<const0> ;
  assign m_sc_payld[1685] = \<const0> ;
  assign m_sc_payld[1684] = \<const0> ;
  assign m_sc_payld[1683] = \<const0> ;
  assign m_sc_payld[1682] = \<const0> ;
  assign m_sc_payld[1681] = \<const0> ;
  assign m_sc_payld[1680] = \<const0> ;
  assign m_sc_payld[1679] = \<const0> ;
  assign m_sc_payld[1678] = \<const0> ;
  assign m_sc_payld[1677] = \<const0> ;
  assign m_sc_payld[1676] = \<const0> ;
  assign m_sc_payld[1675] = \<const0> ;
  assign m_sc_payld[1674] = \<const0> ;
  assign m_sc_payld[1673] = \<const0> ;
  assign m_sc_payld[1672] = \<const0> ;
  assign m_sc_payld[1671] = \<const0> ;
  assign m_sc_payld[1670] = \<const0> ;
  assign m_sc_payld[1669] = \<const0> ;
  assign m_sc_payld[1668] = \<const0> ;
  assign m_sc_payld[1667] = \<const0> ;
  assign m_sc_payld[1666] = \<const0> ;
  assign m_sc_payld[1665] = \<const0> ;
  assign m_sc_payld[1664] = \<const0> ;
  assign m_sc_payld[1663] = \<const0> ;
  assign m_sc_payld[1662] = \<const0> ;
  assign m_sc_payld[1661] = \<const0> ;
  assign m_sc_payld[1660] = \<const0> ;
  assign m_sc_payld[1659] = \<const0> ;
  assign m_sc_payld[1658] = \<const0> ;
  assign m_sc_payld[1657] = \<const0> ;
  assign m_sc_payld[1656] = \<const0> ;
  assign m_sc_payld[1655] = \<const0> ;
  assign m_sc_payld[1654] = \<const0> ;
  assign m_sc_payld[1653] = \<const0> ;
  assign m_sc_payld[1652] = \<const0> ;
  assign m_sc_payld[1651] = \<const0> ;
  assign m_sc_payld[1650] = \<const0> ;
  assign m_sc_payld[1649] = \<const0> ;
  assign m_sc_payld[1648] = \<const0> ;
  assign m_sc_payld[1647] = \<const0> ;
  assign m_sc_payld[1646] = \<const0> ;
  assign m_sc_payld[1645] = \<const0> ;
  assign m_sc_payld[1644] = \<const0> ;
  assign m_sc_payld[1643] = \<const0> ;
  assign m_sc_payld[1642] = \<const0> ;
  assign m_sc_payld[1641] = \<const0> ;
  assign m_sc_payld[1640] = \<const0> ;
  assign m_sc_payld[1639] = \<const0> ;
  assign m_sc_payld[1638] = \<const0> ;
  assign m_sc_payld[1637] = \<const0> ;
  assign m_sc_payld[1636] = \<const0> ;
  assign m_sc_payld[1635] = \<const0> ;
  assign m_sc_payld[1634] = \<const0> ;
  assign m_sc_payld[1633] = \<const0> ;
  assign m_sc_payld[1632] = \<const0> ;
  assign m_sc_payld[1631] = \<const0> ;
  assign m_sc_payld[1630] = \<const0> ;
  assign m_sc_payld[1629] = \<const0> ;
  assign m_sc_payld[1628] = \<const0> ;
  assign m_sc_payld[1627] = \<const0> ;
  assign m_sc_payld[1626] = \<const0> ;
  assign m_sc_payld[1625] = \<const0> ;
  assign m_sc_payld[1624] = \<const0> ;
  assign m_sc_payld[1623] = \<const0> ;
  assign m_sc_payld[1622] = \<const0> ;
  assign m_sc_payld[1621] = \<const0> ;
  assign m_sc_payld[1620] = \<const0> ;
  assign m_sc_payld[1619] = \<const0> ;
  assign m_sc_payld[1618] = \<const0> ;
  assign m_sc_payld[1617] = \<const0> ;
  assign m_sc_payld[1616] = \<const0> ;
  assign m_sc_payld[1615] = \<const0> ;
  assign m_sc_payld[1614] = \<const0> ;
  assign m_sc_payld[1613] = \<const0> ;
  assign m_sc_payld[1612] = \<const0> ;
  assign m_sc_payld[1611] = \<const0> ;
  assign m_sc_payld[1610] = \<const0> ;
  assign m_sc_payld[1609] = \<const0> ;
  assign m_sc_payld[1608] = \<const0> ;
  assign m_sc_payld[1607] = \<const0> ;
  assign m_sc_payld[1606] = \<const0> ;
  assign m_sc_payld[1605] = \<const0> ;
  assign m_sc_payld[1604] = \<const0> ;
  assign m_sc_payld[1603] = \<const0> ;
  assign m_sc_payld[1602] = \<const0> ;
  assign m_sc_payld[1601] = \<const0> ;
  assign m_sc_payld[1600] = \<const0> ;
  assign m_sc_payld[1599] = \<const0> ;
  assign m_sc_payld[1598] = \<const0> ;
  assign m_sc_payld[1597] = \<const0> ;
  assign m_sc_payld[1596] = \<const0> ;
  assign m_sc_payld[1595] = \<const0> ;
  assign m_sc_payld[1594] = \<const0> ;
  assign m_sc_payld[1593] = \<const0> ;
  assign m_sc_payld[1592] = \<const0> ;
  assign m_sc_payld[1591] = \<const0> ;
  assign m_sc_payld[1590] = \<const0> ;
  assign m_sc_payld[1589] = \<const0> ;
  assign m_sc_payld[1588] = \<const0> ;
  assign m_sc_payld[1587] = \<const0> ;
  assign m_sc_payld[1586] = \<const0> ;
  assign m_sc_payld[1585] = \<const0> ;
  assign m_sc_payld[1584] = \<const0> ;
  assign m_sc_payld[1583] = \<const0> ;
  assign m_sc_payld[1582] = \<const0> ;
  assign m_sc_payld[1581] = \<const0> ;
  assign m_sc_payld[1580] = \<const0> ;
  assign m_sc_payld[1579] = \<const0> ;
  assign m_sc_payld[1578] = \<const0> ;
  assign m_sc_payld[1577] = \<const0> ;
  assign m_sc_payld[1576] = \<const0> ;
  assign m_sc_payld[1575] = \<const0> ;
  assign m_sc_payld[1574] = \<const0> ;
  assign m_sc_payld[1573] = \<const0> ;
  assign m_sc_payld[1572] = \<const0> ;
  assign m_sc_payld[1571] = \<const0> ;
  assign m_sc_payld[1570] = \<const0> ;
  assign m_sc_payld[1569] = \<const0> ;
  assign m_sc_payld[1568] = \<const0> ;
  assign m_sc_payld[1567] = \<const0> ;
  assign m_sc_payld[1566] = \<const0> ;
  assign m_sc_payld[1565] = \<const0> ;
  assign m_sc_payld[1564] = \<const0> ;
  assign m_sc_payld[1563] = \<const0> ;
  assign m_sc_payld[1562] = \<const0> ;
  assign m_sc_payld[1561] = \<const0> ;
  assign m_sc_payld[1560] = \<const0> ;
  assign m_sc_payld[1559] = \<const0> ;
  assign m_sc_payld[1558] = \<const0> ;
  assign m_sc_payld[1557] = \<const0> ;
  assign m_sc_payld[1556] = \<const0> ;
  assign m_sc_payld[1555] = \<const0> ;
  assign m_sc_payld[1554] = \<const0> ;
  assign m_sc_payld[1553] = \<const0> ;
  assign m_sc_payld[1552] = \<const0> ;
  assign m_sc_payld[1551] = \<const0> ;
  assign m_sc_payld[1550] = \<const0> ;
  assign m_sc_payld[1549] = \<const0> ;
  assign m_sc_payld[1548] = \<const0> ;
  assign m_sc_payld[1547] = \<const0> ;
  assign m_sc_payld[1546] = \<const0> ;
  assign m_sc_payld[1545] = \<const0> ;
  assign m_sc_payld[1544] = \<const0> ;
  assign m_sc_payld[1543] = \<const0> ;
  assign m_sc_payld[1542] = \<const0> ;
  assign m_sc_payld[1541] = \<const0> ;
  assign m_sc_payld[1540] = \<const0> ;
  assign m_sc_payld[1539] = \<const0> ;
  assign m_sc_payld[1538] = \<const0> ;
  assign m_sc_payld[1537] = \<const0> ;
  assign m_sc_payld[1536] = \<const0> ;
  assign m_sc_payld[1535] = \<const0> ;
  assign m_sc_payld[1534] = \<const0> ;
  assign m_sc_payld[1533] = \<const0> ;
  assign m_sc_payld[1532] = \<const0> ;
  assign m_sc_payld[1531] = \<const0> ;
  assign m_sc_payld[1530] = \<const0> ;
  assign m_sc_payld[1529] = \<const0> ;
  assign m_sc_payld[1528] = \<const0> ;
  assign m_sc_payld[1527] = \<const0> ;
  assign m_sc_payld[1526] = \<const0> ;
  assign m_sc_payld[1525] = \<const0> ;
  assign m_sc_payld[1524] = \<const0> ;
  assign m_sc_payld[1523] = \<const0> ;
  assign m_sc_payld[1522] = \<const0> ;
  assign m_sc_payld[1521] = \<const0> ;
  assign m_sc_payld[1520] = \<const0> ;
  assign m_sc_payld[1519] = \<const0> ;
  assign m_sc_payld[1518] = \<const0> ;
  assign m_sc_payld[1517] = \<const0> ;
  assign m_sc_payld[1516] = \<const0> ;
  assign m_sc_payld[1515] = \<const0> ;
  assign m_sc_payld[1514] = \<const0> ;
  assign m_sc_payld[1513] = \<const0> ;
  assign m_sc_payld[1512] = \<const0> ;
  assign m_sc_payld[1511] = \<const0> ;
  assign m_sc_payld[1510] = \<const0> ;
  assign m_sc_payld[1509] = \<const0> ;
  assign m_sc_payld[1508] = \<const0> ;
  assign m_sc_payld[1507] = \<const0> ;
  assign m_sc_payld[1506] = \<const0> ;
  assign m_sc_payld[1505] = \<const0> ;
  assign m_sc_payld[1504] = \<const0> ;
  assign m_sc_payld[1503] = \<const0> ;
  assign m_sc_payld[1502] = \<const0> ;
  assign m_sc_payld[1501] = \<const0> ;
  assign m_sc_payld[1500] = \<const0> ;
  assign m_sc_payld[1499] = \<const0> ;
  assign m_sc_payld[1498] = \<const0> ;
  assign m_sc_payld[1497] = \<const0> ;
  assign m_sc_payld[1496] = \<const0> ;
  assign m_sc_payld[1495] = \<const0> ;
  assign m_sc_payld[1494] = \<const0> ;
  assign m_sc_payld[1493] = \<const0> ;
  assign m_sc_payld[1492] = \<const0> ;
  assign m_sc_payld[1491] = \<const0> ;
  assign m_sc_payld[1490] = \<const0> ;
  assign m_sc_payld[1489] = \<const0> ;
  assign m_sc_payld[1488] = \<const0> ;
  assign m_sc_payld[1487] = \<const0> ;
  assign m_sc_payld[1486] = \<const0> ;
  assign m_sc_payld[1485] = \<const0> ;
  assign m_sc_payld[1484] = \<const0> ;
  assign m_sc_payld[1483] = \<const0> ;
  assign m_sc_payld[1482] = \<const0> ;
  assign m_sc_payld[1481] = \<const0> ;
  assign m_sc_payld[1480] = \<const0> ;
  assign m_sc_payld[1479] = \<const0> ;
  assign m_sc_payld[1478] = \<const0> ;
  assign m_sc_payld[1477] = \<const0> ;
  assign m_sc_payld[1476] = \<const0> ;
  assign m_sc_payld[1475] = \<const0> ;
  assign m_sc_payld[1474] = \<const0> ;
  assign m_sc_payld[1473] = \<const0> ;
  assign m_sc_payld[1472] = \<const0> ;
  assign m_sc_payld[1471] = \<const0> ;
  assign m_sc_payld[1470] = \<const0> ;
  assign m_sc_payld[1469] = \<const0> ;
  assign m_sc_payld[1468] = \<const0> ;
  assign m_sc_payld[1467] = \<const0> ;
  assign m_sc_payld[1466] = \<const0> ;
  assign m_sc_payld[1465] = \<const0> ;
  assign m_sc_payld[1464] = \<const0> ;
  assign m_sc_payld[1463] = \<const0> ;
  assign m_sc_payld[1462] = \<const0> ;
  assign m_sc_payld[1461] = \<const0> ;
  assign m_sc_payld[1460] = \<const0> ;
  assign m_sc_payld[1459] = \<const0> ;
  assign m_sc_payld[1458] = \<const0> ;
  assign m_sc_payld[1457] = \<const0> ;
  assign m_sc_payld[1456] = \<const0> ;
  assign m_sc_payld[1455] = \<const0> ;
  assign m_sc_payld[1454] = \<const0> ;
  assign m_sc_payld[1453] = \<const0> ;
  assign m_sc_payld[1452] = \<const0> ;
  assign m_sc_payld[1451] = \<const0> ;
  assign m_sc_payld[1450] = \<const0> ;
  assign m_sc_payld[1449] = \<const0> ;
  assign m_sc_payld[1448] = \<const0> ;
  assign m_sc_payld[1447] = \<const0> ;
  assign m_sc_payld[1446] = \<const0> ;
  assign m_sc_payld[1445] = \<const0> ;
  assign m_sc_payld[1444] = \<const0> ;
  assign m_sc_payld[1443] = \<const0> ;
  assign m_sc_payld[1442] = \<const0> ;
  assign m_sc_payld[1441] = \<const0> ;
  assign m_sc_payld[1440] = \<const0> ;
  assign m_sc_payld[1439] = \<const0> ;
  assign m_sc_payld[1438] = \<const0> ;
  assign m_sc_payld[1437] = \<const0> ;
  assign m_sc_payld[1436] = \<const0> ;
  assign m_sc_payld[1435] = \<const0> ;
  assign m_sc_payld[1434] = \<const0> ;
  assign m_sc_payld[1433] = \<const0> ;
  assign m_sc_payld[1432] = \<const0> ;
  assign m_sc_payld[1431] = \<const0> ;
  assign m_sc_payld[1430] = \<const0> ;
  assign m_sc_payld[1429] = \<const0> ;
  assign m_sc_payld[1428] = \<const0> ;
  assign m_sc_payld[1427] = \<const0> ;
  assign m_sc_payld[1426] = \<const0> ;
  assign m_sc_payld[1425] = \<const0> ;
  assign m_sc_payld[1424] = \<const0> ;
  assign m_sc_payld[1423] = \<const0> ;
  assign m_sc_payld[1422] = \<const0> ;
  assign m_sc_payld[1421] = \<const0> ;
  assign m_sc_payld[1420] = \<const0> ;
  assign m_sc_payld[1419] = \<const0> ;
  assign m_sc_payld[1418] = \<const0> ;
  assign m_sc_payld[1417] = \<const0> ;
  assign m_sc_payld[1416] = \<const0> ;
  assign m_sc_payld[1415] = \<const0> ;
  assign m_sc_payld[1414] = \<const0> ;
  assign m_sc_payld[1413] = \<const0> ;
  assign m_sc_payld[1412] = \<const0> ;
  assign m_sc_payld[1411] = \<const0> ;
  assign m_sc_payld[1410] = \<const0> ;
  assign m_sc_payld[1409] = \<const0> ;
  assign m_sc_payld[1408] = \<const0> ;
  assign m_sc_payld[1407] = \<const0> ;
  assign m_sc_payld[1406] = \<const0> ;
  assign m_sc_payld[1405] = \<const0> ;
  assign m_sc_payld[1404] = \<const0> ;
  assign m_sc_payld[1403] = \<const0> ;
  assign m_sc_payld[1402] = \<const0> ;
  assign m_sc_payld[1401] = \<const0> ;
  assign m_sc_payld[1400] = \<const0> ;
  assign m_sc_payld[1399] = \<const0> ;
  assign m_sc_payld[1398] = \<const0> ;
  assign m_sc_payld[1397] = \<const0> ;
  assign m_sc_payld[1396] = \<const0> ;
  assign m_sc_payld[1395] = \<const0> ;
  assign m_sc_payld[1394] = \<const0> ;
  assign m_sc_payld[1393] = \<const0> ;
  assign m_sc_payld[1392] = \<const0> ;
  assign m_sc_payld[1391] = \<const0> ;
  assign m_sc_payld[1390] = \<const0> ;
  assign m_sc_payld[1389] = \<const0> ;
  assign m_sc_payld[1388] = \<const0> ;
  assign m_sc_payld[1387] = \<const0> ;
  assign m_sc_payld[1386] = \<const0> ;
  assign m_sc_payld[1385] = \<const0> ;
  assign m_sc_payld[1384] = \<const0> ;
  assign m_sc_payld[1383] = \<const0> ;
  assign m_sc_payld[1382] = \<const0> ;
  assign m_sc_payld[1381] = \<const0> ;
  assign m_sc_payld[1380] = \<const0> ;
  assign m_sc_payld[1379] = \<const0> ;
  assign m_sc_payld[1378] = \<const0> ;
  assign m_sc_payld[1377] = \<const0> ;
  assign m_sc_payld[1376] = \<const0> ;
  assign m_sc_payld[1375] = \<const0> ;
  assign m_sc_payld[1374] = \<const0> ;
  assign m_sc_payld[1373] = \<const0> ;
  assign m_sc_payld[1372] = \<const0> ;
  assign m_sc_payld[1371] = \<const0> ;
  assign m_sc_payld[1370] = \<const0> ;
  assign m_sc_payld[1369] = \<const0> ;
  assign m_sc_payld[1368] = \<const0> ;
  assign m_sc_payld[1367] = \<const0> ;
  assign m_sc_payld[1366] = \<const0> ;
  assign m_sc_payld[1365] = \<const0> ;
  assign m_sc_payld[1364] = \<const0> ;
  assign m_sc_payld[1363] = \<const0> ;
  assign m_sc_payld[1362] = \<const0> ;
  assign m_sc_payld[1361] = \<const0> ;
  assign m_sc_payld[1360] = \<const0> ;
  assign m_sc_payld[1359] = \<const0> ;
  assign m_sc_payld[1358] = \<const0> ;
  assign m_sc_payld[1357] = \<const0> ;
  assign m_sc_payld[1356] = \<const0> ;
  assign m_sc_payld[1355] = \<const0> ;
  assign m_sc_payld[1354] = \<const0> ;
  assign m_sc_payld[1353] = \<const0> ;
  assign m_sc_payld[1352] = \<const0> ;
  assign m_sc_payld[1351] = \<const0> ;
  assign m_sc_payld[1350] = \<const0> ;
  assign m_sc_payld[1349] = \<const0> ;
  assign m_sc_payld[1348] = \<const0> ;
  assign m_sc_payld[1347] = \<const0> ;
  assign m_sc_payld[1346] = \<const0> ;
  assign m_sc_payld[1345] = \<const0> ;
  assign m_sc_payld[1344] = \<const0> ;
  assign m_sc_payld[1343] = \<const0> ;
  assign m_sc_payld[1342] = \<const0> ;
  assign m_sc_payld[1341] = \<const0> ;
  assign m_sc_payld[1340] = \<const0> ;
  assign m_sc_payld[1339] = \<const0> ;
  assign m_sc_payld[1338] = \<const0> ;
  assign m_sc_payld[1337] = \<const0> ;
  assign m_sc_payld[1336] = \<const0> ;
  assign m_sc_payld[1335] = \<const0> ;
  assign m_sc_payld[1334] = \<const0> ;
  assign m_sc_payld[1333] = \<const0> ;
  assign m_sc_payld[1332] = \<const0> ;
  assign m_sc_payld[1331] = \<const0> ;
  assign m_sc_payld[1330] = \<const0> ;
  assign m_sc_payld[1329] = \<const0> ;
  assign m_sc_payld[1328] = \<const0> ;
  assign m_sc_payld[1327] = \<const0> ;
  assign m_sc_payld[1326] = \<const0> ;
  assign m_sc_payld[1325] = \<const0> ;
  assign m_sc_payld[1324] = \<const0> ;
  assign m_sc_payld[1323] = \<const0> ;
  assign m_sc_payld[1322] = \<const0> ;
  assign m_sc_payld[1321] = \<const0> ;
  assign m_sc_payld[1320] = \<const0> ;
  assign m_sc_payld[1319] = \<const0> ;
  assign m_sc_payld[1318] = \<const0> ;
  assign m_sc_payld[1317] = \<const0> ;
  assign m_sc_payld[1316] = \<const0> ;
  assign m_sc_payld[1315] = \<const0> ;
  assign m_sc_payld[1314] = \<const0> ;
  assign m_sc_payld[1313] = \<const0> ;
  assign m_sc_payld[1312] = \<const0> ;
  assign m_sc_payld[1311] = \<const0> ;
  assign m_sc_payld[1310] = \<const0> ;
  assign m_sc_payld[1309] = \<const0> ;
  assign m_sc_payld[1308] = \<const0> ;
  assign m_sc_payld[1307] = \<const0> ;
  assign m_sc_payld[1306] = \<const0> ;
  assign m_sc_payld[1305] = \<const0> ;
  assign m_sc_payld[1304] = \<const0> ;
  assign m_sc_payld[1303] = \<const0> ;
  assign m_sc_payld[1302] = \<const0> ;
  assign m_sc_payld[1301] = \<const0> ;
  assign m_sc_payld[1300] = \<const0> ;
  assign m_sc_payld[1299] = \<const0> ;
  assign m_sc_payld[1298] = \<const0> ;
  assign m_sc_payld[1297] = \<const0> ;
  assign m_sc_payld[1296] = \<const0> ;
  assign m_sc_payld[1295] = \<const0> ;
  assign m_sc_payld[1294] = \<const0> ;
  assign m_sc_payld[1293] = \<const0> ;
  assign m_sc_payld[1292] = \<const0> ;
  assign m_sc_payld[1291] = \<const0> ;
  assign m_sc_payld[1290] = \<const0> ;
  assign m_sc_payld[1289] = \<const0> ;
  assign m_sc_payld[1288] = \<const0> ;
  assign m_sc_payld[1287] = \<const0> ;
  assign m_sc_payld[1286] = \<const0> ;
  assign m_sc_payld[1285] = \<const0> ;
  assign m_sc_payld[1284] = \<const0> ;
  assign m_sc_payld[1283] = \<const0> ;
  assign m_sc_payld[1282] = \<const0> ;
  assign m_sc_payld[1281] = \<const0> ;
  assign m_sc_payld[1280] = \<const0> ;
  assign m_sc_payld[1279] = \<const0> ;
  assign m_sc_payld[1278] = \<const0> ;
  assign m_sc_payld[1277] = \<const0> ;
  assign m_sc_payld[1276] = \<const0> ;
  assign m_sc_payld[1275] = \<const0> ;
  assign m_sc_payld[1274] = \<const0> ;
  assign m_sc_payld[1273] = \<const0> ;
  assign m_sc_payld[1272] = \<const0> ;
  assign m_sc_payld[1271] = \<const0> ;
  assign m_sc_payld[1270] = \<const0> ;
  assign m_sc_payld[1269] = \<const0> ;
  assign m_sc_payld[1268] = \<const0> ;
  assign m_sc_payld[1267] = \<const0> ;
  assign m_sc_payld[1266] = \<const0> ;
  assign m_sc_payld[1265] = \<const0> ;
  assign m_sc_payld[1264] = \<const0> ;
  assign m_sc_payld[1263] = \<const0> ;
  assign m_sc_payld[1262] = \<const0> ;
  assign m_sc_payld[1261] = \<const0> ;
  assign m_sc_payld[1260] = \<const0> ;
  assign m_sc_payld[1259] = \<const0> ;
  assign m_sc_payld[1258] = \<const0> ;
  assign m_sc_payld[1257] = \<const0> ;
  assign m_sc_payld[1256] = \<const0> ;
  assign m_sc_payld[1255] = \<const0> ;
  assign m_sc_payld[1254] = \<const0> ;
  assign m_sc_payld[1253] = \<const0> ;
  assign m_sc_payld[1252] = \<const0> ;
  assign m_sc_payld[1251] = \<const0> ;
  assign m_sc_payld[1250] = \<const0> ;
  assign m_sc_payld[1249] = \<const0> ;
  assign m_sc_payld[1248] = \<const0> ;
  assign m_sc_payld[1247] = \<const0> ;
  assign m_sc_payld[1246] = \<const0> ;
  assign m_sc_payld[1245] = \<const0> ;
  assign m_sc_payld[1244] = \<const0> ;
  assign m_sc_payld[1243] = \<const0> ;
  assign m_sc_payld[1242] = \<const0> ;
  assign m_sc_payld[1241] = \<const0> ;
  assign m_sc_payld[1240] = \<const0> ;
  assign m_sc_payld[1239] = \<const0> ;
  assign m_sc_payld[1238] = \<const0> ;
  assign m_sc_payld[1237] = \<const0> ;
  assign m_sc_payld[1236] = \<const0> ;
  assign m_sc_payld[1235] = \<const0> ;
  assign m_sc_payld[1234] = \<const0> ;
  assign m_sc_payld[1233] = \<const0> ;
  assign m_sc_payld[1232] = \<const0> ;
  assign m_sc_payld[1231] = \<const0> ;
  assign m_sc_payld[1230] = \<const0> ;
  assign m_sc_payld[1229] = \<const0> ;
  assign m_sc_payld[1228] = \<const0> ;
  assign m_sc_payld[1227] = \<const0> ;
  assign m_sc_payld[1226] = \<const0> ;
  assign m_sc_payld[1225] = \<const0> ;
  assign m_sc_payld[1224] = \<const0> ;
  assign m_sc_payld[1223] = \<const0> ;
  assign m_sc_payld[1222] = \<const0> ;
  assign m_sc_payld[1221] = \<const0> ;
  assign m_sc_payld[1220] = \<const0> ;
  assign m_sc_payld[1219] = \<const0> ;
  assign m_sc_payld[1218] = \<const0> ;
  assign m_sc_payld[1217] = \<const0> ;
  assign m_sc_payld[1216] = \<const0> ;
  assign m_sc_payld[1215] = \<const0> ;
  assign m_sc_payld[1214] = \<const0> ;
  assign m_sc_payld[1213] = \<const0> ;
  assign m_sc_payld[1212] = \<const0> ;
  assign m_sc_payld[1211] = \<const0> ;
  assign m_sc_payld[1210] = \<const0> ;
  assign m_sc_payld[1209] = \<const0> ;
  assign m_sc_payld[1208] = \<const0> ;
  assign m_sc_payld[1207] = \<const0> ;
  assign m_sc_payld[1206] = \<const0> ;
  assign m_sc_payld[1205] = \<const0> ;
  assign m_sc_payld[1204] = \<const0> ;
  assign m_sc_payld[1203] = \<const0> ;
  assign m_sc_payld[1202] = \<const0> ;
  assign m_sc_payld[1201] = \<const0> ;
  assign m_sc_payld[1200] = \<const0> ;
  assign m_sc_payld[1199] = \<const0> ;
  assign m_sc_payld[1198] = \<const0> ;
  assign m_sc_payld[1197] = \<const0> ;
  assign m_sc_payld[1196] = \<const0> ;
  assign m_sc_payld[1195] = \<const0> ;
  assign m_sc_payld[1194] = \<const0> ;
  assign m_sc_payld[1193] = \<const0> ;
  assign m_sc_payld[1192] = \<const0> ;
  assign m_sc_payld[1191] = \<const0> ;
  assign m_sc_payld[1190] = \<const0> ;
  assign m_sc_payld[1189] = \<const0> ;
  assign m_sc_payld[1188] = \<const0> ;
  assign m_sc_payld[1187] = \<const0> ;
  assign m_sc_payld[1186] = \<const0> ;
  assign m_sc_payld[1185] = \<const0> ;
  assign m_sc_payld[1184] = \<const0> ;
  assign m_sc_payld[1183] = \<const0> ;
  assign m_sc_payld[1182] = \<const0> ;
  assign m_sc_payld[1181] = \<const0> ;
  assign m_sc_payld[1180] = \<const0> ;
  assign m_sc_payld[1179] = \<const0> ;
  assign m_sc_payld[1178] = \<const0> ;
  assign m_sc_payld[1177] = \<const0> ;
  assign m_sc_payld[1176] = \<const0> ;
  assign m_sc_payld[1175] = \<const0> ;
  assign m_sc_payld[1174] = \<const0> ;
  assign m_sc_payld[1173] = \<const0> ;
  assign m_sc_payld[1172] = \<const0> ;
  assign m_sc_payld[1171] = \<const0> ;
  assign m_sc_payld[1170] = \<const0> ;
  assign m_sc_payld[1169] = \<const0> ;
  assign m_sc_payld[1168] = \<const0> ;
  assign m_sc_payld[1167] = \<const0> ;
  assign m_sc_payld[1166] = \<const0> ;
  assign m_sc_payld[1165] = \<const0> ;
  assign m_sc_payld[1164] = \<const0> ;
  assign m_sc_payld[1163] = \<const0> ;
  assign m_sc_payld[1162] = \<const0> ;
  assign m_sc_payld[1161] = \<const0> ;
  assign m_sc_payld[1160] = \<const0> ;
  assign m_sc_payld[1159] = \<const0> ;
  assign m_sc_payld[1158] = \<const0> ;
  assign m_sc_payld[1157] = \<const0> ;
  assign m_sc_payld[1156] = \<const0> ;
  assign m_sc_payld[1155] = \<const0> ;
  assign m_sc_payld[1154] = \<const0> ;
  assign m_sc_payld[1153] = \<const0> ;
  assign m_sc_payld[1152] = \<const0> ;
  assign m_sc_payld[1151] = \<const0> ;
  assign m_sc_payld[1150] = \<const0> ;
  assign m_sc_payld[1149] = \<const0> ;
  assign m_sc_payld[1148] = \<const0> ;
  assign m_sc_payld[1147] = \<const0> ;
  assign m_sc_payld[1146] = \<const0> ;
  assign m_sc_payld[1145] = \<const0> ;
  assign m_sc_payld[1144] = \<const0> ;
  assign m_sc_payld[1143] = \<const0> ;
  assign m_sc_payld[1142] = \<const0> ;
  assign m_sc_payld[1141] = \<const0> ;
  assign m_sc_payld[1140] = \<const0> ;
  assign m_sc_payld[1139] = \<const0> ;
  assign m_sc_payld[1138] = \<const0> ;
  assign m_sc_payld[1137] = \<const0> ;
  assign m_sc_payld[1136] = \<const0> ;
  assign m_sc_payld[1135] = \<const0> ;
  assign m_sc_payld[1134] = \<const0> ;
  assign m_sc_payld[1133] = \<const0> ;
  assign m_sc_payld[1132] = \<const0> ;
  assign m_sc_payld[1131] = \<const0> ;
  assign m_sc_payld[1130] = \<const0> ;
  assign m_sc_payld[1129] = \<const0> ;
  assign m_sc_payld[1128] = \<const0> ;
  assign m_sc_payld[1127] = \<const0> ;
  assign m_sc_payld[1126] = \<const0> ;
  assign m_sc_payld[1125] = \<const0> ;
  assign m_sc_payld[1124] = \<const0> ;
  assign m_sc_payld[1123] = \<const0> ;
  assign m_sc_payld[1122] = \<const0> ;
  assign m_sc_payld[1121] = \<const0> ;
  assign m_sc_payld[1120] = \<const0> ;
  assign m_sc_payld[1119] = \<const0> ;
  assign m_sc_payld[1118] = \<const0> ;
  assign m_sc_payld[1117] = \<const0> ;
  assign m_sc_payld[1116] = \<const0> ;
  assign m_sc_payld[1115] = \<const0> ;
  assign m_sc_payld[1114] = \<const0> ;
  assign m_sc_payld[1113] = \<const0> ;
  assign m_sc_payld[1112] = \<const0> ;
  assign m_sc_payld[1111] = \<const0> ;
  assign m_sc_payld[1110] = \<const0> ;
  assign m_sc_payld[1109] = \<const0> ;
  assign m_sc_payld[1108] = \<const0> ;
  assign m_sc_payld[1107] = \<const0> ;
  assign m_sc_payld[1106] = \<const0> ;
  assign m_sc_payld[1105] = \<const0> ;
  assign m_sc_payld[1104] = \<const0> ;
  assign m_sc_payld[1103] = \<const0> ;
  assign m_sc_payld[1102] = \<const0> ;
  assign m_sc_payld[1101] = \<const0> ;
  assign m_sc_payld[1100] = \<const0> ;
  assign m_sc_payld[1099] = \<const0> ;
  assign m_sc_payld[1098] = \<const0> ;
  assign m_sc_payld[1097] = \<const0> ;
  assign m_sc_payld[1096] = \<const0> ;
  assign m_sc_payld[1095] = \<const0> ;
  assign m_sc_payld[1094] = \<const0> ;
  assign m_sc_payld[1093] = \<const0> ;
  assign m_sc_payld[1092] = \<const0> ;
  assign m_sc_payld[1091] = \<const0> ;
  assign m_sc_payld[1090] = \<const0> ;
  assign m_sc_payld[1089] = \<const0> ;
  assign m_sc_payld[1088] = \<const0> ;
  assign m_sc_payld[1087] = \<const0> ;
  assign m_sc_payld[1086] = \<const0> ;
  assign m_sc_payld[1085] = \<const0> ;
  assign m_sc_payld[1084] = \<const0> ;
  assign m_sc_payld[1083] = \<const0> ;
  assign m_sc_payld[1082] = \<const0> ;
  assign m_sc_payld[1081] = \<const0> ;
  assign m_sc_payld[1080] = \<const0> ;
  assign m_sc_payld[1079] = \<const0> ;
  assign m_sc_payld[1078] = \<const0> ;
  assign m_sc_payld[1077] = \<const0> ;
  assign m_sc_payld[1076] = \<const0> ;
  assign m_sc_payld[1075] = \<const0> ;
  assign m_sc_payld[1074] = \<const0> ;
  assign m_sc_payld[1073] = \<const0> ;
  assign m_sc_payld[1072] = \<const0> ;
  assign m_sc_payld[1071] = \<const0> ;
  assign m_sc_payld[1070] = \<const0> ;
  assign m_sc_payld[1069] = \<const0> ;
  assign m_sc_payld[1068] = \<const0> ;
  assign m_sc_payld[1067] = \<const0> ;
  assign m_sc_payld[1066] = \<const0> ;
  assign m_sc_payld[1065] = \<const0> ;
  assign m_sc_payld[1064] = \<const0> ;
  assign m_sc_payld[1063] = \<const0> ;
  assign m_sc_payld[1062] = \<const0> ;
  assign m_sc_payld[1061] = \<const0> ;
  assign m_sc_payld[1060] = \<const0> ;
  assign m_sc_payld[1059] = \<const0> ;
  assign m_sc_payld[1058] = \<const0> ;
  assign m_sc_payld[1057] = \<const0> ;
  assign m_sc_payld[1056] = \<const0> ;
  assign m_sc_payld[1055] = \<const0> ;
  assign m_sc_payld[1054] = \<const0> ;
  assign m_sc_payld[1053] = \<const0> ;
  assign m_sc_payld[1052] = \<const0> ;
  assign m_sc_payld[1051] = \<const0> ;
  assign m_sc_payld[1050] = \<const0> ;
  assign m_sc_payld[1049] = \<const0> ;
  assign m_sc_payld[1048] = \<const0> ;
  assign m_sc_payld[1047] = \<const0> ;
  assign m_sc_payld[1046] = \<const0> ;
  assign m_sc_payld[1045] = \<const0> ;
  assign m_sc_payld[1044] = \<const0> ;
  assign m_sc_payld[1043] = \<const0> ;
  assign m_sc_payld[1042] = \<const0> ;
  assign m_sc_payld[1041] = \<const0> ;
  assign m_sc_payld[1040] = \<const0> ;
  assign m_sc_payld[1039] = \<const0> ;
  assign m_sc_payld[1038] = \<const0> ;
  assign m_sc_payld[1037] = \<const0> ;
  assign m_sc_payld[1036] = \<const0> ;
  assign m_sc_payld[1035] = \<const0> ;
  assign m_sc_payld[1034] = \<const0> ;
  assign m_sc_payld[1033] = \<const0> ;
  assign m_sc_payld[1032] = \<const0> ;
  assign m_sc_payld[1031] = \<const0> ;
  assign m_sc_payld[1030] = \<const0> ;
  assign m_sc_payld[1029] = \<const0> ;
  assign m_sc_payld[1028] = \<const0> ;
  assign m_sc_payld[1027] = \<const0> ;
  assign m_sc_payld[1026] = \<const0> ;
  assign m_sc_payld[1025] = \<const0> ;
  assign m_sc_payld[1024] = \<const0> ;
  assign m_sc_payld[1023] = \<const0> ;
  assign m_sc_payld[1022] = \<const0> ;
  assign m_sc_payld[1021] = \<const0> ;
  assign m_sc_payld[1020] = \<const0> ;
  assign m_sc_payld[1019] = \<const0> ;
  assign m_sc_payld[1018] = \<const0> ;
  assign m_sc_payld[1017] = \<const0> ;
  assign m_sc_payld[1016] = \<const0> ;
  assign m_sc_payld[1015] = \<const0> ;
  assign m_sc_payld[1014] = \<const0> ;
  assign m_sc_payld[1013] = \<const0> ;
  assign m_sc_payld[1012] = \<const0> ;
  assign m_sc_payld[1011] = \<const0> ;
  assign m_sc_payld[1010] = \<const0> ;
  assign m_sc_payld[1009] = \<const0> ;
  assign m_sc_payld[1008] = \<const0> ;
  assign m_sc_payld[1007] = \<const0> ;
  assign m_sc_payld[1006] = \<const0> ;
  assign m_sc_payld[1005] = \<const0> ;
  assign m_sc_payld[1004] = \<const0> ;
  assign m_sc_payld[1003] = \<const0> ;
  assign m_sc_payld[1002] = \<const0> ;
  assign m_sc_payld[1001] = \<const0> ;
  assign m_sc_payld[1000] = \<const0> ;
  assign m_sc_payld[999] = \<const0> ;
  assign m_sc_payld[998] = \<const0> ;
  assign m_sc_payld[997] = \<const0> ;
  assign m_sc_payld[996] = \<const0> ;
  assign m_sc_payld[995] = \<const0> ;
  assign m_sc_payld[994] = \<const0> ;
  assign m_sc_payld[993] = \<const0> ;
  assign m_sc_payld[992] = \<const0> ;
  assign m_sc_payld[991] = \<const0> ;
  assign m_sc_payld[990] = \<const0> ;
  assign m_sc_payld[989] = \<const0> ;
  assign m_sc_payld[988] = \<const0> ;
  assign m_sc_payld[987] = \<const0> ;
  assign m_sc_payld[986] = \<const0> ;
  assign m_sc_payld[985] = \<const0> ;
  assign m_sc_payld[984] = \<const0> ;
  assign m_sc_payld[983] = \<const0> ;
  assign m_sc_payld[982] = \<const0> ;
  assign m_sc_payld[981] = \<const0> ;
  assign m_sc_payld[980] = \<const0> ;
  assign m_sc_payld[979] = \<const0> ;
  assign m_sc_payld[978] = \<const0> ;
  assign m_sc_payld[977] = \<const0> ;
  assign m_sc_payld[976] = \<const0> ;
  assign m_sc_payld[975] = \<const0> ;
  assign m_sc_payld[974] = \<const0> ;
  assign m_sc_payld[973] = \<const0> ;
  assign m_sc_payld[972] = \<const0> ;
  assign m_sc_payld[971] = \<const0> ;
  assign m_sc_payld[970] = \<const0> ;
  assign m_sc_payld[969] = \<const0> ;
  assign m_sc_payld[968] = \<const0> ;
  assign m_sc_payld[967] = \<const0> ;
  assign m_sc_payld[966] = \<const0> ;
  assign m_sc_payld[965] = \<const0> ;
  assign m_sc_payld[964] = \<const0> ;
  assign m_sc_payld[963] = \<const0> ;
  assign m_sc_payld[962] = \<const0> ;
  assign m_sc_payld[961] = \<const0> ;
  assign m_sc_payld[960] = \<const0> ;
  assign m_sc_payld[959] = \<const0> ;
  assign m_sc_payld[958] = \<const0> ;
  assign m_sc_payld[957] = \<const0> ;
  assign m_sc_payld[956] = \<const0> ;
  assign m_sc_payld[955] = \<const0> ;
  assign m_sc_payld[954] = \<const0> ;
  assign m_sc_payld[953] = \<const0> ;
  assign m_sc_payld[952] = \<const0> ;
  assign m_sc_payld[951] = \<const0> ;
  assign m_sc_payld[950] = \<const0> ;
  assign m_sc_payld[949] = \<const0> ;
  assign m_sc_payld[948] = \<const0> ;
  assign m_sc_payld[947] = \<const0> ;
  assign m_sc_payld[946] = \<const0> ;
  assign m_sc_payld[945] = \<const0> ;
  assign m_sc_payld[944] = \<const0> ;
  assign m_sc_payld[943] = \<const0> ;
  assign m_sc_payld[942] = \<const0> ;
  assign m_sc_payld[941] = \<const0> ;
  assign m_sc_payld[940] = \<const0> ;
  assign m_sc_payld[939] = \<const0> ;
  assign m_sc_payld[938] = \<const0> ;
  assign m_sc_payld[937] = \<const0> ;
  assign m_sc_payld[936] = \<const0> ;
  assign m_sc_payld[935] = \<const0> ;
  assign m_sc_payld[934] = \<const0> ;
  assign m_sc_payld[933] = \<const0> ;
  assign m_sc_payld[932] = \<const0> ;
  assign m_sc_payld[931] = \<const0> ;
  assign m_sc_payld[930] = \<const0> ;
  assign m_sc_payld[929] = \<const0> ;
  assign m_sc_payld[928] = \<const0> ;
  assign m_sc_payld[927] = \<const0> ;
  assign m_sc_payld[926] = \<const0> ;
  assign m_sc_payld[925] = \<const0> ;
  assign m_sc_payld[924] = \<const0> ;
  assign m_sc_payld[923] = \<const0> ;
  assign m_sc_payld[922] = \<const0> ;
  assign m_sc_payld[921] = \<const0> ;
  assign m_sc_payld[920] = \<const0> ;
  assign m_sc_payld[919] = \<const0> ;
  assign m_sc_payld[918] = \<const0> ;
  assign m_sc_payld[917] = \<const0> ;
  assign m_sc_payld[916] = \<const0> ;
  assign m_sc_payld[915] = \<const0> ;
  assign m_sc_payld[914] = \<const0> ;
  assign m_sc_payld[913] = \<const0> ;
  assign m_sc_payld[912] = \<const0> ;
  assign m_sc_payld[911] = \<const0> ;
  assign m_sc_payld[910] = \<const0> ;
  assign m_sc_payld[909] = \<const0> ;
  assign m_sc_payld[908] = \<const0> ;
  assign m_sc_payld[907] = \<const0> ;
  assign m_sc_payld[906] = \<const0> ;
  assign m_sc_payld[905] = \<const0> ;
  assign m_sc_payld[904] = \<const0> ;
  assign m_sc_payld[903] = \<const0> ;
  assign m_sc_payld[902] = \<const0> ;
  assign m_sc_payld[901] = \<const0> ;
  assign m_sc_payld[900] = \<const0> ;
  assign m_sc_payld[899] = \<const0> ;
  assign m_sc_payld[898] = \<const0> ;
  assign m_sc_payld[897] = \<const0> ;
  assign m_sc_payld[896] = \<const0> ;
  assign m_sc_payld[895] = \<const0> ;
  assign m_sc_payld[894] = \<const0> ;
  assign m_sc_payld[893] = \<const0> ;
  assign m_sc_payld[892] = \<const0> ;
  assign m_sc_payld[891] = \<const0> ;
  assign m_sc_payld[890] = \<const0> ;
  assign m_sc_payld[889] = \<const0> ;
  assign m_sc_payld[888] = \<const0> ;
  assign m_sc_payld[887] = \<const0> ;
  assign m_sc_payld[886] = \<const0> ;
  assign m_sc_payld[885] = \<const0> ;
  assign m_sc_payld[884] = \<const0> ;
  assign m_sc_payld[883] = \<const0> ;
  assign m_sc_payld[882] = \<const0> ;
  assign m_sc_payld[881] = \<const0> ;
  assign m_sc_payld[880] = \<const0> ;
  assign m_sc_payld[879] = \<const0> ;
  assign m_sc_payld[878] = \<const0> ;
  assign m_sc_payld[877] = \<const0> ;
  assign m_sc_payld[876] = \<const0> ;
  assign m_sc_payld[875] = \<const0> ;
  assign m_sc_payld[874] = \<const0> ;
  assign m_sc_payld[873] = \<const0> ;
  assign m_sc_payld[872] = \<const0> ;
  assign m_sc_payld[871] = \<const0> ;
  assign m_sc_payld[870] = \<const0> ;
  assign m_sc_payld[869] = \<const0> ;
  assign m_sc_payld[868] = \<const0> ;
  assign m_sc_payld[867] = \<const0> ;
  assign m_sc_payld[866] = \<const0> ;
  assign m_sc_payld[865] = \<const0> ;
  assign m_sc_payld[864] = \<const0> ;
  assign m_sc_payld[863] = \<const0> ;
  assign m_sc_payld[862] = \<const0> ;
  assign m_sc_payld[861] = \<const0> ;
  assign m_sc_payld[860] = \<const0> ;
  assign m_sc_payld[859] = \<const0> ;
  assign m_sc_payld[858] = \<const0> ;
  assign m_sc_payld[857] = \<const0> ;
  assign m_sc_payld[856] = \<const0> ;
  assign m_sc_payld[855] = \<const0> ;
  assign m_sc_payld[854] = \<const0> ;
  assign m_sc_payld[853] = \<const0> ;
  assign m_sc_payld[852] = \<const0> ;
  assign m_sc_payld[851] = \<const0> ;
  assign m_sc_payld[850] = \<const0> ;
  assign m_sc_payld[849] = \<const0> ;
  assign m_sc_payld[848] = \<const0> ;
  assign m_sc_payld[847] = \<const0> ;
  assign m_sc_payld[846] = \<const0> ;
  assign m_sc_payld[845] = \<const0> ;
  assign m_sc_payld[844] = \<const0> ;
  assign m_sc_payld[843] = \<const0> ;
  assign m_sc_payld[842] = \<const0> ;
  assign m_sc_payld[841] = \<const0> ;
  assign m_sc_payld[840] = \<const0> ;
  assign m_sc_payld[839] = \<const0> ;
  assign m_sc_payld[838] = \<const0> ;
  assign m_sc_payld[837] = \<const0> ;
  assign m_sc_payld[836] = \<const0> ;
  assign m_sc_payld[835] = \<const0> ;
  assign m_sc_payld[834] = \<const0> ;
  assign m_sc_payld[833] = \<const0> ;
  assign m_sc_payld[832] = \<const0> ;
  assign m_sc_payld[831] = \<const0> ;
  assign m_sc_payld[830] = \<const0> ;
  assign m_sc_payld[829] = \<const0> ;
  assign m_sc_payld[828] = \<const0> ;
  assign m_sc_payld[827] = \<const0> ;
  assign m_sc_payld[826] = \<const0> ;
  assign m_sc_payld[825] = \<const0> ;
  assign m_sc_payld[824] = \<const0> ;
  assign m_sc_payld[823] = \<const0> ;
  assign m_sc_payld[822] = \<const0> ;
  assign m_sc_payld[821] = \<const0> ;
  assign m_sc_payld[820] = \<const0> ;
  assign m_sc_payld[819] = \<const0> ;
  assign m_sc_payld[818] = \<const0> ;
  assign m_sc_payld[817] = \<const0> ;
  assign m_sc_payld[816] = \<const0> ;
  assign m_sc_payld[815] = \<const0> ;
  assign m_sc_payld[814] = \<const0> ;
  assign m_sc_payld[813] = \<const0> ;
  assign m_sc_payld[812] = \<const0> ;
  assign m_sc_payld[811] = \<const0> ;
  assign m_sc_payld[810] = \<const0> ;
  assign m_sc_payld[809] = \<const0> ;
  assign m_sc_payld[808] = \<const0> ;
  assign m_sc_payld[807] = \<const0> ;
  assign m_sc_payld[806] = \<const0> ;
  assign m_sc_payld[805] = \<const0> ;
  assign m_sc_payld[804] = \<const0> ;
  assign m_sc_payld[803] = \<const0> ;
  assign m_sc_payld[802] = \<const0> ;
  assign m_sc_payld[801] = \<const0> ;
  assign m_sc_payld[800] = \<const0> ;
  assign m_sc_payld[799] = \<const0> ;
  assign m_sc_payld[798] = \<const0> ;
  assign m_sc_payld[797] = \<const0> ;
  assign m_sc_payld[796] = \<const0> ;
  assign m_sc_payld[795] = \<const0> ;
  assign m_sc_payld[794] = \<const0> ;
  assign m_sc_payld[793] = \<const0> ;
  assign m_sc_payld[792] = \<const0> ;
  assign m_sc_payld[791] = \<const0> ;
  assign m_sc_payld[790] = \<const0> ;
  assign m_sc_payld[789] = \<const0> ;
  assign m_sc_payld[788] = \<const0> ;
  assign m_sc_payld[787] = \<const0> ;
  assign m_sc_payld[786] = \<const0> ;
  assign m_sc_payld[785] = \<const0> ;
  assign m_sc_payld[784] = \<const0> ;
  assign m_sc_payld[783] = \<const0> ;
  assign m_sc_payld[782] = \<const0> ;
  assign m_sc_payld[781] = \<const0> ;
  assign m_sc_payld[780] = \<const0> ;
  assign m_sc_payld[779] = \<const0> ;
  assign m_sc_payld[778] = \<const0> ;
  assign m_sc_payld[777] = \<const0> ;
  assign m_sc_payld[776] = \<const0> ;
  assign m_sc_payld[775] = \<const0> ;
  assign m_sc_payld[774] = \<const0> ;
  assign m_sc_payld[773] = \<const0> ;
  assign m_sc_payld[772] = \<const0> ;
  assign m_sc_payld[771] = \<const0> ;
  assign m_sc_payld[770] = \<const0> ;
  assign m_sc_payld[769] = \<const0> ;
  assign m_sc_payld[768] = \<const0> ;
  assign m_sc_payld[767] = \<const0> ;
  assign m_sc_payld[766] = \<const0> ;
  assign m_sc_payld[765] = \<const0> ;
  assign m_sc_payld[764] = \<const0> ;
  assign m_sc_payld[763] = \<const0> ;
  assign m_sc_payld[762] = \<const0> ;
  assign m_sc_payld[761] = \<const0> ;
  assign m_sc_payld[760] = \<const0> ;
  assign m_sc_payld[759] = \<const0> ;
  assign m_sc_payld[758] = \<const0> ;
  assign m_sc_payld[757] = \<const0> ;
  assign m_sc_payld[756] = \<const0> ;
  assign m_sc_payld[755] = \<const0> ;
  assign m_sc_payld[754] = \<const0> ;
  assign m_sc_payld[753] = \<const0> ;
  assign m_sc_payld[752] = \<const0> ;
  assign m_sc_payld[751] = \<const0> ;
  assign m_sc_payld[750] = \<const0> ;
  assign m_sc_payld[749] = \<const0> ;
  assign m_sc_payld[748] = \<const0> ;
  assign m_sc_payld[747] = \<const0> ;
  assign m_sc_payld[746] = \<const0> ;
  assign m_sc_payld[745] = \<const0> ;
  assign m_sc_payld[744] = \<const0> ;
  assign m_sc_payld[743] = \<const0> ;
  assign m_sc_payld[742] = \<const0> ;
  assign m_sc_payld[741] = \<const0> ;
  assign m_sc_payld[740] = \<const0> ;
  assign m_sc_payld[739] = \<const0> ;
  assign m_sc_payld[738] = \<const0> ;
  assign m_sc_payld[737] = \<const0> ;
  assign m_sc_payld[736] = \<const0> ;
  assign m_sc_payld[735] = \<const0> ;
  assign m_sc_payld[734] = \<const0> ;
  assign m_sc_payld[733] = \<const0> ;
  assign m_sc_payld[732] = \<const0> ;
  assign m_sc_payld[731] = \<const0> ;
  assign m_sc_payld[730] = \<const0> ;
  assign m_sc_payld[729] = \<const0> ;
  assign m_sc_payld[728] = \<const0> ;
  assign m_sc_payld[727] = \<const0> ;
  assign m_sc_payld[726] = \<const0> ;
  assign m_sc_payld[725] = \<const0> ;
  assign m_sc_payld[724] = \<const0> ;
  assign m_sc_payld[723] = \<const0> ;
  assign m_sc_payld[722] = \<const0> ;
  assign m_sc_payld[721] = \<const0> ;
  assign m_sc_payld[720] = \<const0> ;
  assign m_sc_payld[719] = \<const0> ;
  assign m_sc_payld[718] = \<const0> ;
  assign m_sc_payld[717] = \<const0> ;
  assign m_sc_payld[716] = \<const0> ;
  assign m_sc_payld[715] = \<const0> ;
  assign m_sc_payld[714] = \<const0> ;
  assign m_sc_payld[713] = \<const0> ;
  assign m_sc_payld[712] = \<const0> ;
  assign m_sc_payld[711] = \<const0> ;
  assign m_sc_payld[710] = \<const0> ;
  assign m_sc_payld[709] = \<const0> ;
  assign m_sc_payld[708] = \<const0> ;
  assign m_sc_payld[707] = \<const0> ;
  assign m_sc_payld[706] = \<const0> ;
  assign m_sc_payld[705] = \<const0> ;
  assign m_sc_payld[704] = \<const0> ;
  assign m_sc_payld[703] = \<const0> ;
  assign m_sc_payld[702] = \<const0> ;
  assign m_sc_payld[701] = \<const0> ;
  assign m_sc_payld[700] = \<const0> ;
  assign m_sc_payld[699] = \<const0> ;
  assign m_sc_payld[698] = \<const0> ;
  assign m_sc_payld[697] = \<const0> ;
  assign m_sc_payld[696] = \<const0> ;
  assign m_sc_payld[695] = \<const0> ;
  assign m_sc_payld[694] = \<const0> ;
  assign m_sc_payld[693] = \<const0> ;
  assign m_sc_payld[692] = \<const0> ;
  assign m_sc_payld[691] = \<const0> ;
  assign m_sc_payld[690] = \<const0> ;
  assign m_sc_payld[689] = \<const0> ;
  assign m_sc_payld[688] = \<const0> ;
  assign m_sc_payld[687] = \<const0> ;
  assign m_sc_payld[686] = \<const0> ;
  assign m_sc_payld[685] = \<const0> ;
  assign m_sc_payld[684] = \<const0> ;
  assign m_sc_payld[683] = \<const0> ;
  assign m_sc_payld[682] = \<const0> ;
  assign m_sc_payld[681] = \<const0> ;
  assign m_sc_payld[680] = \<const0> ;
  assign m_sc_payld[679] = \<const0> ;
  assign m_sc_payld[678] = \<const0> ;
  assign m_sc_payld[677] = \<const0> ;
  assign m_sc_payld[676] = \<const0> ;
  assign m_sc_payld[675] = \<const0> ;
  assign m_sc_payld[674] = \<const0> ;
  assign m_sc_payld[673] = \<const0> ;
  assign m_sc_payld[672] = \<const0> ;
  assign m_sc_payld[671] = \<const0> ;
  assign m_sc_payld[670] = \<const0> ;
  assign m_sc_payld[669] = \<const0> ;
  assign m_sc_payld[668] = \<const0> ;
  assign m_sc_payld[667] = \<const0> ;
  assign m_sc_payld[666] = \<const0> ;
  assign m_sc_payld[665] = \<const0> ;
  assign m_sc_payld[664] = \<const0> ;
  assign m_sc_payld[663] = \<const0> ;
  assign m_sc_payld[662] = \<const0> ;
  assign m_sc_payld[661] = \<const0> ;
  assign m_sc_payld[660] = \<const0> ;
  assign m_sc_payld[659] = \<const0> ;
  assign m_sc_payld[658] = \<const0> ;
  assign m_sc_payld[657] = \<const0> ;
  assign m_sc_payld[656] = \<const0> ;
  assign m_sc_payld[655] = \<const0> ;
  assign m_sc_payld[654] = \<const0> ;
  assign m_sc_payld[653] = \<const0> ;
  assign m_sc_payld[652] = \<const0> ;
  assign m_sc_payld[651] = \<const0> ;
  assign m_sc_payld[650] = \<const0> ;
  assign m_sc_payld[649] = \<const0> ;
  assign m_sc_payld[648] = \<const0> ;
  assign m_sc_payld[647] = \<const0> ;
  assign m_sc_payld[646] = \<const0> ;
  assign m_sc_payld[645] = \<const0> ;
  assign m_sc_payld[644] = \<const0> ;
  assign m_sc_payld[643] = \<const0> ;
  assign m_sc_payld[642] = \<const0> ;
  assign m_sc_payld[641] = \<const0> ;
  assign m_sc_payld[640] = \<const0> ;
  assign m_sc_payld[639] = \<const0> ;
  assign m_sc_payld[638] = \<const0> ;
  assign m_sc_payld[637] = \<const0> ;
  assign m_sc_payld[636] = \<const0> ;
  assign m_sc_payld[635] = \<const0> ;
  assign m_sc_payld[634] = \<const0> ;
  assign m_sc_payld[633] = \<const0> ;
  assign m_sc_payld[632] = \<const0> ;
  assign m_sc_payld[631] = \<const0> ;
  assign m_sc_payld[630] = \<const0> ;
  assign m_sc_payld[629] = \<const0> ;
  assign m_sc_payld[628] = \<const0> ;
  assign m_sc_payld[627] = \<const0> ;
  assign m_sc_payld[626] = \<const0> ;
  assign m_sc_payld[625] = \<const0> ;
  assign m_sc_payld[624] = \<const0> ;
  assign m_sc_payld[623] = \<const0> ;
  assign m_sc_payld[622] = \<const0> ;
  assign m_sc_payld[621] = \<const0> ;
  assign m_sc_payld[620] = \<const0> ;
  assign m_sc_payld[619] = \<const0> ;
  assign m_sc_payld[618] = \<const0> ;
  assign m_sc_payld[617] = \<const0> ;
  assign m_sc_payld[616] = \<const0> ;
  assign m_sc_payld[615] = \<const0> ;
  assign m_sc_payld[614] = \<const0> ;
  assign m_sc_payld[613] = \<const0> ;
  assign m_sc_payld[612] = \<const0> ;
  assign m_sc_payld[611] = \<const0> ;
  assign m_sc_payld[610] = \<const0> ;
  assign m_sc_payld[609] = \<const0> ;
  assign m_sc_payld[608] = \<const0> ;
  assign m_sc_payld[607] = \<const0> ;
  assign m_sc_payld[606] = \<const0> ;
  assign m_sc_payld[605] = \<const0> ;
  assign m_sc_payld[604] = \<const0> ;
  assign m_sc_payld[603] = \<const0> ;
  assign m_sc_payld[602] = \<const0> ;
  assign m_sc_payld[601] = \<const0> ;
  assign m_sc_payld[600] = \<const0> ;
  assign m_sc_payld[599] = \<const0> ;
  assign m_sc_payld[598] = \<const0> ;
  assign m_sc_payld[597] = \<const0> ;
  assign m_sc_payld[596] = \<const0> ;
  assign m_sc_payld[595] = \<const0> ;
  assign m_sc_payld[594] = \<const0> ;
  assign m_sc_payld[593] = \<const0> ;
  assign m_sc_payld[592] = \<const0> ;
  assign m_sc_payld[591] = \<const0> ;
  assign m_sc_payld[590] = \<const0> ;
  assign m_sc_payld[589] = \<const0> ;
  assign m_sc_payld[588] = \<const0> ;
  assign m_sc_payld[587] = \<const0> ;
  assign m_sc_payld[586] = \<const0> ;
  assign m_sc_payld[585] = \<const0> ;
  assign m_sc_payld[584] = \<const0> ;
  assign m_sc_payld[583] = \<const0> ;
  assign m_sc_payld[582] = \<const0> ;
  assign m_sc_payld[581] = \<const0> ;
  assign m_sc_payld[580] = \<const0> ;
  assign m_sc_payld[579] = \<const0> ;
  assign m_sc_payld[578] = \<const0> ;
  assign m_sc_payld[577] = \<const0> ;
  assign m_sc_payld[576] = \<const0> ;
  assign m_sc_payld[575] = \<const0> ;
  assign m_sc_payld[574] = \<const0> ;
  assign m_sc_payld[573] = \<const0> ;
  assign m_sc_payld[572] = \<const0> ;
  assign m_sc_payld[571] = \<const0> ;
  assign m_sc_payld[570] = \<const0> ;
  assign m_sc_payld[569] = \<const0> ;
  assign m_sc_payld[568] = \<const0> ;
  assign m_sc_payld[567] = \<const0> ;
  assign m_sc_payld[566] = \<const0> ;
  assign m_sc_payld[565] = \<const0> ;
  assign m_sc_payld[564] = \<const0> ;
  assign m_sc_payld[563] = \<const0> ;
  assign m_sc_payld[562] = \<const0> ;
  assign m_sc_payld[561] = \<const0> ;
  assign m_sc_payld[560] = \<const0> ;
  assign m_sc_payld[559] = \<const0> ;
  assign m_sc_payld[558] = \<const0> ;
  assign m_sc_payld[557] = \<const0> ;
  assign m_sc_payld[556] = \<const0> ;
  assign m_sc_payld[555] = \<const0> ;
  assign m_sc_payld[554] = \<const0> ;
  assign m_sc_payld[553] = \<const0> ;
  assign m_sc_payld[552] = \<const0> ;
  assign m_sc_payld[551] = \<const0> ;
  assign m_sc_payld[550] = \<const0> ;
  assign m_sc_payld[549] = \<const0> ;
  assign m_sc_payld[548] = \<const0> ;
  assign m_sc_payld[547] = \<const0> ;
  assign m_sc_payld[546] = \<const0> ;
  assign m_sc_payld[545] = \<const0> ;
  assign m_sc_payld[544] = \<const0> ;
  assign m_sc_payld[543] = \<const0> ;
  assign m_sc_payld[542] = \<const0> ;
  assign m_sc_payld[541] = \<const0> ;
  assign m_sc_payld[540] = \<const0> ;
  assign m_sc_payld[539] = \<const0> ;
  assign m_sc_payld[538] = \<const0> ;
  assign m_sc_payld[537] = \<const0> ;
  assign m_sc_payld[536] = \<const0> ;
  assign m_sc_payld[535] = \<const0> ;
  assign m_sc_payld[534] = \<const0> ;
  assign m_sc_payld[533] = \<const0> ;
  assign m_sc_payld[532] = \<const0> ;
  assign m_sc_payld[531] = \<const0> ;
  assign m_sc_payld[530] = \<const0> ;
  assign m_sc_payld[529] = \<const0> ;
  assign m_sc_payld[528] = \<const0> ;
  assign m_sc_payld[527] = \<const0> ;
  assign m_sc_payld[526] = \<const0> ;
  assign m_sc_payld[525] = \<const0> ;
  assign m_sc_payld[524] = \<const0> ;
  assign m_sc_payld[523] = \<const0> ;
  assign m_sc_payld[522] = \<const0> ;
  assign m_sc_payld[521] = \<const0> ;
  assign m_sc_payld[520] = \<const0> ;
  assign m_sc_payld[519] = \<const0> ;
  assign m_sc_payld[518] = \<const0> ;
  assign m_sc_payld[517] = \<const0> ;
  assign m_sc_payld[516] = \<const0> ;
  assign m_sc_payld[515] = \<const0> ;
  assign m_sc_payld[514] = \<const0> ;
  assign m_sc_payld[513] = \<const0> ;
  assign m_sc_payld[512] = \<const0> ;
  assign m_sc_payld[511] = \<const0> ;
  assign m_sc_payld[510] = \<const0> ;
  assign m_sc_payld[509] = \<const0> ;
  assign m_sc_payld[508] = \<const0> ;
  assign m_sc_payld[507] = \<const0> ;
  assign m_sc_payld[506] = \<const0> ;
  assign m_sc_payld[505] = \<const0> ;
  assign m_sc_payld[504] = \<const0> ;
  assign m_sc_payld[503] = \<const0> ;
  assign m_sc_payld[502] = \<const0> ;
  assign m_sc_payld[501] = \<const0> ;
  assign m_sc_payld[500] = \<const0> ;
  assign m_sc_payld[499] = \<const0> ;
  assign m_sc_payld[498] = \<const0> ;
  assign m_sc_payld[497] = \<const0> ;
  assign m_sc_payld[496] = \<const0> ;
  assign m_sc_payld[495] = \<const0> ;
  assign m_sc_payld[494] = \<const0> ;
  assign m_sc_payld[493] = \<const0> ;
  assign m_sc_payld[492] = \<const0> ;
  assign m_sc_payld[491] = \<const0> ;
  assign m_sc_payld[490] = \<const0> ;
  assign m_sc_payld[489] = \<const0> ;
  assign m_sc_payld[488] = \<const0> ;
  assign m_sc_payld[487] = \<const0> ;
  assign m_sc_payld[486] = \<const0> ;
  assign m_sc_payld[485] = \<const0> ;
  assign m_sc_payld[484] = \<const0> ;
  assign m_sc_payld[483] = \<const0> ;
  assign m_sc_payld[482] = \<const0> ;
  assign m_sc_payld[481] = \<const0> ;
  assign m_sc_payld[480] = \<const0> ;
  assign m_sc_payld[479] = \<const0> ;
  assign m_sc_payld[478] = \<const0> ;
  assign m_sc_payld[477] = \<const0> ;
  assign m_sc_payld[476] = \<const0> ;
  assign m_sc_payld[475] = \<const0> ;
  assign m_sc_payld[474] = \<const0> ;
  assign m_sc_payld[473] = \<const0> ;
  assign m_sc_payld[472] = \<const0> ;
  assign m_sc_payld[471] = \<const0> ;
  assign m_sc_payld[470] = \<const0> ;
  assign m_sc_payld[469] = \<const0> ;
  assign m_sc_payld[468] = \<const0> ;
  assign m_sc_payld[467] = \<const0> ;
  assign m_sc_payld[466] = \<const0> ;
  assign m_sc_payld[465] = \<const0> ;
  assign m_sc_payld[464] = \<const0> ;
  assign m_sc_payld[463] = \<const0> ;
  assign m_sc_payld[462] = \<const0> ;
  assign m_sc_payld[461] = \<const0> ;
  assign m_sc_payld[460] = \<const0> ;
  assign m_sc_payld[459] = \<const0> ;
  assign m_sc_payld[458] = \<const0> ;
  assign m_sc_payld[457] = \<const0> ;
  assign m_sc_payld[456] = \<const0> ;
  assign m_sc_payld[455] = \<const0> ;
  assign m_sc_payld[454] = \<const0> ;
  assign m_sc_payld[453] = \<const0> ;
  assign m_sc_payld[452] = \<const0> ;
  assign m_sc_payld[451] = \<const0> ;
  assign m_sc_payld[450] = \<const0> ;
  assign m_sc_payld[449] = \<const0> ;
  assign m_sc_payld[448] = \<const0> ;
  assign m_sc_payld[447] = \<const0> ;
  assign m_sc_payld[446] = \<const0> ;
  assign m_sc_payld[445] = \<const0> ;
  assign m_sc_payld[444] = \<const0> ;
  assign m_sc_payld[443] = \<const0> ;
  assign m_sc_payld[442] = \<const0> ;
  assign m_sc_payld[441] = \<const0> ;
  assign m_sc_payld[440] = \<const0> ;
  assign m_sc_payld[439] = \<const0> ;
  assign m_sc_payld[438] = \<const0> ;
  assign m_sc_payld[437] = \<const0> ;
  assign m_sc_payld[436] = \<const0> ;
  assign m_sc_payld[435] = \<const0> ;
  assign m_sc_payld[434] = \<const0> ;
  assign m_sc_payld[433] = \<const0> ;
  assign m_sc_payld[432] = \<const0> ;
  assign m_sc_payld[431] = \<const0> ;
  assign m_sc_payld[430] = \<const0> ;
  assign m_sc_payld[429] = \<const0> ;
  assign m_sc_payld[428] = \<const0> ;
  assign m_sc_payld[427] = \<const0> ;
  assign m_sc_payld[426] = \<const0> ;
  assign m_sc_payld[425] = \<const0> ;
  assign m_sc_payld[424] = \<const0> ;
  assign m_sc_payld[423] = \<const0> ;
  assign m_sc_payld[422] = \<const0> ;
  assign m_sc_payld[421] = \<const0> ;
  assign m_sc_payld[420] = \<const0> ;
  assign m_sc_payld[419] = \<const0> ;
  assign m_sc_payld[418] = \<const0> ;
  assign m_sc_payld[417] = \<const0> ;
  assign m_sc_payld[416] = \<const0> ;
  assign m_sc_payld[415] = \<const0> ;
  assign m_sc_payld[414] = \<const0> ;
  assign m_sc_payld[413] = \<const0> ;
  assign m_sc_payld[412] = \<const0> ;
  assign m_sc_payld[411] = \<const0> ;
  assign m_sc_payld[410] = \<const0> ;
  assign m_sc_payld[409] = \<const0> ;
  assign m_sc_payld[408] = \<const0> ;
  assign m_sc_payld[407] = \<const0> ;
  assign m_sc_payld[406] = \<const0> ;
  assign m_sc_payld[405] = \<const0> ;
  assign m_sc_payld[404] = \<const0> ;
  assign m_sc_payld[403] = \<const0> ;
  assign m_sc_payld[402] = \<const0> ;
  assign m_sc_payld[401] = \<const0> ;
  assign m_sc_payld[400] = \<const0> ;
  assign m_sc_payld[399] = \<const0> ;
  assign m_sc_payld[398] = \<const0> ;
  assign m_sc_payld[397] = \<const0> ;
  assign m_sc_payld[396] = \<const0> ;
  assign m_sc_payld[395] = \<const0> ;
  assign m_sc_payld[394] = \<const0> ;
  assign m_sc_payld[393] = \<const0> ;
  assign m_sc_payld[392] = \<const0> ;
  assign m_sc_payld[391] = \<const0> ;
  assign m_sc_payld[390] = \<const0> ;
  assign m_sc_payld[389] = \<const0> ;
  assign m_sc_payld[388] = \<const0> ;
  assign m_sc_payld[387] = \<const0> ;
  assign m_sc_payld[386] = \<const0> ;
  assign m_sc_payld[385] = \<const0> ;
  assign m_sc_payld[384] = \<const0> ;
  assign m_sc_payld[383] = \<const0> ;
  assign m_sc_payld[382] = \<const0> ;
  assign m_sc_payld[381] = \<const0> ;
  assign m_sc_payld[380] = \<const0> ;
  assign m_sc_payld[379] = \<const0> ;
  assign m_sc_payld[378] = \<const0> ;
  assign m_sc_payld[377] = \<const0> ;
  assign m_sc_payld[376] = \<const0> ;
  assign m_sc_payld[375] = \<const0> ;
  assign m_sc_payld[374] = \<const0> ;
  assign m_sc_payld[373] = \<const0> ;
  assign m_sc_payld[372] = \<const0> ;
  assign m_sc_payld[371] = \<const0> ;
  assign m_sc_payld[370] = \<const0> ;
  assign m_sc_payld[369] = \<const0> ;
  assign m_sc_payld[368] = \<const0> ;
  assign m_sc_payld[367] = \<const0> ;
  assign m_sc_payld[366] = \<const0> ;
  assign m_sc_payld[365] = \<const0> ;
  assign m_sc_payld[364] = \<const0> ;
  assign m_sc_payld[363] = \<const0> ;
  assign m_sc_payld[362] = \<const0> ;
  assign m_sc_payld[361] = \<const0> ;
  assign m_sc_payld[360] = \<const0> ;
  assign m_sc_payld[359] = \<const0> ;
  assign m_sc_payld[358] = \<const0> ;
  assign m_sc_payld[357] = \<const0> ;
  assign m_sc_payld[356] = \<const0> ;
  assign m_sc_payld[355] = \<const0> ;
  assign m_sc_payld[354] = \<const0> ;
  assign m_sc_payld[353] = \<const0> ;
  assign m_sc_payld[352] = \<const0> ;
  assign m_sc_payld[351] = \<const0> ;
  assign m_sc_payld[350] = \<const0> ;
  assign m_sc_payld[349] = \<const0> ;
  assign m_sc_payld[348] = \<const0> ;
  assign m_sc_payld[347] = \<const0> ;
  assign m_sc_payld[346] = \<const0> ;
  assign m_sc_payld[345] = \<const0> ;
  assign m_sc_payld[344] = \<const0> ;
  assign m_sc_payld[343] = \<const0> ;
  assign m_sc_payld[342] = \<const0> ;
  assign m_sc_payld[341] = \<const0> ;
  assign m_sc_payld[340] = \<const0> ;
  assign m_sc_payld[339] = \<const0> ;
  assign m_sc_payld[338] = \<const0> ;
  assign m_sc_payld[337] = \<const0> ;
  assign m_sc_payld[336] = \<const0> ;
  assign m_sc_payld[335] = \<const0> ;
  assign m_sc_payld[334] = \<const0> ;
  assign m_sc_payld[333] = \<const0> ;
  assign m_sc_payld[332] = \<const0> ;
  assign m_sc_payld[331] = \<const0> ;
  assign m_sc_payld[330] = \<const0> ;
  assign m_sc_payld[329] = \<const0> ;
  assign m_sc_payld[328] = \<const0> ;
  assign m_sc_payld[327] = \<const0> ;
  assign m_sc_payld[326] = \<const0> ;
  assign m_sc_payld[325] = \<const0> ;
  assign m_sc_payld[324] = \<const0> ;
  assign m_sc_payld[323] = \<const0> ;
  assign m_sc_payld[322] = \<const0> ;
  assign m_sc_payld[321] = \<const0> ;
  assign m_sc_payld[320] = \<const0> ;
  assign m_sc_payld[319] = \<const0> ;
  assign m_sc_payld[318] = \<const0> ;
  assign m_sc_payld[317] = \<const0> ;
  assign m_sc_payld[316] = \<const0> ;
  assign m_sc_payld[315] = \<const0> ;
  assign m_sc_payld[314] = \<const0> ;
  assign m_sc_payld[313] = \<const0> ;
  assign m_sc_payld[312] = \<const0> ;
  assign m_sc_payld[311] = \<const0> ;
  assign m_sc_payld[310] = \<const0> ;
  assign m_sc_payld[309] = \<const0> ;
  assign m_sc_payld[308] = \<const0> ;
  assign m_sc_payld[307] = \<const0> ;
  assign m_sc_payld[306] = \<const0> ;
  assign m_sc_payld[305] = \<const0> ;
  assign m_sc_payld[304] = \<const0> ;
  assign m_sc_payld[303] = \<const0> ;
  assign m_sc_payld[302] = \<const0> ;
  assign m_sc_payld[301] = \<const0> ;
  assign m_sc_payld[300] = \<const0> ;
  assign m_sc_payld[299] = \<const0> ;
  assign m_sc_payld[298] = \<const0> ;
  assign m_sc_payld[297] = \<const0> ;
  assign m_sc_payld[296] = \<const0> ;
  assign m_sc_payld[295] = \<const0> ;
  assign m_sc_payld[294] = \<const0> ;
  assign m_sc_payld[293] = \<const0> ;
  assign m_sc_payld[292] = \<const0> ;
  assign m_sc_payld[291] = \<const0> ;
  assign m_sc_payld[290] = \<const0> ;
  assign m_sc_payld[289] = \<const0> ;
  assign m_sc_payld[288] = \<const0> ;
  assign m_sc_payld[287] = \<const0> ;
  assign m_sc_payld[286] = \<const0> ;
  assign m_sc_payld[285] = \<const0> ;
  assign m_sc_payld[284] = \<const0> ;
  assign m_sc_payld[283] = \<const0> ;
  assign m_sc_payld[282] = \<const0> ;
  assign m_sc_payld[281] = \<const0> ;
  assign m_sc_payld[280] = \<const0> ;
  assign m_sc_payld[279] = \<const0> ;
  assign m_sc_payld[278] = \<const0> ;
  assign m_sc_payld[277] = \<const0> ;
  assign m_sc_payld[276] = \<const0> ;
  assign m_sc_payld[275] = \<const0> ;
  assign m_sc_payld[274] = \<const0> ;
  assign m_sc_payld[273] = \<const0> ;
  assign m_sc_payld[272] = \<const0> ;
  assign m_sc_payld[271] = \<const0> ;
  assign m_sc_payld[270] = \<const0> ;
  assign m_sc_payld[269] = \<const0> ;
  assign m_sc_payld[268] = \<const0> ;
  assign m_sc_payld[267] = \<const0> ;
  assign m_sc_payld[266] = \<const0> ;
  assign m_sc_payld[265] = \<const0> ;
  assign m_sc_payld[264] = \<const0> ;
  assign m_sc_payld[263] = \<const0> ;
  assign m_sc_payld[262] = \<const0> ;
  assign m_sc_payld[261] = \<const0> ;
  assign m_sc_payld[260] = \<const0> ;
  assign m_sc_payld[259] = \<const0> ;
  assign m_sc_payld[258] = \<const0> ;
  assign m_sc_payld[257] = \<const0> ;
  assign m_sc_payld[256] = \<const0> ;
  assign m_sc_payld[255] = \<const0> ;
  assign m_sc_payld[254] = \<const0> ;
  assign m_sc_payld[253] = \<const0> ;
  assign m_sc_payld[252] = \<const0> ;
  assign m_sc_payld[251] = \<const0> ;
  assign m_sc_payld[250] = \<const0> ;
  assign m_sc_payld[249] = \<const0> ;
  assign m_sc_payld[248] = \<const0> ;
  assign m_sc_payld[247] = \<const0> ;
  assign m_sc_payld[246] = \<const0> ;
  assign m_sc_payld[245] = \<const0> ;
  assign m_sc_payld[244] = \<const0> ;
  assign m_sc_payld[243] = \<const0> ;
  assign m_sc_payld[242] = \<const0> ;
  assign m_sc_payld[241] = \<const0> ;
  assign m_sc_payld[240] = \<const0> ;
  assign m_sc_payld[239] = \<const0> ;
  assign m_sc_payld[238] = \<const0> ;
  assign m_sc_payld[237] = \<const0> ;
  assign m_sc_payld[236] = \<const0> ;
  assign m_sc_payld[235] = \<const0> ;
  assign m_sc_payld[234] = \<const0> ;
  assign m_sc_payld[233] = \<const0> ;
  assign m_sc_payld[232] = \<const0> ;
  assign m_sc_payld[231] = \<const0> ;
  assign m_sc_payld[230] = \<const0> ;
  assign m_sc_payld[229] = \<const0> ;
  assign m_sc_payld[228] = \<const0> ;
  assign m_sc_payld[227] = \<const0> ;
  assign m_sc_payld[226] = \<const0> ;
  assign m_sc_payld[225] = \<const0> ;
  assign m_sc_payld[224] = \<const0> ;
  assign m_sc_payld[223] = \<const0> ;
  assign m_sc_payld[222] = \<const0> ;
  assign m_sc_payld[221] = \<const0> ;
  assign m_sc_payld[220] = \<const0> ;
  assign m_sc_payld[219] = \<const0> ;
  assign m_sc_payld[218] = \<const0> ;
  assign m_sc_payld[217] = \<const0> ;
  assign m_sc_payld[216] = \<const0> ;
  assign m_sc_payld[215] = \<const0> ;
  assign m_sc_payld[214] = \<const0> ;
  assign m_sc_payld[213] = \<const0> ;
  assign m_sc_payld[212] = \<const0> ;
  assign m_sc_payld[211] = \<const0> ;
  assign m_sc_payld[210] = \<const0> ;
  assign m_sc_payld[209] = \<const0> ;
  assign m_sc_payld[208] = \<const0> ;
  assign m_sc_payld[207] = \<const0> ;
  assign m_sc_payld[206] = \<const0> ;
  assign m_sc_payld[205] = \<const0> ;
  assign m_sc_payld[204] = \<const0> ;
  assign m_sc_payld[203] = \<const0> ;
  assign m_sc_payld[202] = \<const0> ;
  assign m_sc_payld[201] = \<const0> ;
  assign m_sc_payld[200] = \<const0> ;
  assign m_sc_payld[199] = \<const0> ;
  assign m_sc_payld[198] = \<const0> ;
  assign m_sc_payld[197] = \<const0> ;
  assign m_sc_payld[196] = \<const0> ;
  assign m_sc_payld[195] = \<const0> ;
  assign m_sc_payld[194] = \<const0> ;
  assign m_sc_payld[193] = \<const0> ;
  assign m_sc_payld[192] = \<const0> ;
  assign m_sc_payld[191] = \<const0> ;
  assign m_sc_payld[190] = \<const0> ;
  assign m_sc_payld[189] = \<const0> ;
  assign m_sc_payld[188] = \<const0> ;
  assign m_sc_payld[187] = \<const0> ;
  assign m_sc_payld[186] = \<const0> ;
  assign m_sc_payld[185] = \<const0> ;
  assign m_sc_payld[184] = \<const0> ;
  assign m_sc_payld[183] = \<const0> ;
  assign m_sc_payld[182] = \<const0> ;
  assign m_sc_payld[181] = \<const0> ;
  assign m_sc_payld[180] = \<const0> ;
  assign m_sc_payld[179] = \<const0> ;
  assign m_sc_payld[178] = \<const0> ;
  assign m_sc_payld[177] = \<const0> ;
  assign m_sc_payld[176] = \<const0> ;
  assign m_sc_payld[175] = \<const0> ;
  assign m_sc_payld[174] = \<const0> ;
  assign m_sc_payld[173] = \<const0> ;
  assign m_sc_payld[172] = \<const0> ;
  assign m_sc_payld[171] = \<const0> ;
  assign m_sc_payld[170] = \<const0> ;
  assign m_sc_payld[169] = \<const0> ;
  assign m_sc_payld[168] = \<const0> ;
  assign m_sc_payld[167] = \<const0> ;
  assign m_sc_payld[166] = \<const0> ;
  assign m_sc_payld[165] = \<const0> ;
  assign m_sc_payld[164] = \<const0> ;
  assign m_sc_payld[163] = \<const0> ;
  assign m_sc_payld[162] = \<const0> ;
  assign m_sc_payld[161] = \<const0> ;
  assign m_sc_payld[160] = \<const0> ;
  assign m_sc_payld[159] = \<const0> ;
  assign m_sc_payld[158] = \<const0> ;
  assign m_sc_payld[157] = \<const0> ;
  assign m_sc_payld[156] = \<const0> ;
  assign m_sc_payld[155] = \<const0> ;
  assign m_sc_payld[154] = \<const0> ;
  assign m_sc_payld[153] = \<const0> ;
  assign m_sc_payld[152] = \<const0> ;
  assign m_sc_payld[151] = \<const0> ;
  assign m_sc_payld[150] = \<const0> ;
  assign m_sc_payld[149] = \<const0> ;
  assign m_sc_payld[148] = \<const0> ;
  assign m_sc_payld[147] = \<const0> ;
  assign m_sc_payld[146] = \<const0> ;
  assign m_sc_payld[145] = \<const0> ;
  assign m_sc_payld[144] = \<const0> ;
  assign m_sc_payld[143] = \<const0> ;
  assign m_sc_payld[142] = \<const0> ;
  assign m_sc_payld[141] = \<const0> ;
  assign m_sc_payld[140] = \<const0> ;
  assign m_sc_payld[139] = \<const0> ;
  assign m_sc_payld[138] = \<const0> ;
  assign m_sc_payld[137] = \<const0> ;
  assign m_sc_payld[136] = \<const0> ;
  assign m_sc_payld[135] = \<const0> ;
  assign m_sc_payld[134] = \<const0> ;
  assign m_sc_payld[133] = \<const0> ;
  assign m_sc_payld[132] = \<const0> ;
  assign m_sc_payld[131] = \<const0> ;
  assign m_sc_payld[130] = \<const0> ;
  assign m_sc_payld[129] = \<const0> ;
  assign m_sc_payld[128] = \<const0> ;
  assign m_sc_payld[127] = \<const0> ;
  assign m_sc_payld[126] = \<const0> ;
  assign m_sc_payld[125] = \<const0> ;
  assign m_sc_payld[124] = \<const0> ;
  assign m_sc_payld[123] = \<const0> ;
  assign m_sc_payld[122] = \<const0> ;
  assign m_sc_payld[121] = \<const0> ;
  assign m_sc_payld[120] = \<const0> ;
  assign m_sc_payld[119] = \<const0> ;
  assign m_sc_payld[118] = \<const0> ;
  assign m_sc_payld[117] = \<const0> ;
  assign m_sc_payld[116] = \<const0> ;
  assign m_sc_payld[115] = \<const0> ;
  assign m_sc_payld[114] = \<const0> ;
  assign m_sc_payld[113] = \<const0> ;
  assign m_sc_payld[112] = \<const0> ;
  assign m_sc_payld[111] = \<const0> ;
  assign m_sc_payld[110] = \<const0> ;
  assign m_sc_payld[109] = \<const0> ;
  assign m_sc_payld[108] = \<const0> ;
  assign m_sc_payld[107] = \<const0> ;
  assign m_sc_payld[106] = \<const0> ;
  assign m_sc_payld[105] = \<const0> ;
  assign m_sc_payld[104] = \<const0> ;
  assign m_sc_payld[103] = \<const0> ;
  assign m_sc_payld[102] = \<const0> ;
  assign m_sc_payld[101] = \<const0> ;
  assign m_sc_payld[100] = \<const0> ;
  assign m_sc_payld[99] = \<const0> ;
  assign m_sc_payld[98] = \<const0> ;
  assign m_sc_payld[97] = \<const0> ;
  assign m_sc_payld[96] = \<const0> ;
  assign m_sc_payld[95] = \<const0> ;
  assign m_sc_payld[94] = \<const0> ;
  assign m_sc_payld[93] = \<const0> ;
  assign m_sc_payld[92] = \<const0> ;
  assign m_sc_payld[91] = \<const0> ;
  assign m_sc_payld[90] = \<const0> ;
  assign m_sc_payld[89] = \<const0> ;
  assign m_sc_payld[88] = \<const0> ;
  assign m_sc_payld[87] = \<const0> ;
  assign m_sc_payld[86] = \<const0> ;
  assign m_sc_payld[85] = \<const0> ;
  assign m_sc_payld[84] = \<const0> ;
  assign m_sc_payld[83] = \<const0> ;
  assign m_sc_payld[82] = \<const0> ;
  assign m_sc_payld[81] = \<const0> ;
  assign m_sc_payld[80] = \<const0> ;
  assign m_sc_payld[79] = \<const0> ;
  assign m_sc_payld[78] = \<const0> ;
  assign m_sc_payld[77] = \<const0> ;
  assign m_sc_payld[76] = \<const0> ;
  assign m_sc_payld[75] = \<const0> ;
  assign m_sc_payld[74] = \<const0> ;
  assign m_sc_payld[73] = \<const0> ;
  assign m_sc_payld[72] = \<const0> ;
  assign m_sc_payld[71] = \<const0> ;
  assign m_sc_payld[70] = \<const0> ;
  assign m_sc_payld[69] = \<const0> ;
  assign m_sc_payld[68] = \<const0> ;
  assign m_sc_payld[67] = \<const0> ;
  assign m_sc_payld[66] = \<const0> ;
  assign m_sc_payld[65] = \<const0> ;
  assign m_sc_payld[64] = \<const0> ;
  assign m_sc_payld[63] = \<const0> ;
  assign m_sc_payld[62] = \<const0> ;
  assign m_sc_payld[61] = \<const0> ;
  assign m_sc_payld[60] = \<const0> ;
  assign m_sc_payld[59] = \<const0> ;
  assign m_sc_payld[58] = \<const0> ;
  assign m_sc_payld[57] = \<const0> ;
  assign m_sc_payld[56] = \<const0> ;
  assign m_sc_payld[55] = \<const0> ;
  assign m_sc_payld[54] = \<const0> ;
  assign m_sc_payld[53] = \<const0> ;
  assign m_sc_payld[52] = \<const0> ;
  assign m_sc_payld[51] = \<const0> ;
  assign m_sc_payld[50] = \<const0> ;
  assign m_sc_payld[49] = \<const0> ;
  assign m_sc_payld[48] = \<const0> ;
  assign m_sc_payld[47] = \<const0> ;
  assign m_sc_payld[46] = \<const0> ;
  assign m_sc_payld[45] = \<const0> ;
  assign m_sc_payld[44] = \<const0> ;
  assign m_sc_payld[43] = \<const0> ;
  assign m_sc_payld[42] = \<const0> ;
  assign m_sc_payld[41] = \<const0> ;
  assign m_sc_payld[40] = \<const0> ;
  assign m_sc_payld[39] = \<const0> ;
  assign m_sc_payld[38] = \<const0> ;
  assign m_sc_payld[37] = \<const0> ;
  assign m_sc_payld[36] = \<const0> ;
  assign m_sc_payld[35] = \<const0> ;
  assign m_sc_payld[34] = \<const0> ;
  assign m_sc_payld[33] = \<const0> ;
  assign m_sc_payld[32] = \<const0> ;
  assign m_sc_payld[31] = \<const0> ;
  assign m_sc_payld[30] = \<const0> ;
  assign m_sc_payld[29] = \<const0> ;
  assign m_sc_payld[28] = \<const0> ;
  assign m_sc_payld[27] = \<const0> ;
  assign m_sc_payld[26] = \<const0> ;
  assign m_sc_payld[25] = \<const0> ;
  assign m_sc_payld[24] = \<const0> ;
  assign m_sc_payld[23] = \<const0> ;
  assign m_sc_payld[22] = \<const0> ;
  assign m_sc_payld[21] = \<const0> ;
  assign m_sc_payld[20] = \<const0> ;
  assign m_sc_payld[19] = \<const0> ;
  assign m_sc_payld[18] = \<const0> ;
  assign m_sc_payld[17] = \<const0> ;
  assign m_sc_payld[16] = \<const0> ;
  assign m_sc_payld[15] = \<const0> ;
  assign m_sc_payld[14] = \<const0> ;
  assign m_sc_payld[13] = \<const0> ;
  assign m_sc_payld[12] = \<const0> ;
  assign m_sc_payld[11] = \<const0> ;
  assign m_sc_payld[10] = \<const0> ;
  assign m_sc_payld[9] = \<const0> ;
  assign m_sc_payld[8] = \<const0> ;
  assign m_sc_payld[7] = \<const0> ;
  assign m_sc_payld[6] = \<const0> ;
  assign m_sc_payld[5] = \<const0> ;
  assign m_sc_payld[4] = \<const0> ;
  assign m_sc_payld[3] = \<const0> ;
  assign m_sc_payld[2] = \<const0> ;
  assign m_sc_payld[1] = \<const0> ;
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \<const0> ;
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_sc_recv[2] = \<const0> ;
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r [1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r [0]));
endmodule

(* C_CONNECTIVITY = "3'b100" *) (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) (* C_NUM_MI = "1" *) 
(* C_NUM_SI = "3" *) (* C_PAYLD_WIDTH = "140" *) (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
(* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) (* C_TESTING_MODE = "0" *) (* K_MAX_INFO_WIDTH = "1" *) 
(* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
(* ORIG_REF_NAME = "sc_switchboard_v1_0_4_top" *) 
module ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized0
   (aclk,
    aclken,
    connectivity,
    s_sc_send,
    s_sc_req,
    s_sc_info,
    s_sc_payld,
    s_sc_recv,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld);
  input aclk;
  input aclken;
  input [2:0]connectivity;
  input [2:0]s_sc_send;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [419:0]s_sc_payld;
  output [2:0]s_sc_recv;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [139:0]m_sc_payld;

  wire \<const0> ;
  wire aclk;
  wire [139:1]\^m_sc_payld ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire [2:0]m_sc_recv;
  wire [419:0]s_sc_payld;

  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[139:1] = \^m_sc_payld [139:1];
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \<const0> ;
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_sc_recv[2] = \<const0> ;
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized11 \gen_mi[0].inst_opipe_payld 
       (.aclk(aclk),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv[2]),
        .s_sc_payld(s_sc_payld[419:281]));
endmodule

(* C_CONNECTIVITY = "3'b100" *) (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) (* C_NUM_MI = "3" *) 
(* C_NUM_SI = "1" *) (* C_PAYLD_WIDTH = "8" *) (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
(* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) (* C_TESTING_MODE = "0" *) (* K_MAX_INFO_WIDTH = "1" *) 
(* LP_LOG_NUM_SI = "32'b00000000000000000000000000000001" *) (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
(* ORIG_REF_NAME = "sc_switchboard_v1_0_4_top" *) 
module ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized1
   (aclk,
    aclken,
    connectivity,
    s_sc_send,
    s_sc_req,
    s_sc_info,
    s_sc_payld,
    s_sc_recv,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld);
  input aclk;
  input aclken;
  input [2:0]connectivity;
  input [2:0]s_sc_send;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [7:0]s_sc_payld;
  output [2:0]s_sc_recv;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [23:0]m_sc_payld;

  wire \<const0> ;
  wire aclk;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[0].m_sc_sel_mi_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[1].m_sc_sel_mi_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[2].m_sc_sel_mi_r ;
  wire [23:17]\^m_sc_payld ;
  wire [7:0]s_sc_payld;

  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[23:17] = \^m_sc_payld [23:17];
  assign m_sc_payld[16] = \<const0> ;
  assign m_sc_payld[15] = \<const0> ;
  assign m_sc_payld[14] = \<const0> ;
  assign m_sc_payld[13] = \<const0> ;
  assign m_sc_payld[12] = \<const0> ;
  assign m_sc_payld[11] = \<const0> ;
  assign m_sc_payld[10] = \<const0> ;
  assign m_sc_payld[9] = \<const0> ;
  assign m_sc_payld[8] = \<const0> ;
  assign m_sc_payld[7] = \<const0> ;
  assign m_sc_payld[6] = \<const0> ;
  assign m_sc_payld[5] = \<const0> ;
  assign m_sc_payld[4] = \<const0> ;
  assign m_sc_payld[3] = \<const0> ;
  assign m_sc_payld[2] = \<const0> ;
  assign m_sc_payld[1] = \<const0> ;
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \<const0> ;
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_sc_recv[2] = \<const0> ;
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized14 \gen_mi[2].inst_opipe_payld 
       (.aclk(aclk),
        .m_sc_payld(\^m_sc_payld ),
        .out(\gen_mi[2].m_sc_sel_mi_r ),
        .s_sc_payld(s_sc_payld[7:1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r ));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\gen_mi[1].m_sc_sel_mi_r ));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(\gen_mi[2].m_sc_sel_mi_r ));
endmodule

(* C_CONNECTIVITY = "3'b100" *) (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) (* C_NUM_MI = "3" *) 
(* C_NUM_SI = "1" *) (* C_PAYLD_WIDTH = "1854" *) (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
(* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) (* C_TESTING_MODE = "0" *) (* K_MAX_INFO_WIDTH = "1" *) 
(* LP_LOG_NUM_SI = "32'b00000000000000000000000000000001" *) (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
(* ORIG_REF_NAME = "sc_switchboard_v1_0_4_top" *) 
module ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized2
   (aclk,
    aclken,
    connectivity,
    s_sc_send,
    s_sc_req,
    s_sc_info,
    s_sc_payld,
    s_sc_recv,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld);
  input aclk;
  input aclken;
  input [2:0]connectivity;
  input [2:0]s_sc_send;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [1853:0]s_sc_payld;
  output [2:0]s_sc_recv;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [5561:0]m_sc_payld;

  wire \<const0> ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[0].m_sc_sel_mi_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[1].m_sc_sel_mi_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \gen_mi[2].m_sc_sel_mi_r ;

  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[5561] = \<const0> ;
  assign m_sc_payld[5560] = \<const0> ;
  assign m_sc_payld[5559] = \<const0> ;
  assign m_sc_payld[5558] = \<const0> ;
  assign m_sc_payld[5557] = \<const0> ;
  assign m_sc_payld[5556] = \<const0> ;
  assign m_sc_payld[5555] = \<const0> ;
  assign m_sc_payld[5554] = \<const0> ;
  assign m_sc_payld[5553] = \<const0> ;
  assign m_sc_payld[5552] = \<const0> ;
  assign m_sc_payld[5551] = \<const0> ;
  assign m_sc_payld[5550] = \<const0> ;
  assign m_sc_payld[5549] = \<const0> ;
  assign m_sc_payld[5548] = \<const0> ;
  assign m_sc_payld[5547] = \<const0> ;
  assign m_sc_payld[5546] = \<const0> ;
  assign m_sc_payld[5545] = \<const0> ;
  assign m_sc_payld[5544] = \<const0> ;
  assign m_sc_payld[5543] = \<const0> ;
  assign m_sc_payld[5542] = \<const0> ;
  assign m_sc_payld[5541] = \<const0> ;
  assign m_sc_payld[5540] = \<const0> ;
  assign m_sc_payld[5539] = \<const0> ;
  assign m_sc_payld[5538] = \<const0> ;
  assign m_sc_payld[5537] = \<const0> ;
  assign m_sc_payld[5536] = \<const0> ;
  assign m_sc_payld[5535] = \<const0> ;
  assign m_sc_payld[5534] = \<const0> ;
  assign m_sc_payld[5533] = \<const0> ;
  assign m_sc_payld[5532] = \<const0> ;
  assign m_sc_payld[5531] = \<const0> ;
  assign m_sc_payld[5530] = \<const0> ;
  assign m_sc_payld[5529] = \<const0> ;
  assign m_sc_payld[5528] = \<const0> ;
  assign m_sc_payld[5527] = \<const0> ;
  assign m_sc_payld[5526] = \<const0> ;
  assign m_sc_payld[5525] = \<const0> ;
  assign m_sc_payld[5524] = \<const0> ;
  assign m_sc_payld[5523] = \<const0> ;
  assign m_sc_payld[5522] = \<const0> ;
  assign m_sc_payld[5521] = \<const0> ;
  assign m_sc_payld[5520] = \<const0> ;
  assign m_sc_payld[5519] = \<const0> ;
  assign m_sc_payld[5518] = \<const0> ;
  assign m_sc_payld[5517] = \<const0> ;
  assign m_sc_payld[5516] = \<const0> ;
  assign m_sc_payld[5515] = \<const0> ;
  assign m_sc_payld[5514] = \<const0> ;
  assign m_sc_payld[5513] = \<const0> ;
  assign m_sc_payld[5512] = \<const0> ;
  assign m_sc_payld[5511] = \<const0> ;
  assign m_sc_payld[5510] = \<const0> ;
  assign m_sc_payld[5509] = \<const0> ;
  assign m_sc_payld[5508] = \<const0> ;
  assign m_sc_payld[5507] = \<const0> ;
  assign m_sc_payld[5506] = \<const0> ;
  assign m_sc_payld[5505] = \<const0> ;
  assign m_sc_payld[5504] = \<const0> ;
  assign m_sc_payld[5503] = \<const0> ;
  assign m_sc_payld[5502] = \<const0> ;
  assign m_sc_payld[5501] = \<const0> ;
  assign m_sc_payld[5500] = \<const0> ;
  assign m_sc_payld[5499] = \<const0> ;
  assign m_sc_payld[5498] = \<const0> ;
  assign m_sc_payld[5497] = \<const0> ;
  assign m_sc_payld[5496] = \<const0> ;
  assign m_sc_payld[5495] = \<const0> ;
  assign m_sc_payld[5494] = \<const0> ;
  assign m_sc_payld[5493] = \<const0> ;
  assign m_sc_payld[5492] = \<const0> ;
  assign m_sc_payld[5491] = \<const0> ;
  assign m_sc_payld[5490] = \<const0> ;
  assign m_sc_payld[5489] = \<const0> ;
  assign m_sc_payld[5488] = \<const0> ;
  assign m_sc_payld[5487] = \<const0> ;
  assign m_sc_payld[5486] = \<const0> ;
  assign m_sc_payld[5485] = \<const0> ;
  assign m_sc_payld[5484] = \<const0> ;
  assign m_sc_payld[5483] = \<const0> ;
  assign m_sc_payld[5482] = \<const0> ;
  assign m_sc_payld[5481] = \<const0> ;
  assign m_sc_payld[5480] = \<const0> ;
  assign m_sc_payld[5479] = \<const0> ;
  assign m_sc_payld[5478] = \<const0> ;
  assign m_sc_payld[5477] = \<const0> ;
  assign m_sc_payld[5476] = \<const0> ;
  assign m_sc_payld[5475] = \<const0> ;
  assign m_sc_payld[5474] = \<const0> ;
  assign m_sc_payld[5473] = \<const0> ;
  assign m_sc_payld[5472] = \<const0> ;
  assign m_sc_payld[5471] = \<const0> ;
  assign m_sc_payld[5470] = \<const0> ;
  assign m_sc_payld[5469] = \<const0> ;
  assign m_sc_payld[5468] = \<const0> ;
  assign m_sc_payld[5467] = \<const0> ;
  assign m_sc_payld[5466] = \<const0> ;
  assign m_sc_payld[5465] = \<const0> ;
  assign m_sc_payld[5464] = \<const0> ;
  assign m_sc_payld[5463] = \<const0> ;
  assign m_sc_payld[5462] = \<const0> ;
  assign m_sc_payld[5461] = \<const0> ;
  assign m_sc_payld[5460] = \<const0> ;
  assign m_sc_payld[5459] = \<const0> ;
  assign m_sc_payld[5458] = \<const0> ;
  assign m_sc_payld[5457] = \<const0> ;
  assign m_sc_payld[5456] = \<const0> ;
  assign m_sc_payld[5455] = \<const0> ;
  assign m_sc_payld[5454] = \<const0> ;
  assign m_sc_payld[5453] = \<const0> ;
  assign m_sc_payld[5452] = \<const0> ;
  assign m_sc_payld[5451] = \<const0> ;
  assign m_sc_payld[5450] = \<const0> ;
  assign m_sc_payld[5449] = \<const0> ;
  assign m_sc_payld[5448] = \<const0> ;
  assign m_sc_payld[5447] = \<const0> ;
  assign m_sc_payld[5446] = \<const0> ;
  assign m_sc_payld[5445] = \<const0> ;
  assign m_sc_payld[5444] = \<const0> ;
  assign m_sc_payld[5443] = \<const0> ;
  assign m_sc_payld[5442] = \<const0> ;
  assign m_sc_payld[5441] = \<const0> ;
  assign m_sc_payld[5440] = \<const0> ;
  assign m_sc_payld[5439] = \<const0> ;
  assign m_sc_payld[5438] = \<const0> ;
  assign m_sc_payld[5437] = \<const0> ;
  assign m_sc_payld[5436] = \<const0> ;
  assign m_sc_payld[5435] = \<const0> ;
  assign m_sc_payld[5434] = \<const0> ;
  assign m_sc_payld[5433] = \<const0> ;
  assign m_sc_payld[5432] = \<const0> ;
  assign m_sc_payld[5431] = \<const0> ;
  assign m_sc_payld[5430] = \<const0> ;
  assign m_sc_payld[5429] = \<const0> ;
  assign m_sc_payld[5428] = \<const0> ;
  assign m_sc_payld[5427] = \<const0> ;
  assign m_sc_payld[5426] = \<const0> ;
  assign m_sc_payld[5425] = \<const0> ;
  assign m_sc_payld[5424] = \<const0> ;
  assign m_sc_payld[5423] = \<const0> ;
  assign m_sc_payld[5422] = \<const0> ;
  assign m_sc_payld[5421] = \<const0> ;
  assign m_sc_payld[5420] = \<const0> ;
  assign m_sc_payld[5419] = \<const0> ;
  assign m_sc_payld[5418] = \<const0> ;
  assign m_sc_payld[5417] = \<const0> ;
  assign m_sc_payld[5416] = \<const0> ;
  assign m_sc_payld[5415] = \<const0> ;
  assign m_sc_payld[5414] = \<const0> ;
  assign m_sc_payld[5413] = \<const0> ;
  assign m_sc_payld[5412] = \<const0> ;
  assign m_sc_payld[5411] = \<const0> ;
  assign m_sc_payld[5410] = \<const0> ;
  assign m_sc_payld[5409] = \<const0> ;
  assign m_sc_payld[5408] = \<const0> ;
  assign m_sc_payld[5407] = \<const0> ;
  assign m_sc_payld[5406] = \<const0> ;
  assign m_sc_payld[5405] = \<const0> ;
  assign m_sc_payld[5404] = \<const0> ;
  assign m_sc_payld[5403] = \<const0> ;
  assign m_sc_payld[5402] = \<const0> ;
  assign m_sc_payld[5401] = \<const0> ;
  assign m_sc_payld[5400] = \<const0> ;
  assign m_sc_payld[5399] = \<const0> ;
  assign m_sc_payld[5398] = \<const0> ;
  assign m_sc_payld[5397] = \<const0> ;
  assign m_sc_payld[5396] = \<const0> ;
  assign m_sc_payld[5395] = \<const0> ;
  assign m_sc_payld[5394] = \<const0> ;
  assign m_sc_payld[5393] = \<const0> ;
  assign m_sc_payld[5392] = \<const0> ;
  assign m_sc_payld[5391] = \<const0> ;
  assign m_sc_payld[5390] = \<const0> ;
  assign m_sc_payld[5389] = \<const0> ;
  assign m_sc_payld[5388] = \<const0> ;
  assign m_sc_payld[5387] = \<const0> ;
  assign m_sc_payld[5386] = \<const0> ;
  assign m_sc_payld[5385] = \<const0> ;
  assign m_sc_payld[5384] = \<const0> ;
  assign m_sc_payld[5383] = \<const0> ;
  assign m_sc_payld[5382] = \<const0> ;
  assign m_sc_payld[5381] = \<const0> ;
  assign m_sc_payld[5380] = \<const0> ;
  assign m_sc_payld[5379] = \<const0> ;
  assign m_sc_payld[5378] = \<const0> ;
  assign m_sc_payld[5377] = \<const0> ;
  assign m_sc_payld[5376] = \<const0> ;
  assign m_sc_payld[5375] = \<const0> ;
  assign m_sc_payld[5374] = \<const0> ;
  assign m_sc_payld[5373] = \<const0> ;
  assign m_sc_payld[5372] = \<const0> ;
  assign m_sc_payld[5371] = \<const0> ;
  assign m_sc_payld[5370] = \<const0> ;
  assign m_sc_payld[5369] = \<const0> ;
  assign m_sc_payld[5368] = \<const0> ;
  assign m_sc_payld[5367] = \<const0> ;
  assign m_sc_payld[5366] = \<const0> ;
  assign m_sc_payld[5365] = \<const0> ;
  assign m_sc_payld[5364] = \<const0> ;
  assign m_sc_payld[5363] = \<const0> ;
  assign m_sc_payld[5362] = \<const0> ;
  assign m_sc_payld[5361] = \<const0> ;
  assign m_sc_payld[5360] = \<const0> ;
  assign m_sc_payld[5359] = \<const0> ;
  assign m_sc_payld[5358] = \<const0> ;
  assign m_sc_payld[5357] = \<const0> ;
  assign m_sc_payld[5356] = \<const0> ;
  assign m_sc_payld[5355] = \<const0> ;
  assign m_sc_payld[5354] = \<const0> ;
  assign m_sc_payld[5353] = \<const0> ;
  assign m_sc_payld[5352] = \<const0> ;
  assign m_sc_payld[5351] = \<const0> ;
  assign m_sc_payld[5350] = \<const0> ;
  assign m_sc_payld[5349] = \<const0> ;
  assign m_sc_payld[5348] = \<const0> ;
  assign m_sc_payld[5347] = \<const0> ;
  assign m_sc_payld[5346] = \<const0> ;
  assign m_sc_payld[5345] = \<const0> ;
  assign m_sc_payld[5344] = \<const0> ;
  assign m_sc_payld[5343] = \<const0> ;
  assign m_sc_payld[5342] = \<const0> ;
  assign m_sc_payld[5341] = \<const0> ;
  assign m_sc_payld[5340] = \<const0> ;
  assign m_sc_payld[5339] = \<const0> ;
  assign m_sc_payld[5338] = \<const0> ;
  assign m_sc_payld[5337] = \<const0> ;
  assign m_sc_payld[5336] = \<const0> ;
  assign m_sc_payld[5335] = \<const0> ;
  assign m_sc_payld[5334] = \<const0> ;
  assign m_sc_payld[5333] = \<const0> ;
  assign m_sc_payld[5332] = \<const0> ;
  assign m_sc_payld[5331] = \<const0> ;
  assign m_sc_payld[5330] = \<const0> ;
  assign m_sc_payld[5329] = \<const0> ;
  assign m_sc_payld[5328] = \<const0> ;
  assign m_sc_payld[5327] = \<const0> ;
  assign m_sc_payld[5326] = \<const0> ;
  assign m_sc_payld[5325] = \<const0> ;
  assign m_sc_payld[5324] = \<const0> ;
  assign m_sc_payld[5323] = \<const0> ;
  assign m_sc_payld[5322] = \<const0> ;
  assign m_sc_payld[5321] = \<const0> ;
  assign m_sc_payld[5320] = \<const0> ;
  assign m_sc_payld[5319] = \<const0> ;
  assign m_sc_payld[5318] = \<const0> ;
  assign m_sc_payld[5317] = \<const0> ;
  assign m_sc_payld[5316] = \<const0> ;
  assign m_sc_payld[5315] = \<const0> ;
  assign m_sc_payld[5314] = \<const0> ;
  assign m_sc_payld[5313] = \<const0> ;
  assign m_sc_payld[5312] = \<const0> ;
  assign m_sc_payld[5311] = \<const0> ;
  assign m_sc_payld[5310] = \<const0> ;
  assign m_sc_payld[5309] = \<const0> ;
  assign m_sc_payld[5308] = \<const0> ;
  assign m_sc_payld[5307] = \<const0> ;
  assign m_sc_payld[5306] = \<const0> ;
  assign m_sc_payld[5305] = \<const0> ;
  assign m_sc_payld[5304] = \<const0> ;
  assign m_sc_payld[5303] = \<const0> ;
  assign m_sc_payld[5302] = \<const0> ;
  assign m_sc_payld[5301] = \<const0> ;
  assign m_sc_payld[5300] = \<const0> ;
  assign m_sc_payld[5299] = \<const0> ;
  assign m_sc_payld[5298] = \<const0> ;
  assign m_sc_payld[5297] = \<const0> ;
  assign m_sc_payld[5296] = \<const0> ;
  assign m_sc_payld[5295] = \<const0> ;
  assign m_sc_payld[5294] = \<const0> ;
  assign m_sc_payld[5293] = \<const0> ;
  assign m_sc_payld[5292] = \<const0> ;
  assign m_sc_payld[5291] = \<const0> ;
  assign m_sc_payld[5290] = \<const0> ;
  assign m_sc_payld[5289] = \<const0> ;
  assign m_sc_payld[5288] = \<const0> ;
  assign m_sc_payld[5287] = \<const0> ;
  assign m_sc_payld[5286] = \<const0> ;
  assign m_sc_payld[5285] = \<const0> ;
  assign m_sc_payld[5284] = \<const0> ;
  assign m_sc_payld[5283] = \<const0> ;
  assign m_sc_payld[5282] = \<const0> ;
  assign m_sc_payld[5281] = \<const0> ;
  assign m_sc_payld[5280] = \<const0> ;
  assign m_sc_payld[5279] = \<const0> ;
  assign m_sc_payld[5278] = \<const0> ;
  assign m_sc_payld[5277] = \<const0> ;
  assign m_sc_payld[5276] = \<const0> ;
  assign m_sc_payld[5275] = \<const0> ;
  assign m_sc_payld[5274] = \<const0> ;
  assign m_sc_payld[5273] = \<const0> ;
  assign m_sc_payld[5272] = \<const0> ;
  assign m_sc_payld[5271] = \<const0> ;
  assign m_sc_payld[5270] = \<const0> ;
  assign m_sc_payld[5269] = \<const0> ;
  assign m_sc_payld[5268] = \<const0> ;
  assign m_sc_payld[5267] = \<const0> ;
  assign m_sc_payld[5266] = \<const0> ;
  assign m_sc_payld[5265] = \<const0> ;
  assign m_sc_payld[5264] = \<const0> ;
  assign m_sc_payld[5263] = \<const0> ;
  assign m_sc_payld[5262] = \<const0> ;
  assign m_sc_payld[5261] = \<const0> ;
  assign m_sc_payld[5260] = \<const0> ;
  assign m_sc_payld[5259] = \<const0> ;
  assign m_sc_payld[5258] = \<const0> ;
  assign m_sc_payld[5257] = \<const0> ;
  assign m_sc_payld[5256] = \<const0> ;
  assign m_sc_payld[5255] = \<const0> ;
  assign m_sc_payld[5254] = \<const0> ;
  assign m_sc_payld[5253] = \<const0> ;
  assign m_sc_payld[5252] = \<const0> ;
  assign m_sc_payld[5251] = \<const0> ;
  assign m_sc_payld[5250] = \<const0> ;
  assign m_sc_payld[5249] = \<const0> ;
  assign m_sc_payld[5248] = \<const0> ;
  assign m_sc_payld[5247] = \<const0> ;
  assign m_sc_payld[5246] = \<const0> ;
  assign m_sc_payld[5245] = \<const0> ;
  assign m_sc_payld[5244] = \<const0> ;
  assign m_sc_payld[5243] = \<const0> ;
  assign m_sc_payld[5242] = \<const0> ;
  assign m_sc_payld[5241] = \<const0> ;
  assign m_sc_payld[5240] = \<const0> ;
  assign m_sc_payld[5239] = \<const0> ;
  assign m_sc_payld[5238] = \<const0> ;
  assign m_sc_payld[5237] = \<const0> ;
  assign m_sc_payld[5236] = \<const0> ;
  assign m_sc_payld[5235] = \<const0> ;
  assign m_sc_payld[5234] = \<const0> ;
  assign m_sc_payld[5233] = \<const0> ;
  assign m_sc_payld[5232] = \<const0> ;
  assign m_sc_payld[5231] = \<const0> ;
  assign m_sc_payld[5230] = \<const0> ;
  assign m_sc_payld[5229] = \<const0> ;
  assign m_sc_payld[5228] = \<const0> ;
  assign m_sc_payld[5227] = \<const0> ;
  assign m_sc_payld[5226] = \<const0> ;
  assign m_sc_payld[5225] = \<const0> ;
  assign m_sc_payld[5224] = \<const0> ;
  assign m_sc_payld[5223] = \<const0> ;
  assign m_sc_payld[5222] = \<const0> ;
  assign m_sc_payld[5221] = \<const0> ;
  assign m_sc_payld[5220] = \<const0> ;
  assign m_sc_payld[5219] = \<const0> ;
  assign m_sc_payld[5218] = \<const0> ;
  assign m_sc_payld[5217] = \<const0> ;
  assign m_sc_payld[5216] = \<const0> ;
  assign m_sc_payld[5215] = \<const0> ;
  assign m_sc_payld[5214] = \<const0> ;
  assign m_sc_payld[5213] = \<const0> ;
  assign m_sc_payld[5212] = \<const0> ;
  assign m_sc_payld[5211] = \<const0> ;
  assign m_sc_payld[5210] = \<const0> ;
  assign m_sc_payld[5209] = \<const0> ;
  assign m_sc_payld[5208] = \<const0> ;
  assign m_sc_payld[5207] = \<const0> ;
  assign m_sc_payld[5206] = \<const0> ;
  assign m_sc_payld[5205] = \<const0> ;
  assign m_sc_payld[5204] = \<const0> ;
  assign m_sc_payld[5203] = \<const0> ;
  assign m_sc_payld[5202] = \<const0> ;
  assign m_sc_payld[5201] = \<const0> ;
  assign m_sc_payld[5200] = \<const0> ;
  assign m_sc_payld[5199] = \<const0> ;
  assign m_sc_payld[5198] = \<const0> ;
  assign m_sc_payld[5197] = \<const0> ;
  assign m_sc_payld[5196] = \<const0> ;
  assign m_sc_payld[5195] = \<const0> ;
  assign m_sc_payld[5194] = \<const0> ;
  assign m_sc_payld[5193] = \<const0> ;
  assign m_sc_payld[5192] = \<const0> ;
  assign m_sc_payld[5191] = \<const0> ;
  assign m_sc_payld[5190] = \<const0> ;
  assign m_sc_payld[5189] = \<const0> ;
  assign m_sc_payld[5188] = \<const0> ;
  assign m_sc_payld[5187] = \<const0> ;
  assign m_sc_payld[5186] = \<const0> ;
  assign m_sc_payld[5185] = \<const0> ;
  assign m_sc_payld[5184] = \<const0> ;
  assign m_sc_payld[5183] = \<const0> ;
  assign m_sc_payld[5182] = \<const0> ;
  assign m_sc_payld[5181] = \<const0> ;
  assign m_sc_payld[5180] = \<const0> ;
  assign m_sc_payld[5179] = \<const0> ;
  assign m_sc_payld[5178] = \<const0> ;
  assign m_sc_payld[5177] = \<const0> ;
  assign m_sc_payld[5176] = \<const0> ;
  assign m_sc_payld[5175] = \<const0> ;
  assign m_sc_payld[5174] = \<const0> ;
  assign m_sc_payld[5173] = \<const0> ;
  assign m_sc_payld[5172] = \<const0> ;
  assign m_sc_payld[5171] = \<const0> ;
  assign m_sc_payld[5170] = \<const0> ;
  assign m_sc_payld[5169] = \<const0> ;
  assign m_sc_payld[5168] = \<const0> ;
  assign m_sc_payld[5167] = \<const0> ;
  assign m_sc_payld[5166] = \<const0> ;
  assign m_sc_payld[5165] = \<const0> ;
  assign m_sc_payld[5164] = \<const0> ;
  assign m_sc_payld[5163] = \<const0> ;
  assign m_sc_payld[5162] = \<const0> ;
  assign m_sc_payld[5161] = \<const0> ;
  assign m_sc_payld[5160] = \<const0> ;
  assign m_sc_payld[5159] = \<const0> ;
  assign m_sc_payld[5158] = \<const0> ;
  assign m_sc_payld[5157] = \<const0> ;
  assign m_sc_payld[5156] = \<const0> ;
  assign m_sc_payld[5155] = \<const0> ;
  assign m_sc_payld[5154] = \<const0> ;
  assign m_sc_payld[5153] = \<const0> ;
  assign m_sc_payld[5152] = \<const0> ;
  assign m_sc_payld[5151] = \<const0> ;
  assign m_sc_payld[5150] = \<const0> ;
  assign m_sc_payld[5149] = \<const0> ;
  assign m_sc_payld[5148] = \<const0> ;
  assign m_sc_payld[5147] = \<const0> ;
  assign m_sc_payld[5146] = \<const0> ;
  assign m_sc_payld[5145] = \<const0> ;
  assign m_sc_payld[5144] = \<const0> ;
  assign m_sc_payld[5143] = \<const0> ;
  assign m_sc_payld[5142] = \<const0> ;
  assign m_sc_payld[5141] = \<const0> ;
  assign m_sc_payld[5140] = \<const0> ;
  assign m_sc_payld[5139] = \<const0> ;
  assign m_sc_payld[5138] = \<const0> ;
  assign m_sc_payld[5137] = \<const0> ;
  assign m_sc_payld[5136] = \<const0> ;
  assign m_sc_payld[5135] = \<const0> ;
  assign m_sc_payld[5134] = \<const0> ;
  assign m_sc_payld[5133] = \<const0> ;
  assign m_sc_payld[5132] = \<const0> ;
  assign m_sc_payld[5131] = \<const0> ;
  assign m_sc_payld[5130] = \<const0> ;
  assign m_sc_payld[5129] = \<const0> ;
  assign m_sc_payld[5128] = \<const0> ;
  assign m_sc_payld[5127] = \<const0> ;
  assign m_sc_payld[5126] = \<const0> ;
  assign m_sc_payld[5125] = \<const0> ;
  assign m_sc_payld[5124] = \<const0> ;
  assign m_sc_payld[5123] = \<const0> ;
  assign m_sc_payld[5122] = \<const0> ;
  assign m_sc_payld[5121] = \<const0> ;
  assign m_sc_payld[5120] = \<const0> ;
  assign m_sc_payld[5119] = \<const0> ;
  assign m_sc_payld[5118] = \<const0> ;
  assign m_sc_payld[5117] = \<const0> ;
  assign m_sc_payld[5116] = \<const0> ;
  assign m_sc_payld[5115] = \<const0> ;
  assign m_sc_payld[5114] = \<const0> ;
  assign m_sc_payld[5113] = \<const0> ;
  assign m_sc_payld[5112] = \<const0> ;
  assign m_sc_payld[5111] = \<const0> ;
  assign m_sc_payld[5110] = \<const0> ;
  assign m_sc_payld[5109] = \<const0> ;
  assign m_sc_payld[5108] = \<const0> ;
  assign m_sc_payld[5107] = \<const0> ;
  assign m_sc_payld[5106] = \<const0> ;
  assign m_sc_payld[5105] = \<const0> ;
  assign m_sc_payld[5104] = \<const0> ;
  assign m_sc_payld[5103] = \<const0> ;
  assign m_sc_payld[5102] = \<const0> ;
  assign m_sc_payld[5101] = \<const0> ;
  assign m_sc_payld[5100] = \<const0> ;
  assign m_sc_payld[5099] = \<const0> ;
  assign m_sc_payld[5098] = \<const0> ;
  assign m_sc_payld[5097] = \<const0> ;
  assign m_sc_payld[5096] = \<const0> ;
  assign m_sc_payld[5095] = \<const0> ;
  assign m_sc_payld[5094] = \<const0> ;
  assign m_sc_payld[5093] = \<const0> ;
  assign m_sc_payld[5092] = \<const0> ;
  assign m_sc_payld[5091] = \<const0> ;
  assign m_sc_payld[5090] = \<const0> ;
  assign m_sc_payld[5089] = \<const0> ;
  assign m_sc_payld[5088] = \<const0> ;
  assign m_sc_payld[5087] = \<const0> ;
  assign m_sc_payld[5086] = \<const0> ;
  assign m_sc_payld[5085] = \<const0> ;
  assign m_sc_payld[5084] = \<const0> ;
  assign m_sc_payld[5083] = \<const0> ;
  assign m_sc_payld[5082] = \<const0> ;
  assign m_sc_payld[5081] = \<const0> ;
  assign m_sc_payld[5080] = \<const0> ;
  assign m_sc_payld[5079] = \<const0> ;
  assign m_sc_payld[5078] = \<const0> ;
  assign m_sc_payld[5077] = \<const0> ;
  assign m_sc_payld[5076] = \<const0> ;
  assign m_sc_payld[5075] = \<const0> ;
  assign m_sc_payld[5074] = \<const0> ;
  assign m_sc_payld[5073] = \<const0> ;
  assign m_sc_payld[5072] = \<const0> ;
  assign m_sc_payld[5071] = \<const0> ;
  assign m_sc_payld[5070] = \<const0> ;
  assign m_sc_payld[5069] = \<const0> ;
  assign m_sc_payld[5068] = \<const0> ;
  assign m_sc_payld[5067] = \<const0> ;
  assign m_sc_payld[5066] = \<const0> ;
  assign m_sc_payld[5065] = \<const0> ;
  assign m_sc_payld[5064] = \<const0> ;
  assign m_sc_payld[5063] = \<const0> ;
  assign m_sc_payld[5062] = \<const0> ;
  assign m_sc_payld[5061] = \<const0> ;
  assign m_sc_payld[5060] = \<const0> ;
  assign m_sc_payld[5059] = \<const0> ;
  assign m_sc_payld[5058] = \<const0> ;
  assign m_sc_payld[5057] = \<const0> ;
  assign m_sc_payld[5056] = \<const0> ;
  assign m_sc_payld[5055] = \<const0> ;
  assign m_sc_payld[5054] = \<const0> ;
  assign m_sc_payld[5053] = \<const0> ;
  assign m_sc_payld[5052] = \<const0> ;
  assign m_sc_payld[5051] = \<const0> ;
  assign m_sc_payld[5050] = \<const0> ;
  assign m_sc_payld[5049] = \<const0> ;
  assign m_sc_payld[5048] = \<const0> ;
  assign m_sc_payld[5047] = \<const0> ;
  assign m_sc_payld[5046] = \<const0> ;
  assign m_sc_payld[5045] = \<const0> ;
  assign m_sc_payld[5044] = \<const0> ;
  assign m_sc_payld[5043] = \<const0> ;
  assign m_sc_payld[5042] = \<const0> ;
  assign m_sc_payld[5041] = \<const0> ;
  assign m_sc_payld[5040] = \<const0> ;
  assign m_sc_payld[5039] = \<const0> ;
  assign m_sc_payld[5038] = \<const0> ;
  assign m_sc_payld[5037] = \<const0> ;
  assign m_sc_payld[5036] = \<const0> ;
  assign m_sc_payld[5035] = \<const0> ;
  assign m_sc_payld[5034] = \<const0> ;
  assign m_sc_payld[5033] = \<const0> ;
  assign m_sc_payld[5032] = \<const0> ;
  assign m_sc_payld[5031] = \<const0> ;
  assign m_sc_payld[5030] = \<const0> ;
  assign m_sc_payld[5029] = \<const0> ;
  assign m_sc_payld[5028] = \<const0> ;
  assign m_sc_payld[5027] = \<const0> ;
  assign m_sc_payld[5026] = \<const0> ;
  assign m_sc_payld[5025] = \<const0> ;
  assign m_sc_payld[5024] = \<const0> ;
  assign m_sc_payld[5023] = \<const0> ;
  assign m_sc_payld[5022] = \<const0> ;
  assign m_sc_payld[5021] = \<const0> ;
  assign m_sc_payld[5020] = \<const0> ;
  assign m_sc_payld[5019] = \<const0> ;
  assign m_sc_payld[5018] = \<const0> ;
  assign m_sc_payld[5017] = \<const0> ;
  assign m_sc_payld[5016] = \<const0> ;
  assign m_sc_payld[5015] = \<const0> ;
  assign m_sc_payld[5014] = \<const0> ;
  assign m_sc_payld[5013] = \<const0> ;
  assign m_sc_payld[5012] = \<const0> ;
  assign m_sc_payld[5011] = \<const0> ;
  assign m_sc_payld[5010] = \<const0> ;
  assign m_sc_payld[5009] = \<const0> ;
  assign m_sc_payld[5008] = \<const0> ;
  assign m_sc_payld[5007] = \<const0> ;
  assign m_sc_payld[5006] = \<const0> ;
  assign m_sc_payld[5005] = \<const0> ;
  assign m_sc_payld[5004] = \<const0> ;
  assign m_sc_payld[5003] = \<const0> ;
  assign m_sc_payld[5002] = \<const0> ;
  assign m_sc_payld[5001] = \<const0> ;
  assign m_sc_payld[5000] = \<const0> ;
  assign m_sc_payld[4999] = \<const0> ;
  assign m_sc_payld[4998] = \<const0> ;
  assign m_sc_payld[4997] = \<const0> ;
  assign m_sc_payld[4996] = \<const0> ;
  assign m_sc_payld[4995] = \<const0> ;
  assign m_sc_payld[4994] = \<const0> ;
  assign m_sc_payld[4993] = \<const0> ;
  assign m_sc_payld[4992] = \<const0> ;
  assign m_sc_payld[4991] = \<const0> ;
  assign m_sc_payld[4990] = \<const0> ;
  assign m_sc_payld[4989] = \<const0> ;
  assign m_sc_payld[4988] = \<const0> ;
  assign m_sc_payld[4987] = \<const0> ;
  assign m_sc_payld[4986] = \<const0> ;
  assign m_sc_payld[4985] = \<const0> ;
  assign m_sc_payld[4984] = \<const0> ;
  assign m_sc_payld[4983] = \<const0> ;
  assign m_sc_payld[4982] = \<const0> ;
  assign m_sc_payld[4981] = \<const0> ;
  assign m_sc_payld[4980] = \<const0> ;
  assign m_sc_payld[4979] = \<const0> ;
  assign m_sc_payld[4978] = \<const0> ;
  assign m_sc_payld[4977] = \<const0> ;
  assign m_sc_payld[4976] = \<const0> ;
  assign m_sc_payld[4975] = \<const0> ;
  assign m_sc_payld[4974] = \<const0> ;
  assign m_sc_payld[4973] = \<const0> ;
  assign m_sc_payld[4972] = \<const0> ;
  assign m_sc_payld[4971] = \<const0> ;
  assign m_sc_payld[4970] = \<const0> ;
  assign m_sc_payld[4969] = \<const0> ;
  assign m_sc_payld[4968] = \<const0> ;
  assign m_sc_payld[4967] = \<const0> ;
  assign m_sc_payld[4966] = \<const0> ;
  assign m_sc_payld[4965] = \<const0> ;
  assign m_sc_payld[4964] = \<const0> ;
  assign m_sc_payld[4963] = \<const0> ;
  assign m_sc_payld[4962] = \<const0> ;
  assign m_sc_payld[4961] = \<const0> ;
  assign m_sc_payld[4960] = \<const0> ;
  assign m_sc_payld[4959] = \<const0> ;
  assign m_sc_payld[4958] = \<const0> ;
  assign m_sc_payld[4957] = \<const0> ;
  assign m_sc_payld[4956] = \<const0> ;
  assign m_sc_payld[4955] = \<const0> ;
  assign m_sc_payld[4954] = \<const0> ;
  assign m_sc_payld[4953] = \<const0> ;
  assign m_sc_payld[4952] = \<const0> ;
  assign m_sc_payld[4951] = \<const0> ;
  assign m_sc_payld[4950] = \<const0> ;
  assign m_sc_payld[4949] = \<const0> ;
  assign m_sc_payld[4948] = \<const0> ;
  assign m_sc_payld[4947] = \<const0> ;
  assign m_sc_payld[4946] = \<const0> ;
  assign m_sc_payld[4945] = \<const0> ;
  assign m_sc_payld[4944] = \<const0> ;
  assign m_sc_payld[4943] = \<const0> ;
  assign m_sc_payld[4942] = \<const0> ;
  assign m_sc_payld[4941] = \<const0> ;
  assign m_sc_payld[4940] = \<const0> ;
  assign m_sc_payld[4939] = \<const0> ;
  assign m_sc_payld[4938] = \<const0> ;
  assign m_sc_payld[4937] = \<const0> ;
  assign m_sc_payld[4936] = \<const0> ;
  assign m_sc_payld[4935] = \<const0> ;
  assign m_sc_payld[4934] = \<const0> ;
  assign m_sc_payld[4933] = \<const0> ;
  assign m_sc_payld[4932] = \<const0> ;
  assign m_sc_payld[4931] = \<const0> ;
  assign m_sc_payld[4930] = \<const0> ;
  assign m_sc_payld[4929] = \<const0> ;
  assign m_sc_payld[4928] = \<const0> ;
  assign m_sc_payld[4927] = \<const0> ;
  assign m_sc_payld[4926] = \<const0> ;
  assign m_sc_payld[4925] = \<const0> ;
  assign m_sc_payld[4924] = \<const0> ;
  assign m_sc_payld[4923] = \<const0> ;
  assign m_sc_payld[4922] = \<const0> ;
  assign m_sc_payld[4921] = \<const0> ;
  assign m_sc_payld[4920] = \<const0> ;
  assign m_sc_payld[4919] = \<const0> ;
  assign m_sc_payld[4918] = \<const0> ;
  assign m_sc_payld[4917] = \<const0> ;
  assign m_sc_payld[4916] = \<const0> ;
  assign m_sc_payld[4915] = \<const0> ;
  assign m_sc_payld[4914] = \<const0> ;
  assign m_sc_payld[4913] = \<const0> ;
  assign m_sc_payld[4912] = \<const0> ;
  assign m_sc_payld[4911] = \<const0> ;
  assign m_sc_payld[4910] = \<const0> ;
  assign m_sc_payld[4909] = \<const0> ;
  assign m_sc_payld[4908] = \<const0> ;
  assign m_sc_payld[4907] = \<const0> ;
  assign m_sc_payld[4906] = \<const0> ;
  assign m_sc_payld[4905] = \<const0> ;
  assign m_sc_payld[4904] = \<const0> ;
  assign m_sc_payld[4903] = \<const0> ;
  assign m_sc_payld[4902] = \<const0> ;
  assign m_sc_payld[4901] = \<const0> ;
  assign m_sc_payld[4900] = \<const0> ;
  assign m_sc_payld[4899] = \<const0> ;
  assign m_sc_payld[4898] = \<const0> ;
  assign m_sc_payld[4897] = \<const0> ;
  assign m_sc_payld[4896] = \<const0> ;
  assign m_sc_payld[4895] = \<const0> ;
  assign m_sc_payld[4894] = \<const0> ;
  assign m_sc_payld[4893] = \<const0> ;
  assign m_sc_payld[4892] = \<const0> ;
  assign m_sc_payld[4891] = \<const0> ;
  assign m_sc_payld[4890] = \<const0> ;
  assign m_sc_payld[4889] = \<const0> ;
  assign m_sc_payld[4888] = \<const0> ;
  assign m_sc_payld[4887] = \<const0> ;
  assign m_sc_payld[4886] = \<const0> ;
  assign m_sc_payld[4885] = \<const0> ;
  assign m_sc_payld[4884] = \<const0> ;
  assign m_sc_payld[4883] = \<const0> ;
  assign m_sc_payld[4882] = \<const0> ;
  assign m_sc_payld[4881] = \<const0> ;
  assign m_sc_payld[4880] = \<const0> ;
  assign m_sc_payld[4879] = \<const0> ;
  assign m_sc_payld[4878] = \<const0> ;
  assign m_sc_payld[4877] = \<const0> ;
  assign m_sc_payld[4876] = \<const0> ;
  assign m_sc_payld[4875] = \<const0> ;
  assign m_sc_payld[4874] = \<const0> ;
  assign m_sc_payld[4873] = \<const0> ;
  assign m_sc_payld[4872] = \<const0> ;
  assign m_sc_payld[4871] = \<const0> ;
  assign m_sc_payld[4870] = \<const0> ;
  assign m_sc_payld[4869] = \<const0> ;
  assign m_sc_payld[4868] = \<const0> ;
  assign m_sc_payld[4867] = \<const0> ;
  assign m_sc_payld[4866] = \<const0> ;
  assign m_sc_payld[4865] = \<const0> ;
  assign m_sc_payld[4864] = \<const0> ;
  assign m_sc_payld[4863] = \<const0> ;
  assign m_sc_payld[4862] = \<const0> ;
  assign m_sc_payld[4861] = \<const0> ;
  assign m_sc_payld[4860] = \<const0> ;
  assign m_sc_payld[4859] = \<const0> ;
  assign m_sc_payld[4858] = \<const0> ;
  assign m_sc_payld[4857] = \<const0> ;
  assign m_sc_payld[4856] = \<const0> ;
  assign m_sc_payld[4855] = \<const0> ;
  assign m_sc_payld[4854] = \<const0> ;
  assign m_sc_payld[4853] = \<const0> ;
  assign m_sc_payld[4852] = \<const0> ;
  assign m_sc_payld[4851] = \<const0> ;
  assign m_sc_payld[4850] = \<const0> ;
  assign m_sc_payld[4849] = \<const0> ;
  assign m_sc_payld[4848] = \<const0> ;
  assign m_sc_payld[4847] = \<const0> ;
  assign m_sc_payld[4846] = \<const0> ;
  assign m_sc_payld[4845] = \<const0> ;
  assign m_sc_payld[4844] = \<const0> ;
  assign m_sc_payld[4843] = \<const0> ;
  assign m_sc_payld[4842] = \<const0> ;
  assign m_sc_payld[4841] = \<const0> ;
  assign m_sc_payld[4840] = \<const0> ;
  assign m_sc_payld[4839] = \<const0> ;
  assign m_sc_payld[4838] = \<const0> ;
  assign m_sc_payld[4837] = \<const0> ;
  assign m_sc_payld[4836] = \<const0> ;
  assign m_sc_payld[4835] = \<const0> ;
  assign m_sc_payld[4834] = \<const0> ;
  assign m_sc_payld[4833] = \<const0> ;
  assign m_sc_payld[4832] = \<const0> ;
  assign m_sc_payld[4831] = \<const0> ;
  assign m_sc_payld[4830] = \<const0> ;
  assign m_sc_payld[4829] = \<const0> ;
  assign m_sc_payld[4828] = \<const0> ;
  assign m_sc_payld[4827] = \<const0> ;
  assign m_sc_payld[4826] = \<const0> ;
  assign m_sc_payld[4825] = \<const0> ;
  assign m_sc_payld[4824] = \<const0> ;
  assign m_sc_payld[4823] = \<const0> ;
  assign m_sc_payld[4822] = \<const0> ;
  assign m_sc_payld[4821] = \<const0> ;
  assign m_sc_payld[4820] = \<const0> ;
  assign m_sc_payld[4819] = \<const0> ;
  assign m_sc_payld[4818] = \<const0> ;
  assign m_sc_payld[4817] = \<const0> ;
  assign m_sc_payld[4816] = \<const0> ;
  assign m_sc_payld[4815] = \<const0> ;
  assign m_sc_payld[4814] = \<const0> ;
  assign m_sc_payld[4813] = \<const0> ;
  assign m_sc_payld[4812] = \<const0> ;
  assign m_sc_payld[4811] = \<const0> ;
  assign m_sc_payld[4810] = \<const0> ;
  assign m_sc_payld[4809] = \<const0> ;
  assign m_sc_payld[4808] = \<const0> ;
  assign m_sc_payld[4807] = \<const0> ;
  assign m_sc_payld[4806] = \<const0> ;
  assign m_sc_payld[4805] = \<const0> ;
  assign m_sc_payld[4804] = \<const0> ;
  assign m_sc_payld[4803] = \<const0> ;
  assign m_sc_payld[4802] = \<const0> ;
  assign m_sc_payld[4801] = \<const0> ;
  assign m_sc_payld[4800] = \<const0> ;
  assign m_sc_payld[4799] = \<const0> ;
  assign m_sc_payld[4798] = \<const0> ;
  assign m_sc_payld[4797] = \<const0> ;
  assign m_sc_payld[4796] = \<const0> ;
  assign m_sc_payld[4795] = \<const0> ;
  assign m_sc_payld[4794] = \<const0> ;
  assign m_sc_payld[4793] = \<const0> ;
  assign m_sc_payld[4792] = \<const0> ;
  assign m_sc_payld[4791] = \<const0> ;
  assign m_sc_payld[4790] = \<const0> ;
  assign m_sc_payld[4789] = \<const0> ;
  assign m_sc_payld[4788] = \<const0> ;
  assign m_sc_payld[4787] = \<const0> ;
  assign m_sc_payld[4786] = \<const0> ;
  assign m_sc_payld[4785] = \<const0> ;
  assign m_sc_payld[4784] = \<const0> ;
  assign m_sc_payld[4783] = \<const0> ;
  assign m_sc_payld[4782] = \<const0> ;
  assign m_sc_payld[4781] = \<const0> ;
  assign m_sc_payld[4780] = \<const0> ;
  assign m_sc_payld[4779] = \<const0> ;
  assign m_sc_payld[4778] = \<const0> ;
  assign m_sc_payld[4777] = \<const0> ;
  assign m_sc_payld[4776] = \<const0> ;
  assign m_sc_payld[4775] = \<const0> ;
  assign m_sc_payld[4774] = \<const0> ;
  assign m_sc_payld[4773] = \<const0> ;
  assign m_sc_payld[4772] = \<const0> ;
  assign m_sc_payld[4771] = \<const0> ;
  assign m_sc_payld[4770] = \<const0> ;
  assign m_sc_payld[4769] = \<const0> ;
  assign m_sc_payld[4768] = \<const0> ;
  assign m_sc_payld[4767] = \<const0> ;
  assign m_sc_payld[4766] = \<const0> ;
  assign m_sc_payld[4765] = \<const0> ;
  assign m_sc_payld[4764] = \<const0> ;
  assign m_sc_payld[4763] = \<const0> ;
  assign m_sc_payld[4762] = \<const0> ;
  assign m_sc_payld[4761] = \<const0> ;
  assign m_sc_payld[4760] = \<const0> ;
  assign m_sc_payld[4759] = \<const0> ;
  assign m_sc_payld[4758] = \<const0> ;
  assign m_sc_payld[4757] = \<const0> ;
  assign m_sc_payld[4756] = \<const0> ;
  assign m_sc_payld[4755] = \<const0> ;
  assign m_sc_payld[4754] = \<const0> ;
  assign m_sc_payld[4753] = \<const0> ;
  assign m_sc_payld[4752] = \<const0> ;
  assign m_sc_payld[4751] = \<const0> ;
  assign m_sc_payld[4750] = \<const0> ;
  assign m_sc_payld[4749] = \<const0> ;
  assign m_sc_payld[4748] = \<const0> ;
  assign m_sc_payld[4747] = \<const0> ;
  assign m_sc_payld[4746] = \<const0> ;
  assign m_sc_payld[4745] = \<const0> ;
  assign m_sc_payld[4744] = \<const0> ;
  assign m_sc_payld[4743] = \<const0> ;
  assign m_sc_payld[4742] = \<const0> ;
  assign m_sc_payld[4741] = \<const0> ;
  assign m_sc_payld[4740] = \<const0> ;
  assign m_sc_payld[4739] = \<const0> ;
  assign m_sc_payld[4738] = \<const0> ;
  assign m_sc_payld[4737] = \<const0> ;
  assign m_sc_payld[4736] = \<const0> ;
  assign m_sc_payld[4735] = \<const0> ;
  assign m_sc_payld[4734] = \<const0> ;
  assign m_sc_payld[4733] = \<const0> ;
  assign m_sc_payld[4732] = \<const0> ;
  assign m_sc_payld[4731] = \<const0> ;
  assign m_sc_payld[4730] = \<const0> ;
  assign m_sc_payld[4729] = \<const0> ;
  assign m_sc_payld[4728] = \<const0> ;
  assign m_sc_payld[4727] = \<const0> ;
  assign m_sc_payld[4726] = \<const0> ;
  assign m_sc_payld[4725] = \<const0> ;
  assign m_sc_payld[4724] = \<const0> ;
  assign m_sc_payld[4723] = \<const0> ;
  assign m_sc_payld[4722] = \<const0> ;
  assign m_sc_payld[4721] = \<const0> ;
  assign m_sc_payld[4720] = \<const0> ;
  assign m_sc_payld[4719] = \<const0> ;
  assign m_sc_payld[4718] = \<const0> ;
  assign m_sc_payld[4717] = \<const0> ;
  assign m_sc_payld[4716] = \<const0> ;
  assign m_sc_payld[4715] = \<const0> ;
  assign m_sc_payld[4714] = \<const0> ;
  assign m_sc_payld[4713] = \<const0> ;
  assign m_sc_payld[4712] = \<const0> ;
  assign m_sc_payld[4711] = \<const0> ;
  assign m_sc_payld[4710] = \<const0> ;
  assign m_sc_payld[4709] = \<const0> ;
  assign m_sc_payld[4708] = \<const0> ;
  assign m_sc_payld[4707] = \<const0> ;
  assign m_sc_payld[4706] = \<const0> ;
  assign m_sc_payld[4705] = \<const0> ;
  assign m_sc_payld[4704] = \<const0> ;
  assign m_sc_payld[4703] = \<const0> ;
  assign m_sc_payld[4702] = \<const0> ;
  assign m_sc_payld[4701] = \<const0> ;
  assign m_sc_payld[4700] = \<const0> ;
  assign m_sc_payld[4699] = \<const0> ;
  assign m_sc_payld[4698] = \<const0> ;
  assign m_sc_payld[4697] = \<const0> ;
  assign m_sc_payld[4696] = \<const0> ;
  assign m_sc_payld[4695] = \<const0> ;
  assign m_sc_payld[4694] = \<const0> ;
  assign m_sc_payld[4693] = \<const0> ;
  assign m_sc_payld[4692] = \<const0> ;
  assign m_sc_payld[4691] = \<const0> ;
  assign m_sc_payld[4690] = \<const0> ;
  assign m_sc_payld[4689] = \<const0> ;
  assign m_sc_payld[4688] = \<const0> ;
  assign m_sc_payld[4687] = \<const0> ;
  assign m_sc_payld[4686] = \<const0> ;
  assign m_sc_payld[4685] = \<const0> ;
  assign m_sc_payld[4684] = \<const0> ;
  assign m_sc_payld[4683] = \<const0> ;
  assign m_sc_payld[4682] = \<const0> ;
  assign m_sc_payld[4681] = \<const0> ;
  assign m_sc_payld[4680] = \<const0> ;
  assign m_sc_payld[4679] = \<const0> ;
  assign m_sc_payld[4678] = \<const0> ;
  assign m_sc_payld[4677] = \<const0> ;
  assign m_sc_payld[4676] = \<const0> ;
  assign m_sc_payld[4675] = \<const0> ;
  assign m_sc_payld[4674] = \<const0> ;
  assign m_sc_payld[4673] = \<const0> ;
  assign m_sc_payld[4672] = \<const0> ;
  assign m_sc_payld[4671] = \<const0> ;
  assign m_sc_payld[4670] = \<const0> ;
  assign m_sc_payld[4669] = \<const0> ;
  assign m_sc_payld[4668] = \<const0> ;
  assign m_sc_payld[4667] = \<const0> ;
  assign m_sc_payld[4666] = \<const0> ;
  assign m_sc_payld[4665] = \<const0> ;
  assign m_sc_payld[4664] = \<const0> ;
  assign m_sc_payld[4663] = \<const0> ;
  assign m_sc_payld[4662] = \<const0> ;
  assign m_sc_payld[4661] = \<const0> ;
  assign m_sc_payld[4660] = \<const0> ;
  assign m_sc_payld[4659] = \<const0> ;
  assign m_sc_payld[4658] = \<const0> ;
  assign m_sc_payld[4657] = \<const0> ;
  assign m_sc_payld[4656] = \<const0> ;
  assign m_sc_payld[4655] = \<const0> ;
  assign m_sc_payld[4654] = \<const0> ;
  assign m_sc_payld[4653] = \<const0> ;
  assign m_sc_payld[4652] = \<const0> ;
  assign m_sc_payld[4651] = \<const0> ;
  assign m_sc_payld[4650] = \<const0> ;
  assign m_sc_payld[4649] = \<const0> ;
  assign m_sc_payld[4648] = \<const0> ;
  assign m_sc_payld[4647] = \<const0> ;
  assign m_sc_payld[4646] = \<const0> ;
  assign m_sc_payld[4645] = \<const0> ;
  assign m_sc_payld[4644] = \<const0> ;
  assign m_sc_payld[4643] = \<const0> ;
  assign m_sc_payld[4642] = \<const0> ;
  assign m_sc_payld[4641] = \<const0> ;
  assign m_sc_payld[4640] = \<const0> ;
  assign m_sc_payld[4639] = \<const0> ;
  assign m_sc_payld[4638] = \<const0> ;
  assign m_sc_payld[4637] = \<const0> ;
  assign m_sc_payld[4636] = \<const0> ;
  assign m_sc_payld[4635] = \<const0> ;
  assign m_sc_payld[4634] = \<const0> ;
  assign m_sc_payld[4633] = \<const0> ;
  assign m_sc_payld[4632] = \<const0> ;
  assign m_sc_payld[4631] = \<const0> ;
  assign m_sc_payld[4630] = \<const0> ;
  assign m_sc_payld[4629] = \<const0> ;
  assign m_sc_payld[4628] = \<const0> ;
  assign m_sc_payld[4627] = \<const0> ;
  assign m_sc_payld[4626] = \<const0> ;
  assign m_sc_payld[4625] = \<const0> ;
  assign m_sc_payld[4624] = \<const0> ;
  assign m_sc_payld[4623] = \<const0> ;
  assign m_sc_payld[4622] = \<const0> ;
  assign m_sc_payld[4621] = \<const0> ;
  assign m_sc_payld[4620] = \<const0> ;
  assign m_sc_payld[4619] = \<const0> ;
  assign m_sc_payld[4618] = \<const0> ;
  assign m_sc_payld[4617] = \<const0> ;
  assign m_sc_payld[4616] = \<const0> ;
  assign m_sc_payld[4615] = \<const0> ;
  assign m_sc_payld[4614] = \<const0> ;
  assign m_sc_payld[4613] = \<const0> ;
  assign m_sc_payld[4612] = \<const0> ;
  assign m_sc_payld[4611] = \<const0> ;
  assign m_sc_payld[4610] = \<const0> ;
  assign m_sc_payld[4609] = \<const0> ;
  assign m_sc_payld[4608] = \<const0> ;
  assign m_sc_payld[4607] = \<const0> ;
  assign m_sc_payld[4606] = \<const0> ;
  assign m_sc_payld[4605] = \<const0> ;
  assign m_sc_payld[4604] = \<const0> ;
  assign m_sc_payld[4603] = \<const0> ;
  assign m_sc_payld[4602] = \<const0> ;
  assign m_sc_payld[4601] = \<const0> ;
  assign m_sc_payld[4600] = \<const0> ;
  assign m_sc_payld[4599] = \<const0> ;
  assign m_sc_payld[4598] = \<const0> ;
  assign m_sc_payld[4597] = \<const0> ;
  assign m_sc_payld[4596] = \<const0> ;
  assign m_sc_payld[4595] = \<const0> ;
  assign m_sc_payld[4594] = \<const0> ;
  assign m_sc_payld[4593] = \<const0> ;
  assign m_sc_payld[4592] = \<const0> ;
  assign m_sc_payld[4591] = \<const0> ;
  assign m_sc_payld[4590] = \<const0> ;
  assign m_sc_payld[4589] = \<const0> ;
  assign m_sc_payld[4588] = \<const0> ;
  assign m_sc_payld[4587] = \<const0> ;
  assign m_sc_payld[4586] = \<const0> ;
  assign m_sc_payld[4585] = \<const0> ;
  assign m_sc_payld[4584] = \<const0> ;
  assign m_sc_payld[4583] = \<const0> ;
  assign m_sc_payld[4582] = \<const0> ;
  assign m_sc_payld[4581] = \<const0> ;
  assign m_sc_payld[4580] = \<const0> ;
  assign m_sc_payld[4579] = \<const0> ;
  assign m_sc_payld[4578] = \<const0> ;
  assign m_sc_payld[4577] = \<const0> ;
  assign m_sc_payld[4576] = \<const0> ;
  assign m_sc_payld[4575] = \<const0> ;
  assign m_sc_payld[4574] = \<const0> ;
  assign m_sc_payld[4573] = \<const0> ;
  assign m_sc_payld[4572] = \<const0> ;
  assign m_sc_payld[4571] = \<const0> ;
  assign m_sc_payld[4570] = \<const0> ;
  assign m_sc_payld[4569] = \<const0> ;
  assign m_sc_payld[4568] = \<const0> ;
  assign m_sc_payld[4567] = \<const0> ;
  assign m_sc_payld[4566] = \<const0> ;
  assign m_sc_payld[4565] = \<const0> ;
  assign m_sc_payld[4564] = \<const0> ;
  assign m_sc_payld[4563] = \<const0> ;
  assign m_sc_payld[4562] = \<const0> ;
  assign m_sc_payld[4561] = \<const0> ;
  assign m_sc_payld[4560] = \<const0> ;
  assign m_sc_payld[4559] = \<const0> ;
  assign m_sc_payld[4558] = \<const0> ;
  assign m_sc_payld[4557] = \<const0> ;
  assign m_sc_payld[4556] = \<const0> ;
  assign m_sc_payld[4555] = \<const0> ;
  assign m_sc_payld[4554] = \<const0> ;
  assign m_sc_payld[4553] = \<const0> ;
  assign m_sc_payld[4552] = \<const0> ;
  assign m_sc_payld[4551] = \<const0> ;
  assign m_sc_payld[4550] = \<const0> ;
  assign m_sc_payld[4549] = \<const0> ;
  assign m_sc_payld[4548] = \<const0> ;
  assign m_sc_payld[4547] = \<const0> ;
  assign m_sc_payld[4546] = \<const0> ;
  assign m_sc_payld[4545] = \<const0> ;
  assign m_sc_payld[4544] = \<const0> ;
  assign m_sc_payld[4543] = \<const0> ;
  assign m_sc_payld[4542] = \<const0> ;
  assign m_sc_payld[4541] = \<const0> ;
  assign m_sc_payld[4540] = \<const0> ;
  assign m_sc_payld[4539] = \<const0> ;
  assign m_sc_payld[4538] = \<const0> ;
  assign m_sc_payld[4537] = \<const0> ;
  assign m_sc_payld[4536] = \<const0> ;
  assign m_sc_payld[4535] = \<const0> ;
  assign m_sc_payld[4534] = \<const0> ;
  assign m_sc_payld[4533] = \<const0> ;
  assign m_sc_payld[4532] = \<const0> ;
  assign m_sc_payld[4531] = \<const0> ;
  assign m_sc_payld[4530] = \<const0> ;
  assign m_sc_payld[4529] = \<const0> ;
  assign m_sc_payld[4528] = \<const0> ;
  assign m_sc_payld[4527] = \<const0> ;
  assign m_sc_payld[4526] = \<const0> ;
  assign m_sc_payld[4525] = \<const0> ;
  assign m_sc_payld[4524] = \<const0> ;
  assign m_sc_payld[4523] = \<const0> ;
  assign m_sc_payld[4522] = \<const0> ;
  assign m_sc_payld[4521] = \<const0> ;
  assign m_sc_payld[4520] = \<const0> ;
  assign m_sc_payld[4519] = \<const0> ;
  assign m_sc_payld[4518] = \<const0> ;
  assign m_sc_payld[4517] = \<const0> ;
  assign m_sc_payld[4516] = \<const0> ;
  assign m_sc_payld[4515] = \<const0> ;
  assign m_sc_payld[4514] = \<const0> ;
  assign m_sc_payld[4513] = \<const0> ;
  assign m_sc_payld[4512] = \<const0> ;
  assign m_sc_payld[4511] = \<const0> ;
  assign m_sc_payld[4510] = \<const0> ;
  assign m_sc_payld[4509] = \<const0> ;
  assign m_sc_payld[4508] = \<const0> ;
  assign m_sc_payld[4507] = \<const0> ;
  assign m_sc_payld[4506] = \<const0> ;
  assign m_sc_payld[4505] = \<const0> ;
  assign m_sc_payld[4504] = \<const0> ;
  assign m_sc_payld[4503] = \<const0> ;
  assign m_sc_payld[4502] = \<const0> ;
  assign m_sc_payld[4501] = \<const0> ;
  assign m_sc_payld[4500] = \<const0> ;
  assign m_sc_payld[4499] = \<const0> ;
  assign m_sc_payld[4498] = \<const0> ;
  assign m_sc_payld[4497] = \<const0> ;
  assign m_sc_payld[4496] = \<const0> ;
  assign m_sc_payld[4495] = \<const0> ;
  assign m_sc_payld[4494] = \<const0> ;
  assign m_sc_payld[4493] = \<const0> ;
  assign m_sc_payld[4492] = \<const0> ;
  assign m_sc_payld[4491] = \<const0> ;
  assign m_sc_payld[4490] = \<const0> ;
  assign m_sc_payld[4489] = \<const0> ;
  assign m_sc_payld[4488] = \<const0> ;
  assign m_sc_payld[4487] = \<const0> ;
  assign m_sc_payld[4486] = \<const0> ;
  assign m_sc_payld[4485] = \<const0> ;
  assign m_sc_payld[4484] = \<const0> ;
  assign m_sc_payld[4483] = \<const0> ;
  assign m_sc_payld[4482] = \<const0> ;
  assign m_sc_payld[4481] = \<const0> ;
  assign m_sc_payld[4480] = \<const0> ;
  assign m_sc_payld[4479] = \<const0> ;
  assign m_sc_payld[4478] = \<const0> ;
  assign m_sc_payld[4477] = \<const0> ;
  assign m_sc_payld[4476] = \<const0> ;
  assign m_sc_payld[4475] = \<const0> ;
  assign m_sc_payld[4474] = \<const0> ;
  assign m_sc_payld[4473] = \<const0> ;
  assign m_sc_payld[4472] = \<const0> ;
  assign m_sc_payld[4471] = \<const0> ;
  assign m_sc_payld[4470] = \<const0> ;
  assign m_sc_payld[4469] = \<const0> ;
  assign m_sc_payld[4468] = \<const0> ;
  assign m_sc_payld[4467] = \<const0> ;
  assign m_sc_payld[4466] = \<const0> ;
  assign m_sc_payld[4465] = \<const0> ;
  assign m_sc_payld[4464] = \<const0> ;
  assign m_sc_payld[4463] = \<const0> ;
  assign m_sc_payld[4462] = \<const0> ;
  assign m_sc_payld[4461] = \<const0> ;
  assign m_sc_payld[4460] = \<const0> ;
  assign m_sc_payld[4459] = \<const0> ;
  assign m_sc_payld[4458] = \<const0> ;
  assign m_sc_payld[4457] = \<const0> ;
  assign m_sc_payld[4456] = \<const0> ;
  assign m_sc_payld[4455] = \<const0> ;
  assign m_sc_payld[4454] = \<const0> ;
  assign m_sc_payld[4453] = \<const0> ;
  assign m_sc_payld[4452] = \<const0> ;
  assign m_sc_payld[4451] = \<const0> ;
  assign m_sc_payld[4450] = \<const0> ;
  assign m_sc_payld[4449] = \<const0> ;
  assign m_sc_payld[4448] = \<const0> ;
  assign m_sc_payld[4447] = \<const0> ;
  assign m_sc_payld[4446] = \<const0> ;
  assign m_sc_payld[4445] = \<const0> ;
  assign m_sc_payld[4444] = \<const0> ;
  assign m_sc_payld[4443] = \<const0> ;
  assign m_sc_payld[4442] = \<const0> ;
  assign m_sc_payld[4441] = \<const0> ;
  assign m_sc_payld[4440] = \<const0> ;
  assign m_sc_payld[4439] = \<const0> ;
  assign m_sc_payld[4438] = \<const0> ;
  assign m_sc_payld[4437] = \<const0> ;
  assign m_sc_payld[4436] = \<const0> ;
  assign m_sc_payld[4435] = \<const0> ;
  assign m_sc_payld[4434] = \<const0> ;
  assign m_sc_payld[4433] = \<const0> ;
  assign m_sc_payld[4432] = \<const0> ;
  assign m_sc_payld[4431] = \<const0> ;
  assign m_sc_payld[4430] = \<const0> ;
  assign m_sc_payld[4429] = \<const0> ;
  assign m_sc_payld[4428] = \<const0> ;
  assign m_sc_payld[4427] = \<const0> ;
  assign m_sc_payld[4426] = \<const0> ;
  assign m_sc_payld[4425] = \<const0> ;
  assign m_sc_payld[4424] = \<const0> ;
  assign m_sc_payld[4423] = \<const0> ;
  assign m_sc_payld[4422] = \<const0> ;
  assign m_sc_payld[4421] = \<const0> ;
  assign m_sc_payld[4420] = \<const0> ;
  assign m_sc_payld[4419] = \<const0> ;
  assign m_sc_payld[4418] = \<const0> ;
  assign m_sc_payld[4417] = \<const0> ;
  assign m_sc_payld[4416] = \<const0> ;
  assign m_sc_payld[4415] = \<const0> ;
  assign m_sc_payld[4414] = \<const0> ;
  assign m_sc_payld[4413] = \<const0> ;
  assign m_sc_payld[4412] = \<const0> ;
  assign m_sc_payld[4411] = \<const0> ;
  assign m_sc_payld[4410] = \<const0> ;
  assign m_sc_payld[4409] = \<const0> ;
  assign m_sc_payld[4408] = \<const0> ;
  assign m_sc_payld[4407] = \<const0> ;
  assign m_sc_payld[4406] = \<const0> ;
  assign m_sc_payld[4405] = \<const0> ;
  assign m_sc_payld[4404] = \<const0> ;
  assign m_sc_payld[4403] = \<const0> ;
  assign m_sc_payld[4402] = \<const0> ;
  assign m_sc_payld[4401] = \<const0> ;
  assign m_sc_payld[4400] = \<const0> ;
  assign m_sc_payld[4399] = \<const0> ;
  assign m_sc_payld[4398] = \<const0> ;
  assign m_sc_payld[4397] = \<const0> ;
  assign m_sc_payld[4396] = \<const0> ;
  assign m_sc_payld[4395] = \<const0> ;
  assign m_sc_payld[4394] = \<const0> ;
  assign m_sc_payld[4393] = \<const0> ;
  assign m_sc_payld[4392] = \<const0> ;
  assign m_sc_payld[4391] = \<const0> ;
  assign m_sc_payld[4390] = \<const0> ;
  assign m_sc_payld[4389] = \<const0> ;
  assign m_sc_payld[4388] = \<const0> ;
  assign m_sc_payld[4387] = \<const0> ;
  assign m_sc_payld[4386] = \<const0> ;
  assign m_sc_payld[4385] = \<const0> ;
  assign m_sc_payld[4384] = \<const0> ;
  assign m_sc_payld[4383] = \<const0> ;
  assign m_sc_payld[4382] = \<const0> ;
  assign m_sc_payld[4381] = \<const0> ;
  assign m_sc_payld[4380] = \<const0> ;
  assign m_sc_payld[4379] = \<const0> ;
  assign m_sc_payld[4378] = \<const0> ;
  assign m_sc_payld[4377] = \<const0> ;
  assign m_sc_payld[4376] = \<const0> ;
  assign m_sc_payld[4375] = \<const0> ;
  assign m_sc_payld[4374] = \<const0> ;
  assign m_sc_payld[4373] = \<const0> ;
  assign m_sc_payld[4372] = \<const0> ;
  assign m_sc_payld[4371] = \<const0> ;
  assign m_sc_payld[4370] = \<const0> ;
  assign m_sc_payld[4369] = \<const0> ;
  assign m_sc_payld[4368] = \<const0> ;
  assign m_sc_payld[4367] = \<const0> ;
  assign m_sc_payld[4366] = \<const0> ;
  assign m_sc_payld[4365] = \<const0> ;
  assign m_sc_payld[4364] = \<const0> ;
  assign m_sc_payld[4363] = \<const0> ;
  assign m_sc_payld[4362] = \<const0> ;
  assign m_sc_payld[4361] = \<const0> ;
  assign m_sc_payld[4360] = \<const0> ;
  assign m_sc_payld[4359] = \<const0> ;
  assign m_sc_payld[4358] = \<const0> ;
  assign m_sc_payld[4357] = \<const0> ;
  assign m_sc_payld[4356] = \<const0> ;
  assign m_sc_payld[4355] = \<const0> ;
  assign m_sc_payld[4354] = \<const0> ;
  assign m_sc_payld[4353] = \<const0> ;
  assign m_sc_payld[4352] = \<const0> ;
  assign m_sc_payld[4351] = \<const0> ;
  assign m_sc_payld[4350] = \<const0> ;
  assign m_sc_payld[4349] = \<const0> ;
  assign m_sc_payld[4348] = \<const0> ;
  assign m_sc_payld[4347] = \<const0> ;
  assign m_sc_payld[4346] = \<const0> ;
  assign m_sc_payld[4345] = \<const0> ;
  assign m_sc_payld[4344] = \<const0> ;
  assign m_sc_payld[4343] = \<const0> ;
  assign m_sc_payld[4342] = \<const0> ;
  assign m_sc_payld[4341] = \<const0> ;
  assign m_sc_payld[4340] = \<const0> ;
  assign m_sc_payld[4339] = \<const0> ;
  assign m_sc_payld[4338] = \<const0> ;
  assign m_sc_payld[4337] = \<const0> ;
  assign m_sc_payld[4336] = \<const0> ;
  assign m_sc_payld[4335] = \<const0> ;
  assign m_sc_payld[4334] = \<const0> ;
  assign m_sc_payld[4333] = \<const0> ;
  assign m_sc_payld[4332] = \<const0> ;
  assign m_sc_payld[4331] = \<const0> ;
  assign m_sc_payld[4330] = \<const0> ;
  assign m_sc_payld[4329] = \<const0> ;
  assign m_sc_payld[4328] = \<const0> ;
  assign m_sc_payld[4327] = \<const0> ;
  assign m_sc_payld[4326] = \<const0> ;
  assign m_sc_payld[4325] = \<const0> ;
  assign m_sc_payld[4324] = \<const0> ;
  assign m_sc_payld[4323] = \<const0> ;
  assign m_sc_payld[4322] = \<const0> ;
  assign m_sc_payld[4321] = \<const0> ;
  assign m_sc_payld[4320] = \<const0> ;
  assign m_sc_payld[4319] = \<const0> ;
  assign m_sc_payld[4318] = \<const0> ;
  assign m_sc_payld[4317] = \<const0> ;
  assign m_sc_payld[4316] = \<const0> ;
  assign m_sc_payld[4315] = \<const0> ;
  assign m_sc_payld[4314] = \<const0> ;
  assign m_sc_payld[4313] = \<const0> ;
  assign m_sc_payld[4312] = \<const0> ;
  assign m_sc_payld[4311] = \<const0> ;
  assign m_sc_payld[4310] = \<const0> ;
  assign m_sc_payld[4309] = \<const0> ;
  assign m_sc_payld[4308] = \<const0> ;
  assign m_sc_payld[4307] = \<const0> ;
  assign m_sc_payld[4306] = \<const0> ;
  assign m_sc_payld[4305] = \<const0> ;
  assign m_sc_payld[4304] = \<const0> ;
  assign m_sc_payld[4303] = \<const0> ;
  assign m_sc_payld[4302] = \<const0> ;
  assign m_sc_payld[4301] = \<const0> ;
  assign m_sc_payld[4300] = \<const0> ;
  assign m_sc_payld[4299] = \<const0> ;
  assign m_sc_payld[4298] = \<const0> ;
  assign m_sc_payld[4297] = \<const0> ;
  assign m_sc_payld[4296] = \<const0> ;
  assign m_sc_payld[4295] = \<const0> ;
  assign m_sc_payld[4294] = \<const0> ;
  assign m_sc_payld[4293] = \<const0> ;
  assign m_sc_payld[4292] = \<const0> ;
  assign m_sc_payld[4291] = \<const0> ;
  assign m_sc_payld[4290] = \<const0> ;
  assign m_sc_payld[4289] = \<const0> ;
  assign m_sc_payld[4288] = \<const0> ;
  assign m_sc_payld[4287] = \<const0> ;
  assign m_sc_payld[4286] = \<const0> ;
  assign m_sc_payld[4285] = \<const0> ;
  assign m_sc_payld[4284] = \<const0> ;
  assign m_sc_payld[4283] = \<const0> ;
  assign m_sc_payld[4282] = \<const0> ;
  assign m_sc_payld[4281] = \<const0> ;
  assign m_sc_payld[4280] = \<const0> ;
  assign m_sc_payld[4279] = \<const0> ;
  assign m_sc_payld[4278] = \<const0> ;
  assign m_sc_payld[4277] = \<const0> ;
  assign m_sc_payld[4276] = \<const0> ;
  assign m_sc_payld[4275] = \<const0> ;
  assign m_sc_payld[4274] = \<const0> ;
  assign m_sc_payld[4273] = \<const0> ;
  assign m_sc_payld[4272] = \<const0> ;
  assign m_sc_payld[4271] = \<const0> ;
  assign m_sc_payld[4270] = \<const0> ;
  assign m_sc_payld[4269] = \<const0> ;
  assign m_sc_payld[4268] = \<const0> ;
  assign m_sc_payld[4267] = \<const0> ;
  assign m_sc_payld[4266] = \<const0> ;
  assign m_sc_payld[4265] = \<const0> ;
  assign m_sc_payld[4264] = \<const0> ;
  assign m_sc_payld[4263] = \<const0> ;
  assign m_sc_payld[4262] = \<const0> ;
  assign m_sc_payld[4261] = \<const0> ;
  assign m_sc_payld[4260] = \<const0> ;
  assign m_sc_payld[4259] = \<const0> ;
  assign m_sc_payld[4258] = \<const0> ;
  assign m_sc_payld[4257] = \<const0> ;
  assign m_sc_payld[4256] = \<const0> ;
  assign m_sc_payld[4255] = \<const0> ;
  assign m_sc_payld[4254] = \<const0> ;
  assign m_sc_payld[4253] = \<const0> ;
  assign m_sc_payld[4252] = \<const0> ;
  assign m_sc_payld[4251] = \<const0> ;
  assign m_sc_payld[4250] = \<const0> ;
  assign m_sc_payld[4249] = \<const0> ;
  assign m_sc_payld[4248] = \<const0> ;
  assign m_sc_payld[4247] = \<const0> ;
  assign m_sc_payld[4246] = \<const0> ;
  assign m_sc_payld[4245] = \<const0> ;
  assign m_sc_payld[4244] = \<const0> ;
  assign m_sc_payld[4243] = \<const0> ;
  assign m_sc_payld[4242] = \<const0> ;
  assign m_sc_payld[4241] = \<const0> ;
  assign m_sc_payld[4240] = \<const0> ;
  assign m_sc_payld[4239] = \<const0> ;
  assign m_sc_payld[4238] = \<const0> ;
  assign m_sc_payld[4237] = \<const0> ;
  assign m_sc_payld[4236] = \<const0> ;
  assign m_sc_payld[4235] = \<const0> ;
  assign m_sc_payld[4234] = \<const0> ;
  assign m_sc_payld[4233] = \<const0> ;
  assign m_sc_payld[4232] = \<const0> ;
  assign m_sc_payld[4231] = \<const0> ;
  assign m_sc_payld[4230] = \<const0> ;
  assign m_sc_payld[4229] = \<const0> ;
  assign m_sc_payld[4228] = \<const0> ;
  assign m_sc_payld[4227] = \<const0> ;
  assign m_sc_payld[4226] = \<const0> ;
  assign m_sc_payld[4225] = \<const0> ;
  assign m_sc_payld[4224] = \<const0> ;
  assign m_sc_payld[4223] = \<const0> ;
  assign m_sc_payld[4222] = \<const0> ;
  assign m_sc_payld[4221] = \<const0> ;
  assign m_sc_payld[4220] = \<const0> ;
  assign m_sc_payld[4219] = \<const0> ;
  assign m_sc_payld[4218] = \<const0> ;
  assign m_sc_payld[4217] = \<const0> ;
  assign m_sc_payld[4216] = \<const0> ;
  assign m_sc_payld[4215] = \<const0> ;
  assign m_sc_payld[4214] = \<const0> ;
  assign m_sc_payld[4213] = \<const0> ;
  assign m_sc_payld[4212] = \<const0> ;
  assign m_sc_payld[4211] = \<const0> ;
  assign m_sc_payld[4210] = \<const0> ;
  assign m_sc_payld[4209] = \<const0> ;
  assign m_sc_payld[4208] = \<const0> ;
  assign m_sc_payld[4207] = \<const0> ;
  assign m_sc_payld[4206] = \<const0> ;
  assign m_sc_payld[4205] = \<const0> ;
  assign m_sc_payld[4204] = \<const0> ;
  assign m_sc_payld[4203] = \<const0> ;
  assign m_sc_payld[4202] = \<const0> ;
  assign m_sc_payld[4201] = \<const0> ;
  assign m_sc_payld[4200] = \<const0> ;
  assign m_sc_payld[4199] = \<const0> ;
  assign m_sc_payld[4198] = \<const0> ;
  assign m_sc_payld[4197] = \<const0> ;
  assign m_sc_payld[4196] = \<const0> ;
  assign m_sc_payld[4195] = \<const0> ;
  assign m_sc_payld[4194] = \<const0> ;
  assign m_sc_payld[4193] = \<const0> ;
  assign m_sc_payld[4192] = \<const0> ;
  assign m_sc_payld[4191] = \<const0> ;
  assign m_sc_payld[4190] = \<const0> ;
  assign m_sc_payld[4189] = \<const0> ;
  assign m_sc_payld[4188] = \<const0> ;
  assign m_sc_payld[4187] = \<const0> ;
  assign m_sc_payld[4186] = \<const0> ;
  assign m_sc_payld[4185] = \<const0> ;
  assign m_sc_payld[4184] = \<const0> ;
  assign m_sc_payld[4183] = \<const0> ;
  assign m_sc_payld[4182] = \<const0> ;
  assign m_sc_payld[4181] = \<const0> ;
  assign m_sc_payld[4180] = \<const0> ;
  assign m_sc_payld[4179] = \<const0> ;
  assign m_sc_payld[4178] = \<const0> ;
  assign m_sc_payld[4177] = \<const0> ;
  assign m_sc_payld[4176] = \<const0> ;
  assign m_sc_payld[4175] = \<const0> ;
  assign m_sc_payld[4174] = \<const0> ;
  assign m_sc_payld[4173] = \<const0> ;
  assign m_sc_payld[4172] = \<const0> ;
  assign m_sc_payld[4171] = \<const0> ;
  assign m_sc_payld[4170] = \<const0> ;
  assign m_sc_payld[4169] = \<const0> ;
  assign m_sc_payld[4168] = \<const0> ;
  assign m_sc_payld[4167] = \<const0> ;
  assign m_sc_payld[4166] = \<const0> ;
  assign m_sc_payld[4165] = \<const0> ;
  assign m_sc_payld[4164] = \<const0> ;
  assign m_sc_payld[4163] = \<const0> ;
  assign m_sc_payld[4162] = \<const0> ;
  assign m_sc_payld[4161] = \<const0> ;
  assign m_sc_payld[4160] = \<const0> ;
  assign m_sc_payld[4159] = \<const0> ;
  assign m_sc_payld[4158] = \<const0> ;
  assign m_sc_payld[4157] = \<const0> ;
  assign m_sc_payld[4156] = \<const0> ;
  assign m_sc_payld[4155] = \<const0> ;
  assign m_sc_payld[4154] = \<const0> ;
  assign m_sc_payld[4153] = \<const0> ;
  assign m_sc_payld[4152] = \<const0> ;
  assign m_sc_payld[4151] = \<const0> ;
  assign m_sc_payld[4150] = \<const0> ;
  assign m_sc_payld[4149] = \<const0> ;
  assign m_sc_payld[4148] = \<const0> ;
  assign m_sc_payld[4147] = \<const0> ;
  assign m_sc_payld[4146] = \<const0> ;
  assign m_sc_payld[4145] = \<const0> ;
  assign m_sc_payld[4144] = \<const0> ;
  assign m_sc_payld[4143] = \<const0> ;
  assign m_sc_payld[4142] = \<const0> ;
  assign m_sc_payld[4141] = \<const0> ;
  assign m_sc_payld[4140] = \<const0> ;
  assign m_sc_payld[4139] = \<const0> ;
  assign m_sc_payld[4138] = \<const0> ;
  assign m_sc_payld[4137] = \<const0> ;
  assign m_sc_payld[4136] = \<const0> ;
  assign m_sc_payld[4135] = \<const0> ;
  assign m_sc_payld[4134] = \<const0> ;
  assign m_sc_payld[4133] = \<const0> ;
  assign m_sc_payld[4132] = \<const0> ;
  assign m_sc_payld[4131] = \<const0> ;
  assign m_sc_payld[4130] = \<const0> ;
  assign m_sc_payld[4129] = \<const0> ;
  assign m_sc_payld[4128] = \<const0> ;
  assign m_sc_payld[4127] = \<const0> ;
  assign m_sc_payld[4126] = \<const0> ;
  assign m_sc_payld[4125] = \<const0> ;
  assign m_sc_payld[4124] = \<const0> ;
  assign m_sc_payld[4123] = \<const0> ;
  assign m_sc_payld[4122] = \<const0> ;
  assign m_sc_payld[4121] = \<const0> ;
  assign m_sc_payld[4120] = \<const0> ;
  assign m_sc_payld[4119] = \<const0> ;
  assign m_sc_payld[4118] = \<const0> ;
  assign m_sc_payld[4117] = \<const0> ;
  assign m_sc_payld[4116] = \<const0> ;
  assign m_sc_payld[4115] = \<const0> ;
  assign m_sc_payld[4114] = \<const0> ;
  assign m_sc_payld[4113] = \<const0> ;
  assign m_sc_payld[4112] = \<const0> ;
  assign m_sc_payld[4111] = \<const0> ;
  assign m_sc_payld[4110] = \<const0> ;
  assign m_sc_payld[4109] = \<const0> ;
  assign m_sc_payld[4108] = \<const0> ;
  assign m_sc_payld[4107] = \<const0> ;
  assign m_sc_payld[4106] = \<const0> ;
  assign m_sc_payld[4105] = \<const0> ;
  assign m_sc_payld[4104] = \<const0> ;
  assign m_sc_payld[4103] = \<const0> ;
  assign m_sc_payld[4102] = \<const0> ;
  assign m_sc_payld[4101] = \<const0> ;
  assign m_sc_payld[4100] = \<const0> ;
  assign m_sc_payld[4099] = \<const0> ;
  assign m_sc_payld[4098] = \<const0> ;
  assign m_sc_payld[4097] = \<const0> ;
  assign m_sc_payld[4096] = \<const0> ;
  assign m_sc_payld[4095] = \<const0> ;
  assign m_sc_payld[4094] = \<const0> ;
  assign m_sc_payld[4093] = \<const0> ;
  assign m_sc_payld[4092] = \<const0> ;
  assign m_sc_payld[4091] = \<const0> ;
  assign m_sc_payld[4090] = \<const0> ;
  assign m_sc_payld[4089] = \<const0> ;
  assign m_sc_payld[4088] = \<const0> ;
  assign m_sc_payld[4087] = \<const0> ;
  assign m_sc_payld[4086] = \<const0> ;
  assign m_sc_payld[4085] = \<const0> ;
  assign m_sc_payld[4084] = \<const0> ;
  assign m_sc_payld[4083] = \<const0> ;
  assign m_sc_payld[4082] = \<const0> ;
  assign m_sc_payld[4081] = \<const0> ;
  assign m_sc_payld[4080] = \<const0> ;
  assign m_sc_payld[4079] = \<const0> ;
  assign m_sc_payld[4078] = \<const0> ;
  assign m_sc_payld[4077] = \<const0> ;
  assign m_sc_payld[4076] = \<const0> ;
  assign m_sc_payld[4075] = \<const0> ;
  assign m_sc_payld[4074] = \<const0> ;
  assign m_sc_payld[4073] = \<const0> ;
  assign m_sc_payld[4072] = \<const0> ;
  assign m_sc_payld[4071] = \<const0> ;
  assign m_sc_payld[4070] = \<const0> ;
  assign m_sc_payld[4069] = \<const0> ;
  assign m_sc_payld[4068] = \<const0> ;
  assign m_sc_payld[4067] = \<const0> ;
  assign m_sc_payld[4066] = \<const0> ;
  assign m_sc_payld[4065] = \<const0> ;
  assign m_sc_payld[4064] = \<const0> ;
  assign m_sc_payld[4063] = \<const0> ;
  assign m_sc_payld[4062] = \<const0> ;
  assign m_sc_payld[4061] = \<const0> ;
  assign m_sc_payld[4060] = \<const0> ;
  assign m_sc_payld[4059] = \<const0> ;
  assign m_sc_payld[4058] = \<const0> ;
  assign m_sc_payld[4057] = \<const0> ;
  assign m_sc_payld[4056] = \<const0> ;
  assign m_sc_payld[4055] = \<const0> ;
  assign m_sc_payld[4054] = \<const0> ;
  assign m_sc_payld[4053] = \<const0> ;
  assign m_sc_payld[4052] = \<const0> ;
  assign m_sc_payld[4051] = \<const0> ;
  assign m_sc_payld[4050] = \<const0> ;
  assign m_sc_payld[4049] = \<const0> ;
  assign m_sc_payld[4048] = \<const0> ;
  assign m_sc_payld[4047] = \<const0> ;
  assign m_sc_payld[4046] = \<const0> ;
  assign m_sc_payld[4045] = \<const0> ;
  assign m_sc_payld[4044] = \<const0> ;
  assign m_sc_payld[4043] = \<const0> ;
  assign m_sc_payld[4042] = \<const0> ;
  assign m_sc_payld[4041] = \<const0> ;
  assign m_sc_payld[4040] = \<const0> ;
  assign m_sc_payld[4039] = \<const0> ;
  assign m_sc_payld[4038] = \<const0> ;
  assign m_sc_payld[4037] = \<const0> ;
  assign m_sc_payld[4036] = \<const0> ;
  assign m_sc_payld[4035] = \<const0> ;
  assign m_sc_payld[4034] = \<const0> ;
  assign m_sc_payld[4033] = \<const0> ;
  assign m_sc_payld[4032] = \<const0> ;
  assign m_sc_payld[4031] = \<const0> ;
  assign m_sc_payld[4030] = \<const0> ;
  assign m_sc_payld[4029] = \<const0> ;
  assign m_sc_payld[4028] = \<const0> ;
  assign m_sc_payld[4027] = \<const0> ;
  assign m_sc_payld[4026] = \<const0> ;
  assign m_sc_payld[4025] = \<const0> ;
  assign m_sc_payld[4024] = \<const0> ;
  assign m_sc_payld[4023] = \<const0> ;
  assign m_sc_payld[4022] = \<const0> ;
  assign m_sc_payld[4021] = \<const0> ;
  assign m_sc_payld[4020] = \<const0> ;
  assign m_sc_payld[4019] = \<const0> ;
  assign m_sc_payld[4018] = \<const0> ;
  assign m_sc_payld[4017] = \<const0> ;
  assign m_sc_payld[4016] = \<const0> ;
  assign m_sc_payld[4015] = \<const0> ;
  assign m_sc_payld[4014] = \<const0> ;
  assign m_sc_payld[4013] = \<const0> ;
  assign m_sc_payld[4012] = \<const0> ;
  assign m_sc_payld[4011] = \<const0> ;
  assign m_sc_payld[4010] = \<const0> ;
  assign m_sc_payld[4009] = \<const0> ;
  assign m_sc_payld[4008] = \<const0> ;
  assign m_sc_payld[4007] = \<const0> ;
  assign m_sc_payld[4006] = \<const0> ;
  assign m_sc_payld[4005] = \<const0> ;
  assign m_sc_payld[4004] = \<const0> ;
  assign m_sc_payld[4003] = \<const0> ;
  assign m_sc_payld[4002] = \<const0> ;
  assign m_sc_payld[4001] = \<const0> ;
  assign m_sc_payld[4000] = \<const0> ;
  assign m_sc_payld[3999] = \<const0> ;
  assign m_sc_payld[3998] = \<const0> ;
  assign m_sc_payld[3997] = \<const0> ;
  assign m_sc_payld[3996] = \<const0> ;
  assign m_sc_payld[3995] = \<const0> ;
  assign m_sc_payld[3994] = \<const0> ;
  assign m_sc_payld[3993] = \<const0> ;
  assign m_sc_payld[3992] = \<const0> ;
  assign m_sc_payld[3991] = \<const0> ;
  assign m_sc_payld[3990] = \<const0> ;
  assign m_sc_payld[3989] = \<const0> ;
  assign m_sc_payld[3988] = \<const0> ;
  assign m_sc_payld[3987] = \<const0> ;
  assign m_sc_payld[3986] = \<const0> ;
  assign m_sc_payld[3985] = \<const0> ;
  assign m_sc_payld[3984] = \<const0> ;
  assign m_sc_payld[3983] = \<const0> ;
  assign m_sc_payld[3982] = \<const0> ;
  assign m_sc_payld[3981] = \<const0> ;
  assign m_sc_payld[3980] = \<const0> ;
  assign m_sc_payld[3979] = \<const0> ;
  assign m_sc_payld[3978] = \<const0> ;
  assign m_sc_payld[3977] = \<const0> ;
  assign m_sc_payld[3976] = \<const0> ;
  assign m_sc_payld[3975] = \<const0> ;
  assign m_sc_payld[3974] = \<const0> ;
  assign m_sc_payld[3973] = \<const0> ;
  assign m_sc_payld[3972] = \<const0> ;
  assign m_sc_payld[3971] = \<const0> ;
  assign m_sc_payld[3970] = \<const0> ;
  assign m_sc_payld[3969] = \<const0> ;
  assign m_sc_payld[3968] = \<const0> ;
  assign m_sc_payld[3967] = \<const0> ;
  assign m_sc_payld[3966] = \<const0> ;
  assign m_sc_payld[3965] = \<const0> ;
  assign m_sc_payld[3964] = \<const0> ;
  assign m_sc_payld[3963] = \<const0> ;
  assign m_sc_payld[3962] = \<const0> ;
  assign m_sc_payld[3961] = \<const0> ;
  assign m_sc_payld[3960] = \<const0> ;
  assign m_sc_payld[3959] = \<const0> ;
  assign m_sc_payld[3958] = \<const0> ;
  assign m_sc_payld[3957] = \<const0> ;
  assign m_sc_payld[3956] = \<const0> ;
  assign m_sc_payld[3955] = \<const0> ;
  assign m_sc_payld[3954] = \<const0> ;
  assign m_sc_payld[3953] = \<const0> ;
  assign m_sc_payld[3952] = \<const0> ;
  assign m_sc_payld[3951] = \<const0> ;
  assign m_sc_payld[3950] = \<const0> ;
  assign m_sc_payld[3949] = \<const0> ;
  assign m_sc_payld[3948] = \<const0> ;
  assign m_sc_payld[3947] = \<const0> ;
  assign m_sc_payld[3946] = \<const0> ;
  assign m_sc_payld[3945] = \<const0> ;
  assign m_sc_payld[3944] = \<const0> ;
  assign m_sc_payld[3943] = \<const0> ;
  assign m_sc_payld[3942] = \<const0> ;
  assign m_sc_payld[3941] = \<const0> ;
  assign m_sc_payld[3940] = \<const0> ;
  assign m_sc_payld[3939] = \<const0> ;
  assign m_sc_payld[3938] = \<const0> ;
  assign m_sc_payld[3937] = \<const0> ;
  assign m_sc_payld[3936] = \<const0> ;
  assign m_sc_payld[3935] = \<const0> ;
  assign m_sc_payld[3934] = \<const0> ;
  assign m_sc_payld[3933] = \<const0> ;
  assign m_sc_payld[3932] = \<const0> ;
  assign m_sc_payld[3931] = \<const0> ;
  assign m_sc_payld[3930] = \<const0> ;
  assign m_sc_payld[3929] = \<const0> ;
  assign m_sc_payld[3928] = \<const0> ;
  assign m_sc_payld[3927] = \<const0> ;
  assign m_sc_payld[3926] = \<const0> ;
  assign m_sc_payld[3925] = \<const0> ;
  assign m_sc_payld[3924] = \<const0> ;
  assign m_sc_payld[3923] = \<const0> ;
  assign m_sc_payld[3922] = \<const0> ;
  assign m_sc_payld[3921] = \<const0> ;
  assign m_sc_payld[3920] = \<const0> ;
  assign m_sc_payld[3919] = \<const0> ;
  assign m_sc_payld[3918] = \<const0> ;
  assign m_sc_payld[3917] = \<const0> ;
  assign m_sc_payld[3916] = \<const0> ;
  assign m_sc_payld[3915] = \<const0> ;
  assign m_sc_payld[3914] = \<const0> ;
  assign m_sc_payld[3913] = \<const0> ;
  assign m_sc_payld[3912] = \<const0> ;
  assign m_sc_payld[3911] = \<const0> ;
  assign m_sc_payld[3910] = \<const0> ;
  assign m_sc_payld[3909] = \<const0> ;
  assign m_sc_payld[3908] = \<const0> ;
  assign m_sc_payld[3907] = \<const0> ;
  assign m_sc_payld[3906] = \<const0> ;
  assign m_sc_payld[3905] = \<const0> ;
  assign m_sc_payld[3904] = \<const0> ;
  assign m_sc_payld[3903] = \<const0> ;
  assign m_sc_payld[3902] = \<const0> ;
  assign m_sc_payld[3901] = \<const0> ;
  assign m_sc_payld[3900] = \<const0> ;
  assign m_sc_payld[3899] = \<const0> ;
  assign m_sc_payld[3898] = \<const0> ;
  assign m_sc_payld[3897] = \<const0> ;
  assign m_sc_payld[3896] = \<const0> ;
  assign m_sc_payld[3895] = \<const0> ;
  assign m_sc_payld[3894] = \<const0> ;
  assign m_sc_payld[3893] = \<const0> ;
  assign m_sc_payld[3892] = \<const0> ;
  assign m_sc_payld[3891] = \<const0> ;
  assign m_sc_payld[3890] = \<const0> ;
  assign m_sc_payld[3889] = \<const0> ;
  assign m_sc_payld[3888] = \<const0> ;
  assign m_sc_payld[3887] = \<const0> ;
  assign m_sc_payld[3886] = \<const0> ;
  assign m_sc_payld[3885] = \<const0> ;
  assign m_sc_payld[3884] = \<const0> ;
  assign m_sc_payld[3883] = \<const0> ;
  assign m_sc_payld[3882] = \<const0> ;
  assign m_sc_payld[3881] = \<const0> ;
  assign m_sc_payld[3880] = \<const0> ;
  assign m_sc_payld[3879] = \<const0> ;
  assign m_sc_payld[3878] = \<const0> ;
  assign m_sc_payld[3877] = \<const0> ;
  assign m_sc_payld[3876] = \<const0> ;
  assign m_sc_payld[3875] = \<const0> ;
  assign m_sc_payld[3874] = \<const0> ;
  assign m_sc_payld[3873] = \<const0> ;
  assign m_sc_payld[3872] = \<const0> ;
  assign m_sc_payld[3871] = \<const0> ;
  assign m_sc_payld[3870] = \<const0> ;
  assign m_sc_payld[3869] = \<const0> ;
  assign m_sc_payld[3868] = \<const0> ;
  assign m_sc_payld[3867] = \<const0> ;
  assign m_sc_payld[3866] = \<const0> ;
  assign m_sc_payld[3865] = \<const0> ;
  assign m_sc_payld[3864] = \<const0> ;
  assign m_sc_payld[3863] = \<const0> ;
  assign m_sc_payld[3862] = \<const0> ;
  assign m_sc_payld[3861] = \<const0> ;
  assign m_sc_payld[3860] = \<const0> ;
  assign m_sc_payld[3859] = \<const0> ;
  assign m_sc_payld[3858] = \<const0> ;
  assign m_sc_payld[3857] = \<const0> ;
  assign m_sc_payld[3856] = \<const0> ;
  assign m_sc_payld[3855] = \<const0> ;
  assign m_sc_payld[3854] = \<const0> ;
  assign m_sc_payld[3853] = \<const0> ;
  assign m_sc_payld[3852] = \<const0> ;
  assign m_sc_payld[3851] = \<const0> ;
  assign m_sc_payld[3850] = \<const0> ;
  assign m_sc_payld[3849] = \<const0> ;
  assign m_sc_payld[3848] = \<const0> ;
  assign m_sc_payld[3847] = \<const0> ;
  assign m_sc_payld[3846] = \<const0> ;
  assign m_sc_payld[3845] = \<const0> ;
  assign m_sc_payld[3844] = \<const0> ;
  assign m_sc_payld[3843] = \<const0> ;
  assign m_sc_payld[3842] = \<const0> ;
  assign m_sc_payld[3841] = \<const0> ;
  assign m_sc_payld[3840] = \<const0> ;
  assign m_sc_payld[3839] = \<const0> ;
  assign m_sc_payld[3838] = \<const0> ;
  assign m_sc_payld[3837] = \<const0> ;
  assign m_sc_payld[3836] = \<const0> ;
  assign m_sc_payld[3835] = \<const0> ;
  assign m_sc_payld[3834] = \<const0> ;
  assign m_sc_payld[3833] = \<const0> ;
  assign m_sc_payld[3832] = \<const0> ;
  assign m_sc_payld[3831] = \<const0> ;
  assign m_sc_payld[3830] = \<const0> ;
  assign m_sc_payld[3829] = \<const0> ;
  assign m_sc_payld[3828] = \<const0> ;
  assign m_sc_payld[3827] = \<const0> ;
  assign m_sc_payld[3826] = \<const0> ;
  assign m_sc_payld[3825] = \<const0> ;
  assign m_sc_payld[3824] = \<const0> ;
  assign m_sc_payld[3823] = \<const0> ;
  assign m_sc_payld[3822] = \<const0> ;
  assign m_sc_payld[3821] = \<const0> ;
  assign m_sc_payld[3820] = \<const0> ;
  assign m_sc_payld[3819] = \<const0> ;
  assign m_sc_payld[3818] = \<const0> ;
  assign m_sc_payld[3817] = \<const0> ;
  assign m_sc_payld[3816] = \<const0> ;
  assign m_sc_payld[3815] = \<const0> ;
  assign m_sc_payld[3814] = \<const0> ;
  assign m_sc_payld[3813] = \<const0> ;
  assign m_sc_payld[3812] = \<const0> ;
  assign m_sc_payld[3811] = \<const0> ;
  assign m_sc_payld[3810] = \<const0> ;
  assign m_sc_payld[3809] = \<const0> ;
  assign m_sc_payld[3808] = \<const0> ;
  assign m_sc_payld[3807] = \<const0> ;
  assign m_sc_payld[3806] = \<const0> ;
  assign m_sc_payld[3805] = \<const0> ;
  assign m_sc_payld[3804] = \<const0> ;
  assign m_sc_payld[3803] = \<const0> ;
  assign m_sc_payld[3802] = \<const0> ;
  assign m_sc_payld[3801] = \<const0> ;
  assign m_sc_payld[3800] = \<const0> ;
  assign m_sc_payld[3799] = \<const0> ;
  assign m_sc_payld[3798] = \<const0> ;
  assign m_sc_payld[3797] = \<const0> ;
  assign m_sc_payld[3796] = \<const0> ;
  assign m_sc_payld[3795] = \<const0> ;
  assign m_sc_payld[3794] = \<const0> ;
  assign m_sc_payld[3793] = \<const0> ;
  assign m_sc_payld[3792] = \<const0> ;
  assign m_sc_payld[3791] = \<const0> ;
  assign m_sc_payld[3790] = \<const0> ;
  assign m_sc_payld[3789] = \<const0> ;
  assign m_sc_payld[3788] = \<const0> ;
  assign m_sc_payld[3787] = \<const0> ;
  assign m_sc_payld[3786] = \<const0> ;
  assign m_sc_payld[3785] = \<const0> ;
  assign m_sc_payld[3784] = \<const0> ;
  assign m_sc_payld[3783] = \<const0> ;
  assign m_sc_payld[3782] = \<const0> ;
  assign m_sc_payld[3781] = \<const0> ;
  assign m_sc_payld[3780] = \<const0> ;
  assign m_sc_payld[3779] = \<const0> ;
  assign m_sc_payld[3778] = \<const0> ;
  assign m_sc_payld[3777] = \<const0> ;
  assign m_sc_payld[3776] = \<const0> ;
  assign m_sc_payld[3775] = \<const0> ;
  assign m_sc_payld[3774] = \<const0> ;
  assign m_sc_payld[3773] = \<const0> ;
  assign m_sc_payld[3772] = \<const0> ;
  assign m_sc_payld[3771] = \<const0> ;
  assign m_sc_payld[3770] = \<const0> ;
  assign m_sc_payld[3769] = \<const0> ;
  assign m_sc_payld[3768] = \<const0> ;
  assign m_sc_payld[3767] = \<const0> ;
  assign m_sc_payld[3766] = \<const0> ;
  assign m_sc_payld[3765] = \<const0> ;
  assign m_sc_payld[3764] = \<const0> ;
  assign m_sc_payld[3763] = \<const0> ;
  assign m_sc_payld[3762] = \<const0> ;
  assign m_sc_payld[3761] = \<const0> ;
  assign m_sc_payld[3760] = \<const0> ;
  assign m_sc_payld[3759] = \<const0> ;
  assign m_sc_payld[3758] = \<const0> ;
  assign m_sc_payld[3757] = \<const0> ;
  assign m_sc_payld[3756] = \<const0> ;
  assign m_sc_payld[3755] = \<const0> ;
  assign m_sc_payld[3754] = \<const0> ;
  assign m_sc_payld[3753] = \<const0> ;
  assign m_sc_payld[3752] = \<const0> ;
  assign m_sc_payld[3751] = \<const0> ;
  assign m_sc_payld[3750] = \<const0> ;
  assign m_sc_payld[3749] = \<const0> ;
  assign m_sc_payld[3748] = \<const0> ;
  assign m_sc_payld[3747] = \<const0> ;
  assign m_sc_payld[3746] = \<const0> ;
  assign m_sc_payld[3745] = \<const0> ;
  assign m_sc_payld[3744] = \<const0> ;
  assign m_sc_payld[3743] = \<const0> ;
  assign m_sc_payld[3742] = \<const0> ;
  assign m_sc_payld[3741] = \<const0> ;
  assign m_sc_payld[3740] = \<const0> ;
  assign m_sc_payld[3739] = \<const0> ;
  assign m_sc_payld[3738] = \<const0> ;
  assign m_sc_payld[3737] = \<const0> ;
  assign m_sc_payld[3736] = \<const0> ;
  assign m_sc_payld[3735] = \<const0> ;
  assign m_sc_payld[3734] = \<const0> ;
  assign m_sc_payld[3733] = \<const0> ;
  assign m_sc_payld[3732] = \<const0> ;
  assign m_sc_payld[3731] = \<const0> ;
  assign m_sc_payld[3730] = \<const0> ;
  assign m_sc_payld[3729] = \<const0> ;
  assign m_sc_payld[3728] = \<const0> ;
  assign m_sc_payld[3727] = \<const0> ;
  assign m_sc_payld[3726] = \<const0> ;
  assign m_sc_payld[3725] = \<const0> ;
  assign m_sc_payld[3724] = \<const0> ;
  assign m_sc_payld[3723] = \<const0> ;
  assign m_sc_payld[3722] = \<const0> ;
  assign m_sc_payld[3721] = \<const0> ;
  assign m_sc_payld[3720] = \<const0> ;
  assign m_sc_payld[3719] = \<const0> ;
  assign m_sc_payld[3718] = \<const0> ;
  assign m_sc_payld[3717] = \<const0> ;
  assign m_sc_payld[3716] = \<const0> ;
  assign m_sc_payld[3715] = \<const0> ;
  assign m_sc_payld[3714] = \<const0> ;
  assign m_sc_payld[3713] = \<const0> ;
  assign m_sc_payld[3712] = \<const0> ;
  assign m_sc_payld[3711] = \<const0> ;
  assign m_sc_payld[3710] = \<const0> ;
  assign m_sc_payld[3709] = \<const0> ;
  assign m_sc_payld[3708] = \<const0> ;
  assign m_sc_payld[3707] = \<const0> ;
  assign m_sc_payld[3706] = \<const0> ;
  assign m_sc_payld[3705] = \<const0> ;
  assign m_sc_payld[3704] = \<const0> ;
  assign m_sc_payld[3703] = \<const0> ;
  assign m_sc_payld[3702] = \<const0> ;
  assign m_sc_payld[3701] = \<const0> ;
  assign m_sc_payld[3700] = \<const0> ;
  assign m_sc_payld[3699] = \<const0> ;
  assign m_sc_payld[3698] = \<const0> ;
  assign m_sc_payld[3697] = \<const0> ;
  assign m_sc_payld[3696] = \<const0> ;
  assign m_sc_payld[3695] = \<const0> ;
  assign m_sc_payld[3694] = \<const0> ;
  assign m_sc_payld[3693] = \<const0> ;
  assign m_sc_payld[3692] = \<const0> ;
  assign m_sc_payld[3691] = \<const0> ;
  assign m_sc_payld[3690] = \<const0> ;
  assign m_sc_payld[3689] = \<const0> ;
  assign m_sc_payld[3688] = \<const0> ;
  assign m_sc_payld[3687] = \<const0> ;
  assign m_sc_payld[3686] = \<const0> ;
  assign m_sc_payld[3685] = \<const0> ;
  assign m_sc_payld[3684] = \<const0> ;
  assign m_sc_payld[3683] = \<const0> ;
  assign m_sc_payld[3682] = \<const0> ;
  assign m_sc_payld[3681] = \<const0> ;
  assign m_sc_payld[3680] = \<const0> ;
  assign m_sc_payld[3679] = \<const0> ;
  assign m_sc_payld[3678] = \<const0> ;
  assign m_sc_payld[3677] = \<const0> ;
  assign m_sc_payld[3676] = \<const0> ;
  assign m_sc_payld[3675] = \<const0> ;
  assign m_sc_payld[3674] = \<const0> ;
  assign m_sc_payld[3673] = \<const0> ;
  assign m_sc_payld[3672] = \<const0> ;
  assign m_sc_payld[3671] = \<const0> ;
  assign m_sc_payld[3670] = \<const0> ;
  assign m_sc_payld[3669] = \<const0> ;
  assign m_sc_payld[3668] = \<const0> ;
  assign m_sc_payld[3667] = \<const0> ;
  assign m_sc_payld[3666] = \<const0> ;
  assign m_sc_payld[3665] = \<const0> ;
  assign m_sc_payld[3664] = \<const0> ;
  assign m_sc_payld[3663] = \<const0> ;
  assign m_sc_payld[3662] = \<const0> ;
  assign m_sc_payld[3661] = \<const0> ;
  assign m_sc_payld[3660] = \<const0> ;
  assign m_sc_payld[3659] = \<const0> ;
  assign m_sc_payld[3658] = \<const0> ;
  assign m_sc_payld[3657] = \<const0> ;
  assign m_sc_payld[3656] = \<const0> ;
  assign m_sc_payld[3655] = \<const0> ;
  assign m_sc_payld[3654] = \<const0> ;
  assign m_sc_payld[3653] = \<const0> ;
  assign m_sc_payld[3652] = \<const0> ;
  assign m_sc_payld[3651] = \<const0> ;
  assign m_sc_payld[3650] = \<const0> ;
  assign m_sc_payld[3649] = \<const0> ;
  assign m_sc_payld[3648] = \<const0> ;
  assign m_sc_payld[3647] = \<const0> ;
  assign m_sc_payld[3646] = \<const0> ;
  assign m_sc_payld[3645] = \<const0> ;
  assign m_sc_payld[3644] = \<const0> ;
  assign m_sc_payld[3643] = \<const0> ;
  assign m_sc_payld[3642] = \<const0> ;
  assign m_sc_payld[3641] = \<const0> ;
  assign m_sc_payld[3640] = \<const0> ;
  assign m_sc_payld[3639] = \<const0> ;
  assign m_sc_payld[3638] = \<const0> ;
  assign m_sc_payld[3637] = \<const0> ;
  assign m_sc_payld[3636] = \<const0> ;
  assign m_sc_payld[3635] = \<const0> ;
  assign m_sc_payld[3634] = \<const0> ;
  assign m_sc_payld[3633] = \<const0> ;
  assign m_sc_payld[3632] = \<const0> ;
  assign m_sc_payld[3631] = \<const0> ;
  assign m_sc_payld[3630] = \<const0> ;
  assign m_sc_payld[3629] = \<const0> ;
  assign m_sc_payld[3628] = \<const0> ;
  assign m_sc_payld[3627] = \<const0> ;
  assign m_sc_payld[3626] = \<const0> ;
  assign m_sc_payld[3625] = \<const0> ;
  assign m_sc_payld[3624] = \<const0> ;
  assign m_sc_payld[3623] = \<const0> ;
  assign m_sc_payld[3622] = \<const0> ;
  assign m_sc_payld[3621] = \<const0> ;
  assign m_sc_payld[3620] = \<const0> ;
  assign m_sc_payld[3619] = \<const0> ;
  assign m_sc_payld[3618] = \<const0> ;
  assign m_sc_payld[3617] = \<const0> ;
  assign m_sc_payld[3616] = \<const0> ;
  assign m_sc_payld[3615] = \<const0> ;
  assign m_sc_payld[3614] = \<const0> ;
  assign m_sc_payld[3613] = \<const0> ;
  assign m_sc_payld[3612] = \<const0> ;
  assign m_sc_payld[3611] = \<const0> ;
  assign m_sc_payld[3610] = \<const0> ;
  assign m_sc_payld[3609] = \<const0> ;
  assign m_sc_payld[3608] = \<const0> ;
  assign m_sc_payld[3607] = \<const0> ;
  assign m_sc_payld[3606] = \<const0> ;
  assign m_sc_payld[3605] = \<const0> ;
  assign m_sc_payld[3604] = \<const0> ;
  assign m_sc_payld[3603] = \<const0> ;
  assign m_sc_payld[3602] = \<const0> ;
  assign m_sc_payld[3601] = \<const0> ;
  assign m_sc_payld[3600] = \<const0> ;
  assign m_sc_payld[3599] = \<const0> ;
  assign m_sc_payld[3598] = \<const0> ;
  assign m_sc_payld[3597] = \<const0> ;
  assign m_sc_payld[3596] = \<const0> ;
  assign m_sc_payld[3595] = \<const0> ;
  assign m_sc_payld[3594] = \<const0> ;
  assign m_sc_payld[3593] = \<const0> ;
  assign m_sc_payld[3592] = \<const0> ;
  assign m_sc_payld[3591] = \<const0> ;
  assign m_sc_payld[3590] = \<const0> ;
  assign m_sc_payld[3589] = \<const0> ;
  assign m_sc_payld[3588] = \<const0> ;
  assign m_sc_payld[3587] = \<const0> ;
  assign m_sc_payld[3586] = \<const0> ;
  assign m_sc_payld[3585] = \<const0> ;
  assign m_sc_payld[3584] = \<const0> ;
  assign m_sc_payld[3583] = \<const0> ;
  assign m_sc_payld[3582] = \<const0> ;
  assign m_sc_payld[3581] = \<const0> ;
  assign m_sc_payld[3580] = \<const0> ;
  assign m_sc_payld[3579] = \<const0> ;
  assign m_sc_payld[3578] = \<const0> ;
  assign m_sc_payld[3577] = \<const0> ;
  assign m_sc_payld[3576] = \<const0> ;
  assign m_sc_payld[3575] = \<const0> ;
  assign m_sc_payld[3574] = \<const0> ;
  assign m_sc_payld[3573] = \<const0> ;
  assign m_sc_payld[3572] = \<const0> ;
  assign m_sc_payld[3571] = \<const0> ;
  assign m_sc_payld[3570] = \<const0> ;
  assign m_sc_payld[3569] = \<const0> ;
  assign m_sc_payld[3568] = \<const0> ;
  assign m_sc_payld[3567] = \<const0> ;
  assign m_sc_payld[3566] = \<const0> ;
  assign m_sc_payld[3565] = \<const0> ;
  assign m_sc_payld[3564] = \<const0> ;
  assign m_sc_payld[3563] = \<const0> ;
  assign m_sc_payld[3562] = \<const0> ;
  assign m_sc_payld[3561] = \<const0> ;
  assign m_sc_payld[3560] = \<const0> ;
  assign m_sc_payld[3559] = \<const0> ;
  assign m_sc_payld[3558] = \<const0> ;
  assign m_sc_payld[3557] = \<const0> ;
  assign m_sc_payld[3556] = \<const0> ;
  assign m_sc_payld[3555] = \<const0> ;
  assign m_sc_payld[3554] = \<const0> ;
  assign m_sc_payld[3553] = \<const0> ;
  assign m_sc_payld[3552] = \<const0> ;
  assign m_sc_payld[3551] = \<const0> ;
  assign m_sc_payld[3550] = \<const0> ;
  assign m_sc_payld[3549] = \<const0> ;
  assign m_sc_payld[3548] = \<const0> ;
  assign m_sc_payld[3547] = \<const0> ;
  assign m_sc_payld[3546] = \<const0> ;
  assign m_sc_payld[3545] = \<const0> ;
  assign m_sc_payld[3544] = \<const0> ;
  assign m_sc_payld[3543] = \<const0> ;
  assign m_sc_payld[3542] = \<const0> ;
  assign m_sc_payld[3541] = \<const0> ;
  assign m_sc_payld[3540] = \<const0> ;
  assign m_sc_payld[3539] = \<const0> ;
  assign m_sc_payld[3538] = \<const0> ;
  assign m_sc_payld[3537] = \<const0> ;
  assign m_sc_payld[3536] = \<const0> ;
  assign m_sc_payld[3535] = \<const0> ;
  assign m_sc_payld[3534] = \<const0> ;
  assign m_sc_payld[3533] = \<const0> ;
  assign m_sc_payld[3532] = \<const0> ;
  assign m_sc_payld[3531] = \<const0> ;
  assign m_sc_payld[3530] = \<const0> ;
  assign m_sc_payld[3529] = \<const0> ;
  assign m_sc_payld[3528] = \<const0> ;
  assign m_sc_payld[3527] = \<const0> ;
  assign m_sc_payld[3526] = \<const0> ;
  assign m_sc_payld[3525] = \<const0> ;
  assign m_sc_payld[3524] = \<const0> ;
  assign m_sc_payld[3523] = \<const0> ;
  assign m_sc_payld[3522] = \<const0> ;
  assign m_sc_payld[3521] = \<const0> ;
  assign m_sc_payld[3520] = \<const0> ;
  assign m_sc_payld[3519] = \<const0> ;
  assign m_sc_payld[3518] = \<const0> ;
  assign m_sc_payld[3517] = \<const0> ;
  assign m_sc_payld[3516] = \<const0> ;
  assign m_sc_payld[3515] = \<const0> ;
  assign m_sc_payld[3514] = \<const0> ;
  assign m_sc_payld[3513] = \<const0> ;
  assign m_sc_payld[3512] = \<const0> ;
  assign m_sc_payld[3511] = \<const0> ;
  assign m_sc_payld[3510] = \<const0> ;
  assign m_sc_payld[3509] = \<const0> ;
  assign m_sc_payld[3508] = \<const0> ;
  assign m_sc_payld[3507] = \<const0> ;
  assign m_sc_payld[3506] = \<const0> ;
  assign m_sc_payld[3505] = \<const0> ;
  assign m_sc_payld[3504] = \<const0> ;
  assign m_sc_payld[3503] = \<const0> ;
  assign m_sc_payld[3502] = \<const0> ;
  assign m_sc_payld[3501] = \<const0> ;
  assign m_sc_payld[3500] = \<const0> ;
  assign m_sc_payld[3499] = \<const0> ;
  assign m_sc_payld[3498] = \<const0> ;
  assign m_sc_payld[3497] = \<const0> ;
  assign m_sc_payld[3496] = \<const0> ;
  assign m_sc_payld[3495] = \<const0> ;
  assign m_sc_payld[3494] = \<const0> ;
  assign m_sc_payld[3493] = \<const0> ;
  assign m_sc_payld[3492] = \<const0> ;
  assign m_sc_payld[3491] = \<const0> ;
  assign m_sc_payld[3490] = \<const0> ;
  assign m_sc_payld[3489] = \<const0> ;
  assign m_sc_payld[3488] = \<const0> ;
  assign m_sc_payld[3487] = \<const0> ;
  assign m_sc_payld[3486] = \<const0> ;
  assign m_sc_payld[3485] = \<const0> ;
  assign m_sc_payld[3484] = \<const0> ;
  assign m_sc_payld[3483] = \<const0> ;
  assign m_sc_payld[3482] = \<const0> ;
  assign m_sc_payld[3481] = \<const0> ;
  assign m_sc_payld[3480] = \<const0> ;
  assign m_sc_payld[3479] = \<const0> ;
  assign m_sc_payld[3478] = \<const0> ;
  assign m_sc_payld[3477] = \<const0> ;
  assign m_sc_payld[3476] = \<const0> ;
  assign m_sc_payld[3475] = \<const0> ;
  assign m_sc_payld[3474] = \<const0> ;
  assign m_sc_payld[3473] = \<const0> ;
  assign m_sc_payld[3472] = \<const0> ;
  assign m_sc_payld[3471] = \<const0> ;
  assign m_sc_payld[3470] = \<const0> ;
  assign m_sc_payld[3469] = \<const0> ;
  assign m_sc_payld[3468] = \<const0> ;
  assign m_sc_payld[3467] = \<const0> ;
  assign m_sc_payld[3466] = \<const0> ;
  assign m_sc_payld[3465] = \<const0> ;
  assign m_sc_payld[3464] = \<const0> ;
  assign m_sc_payld[3463] = \<const0> ;
  assign m_sc_payld[3462] = \<const0> ;
  assign m_sc_payld[3461] = \<const0> ;
  assign m_sc_payld[3460] = \<const0> ;
  assign m_sc_payld[3459] = \<const0> ;
  assign m_sc_payld[3458] = \<const0> ;
  assign m_sc_payld[3457] = \<const0> ;
  assign m_sc_payld[3456] = \<const0> ;
  assign m_sc_payld[3455] = \<const0> ;
  assign m_sc_payld[3454] = \<const0> ;
  assign m_sc_payld[3453] = \<const0> ;
  assign m_sc_payld[3452] = \<const0> ;
  assign m_sc_payld[3451] = \<const0> ;
  assign m_sc_payld[3450] = \<const0> ;
  assign m_sc_payld[3449] = \<const0> ;
  assign m_sc_payld[3448] = \<const0> ;
  assign m_sc_payld[3447] = \<const0> ;
  assign m_sc_payld[3446] = \<const0> ;
  assign m_sc_payld[3445] = \<const0> ;
  assign m_sc_payld[3444] = \<const0> ;
  assign m_sc_payld[3443] = \<const0> ;
  assign m_sc_payld[3442] = \<const0> ;
  assign m_sc_payld[3441] = \<const0> ;
  assign m_sc_payld[3440] = \<const0> ;
  assign m_sc_payld[3439] = \<const0> ;
  assign m_sc_payld[3438] = \<const0> ;
  assign m_sc_payld[3437] = \<const0> ;
  assign m_sc_payld[3436] = \<const0> ;
  assign m_sc_payld[3435] = \<const0> ;
  assign m_sc_payld[3434] = \<const0> ;
  assign m_sc_payld[3433] = \<const0> ;
  assign m_sc_payld[3432] = \<const0> ;
  assign m_sc_payld[3431] = \<const0> ;
  assign m_sc_payld[3430] = \<const0> ;
  assign m_sc_payld[3429] = \<const0> ;
  assign m_sc_payld[3428] = \<const0> ;
  assign m_sc_payld[3427] = \<const0> ;
  assign m_sc_payld[3426] = \<const0> ;
  assign m_sc_payld[3425] = \<const0> ;
  assign m_sc_payld[3424] = \<const0> ;
  assign m_sc_payld[3423] = \<const0> ;
  assign m_sc_payld[3422] = \<const0> ;
  assign m_sc_payld[3421] = \<const0> ;
  assign m_sc_payld[3420] = \<const0> ;
  assign m_sc_payld[3419] = \<const0> ;
  assign m_sc_payld[3418] = \<const0> ;
  assign m_sc_payld[3417] = \<const0> ;
  assign m_sc_payld[3416] = \<const0> ;
  assign m_sc_payld[3415] = \<const0> ;
  assign m_sc_payld[3414] = \<const0> ;
  assign m_sc_payld[3413] = \<const0> ;
  assign m_sc_payld[3412] = \<const0> ;
  assign m_sc_payld[3411] = \<const0> ;
  assign m_sc_payld[3410] = \<const0> ;
  assign m_sc_payld[3409] = \<const0> ;
  assign m_sc_payld[3408] = \<const0> ;
  assign m_sc_payld[3407] = \<const0> ;
  assign m_sc_payld[3406] = \<const0> ;
  assign m_sc_payld[3405] = \<const0> ;
  assign m_sc_payld[3404] = \<const0> ;
  assign m_sc_payld[3403] = \<const0> ;
  assign m_sc_payld[3402] = \<const0> ;
  assign m_sc_payld[3401] = \<const0> ;
  assign m_sc_payld[3400] = \<const0> ;
  assign m_sc_payld[3399] = \<const0> ;
  assign m_sc_payld[3398] = \<const0> ;
  assign m_sc_payld[3397] = \<const0> ;
  assign m_sc_payld[3396] = \<const0> ;
  assign m_sc_payld[3395] = \<const0> ;
  assign m_sc_payld[3394] = \<const0> ;
  assign m_sc_payld[3393] = \<const0> ;
  assign m_sc_payld[3392] = \<const0> ;
  assign m_sc_payld[3391] = \<const0> ;
  assign m_sc_payld[3390] = \<const0> ;
  assign m_sc_payld[3389] = \<const0> ;
  assign m_sc_payld[3388] = \<const0> ;
  assign m_sc_payld[3387] = \<const0> ;
  assign m_sc_payld[3386] = \<const0> ;
  assign m_sc_payld[3385] = \<const0> ;
  assign m_sc_payld[3384] = \<const0> ;
  assign m_sc_payld[3383] = \<const0> ;
  assign m_sc_payld[3382] = \<const0> ;
  assign m_sc_payld[3381] = \<const0> ;
  assign m_sc_payld[3380] = \<const0> ;
  assign m_sc_payld[3379] = \<const0> ;
  assign m_sc_payld[3378] = \<const0> ;
  assign m_sc_payld[3377] = \<const0> ;
  assign m_sc_payld[3376] = \<const0> ;
  assign m_sc_payld[3375] = \<const0> ;
  assign m_sc_payld[3374] = \<const0> ;
  assign m_sc_payld[3373] = \<const0> ;
  assign m_sc_payld[3372] = \<const0> ;
  assign m_sc_payld[3371] = \<const0> ;
  assign m_sc_payld[3370] = \<const0> ;
  assign m_sc_payld[3369] = \<const0> ;
  assign m_sc_payld[3368] = \<const0> ;
  assign m_sc_payld[3367] = \<const0> ;
  assign m_sc_payld[3366] = \<const0> ;
  assign m_sc_payld[3365] = \<const0> ;
  assign m_sc_payld[3364] = \<const0> ;
  assign m_sc_payld[3363] = \<const0> ;
  assign m_sc_payld[3362] = \<const0> ;
  assign m_sc_payld[3361] = \<const0> ;
  assign m_sc_payld[3360] = \<const0> ;
  assign m_sc_payld[3359] = \<const0> ;
  assign m_sc_payld[3358] = \<const0> ;
  assign m_sc_payld[3357] = \<const0> ;
  assign m_sc_payld[3356] = \<const0> ;
  assign m_sc_payld[3355] = \<const0> ;
  assign m_sc_payld[3354] = \<const0> ;
  assign m_sc_payld[3353] = \<const0> ;
  assign m_sc_payld[3352] = \<const0> ;
  assign m_sc_payld[3351] = \<const0> ;
  assign m_sc_payld[3350] = \<const0> ;
  assign m_sc_payld[3349] = \<const0> ;
  assign m_sc_payld[3348] = \<const0> ;
  assign m_sc_payld[3347] = \<const0> ;
  assign m_sc_payld[3346] = \<const0> ;
  assign m_sc_payld[3345] = \<const0> ;
  assign m_sc_payld[3344] = \<const0> ;
  assign m_sc_payld[3343] = \<const0> ;
  assign m_sc_payld[3342] = \<const0> ;
  assign m_sc_payld[3341] = \<const0> ;
  assign m_sc_payld[3340] = \<const0> ;
  assign m_sc_payld[3339] = \<const0> ;
  assign m_sc_payld[3338] = \<const0> ;
  assign m_sc_payld[3337] = \<const0> ;
  assign m_sc_payld[3336] = \<const0> ;
  assign m_sc_payld[3335] = \<const0> ;
  assign m_sc_payld[3334] = \<const0> ;
  assign m_sc_payld[3333] = \<const0> ;
  assign m_sc_payld[3332] = \<const0> ;
  assign m_sc_payld[3331] = \<const0> ;
  assign m_sc_payld[3330] = \<const0> ;
  assign m_sc_payld[3329] = \<const0> ;
  assign m_sc_payld[3328] = \<const0> ;
  assign m_sc_payld[3327] = \<const0> ;
  assign m_sc_payld[3326] = \<const0> ;
  assign m_sc_payld[3325] = \<const0> ;
  assign m_sc_payld[3324] = \<const0> ;
  assign m_sc_payld[3323] = \<const0> ;
  assign m_sc_payld[3322] = \<const0> ;
  assign m_sc_payld[3321] = \<const0> ;
  assign m_sc_payld[3320] = \<const0> ;
  assign m_sc_payld[3319] = \<const0> ;
  assign m_sc_payld[3318] = \<const0> ;
  assign m_sc_payld[3317] = \<const0> ;
  assign m_sc_payld[3316] = \<const0> ;
  assign m_sc_payld[3315] = \<const0> ;
  assign m_sc_payld[3314] = \<const0> ;
  assign m_sc_payld[3313] = \<const0> ;
  assign m_sc_payld[3312] = \<const0> ;
  assign m_sc_payld[3311] = \<const0> ;
  assign m_sc_payld[3310] = \<const0> ;
  assign m_sc_payld[3309] = \<const0> ;
  assign m_sc_payld[3308] = \<const0> ;
  assign m_sc_payld[3307] = \<const0> ;
  assign m_sc_payld[3306] = \<const0> ;
  assign m_sc_payld[3305] = \<const0> ;
  assign m_sc_payld[3304] = \<const0> ;
  assign m_sc_payld[3303] = \<const0> ;
  assign m_sc_payld[3302] = \<const0> ;
  assign m_sc_payld[3301] = \<const0> ;
  assign m_sc_payld[3300] = \<const0> ;
  assign m_sc_payld[3299] = \<const0> ;
  assign m_sc_payld[3298] = \<const0> ;
  assign m_sc_payld[3297] = \<const0> ;
  assign m_sc_payld[3296] = \<const0> ;
  assign m_sc_payld[3295] = \<const0> ;
  assign m_sc_payld[3294] = \<const0> ;
  assign m_sc_payld[3293] = \<const0> ;
  assign m_sc_payld[3292] = \<const0> ;
  assign m_sc_payld[3291] = \<const0> ;
  assign m_sc_payld[3290] = \<const0> ;
  assign m_sc_payld[3289] = \<const0> ;
  assign m_sc_payld[3288] = \<const0> ;
  assign m_sc_payld[3287] = \<const0> ;
  assign m_sc_payld[3286] = \<const0> ;
  assign m_sc_payld[3285] = \<const0> ;
  assign m_sc_payld[3284] = \<const0> ;
  assign m_sc_payld[3283] = \<const0> ;
  assign m_sc_payld[3282] = \<const0> ;
  assign m_sc_payld[3281] = \<const0> ;
  assign m_sc_payld[3280] = \<const0> ;
  assign m_sc_payld[3279] = \<const0> ;
  assign m_sc_payld[3278] = \<const0> ;
  assign m_sc_payld[3277] = \<const0> ;
  assign m_sc_payld[3276] = \<const0> ;
  assign m_sc_payld[3275] = \<const0> ;
  assign m_sc_payld[3274] = \<const0> ;
  assign m_sc_payld[3273] = \<const0> ;
  assign m_sc_payld[3272] = \<const0> ;
  assign m_sc_payld[3271] = \<const0> ;
  assign m_sc_payld[3270] = \<const0> ;
  assign m_sc_payld[3269] = \<const0> ;
  assign m_sc_payld[3268] = \<const0> ;
  assign m_sc_payld[3267] = \<const0> ;
  assign m_sc_payld[3266] = \<const0> ;
  assign m_sc_payld[3265] = \<const0> ;
  assign m_sc_payld[3264] = \<const0> ;
  assign m_sc_payld[3263] = \<const0> ;
  assign m_sc_payld[3262] = \<const0> ;
  assign m_sc_payld[3261] = \<const0> ;
  assign m_sc_payld[3260] = \<const0> ;
  assign m_sc_payld[3259] = \<const0> ;
  assign m_sc_payld[3258] = \<const0> ;
  assign m_sc_payld[3257] = \<const0> ;
  assign m_sc_payld[3256] = \<const0> ;
  assign m_sc_payld[3255] = \<const0> ;
  assign m_sc_payld[3254] = \<const0> ;
  assign m_sc_payld[3253] = \<const0> ;
  assign m_sc_payld[3252] = \<const0> ;
  assign m_sc_payld[3251] = \<const0> ;
  assign m_sc_payld[3250] = \<const0> ;
  assign m_sc_payld[3249] = \<const0> ;
  assign m_sc_payld[3248] = \<const0> ;
  assign m_sc_payld[3247] = \<const0> ;
  assign m_sc_payld[3246] = \<const0> ;
  assign m_sc_payld[3245] = \<const0> ;
  assign m_sc_payld[3244] = \<const0> ;
  assign m_sc_payld[3243] = \<const0> ;
  assign m_sc_payld[3242] = \<const0> ;
  assign m_sc_payld[3241] = \<const0> ;
  assign m_sc_payld[3240] = \<const0> ;
  assign m_sc_payld[3239] = \<const0> ;
  assign m_sc_payld[3238] = \<const0> ;
  assign m_sc_payld[3237] = \<const0> ;
  assign m_sc_payld[3236] = \<const0> ;
  assign m_sc_payld[3235] = \<const0> ;
  assign m_sc_payld[3234] = \<const0> ;
  assign m_sc_payld[3233] = \<const0> ;
  assign m_sc_payld[3232] = \<const0> ;
  assign m_sc_payld[3231] = \<const0> ;
  assign m_sc_payld[3230] = \<const0> ;
  assign m_sc_payld[3229] = \<const0> ;
  assign m_sc_payld[3228] = \<const0> ;
  assign m_sc_payld[3227] = \<const0> ;
  assign m_sc_payld[3226] = \<const0> ;
  assign m_sc_payld[3225] = \<const0> ;
  assign m_sc_payld[3224] = \<const0> ;
  assign m_sc_payld[3223] = \<const0> ;
  assign m_sc_payld[3222] = \<const0> ;
  assign m_sc_payld[3221] = \<const0> ;
  assign m_sc_payld[3220] = \<const0> ;
  assign m_sc_payld[3219] = \<const0> ;
  assign m_sc_payld[3218] = \<const0> ;
  assign m_sc_payld[3217] = \<const0> ;
  assign m_sc_payld[3216] = \<const0> ;
  assign m_sc_payld[3215] = \<const0> ;
  assign m_sc_payld[3214] = \<const0> ;
  assign m_sc_payld[3213] = \<const0> ;
  assign m_sc_payld[3212] = \<const0> ;
  assign m_sc_payld[3211] = \<const0> ;
  assign m_sc_payld[3210] = \<const0> ;
  assign m_sc_payld[3209] = \<const0> ;
  assign m_sc_payld[3208] = \<const0> ;
  assign m_sc_payld[3207] = \<const0> ;
  assign m_sc_payld[3206] = \<const0> ;
  assign m_sc_payld[3205] = \<const0> ;
  assign m_sc_payld[3204] = \<const0> ;
  assign m_sc_payld[3203] = \<const0> ;
  assign m_sc_payld[3202] = \<const0> ;
  assign m_sc_payld[3201] = \<const0> ;
  assign m_sc_payld[3200] = \<const0> ;
  assign m_sc_payld[3199] = \<const0> ;
  assign m_sc_payld[3198] = \<const0> ;
  assign m_sc_payld[3197] = \<const0> ;
  assign m_sc_payld[3196] = \<const0> ;
  assign m_sc_payld[3195] = \<const0> ;
  assign m_sc_payld[3194] = \<const0> ;
  assign m_sc_payld[3193] = \<const0> ;
  assign m_sc_payld[3192] = \<const0> ;
  assign m_sc_payld[3191] = \<const0> ;
  assign m_sc_payld[3190] = \<const0> ;
  assign m_sc_payld[3189] = \<const0> ;
  assign m_sc_payld[3188] = \<const0> ;
  assign m_sc_payld[3187] = \<const0> ;
  assign m_sc_payld[3186] = \<const0> ;
  assign m_sc_payld[3185] = \<const0> ;
  assign m_sc_payld[3184] = \<const0> ;
  assign m_sc_payld[3183] = \<const0> ;
  assign m_sc_payld[3182] = \<const0> ;
  assign m_sc_payld[3181] = \<const0> ;
  assign m_sc_payld[3180] = \<const0> ;
  assign m_sc_payld[3179] = \<const0> ;
  assign m_sc_payld[3178] = \<const0> ;
  assign m_sc_payld[3177] = \<const0> ;
  assign m_sc_payld[3176] = \<const0> ;
  assign m_sc_payld[3175] = \<const0> ;
  assign m_sc_payld[3174] = \<const0> ;
  assign m_sc_payld[3173] = \<const0> ;
  assign m_sc_payld[3172] = \<const0> ;
  assign m_sc_payld[3171] = \<const0> ;
  assign m_sc_payld[3170] = \<const0> ;
  assign m_sc_payld[3169] = \<const0> ;
  assign m_sc_payld[3168] = \<const0> ;
  assign m_sc_payld[3167] = \<const0> ;
  assign m_sc_payld[3166] = \<const0> ;
  assign m_sc_payld[3165] = \<const0> ;
  assign m_sc_payld[3164] = \<const0> ;
  assign m_sc_payld[3163] = \<const0> ;
  assign m_sc_payld[3162] = \<const0> ;
  assign m_sc_payld[3161] = \<const0> ;
  assign m_sc_payld[3160] = \<const0> ;
  assign m_sc_payld[3159] = \<const0> ;
  assign m_sc_payld[3158] = \<const0> ;
  assign m_sc_payld[3157] = \<const0> ;
  assign m_sc_payld[3156] = \<const0> ;
  assign m_sc_payld[3155] = \<const0> ;
  assign m_sc_payld[3154] = \<const0> ;
  assign m_sc_payld[3153] = \<const0> ;
  assign m_sc_payld[3152] = \<const0> ;
  assign m_sc_payld[3151] = \<const0> ;
  assign m_sc_payld[3150] = \<const0> ;
  assign m_sc_payld[3149] = \<const0> ;
  assign m_sc_payld[3148] = \<const0> ;
  assign m_sc_payld[3147] = \<const0> ;
  assign m_sc_payld[3146] = \<const0> ;
  assign m_sc_payld[3145] = \<const0> ;
  assign m_sc_payld[3144] = \<const0> ;
  assign m_sc_payld[3143] = \<const0> ;
  assign m_sc_payld[3142] = \<const0> ;
  assign m_sc_payld[3141] = \<const0> ;
  assign m_sc_payld[3140] = \<const0> ;
  assign m_sc_payld[3139] = \<const0> ;
  assign m_sc_payld[3138] = \<const0> ;
  assign m_sc_payld[3137] = \<const0> ;
  assign m_sc_payld[3136] = \<const0> ;
  assign m_sc_payld[3135] = \<const0> ;
  assign m_sc_payld[3134] = \<const0> ;
  assign m_sc_payld[3133] = \<const0> ;
  assign m_sc_payld[3132] = \<const0> ;
  assign m_sc_payld[3131] = \<const0> ;
  assign m_sc_payld[3130] = \<const0> ;
  assign m_sc_payld[3129] = \<const0> ;
  assign m_sc_payld[3128] = \<const0> ;
  assign m_sc_payld[3127] = \<const0> ;
  assign m_sc_payld[3126] = \<const0> ;
  assign m_sc_payld[3125] = \<const0> ;
  assign m_sc_payld[3124] = \<const0> ;
  assign m_sc_payld[3123] = \<const0> ;
  assign m_sc_payld[3122] = \<const0> ;
  assign m_sc_payld[3121] = \<const0> ;
  assign m_sc_payld[3120] = \<const0> ;
  assign m_sc_payld[3119] = \<const0> ;
  assign m_sc_payld[3118] = \<const0> ;
  assign m_sc_payld[3117] = \<const0> ;
  assign m_sc_payld[3116] = \<const0> ;
  assign m_sc_payld[3115] = \<const0> ;
  assign m_sc_payld[3114] = \<const0> ;
  assign m_sc_payld[3113] = \<const0> ;
  assign m_sc_payld[3112] = \<const0> ;
  assign m_sc_payld[3111] = \<const0> ;
  assign m_sc_payld[3110] = \<const0> ;
  assign m_sc_payld[3109] = \<const0> ;
  assign m_sc_payld[3108] = \<const0> ;
  assign m_sc_payld[3107] = \<const0> ;
  assign m_sc_payld[3106] = \<const0> ;
  assign m_sc_payld[3105] = \<const0> ;
  assign m_sc_payld[3104] = \<const0> ;
  assign m_sc_payld[3103] = \<const0> ;
  assign m_sc_payld[3102] = \<const0> ;
  assign m_sc_payld[3101] = \<const0> ;
  assign m_sc_payld[3100] = \<const0> ;
  assign m_sc_payld[3099] = \<const0> ;
  assign m_sc_payld[3098] = \<const0> ;
  assign m_sc_payld[3097] = \<const0> ;
  assign m_sc_payld[3096] = \<const0> ;
  assign m_sc_payld[3095] = \<const0> ;
  assign m_sc_payld[3094] = \<const0> ;
  assign m_sc_payld[3093] = \<const0> ;
  assign m_sc_payld[3092] = \<const0> ;
  assign m_sc_payld[3091] = \<const0> ;
  assign m_sc_payld[3090] = \<const0> ;
  assign m_sc_payld[3089] = \<const0> ;
  assign m_sc_payld[3088] = \<const0> ;
  assign m_sc_payld[3087] = \<const0> ;
  assign m_sc_payld[3086] = \<const0> ;
  assign m_sc_payld[3085] = \<const0> ;
  assign m_sc_payld[3084] = \<const0> ;
  assign m_sc_payld[3083] = \<const0> ;
  assign m_sc_payld[3082] = \<const0> ;
  assign m_sc_payld[3081] = \<const0> ;
  assign m_sc_payld[3080] = \<const0> ;
  assign m_sc_payld[3079] = \<const0> ;
  assign m_sc_payld[3078] = \<const0> ;
  assign m_sc_payld[3077] = \<const0> ;
  assign m_sc_payld[3076] = \<const0> ;
  assign m_sc_payld[3075] = \<const0> ;
  assign m_sc_payld[3074] = \<const0> ;
  assign m_sc_payld[3073] = \<const0> ;
  assign m_sc_payld[3072] = \<const0> ;
  assign m_sc_payld[3071] = \<const0> ;
  assign m_sc_payld[3070] = \<const0> ;
  assign m_sc_payld[3069] = \<const0> ;
  assign m_sc_payld[3068] = \<const0> ;
  assign m_sc_payld[3067] = \<const0> ;
  assign m_sc_payld[3066] = \<const0> ;
  assign m_sc_payld[3065] = \<const0> ;
  assign m_sc_payld[3064] = \<const0> ;
  assign m_sc_payld[3063] = \<const0> ;
  assign m_sc_payld[3062] = \<const0> ;
  assign m_sc_payld[3061] = \<const0> ;
  assign m_sc_payld[3060] = \<const0> ;
  assign m_sc_payld[3059] = \<const0> ;
  assign m_sc_payld[3058] = \<const0> ;
  assign m_sc_payld[3057] = \<const0> ;
  assign m_sc_payld[3056] = \<const0> ;
  assign m_sc_payld[3055] = \<const0> ;
  assign m_sc_payld[3054] = \<const0> ;
  assign m_sc_payld[3053] = \<const0> ;
  assign m_sc_payld[3052] = \<const0> ;
  assign m_sc_payld[3051] = \<const0> ;
  assign m_sc_payld[3050] = \<const0> ;
  assign m_sc_payld[3049] = \<const0> ;
  assign m_sc_payld[3048] = \<const0> ;
  assign m_sc_payld[3047] = \<const0> ;
  assign m_sc_payld[3046] = \<const0> ;
  assign m_sc_payld[3045] = \<const0> ;
  assign m_sc_payld[3044] = \<const0> ;
  assign m_sc_payld[3043] = \<const0> ;
  assign m_sc_payld[3042] = \<const0> ;
  assign m_sc_payld[3041] = \<const0> ;
  assign m_sc_payld[3040] = \<const0> ;
  assign m_sc_payld[3039] = \<const0> ;
  assign m_sc_payld[3038] = \<const0> ;
  assign m_sc_payld[3037] = \<const0> ;
  assign m_sc_payld[3036] = \<const0> ;
  assign m_sc_payld[3035] = \<const0> ;
  assign m_sc_payld[3034] = \<const0> ;
  assign m_sc_payld[3033] = \<const0> ;
  assign m_sc_payld[3032] = \<const0> ;
  assign m_sc_payld[3031] = \<const0> ;
  assign m_sc_payld[3030] = \<const0> ;
  assign m_sc_payld[3029] = \<const0> ;
  assign m_sc_payld[3028] = \<const0> ;
  assign m_sc_payld[3027] = \<const0> ;
  assign m_sc_payld[3026] = \<const0> ;
  assign m_sc_payld[3025] = \<const0> ;
  assign m_sc_payld[3024] = \<const0> ;
  assign m_sc_payld[3023] = \<const0> ;
  assign m_sc_payld[3022] = \<const0> ;
  assign m_sc_payld[3021] = \<const0> ;
  assign m_sc_payld[3020] = \<const0> ;
  assign m_sc_payld[3019] = \<const0> ;
  assign m_sc_payld[3018] = \<const0> ;
  assign m_sc_payld[3017] = \<const0> ;
  assign m_sc_payld[3016] = \<const0> ;
  assign m_sc_payld[3015] = \<const0> ;
  assign m_sc_payld[3014] = \<const0> ;
  assign m_sc_payld[3013] = \<const0> ;
  assign m_sc_payld[3012] = \<const0> ;
  assign m_sc_payld[3011] = \<const0> ;
  assign m_sc_payld[3010] = \<const0> ;
  assign m_sc_payld[3009] = \<const0> ;
  assign m_sc_payld[3008] = \<const0> ;
  assign m_sc_payld[3007] = \<const0> ;
  assign m_sc_payld[3006] = \<const0> ;
  assign m_sc_payld[3005] = \<const0> ;
  assign m_sc_payld[3004] = \<const0> ;
  assign m_sc_payld[3003] = \<const0> ;
  assign m_sc_payld[3002] = \<const0> ;
  assign m_sc_payld[3001] = \<const0> ;
  assign m_sc_payld[3000] = \<const0> ;
  assign m_sc_payld[2999] = \<const0> ;
  assign m_sc_payld[2998] = \<const0> ;
  assign m_sc_payld[2997] = \<const0> ;
  assign m_sc_payld[2996] = \<const0> ;
  assign m_sc_payld[2995] = \<const0> ;
  assign m_sc_payld[2994] = \<const0> ;
  assign m_sc_payld[2993] = \<const0> ;
  assign m_sc_payld[2992] = \<const0> ;
  assign m_sc_payld[2991] = \<const0> ;
  assign m_sc_payld[2990] = \<const0> ;
  assign m_sc_payld[2989] = \<const0> ;
  assign m_sc_payld[2988] = \<const0> ;
  assign m_sc_payld[2987] = \<const0> ;
  assign m_sc_payld[2986] = \<const0> ;
  assign m_sc_payld[2985] = \<const0> ;
  assign m_sc_payld[2984] = \<const0> ;
  assign m_sc_payld[2983] = \<const0> ;
  assign m_sc_payld[2982] = \<const0> ;
  assign m_sc_payld[2981] = \<const0> ;
  assign m_sc_payld[2980] = \<const0> ;
  assign m_sc_payld[2979] = \<const0> ;
  assign m_sc_payld[2978] = \<const0> ;
  assign m_sc_payld[2977] = \<const0> ;
  assign m_sc_payld[2976] = \<const0> ;
  assign m_sc_payld[2975] = \<const0> ;
  assign m_sc_payld[2974] = \<const0> ;
  assign m_sc_payld[2973] = \<const0> ;
  assign m_sc_payld[2972] = \<const0> ;
  assign m_sc_payld[2971] = \<const0> ;
  assign m_sc_payld[2970] = \<const0> ;
  assign m_sc_payld[2969] = \<const0> ;
  assign m_sc_payld[2968] = \<const0> ;
  assign m_sc_payld[2967] = \<const0> ;
  assign m_sc_payld[2966] = \<const0> ;
  assign m_sc_payld[2965] = \<const0> ;
  assign m_sc_payld[2964] = \<const0> ;
  assign m_sc_payld[2963] = \<const0> ;
  assign m_sc_payld[2962] = \<const0> ;
  assign m_sc_payld[2961] = \<const0> ;
  assign m_sc_payld[2960] = \<const0> ;
  assign m_sc_payld[2959] = \<const0> ;
  assign m_sc_payld[2958] = \<const0> ;
  assign m_sc_payld[2957] = \<const0> ;
  assign m_sc_payld[2956] = \<const0> ;
  assign m_sc_payld[2955] = \<const0> ;
  assign m_sc_payld[2954] = \<const0> ;
  assign m_sc_payld[2953] = \<const0> ;
  assign m_sc_payld[2952] = \<const0> ;
  assign m_sc_payld[2951] = \<const0> ;
  assign m_sc_payld[2950] = \<const0> ;
  assign m_sc_payld[2949] = \<const0> ;
  assign m_sc_payld[2948] = \<const0> ;
  assign m_sc_payld[2947] = \<const0> ;
  assign m_sc_payld[2946] = \<const0> ;
  assign m_sc_payld[2945] = \<const0> ;
  assign m_sc_payld[2944] = \<const0> ;
  assign m_sc_payld[2943] = \<const0> ;
  assign m_sc_payld[2942] = \<const0> ;
  assign m_sc_payld[2941] = \<const0> ;
  assign m_sc_payld[2940] = \<const0> ;
  assign m_sc_payld[2939] = \<const0> ;
  assign m_sc_payld[2938] = \<const0> ;
  assign m_sc_payld[2937] = \<const0> ;
  assign m_sc_payld[2936] = \<const0> ;
  assign m_sc_payld[2935] = \<const0> ;
  assign m_sc_payld[2934] = \<const0> ;
  assign m_sc_payld[2933] = \<const0> ;
  assign m_sc_payld[2932] = \<const0> ;
  assign m_sc_payld[2931] = \<const0> ;
  assign m_sc_payld[2930] = \<const0> ;
  assign m_sc_payld[2929] = \<const0> ;
  assign m_sc_payld[2928] = \<const0> ;
  assign m_sc_payld[2927] = \<const0> ;
  assign m_sc_payld[2926] = \<const0> ;
  assign m_sc_payld[2925] = \<const0> ;
  assign m_sc_payld[2924] = \<const0> ;
  assign m_sc_payld[2923] = \<const0> ;
  assign m_sc_payld[2922] = \<const0> ;
  assign m_sc_payld[2921] = \<const0> ;
  assign m_sc_payld[2920] = \<const0> ;
  assign m_sc_payld[2919] = \<const0> ;
  assign m_sc_payld[2918] = \<const0> ;
  assign m_sc_payld[2917] = \<const0> ;
  assign m_sc_payld[2916] = \<const0> ;
  assign m_sc_payld[2915] = \<const0> ;
  assign m_sc_payld[2914] = \<const0> ;
  assign m_sc_payld[2913] = \<const0> ;
  assign m_sc_payld[2912] = \<const0> ;
  assign m_sc_payld[2911] = \<const0> ;
  assign m_sc_payld[2910] = \<const0> ;
  assign m_sc_payld[2909] = \<const0> ;
  assign m_sc_payld[2908] = \<const0> ;
  assign m_sc_payld[2907] = \<const0> ;
  assign m_sc_payld[2906] = \<const0> ;
  assign m_sc_payld[2905] = \<const0> ;
  assign m_sc_payld[2904] = \<const0> ;
  assign m_sc_payld[2903] = \<const0> ;
  assign m_sc_payld[2902] = \<const0> ;
  assign m_sc_payld[2901] = \<const0> ;
  assign m_sc_payld[2900] = \<const0> ;
  assign m_sc_payld[2899] = \<const0> ;
  assign m_sc_payld[2898] = \<const0> ;
  assign m_sc_payld[2897] = \<const0> ;
  assign m_sc_payld[2896] = \<const0> ;
  assign m_sc_payld[2895] = \<const0> ;
  assign m_sc_payld[2894] = \<const0> ;
  assign m_sc_payld[2893] = \<const0> ;
  assign m_sc_payld[2892] = \<const0> ;
  assign m_sc_payld[2891] = \<const0> ;
  assign m_sc_payld[2890] = \<const0> ;
  assign m_sc_payld[2889] = \<const0> ;
  assign m_sc_payld[2888] = \<const0> ;
  assign m_sc_payld[2887] = \<const0> ;
  assign m_sc_payld[2886] = \<const0> ;
  assign m_sc_payld[2885] = \<const0> ;
  assign m_sc_payld[2884] = \<const0> ;
  assign m_sc_payld[2883] = \<const0> ;
  assign m_sc_payld[2882] = \<const0> ;
  assign m_sc_payld[2881] = \<const0> ;
  assign m_sc_payld[2880] = \<const0> ;
  assign m_sc_payld[2879] = \<const0> ;
  assign m_sc_payld[2878] = \<const0> ;
  assign m_sc_payld[2877] = \<const0> ;
  assign m_sc_payld[2876] = \<const0> ;
  assign m_sc_payld[2875] = \<const0> ;
  assign m_sc_payld[2874] = \<const0> ;
  assign m_sc_payld[2873] = \<const0> ;
  assign m_sc_payld[2872] = \<const0> ;
  assign m_sc_payld[2871] = \<const0> ;
  assign m_sc_payld[2870] = \<const0> ;
  assign m_sc_payld[2869] = \<const0> ;
  assign m_sc_payld[2868] = \<const0> ;
  assign m_sc_payld[2867] = \<const0> ;
  assign m_sc_payld[2866] = \<const0> ;
  assign m_sc_payld[2865] = \<const0> ;
  assign m_sc_payld[2864] = \<const0> ;
  assign m_sc_payld[2863] = \<const0> ;
  assign m_sc_payld[2862] = \<const0> ;
  assign m_sc_payld[2861] = \<const0> ;
  assign m_sc_payld[2860] = \<const0> ;
  assign m_sc_payld[2859] = \<const0> ;
  assign m_sc_payld[2858] = \<const0> ;
  assign m_sc_payld[2857] = \<const0> ;
  assign m_sc_payld[2856] = \<const0> ;
  assign m_sc_payld[2855] = \<const0> ;
  assign m_sc_payld[2854] = \<const0> ;
  assign m_sc_payld[2853] = \<const0> ;
  assign m_sc_payld[2852] = \<const0> ;
  assign m_sc_payld[2851] = \<const0> ;
  assign m_sc_payld[2850] = \<const0> ;
  assign m_sc_payld[2849] = \<const0> ;
  assign m_sc_payld[2848] = \<const0> ;
  assign m_sc_payld[2847] = \<const0> ;
  assign m_sc_payld[2846] = \<const0> ;
  assign m_sc_payld[2845] = \<const0> ;
  assign m_sc_payld[2844] = \<const0> ;
  assign m_sc_payld[2843] = \<const0> ;
  assign m_sc_payld[2842] = \<const0> ;
  assign m_sc_payld[2841] = \<const0> ;
  assign m_sc_payld[2840] = \<const0> ;
  assign m_sc_payld[2839] = \<const0> ;
  assign m_sc_payld[2838] = \<const0> ;
  assign m_sc_payld[2837] = \<const0> ;
  assign m_sc_payld[2836] = \<const0> ;
  assign m_sc_payld[2835] = \<const0> ;
  assign m_sc_payld[2834] = \<const0> ;
  assign m_sc_payld[2833] = \<const0> ;
  assign m_sc_payld[2832] = \<const0> ;
  assign m_sc_payld[2831] = \<const0> ;
  assign m_sc_payld[2830] = \<const0> ;
  assign m_sc_payld[2829] = \<const0> ;
  assign m_sc_payld[2828] = \<const0> ;
  assign m_sc_payld[2827] = \<const0> ;
  assign m_sc_payld[2826] = \<const0> ;
  assign m_sc_payld[2825] = \<const0> ;
  assign m_sc_payld[2824] = \<const0> ;
  assign m_sc_payld[2823] = \<const0> ;
  assign m_sc_payld[2822] = \<const0> ;
  assign m_sc_payld[2821] = \<const0> ;
  assign m_sc_payld[2820] = \<const0> ;
  assign m_sc_payld[2819] = \<const0> ;
  assign m_sc_payld[2818] = \<const0> ;
  assign m_sc_payld[2817] = \<const0> ;
  assign m_sc_payld[2816] = \<const0> ;
  assign m_sc_payld[2815] = \<const0> ;
  assign m_sc_payld[2814] = \<const0> ;
  assign m_sc_payld[2813] = \<const0> ;
  assign m_sc_payld[2812] = \<const0> ;
  assign m_sc_payld[2811] = \<const0> ;
  assign m_sc_payld[2810] = \<const0> ;
  assign m_sc_payld[2809] = \<const0> ;
  assign m_sc_payld[2808] = \<const0> ;
  assign m_sc_payld[2807] = \<const0> ;
  assign m_sc_payld[2806] = \<const0> ;
  assign m_sc_payld[2805] = \<const0> ;
  assign m_sc_payld[2804] = \<const0> ;
  assign m_sc_payld[2803] = \<const0> ;
  assign m_sc_payld[2802] = \<const0> ;
  assign m_sc_payld[2801] = \<const0> ;
  assign m_sc_payld[2800] = \<const0> ;
  assign m_sc_payld[2799] = \<const0> ;
  assign m_sc_payld[2798] = \<const0> ;
  assign m_sc_payld[2797] = \<const0> ;
  assign m_sc_payld[2796] = \<const0> ;
  assign m_sc_payld[2795] = \<const0> ;
  assign m_sc_payld[2794] = \<const0> ;
  assign m_sc_payld[2793] = \<const0> ;
  assign m_sc_payld[2792] = \<const0> ;
  assign m_sc_payld[2791] = \<const0> ;
  assign m_sc_payld[2790] = \<const0> ;
  assign m_sc_payld[2789] = \<const0> ;
  assign m_sc_payld[2788] = \<const0> ;
  assign m_sc_payld[2787] = \<const0> ;
  assign m_sc_payld[2786] = \<const0> ;
  assign m_sc_payld[2785] = \<const0> ;
  assign m_sc_payld[2784] = \<const0> ;
  assign m_sc_payld[2783] = \<const0> ;
  assign m_sc_payld[2782] = \<const0> ;
  assign m_sc_payld[2781] = \<const0> ;
  assign m_sc_payld[2780] = \<const0> ;
  assign m_sc_payld[2779] = \<const0> ;
  assign m_sc_payld[2778] = \<const0> ;
  assign m_sc_payld[2777] = \<const0> ;
  assign m_sc_payld[2776] = \<const0> ;
  assign m_sc_payld[2775] = \<const0> ;
  assign m_sc_payld[2774] = \<const0> ;
  assign m_sc_payld[2773] = \<const0> ;
  assign m_sc_payld[2772] = \<const0> ;
  assign m_sc_payld[2771] = \<const0> ;
  assign m_sc_payld[2770] = \<const0> ;
  assign m_sc_payld[2769] = \<const0> ;
  assign m_sc_payld[2768] = \<const0> ;
  assign m_sc_payld[2767] = \<const0> ;
  assign m_sc_payld[2766] = \<const0> ;
  assign m_sc_payld[2765] = \<const0> ;
  assign m_sc_payld[2764] = \<const0> ;
  assign m_sc_payld[2763] = \<const0> ;
  assign m_sc_payld[2762] = \<const0> ;
  assign m_sc_payld[2761] = \<const0> ;
  assign m_sc_payld[2760] = \<const0> ;
  assign m_sc_payld[2759] = \<const0> ;
  assign m_sc_payld[2758] = \<const0> ;
  assign m_sc_payld[2757] = \<const0> ;
  assign m_sc_payld[2756] = \<const0> ;
  assign m_sc_payld[2755] = \<const0> ;
  assign m_sc_payld[2754] = \<const0> ;
  assign m_sc_payld[2753] = \<const0> ;
  assign m_sc_payld[2752] = \<const0> ;
  assign m_sc_payld[2751] = \<const0> ;
  assign m_sc_payld[2750] = \<const0> ;
  assign m_sc_payld[2749] = \<const0> ;
  assign m_sc_payld[2748] = \<const0> ;
  assign m_sc_payld[2747] = \<const0> ;
  assign m_sc_payld[2746] = \<const0> ;
  assign m_sc_payld[2745] = \<const0> ;
  assign m_sc_payld[2744] = \<const0> ;
  assign m_sc_payld[2743] = \<const0> ;
  assign m_sc_payld[2742] = \<const0> ;
  assign m_sc_payld[2741] = \<const0> ;
  assign m_sc_payld[2740] = \<const0> ;
  assign m_sc_payld[2739] = \<const0> ;
  assign m_sc_payld[2738] = \<const0> ;
  assign m_sc_payld[2737] = \<const0> ;
  assign m_sc_payld[2736] = \<const0> ;
  assign m_sc_payld[2735] = \<const0> ;
  assign m_sc_payld[2734] = \<const0> ;
  assign m_sc_payld[2733] = \<const0> ;
  assign m_sc_payld[2732] = \<const0> ;
  assign m_sc_payld[2731] = \<const0> ;
  assign m_sc_payld[2730] = \<const0> ;
  assign m_sc_payld[2729] = \<const0> ;
  assign m_sc_payld[2728] = \<const0> ;
  assign m_sc_payld[2727] = \<const0> ;
  assign m_sc_payld[2726] = \<const0> ;
  assign m_sc_payld[2725] = \<const0> ;
  assign m_sc_payld[2724] = \<const0> ;
  assign m_sc_payld[2723] = \<const0> ;
  assign m_sc_payld[2722] = \<const0> ;
  assign m_sc_payld[2721] = \<const0> ;
  assign m_sc_payld[2720] = \<const0> ;
  assign m_sc_payld[2719] = \<const0> ;
  assign m_sc_payld[2718] = \<const0> ;
  assign m_sc_payld[2717] = \<const0> ;
  assign m_sc_payld[2716] = \<const0> ;
  assign m_sc_payld[2715] = \<const0> ;
  assign m_sc_payld[2714] = \<const0> ;
  assign m_sc_payld[2713] = \<const0> ;
  assign m_sc_payld[2712] = \<const0> ;
  assign m_sc_payld[2711] = \<const0> ;
  assign m_sc_payld[2710] = \<const0> ;
  assign m_sc_payld[2709] = \<const0> ;
  assign m_sc_payld[2708] = \<const0> ;
  assign m_sc_payld[2707] = \<const0> ;
  assign m_sc_payld[2706] = \<const0> ;
  assign m_sc_payld[2705] = \<const0> ;
  assign m_sc_payld[2704] = \<const0> ;
  assign m_sc_payld[2703] = \<const0> ;
  assign m_sc_payld[2702] = \<const0> ;
  assign m_sc_payld[2701] = \<const0> ;
  assign m_sc_payld[2700] = \<const0> ;
  assign m_sc_payld[2699] = \<const0> ;
  assign m_sc_payld[2698] = \<const0> ;
  assign m_sc_payld[2697] = \<const0> ;
  assign m_sc_payld[2696] = \<const0> ;
  assign m_sc_payld[2695] = \<const0> ;
  assign m_sc_payld[2694] = \<const0> ;
  assign m_sc_payld[2693] = \<const0> ;
  assign m_sc_payld[2692] = \<const0> ;
  assign m_sc_payld[2691] = \<const0> ;
  assign m_sc_payld[2690] = \<const0> ;
  assign m_sc_payld[2689] = \<const0> ;
  assign m_sc_payld[2688] = \<const0> ;
  assign m_sc_payld[2687] = \<const0> ;
  assign m_sc_payld[2686] = \<const0> ;
  assign m_sc_payld[2685] = \<const0> ;
  assign m_sc_payld[2684] = \<const0> ;
  assign m_sc_payld[2683] = \<const0> ;
  assign m_sc_payld[2682] = \<const0> ;
  assign m_sc_payld[2681] = \<const0> ;
  assign m_sc_payld[2680] = \<const0> ;
  assign m_sc_payld[2679] = \<const0> ;
  assign m_sc_payld[2678] = \<const0> ;
  assign m_sc_payld[2677] = \<const0> ;
  assign m_sc_payld[2676] = \<const0> ;
  assign m_sc_payld[2675] = \<const0> ;
  assign m_sc_payld[2674] = \<const0> ;
  assign m_sc_payld[2673] = \<const0> ;
  assign m_sc_payld[2672] = \<const0> ;
  assign m_sc_payld[2671] = \<const0> ;
  assign m_sc_payld[2670] = \<const0> ;
  assign m_sc_payld[2669] = \<const0> ;
  assign m_sc_payld[2668] = \<const0> ;
  assign m_sc_payld[2667] = \<const0> ;
  assign m_sc_payld[2666] = \<const0> ;
  assign m_sc_payld[2665] = \<const0> ;
  assign m_sc_payld[2664] = \<const0> ;
  assign m_sc_payld[2663] = \<const0> ;
  assign m_sc_payld[2662] = \<const0> ;
  assign m_sc_payld[2661] = \<const0> ;
  assign m_sc_payld[2660] = \<const0> ;
  assign m_sc_payld[2659] = \<const0> ;
  assign m_sc_payld[2658] = \<const0> ;
  assign m_sc_payld[2657] = \<const0> ;
  assign m_sc_payld[2656] = \<const0> ;
  assign m_sc_payld[2655] = \<const0> ;
  assign m_sc_payld[2654] = \<const0> ;
  assign m_sc_payld[2653] = \<const0> ;
  assign m_sc_payld[2652] = \<const0> ;
  assign m_sc_payld[2651] = \<const0> ;
  assign m_sc_payld[2650] = \<const0> ;
  assign m_sc_payld[2649] = \<const0> ;
  assign m_sc_payld[2648] = \<const0> ;
  assign m_sc_payld[2647] = \<const0> ;
  assign m_sc_payld[2646] = \<const0> ;
  assign m_sc_payld[2645] = \<const0> ;
  assign m_sc_payld[2644] = \<const0> ;
  assign m_sc_payld[2643] = \<const0> ;
  assign m_sc_payld[2642] = \<const0> ;
  assign m_sc_payld[2641] = \<const0> ;
  assign m_sc_payld[2640] = \<const0> ;
  assign m_sc_payld[2639] = \<const0> ;
  assign m_sc_payld[2638] = \<const0> ;
  assign m_sc_payld[2637] = \<const0> ;
  assign m_sc_payld[2636] = \<const0> ;
  assign m_sc_payld[2635] = \<const0> ;
  assign m_sc_payld[2634] = \<const0> ;
  assign m_sc_payld[2633] = \<const0> ;
  assign m_sc_payld[2632] = \<const0> ;
  assign m_sc_payld[2631] = \<const0> ;
  assign m_sc_payld[2630] = \<const0> ;
  assign m_sc_payld[2629] = \<const0> ;
  assign m_sc_payld[2628] = \<const0> ;
  assign m_sc_payld[2627] = \<const0> ;
  assign m_sc_payld[2626] = \<const0> ;
  assign m_sc_payld[2625] = \<const0> ;
  assign m_sc_payld[2624] = \<const0> ;
  assign m_sc_payld[2623] = \<const0> ;
  assign m_sc_payld[2622] = \<const0> ;
  assign m_sc_payld[2621] = \<const0> ;
  assign m_sc_payld[2620] = \<const0> ;
  assign m_sc_payld[2619] = \<const0> ;
  assign m_sc_payld[2618] = \<const0> ;
  assign m_sc_payld[2617] = \<const0> ;
  assign m_sc_payld[2616] = \<const0> ;
  assign m_sc_payld[2615] = \<const0> ;
  assign m_sc_payld[2614] = \<const0> ;
  assign m_sc_payld[2613] = \<const0> ;
  assign m_sc_payld[2612] = \<const0> ;
  assign m_sc_payld[2611] = \<const0> ;
  assign m_sc_payld[2610] = \<const0> ;
  assign m_sc_payld[2609] = \<const0> ;
  assign m_sc_payld[2608] = \<const0> ;
  assign m_sc_payld[2607] = \<const0> ;
  assign m_sc_payld[2606] = \<const0> ;
  assign m_sc_payld[2605] = \<const0> ;
  assign m_sc_payld[2604] = \<const0> ;
  assign m_sc_payld[2603] = \<const0> ;
  assign m_sc_payld[2602] = \<const0> ;
  assign m_sc_payld[2601] = \<const0> ;
  assign m_sc_payld[2600] = \<const0> ;
  assign m_sc_payld[2599] = \<const0> ;
  assign m_sc_payld[2598] = \<const0> ;
  assign m_sc_payld[2597] = \<const0> ;
  assign m_sc_payld[2596] = \<const0> ;
  assign m_sc_payld[2595] = \<const0> ;
  assign m_sc_payld[2594] = \<const0> ;
  assign m_sc_payld[2593] = \<const0> ;
  assign m_sc_payld[2592] = \<const0> ;
  assign m_sc_payld[2591] = \<const0> ;
  assign m_sc_payld[2590] = \<const0> ;
  assign m_sc_payld[2589] = \<const0> ;
  assign m_sc_payld[2588] = \<const0> ;
  assign m_sc_payld[2587] = \<const0> ;
  assign m_sc_payld[2586] = \<const0> ;
  assign m_sc_payld[2585] = \<const0> ;
  assign m_sc_payld[2584] = \<const0> ;
  assign m_sc_payld[2583] = \<const0> ;
  assign m_sc_payld[2582] = \<const0> ;
  assign m_sc_payld[2581] = \<const0> ;
  assign m_sc_payld[2580] = \<const0> ;
  assign m_sc_payld[2579] = \<const0> ;
  assign m_sc_payld[2578] = \<const0> ;
  assign m_sc_payld[2577] = \<const0> ;
  assign m_sc_payld[2576] = \<const0> ;
  assign m_sc_payld[2575] = \<const0> ;
  assign m_sc_payld[2574] = \<const0> ;
  assign m_sc_payld[2573] = \<const0> ;
  assign m_sc_payld[2572] = \<const0> ;
  assign m_sc_payld[2571] = \<const0> ;
  assign m_sc_payld[2570] = \<const0> ;
  assign m_sc_payld[2569] = \<const0> ;
  assign m_sc_payld[2568] = \<const0> ;
  assign m_sc_payld[2567] = \<const0> ;
  assign m_sc_payld[2566] = \<const0> ;
  assign m_sc_payld[2565] = \<const0> ;
  assign m_sc_payld[2564] = \<const0> ;
  assign m_sc_payld[2563] = \<const0> ;
  assign m_sc_payld[2562] = \<const0> ;
  assign m_sc_payld[2561] = \<const0> ;
  assign m_sc_payld[2560] = \<const0> ;
  assign m_sc_payld[2559] = \<const0> ;
  assign m_sc_payld[2558] = \<const0> ;
  assign m_sc_payld[2557] = \<const0> ;
  assign m_sc_payld[2556] = \<const0> ;
  assign m_sc_payld[2555] = \<const0> ;
  assign m_sc_payld[2554] = \<const0> ;
  assign m_sc_payld[2553] = \<const0> ;
  assign m_sc_payld[2552] = \<const0> ;
  assign m_sc_payld[2551] = \<const0> ;
  assign m_sc_payld[2550] = \<const0> ;
  assign m_sc_payld[2549] = \<const0> ;
  assign m_sc_payld[2548] = \<const0> ;
  assign m_sc_payld[2547] = \<const0> ;
  assign m_sc_payld[2546] = \<const0> ;
  assign m_sc_payld[2545] = \<const0> ;
  assign m_sc_payld[2544] = \<const0> ;
  assign m_sc_payld[2543] = \<const0> ;
  assign m_sc_payld[2542] = \<const0> ;
  assign m_sc_payld[2541] = \<const0> ;
  assign m_sc_payld[2540] = \<const0> ;
  assign m_sc_payld[2539] = \<const0> ;
  assign m_sc_payld[2538] = \<const0> ;
  assign m_sc_payld[2537] = \<const0> ;
  assign m_sc_payld[2536] = \<const0> ;
  assign m_sc_payld[2535] = \<const0> ;
  assign m_sc_payld[2534] = \<const0> ;
  assign m_sc_payld[2533] = \<const0> ;
  assign m_sc_payld[2532] = \<const0> ;
  assign m_sc_payld[2531] = \<const0> ;
  assign m_sc_payld[2530] = \<const0> ;
  assign m_sc_payld[2529] = \<const0> ;
  assign m_sc_payld[2528] = \<const0> ;
  assign m_sc_payld[2527] = \<const0> ;
  assign m_sc_payld[2526] = \<const0> ;
  assign m_sc_payld[2525] = \<const0> ;
  assign m_sc_payld[2524] = \<const0> ;
  assign m_sc_payld[2523] = \<const0> ;
  assign m_sc_payld[2522] = \<const0> ;
  assign m_sc_payld[2521] = \<const0> ;
  assign m_sc_payld[2520] = \<const0> ;
  assign m_sc_payld[2519] = \<const0> ;
  assign m_sc_payld[2518] = \<const0> ;
  assign m_sc_payld[2517] = \<const0> ;
  assign m_sc_payld[2516] = \<const0> ;
  assign m_sc_payld[2515] = \<const0> ;
  assign m_sc_payld[2514] = \<const0> ;
  assign m_sc_payld[2513] = \<const0> ;
  assign m_sc_payld[2512] = \<const0> ;
  assign m_sc_payld[2511] = \<const0> ;
  assign m_sc_payld[2510] = \<const0> ;
  assign m_sc_payld[2509] = \<const0> ;
  assign m_sc_payld[2508] = \<const0> ;
  assign m_sc_payld[2507] = \<const0> ;
  assign m_sc_payld[2506] = \<const0> ;
  assign m_sc_payld[2505] = \<const0> ;
  assign m_sc_payld[2504] = \<const0> ;
  assign m_sc_payld[2503] = \<const0> ;
  assign m_sc_payld[2502] = \<const0> ;
  assign m_sc_payld[2501] = \<const0> ;
  assign m_sc_payld[2500] = \<const0> ;
  assign m_sc_payld[2499] = \<const0> ;
  assign m_sc_payld[2498] = \<const0> ;
  assign m_sc_payld[2497] = \<const0> ;
  assign m_sc_payld[2496] = \<const0> ;
  assign m_sc_payld[2495] = \<const0> ;
  assign m_sc_payld[2494] = \<const0> ;
  assign m_sc_payld[2493] = \<const0> ;
  assign m_sc_payld[2492] = \<const0> ;
  assign m_sc_payld[2491] = \<const0> ;
  assign m_sc_payld[2490] = \<const0> ;
  assign m_sc_payld[2489] = \<const0> ;
  assign m_sc_payld[2488] = \<const0> ;
  assign m_sc_payld[2487] = \<const0> ;
  assign m_sc_payld[2486] = \<const0> ;
  assign m_sc_payld[2485] = \<const0> ;
  assign m_sc_payld[2484] = \<const0> ;
  assign m_sc_payld[2483] = \<const0> ;
  assign m_sc_payld[2482] = \<const0> ;
  assign m_sc_payld[2481] = \<const0> ;
  assign m_sc_payld[2480] = \<const0> ;
  assign m_sc_payld[2479] = \<const0> ;
  assign m_sc_payld[2478] = \<const0> ;
  assign m_sc_payld[2477] = \<const0> ;
  assign m_sc_payld[2476] = \<const0> ;
  assign m_sc_payld[2475] = \<const0> ;
  assign m_sc_payld[2474] = \<const0> ;
  assign m_sc_payld[2473] = \<const0> ;
  assign m_sc_payld[2472] = \<const0> ;
  assign m_sc_payld[2471] = \<const0> ;
  assign m_sc_payld[2470] = \<const0> ;
  assign m_sc_payld[2469] = \<const0> ;
  assign m_sc_payld[2468] = \<const0> ;
  assign m_sc_payld[2467] = \<const0> ;
  assign m_sc_payld[2466] = \<const0> ;
  assign m_sc_payld[2465] = \<const0> ;
  assign m_sc_payld[2464] = \<const0> ;
  assign m_sc_payld[2463] = \<const0> ;
  assign m_sc_payld[2462] = \<const0> ;
  assign m_sc_payld[2461] = \<const0> ;
  assign m_sc_payld[2460] = \<const0> ;
  assign m_sc_payld[2459] = \<const0> ;
  assign m_sc_payld[2458] = \<const0> ;
  assign m_sc_payld[2457] = \<const0> ;
  assign m_sc_payld[2456] = \<const0> ;
  assign m_sc_payld[2455] = \<const0> ;
  assign m_sc_payld[2454] = \<const0> ;
  assign m_sc_payld[2453] = \<const0> ;
  assign m_sc_payld[2452] = \<const0> ;
  assign m_sc_payld[2451] = \<const0> ;
  assign m_sc_payld[2450] = \<const0> ;
  assign m_sc_payld[2449] = \<const0> ;
  assign m_sc_payld[2448] = \<const0> ;
  assign m_sc_payld[2447] = \<const0> ;
  assign m_sc_payld[2446] = \<const0> ;
  assign m_sc_payld[2445] = \<const0> ;
  assign m_sc_payld[2444] = \<const0> ;
  assign m_sc_payld[2443] = \<const0> ;
  assign m_sc_payld[2442] = \<const0> ;
  assign m_sc_payld[2441] = \<const0> ;
  assign m_sc_payld[2440] = \<const0> ;
  assign m_sc_payld[2439] = \<const0> ;
  assign m_sc_payld[2438] = \<const0> ;
  assign m_sc_payld[2437] = \<const0> ;
  assign m_sc_payld[2436] = \<const0> ;
  assign m_sc_payld[2435] = \<const0> ;
  assign m_sc_payld[2434] = \<const0> ;
  assign m_sc_payld[2433] = \<const0> ;
  assign m_sc_payld[2432] = \<const0> ;
  assign m_sc_payld[2431] = \<const0> ;
  assign m_sc_payld[2430] = \<const0> ;
  assign m_sc_payld[2429] = \<const0> ;
  assign m_sc_payld[2428] = \<const0> ;
  assign m_sc_payld[2427] = \<const0> ;
  assign m_sc_payld[2426] = \<const0> ;
  assign m_sc_payld[2425] = \<const0> ;
  assign m_sc_payld[2424] = \<const0> ;
  assign m_sc_payld[2423] = \<const0> ;
  assign m_sc_payld[2422] = \<const0> ;
  assign m_sc_payld[2421] = \<const0> ;
  assign m_sc_payld[2420] = \<const0> ;
  assign m_sc_payld[2419] = \<const0> ;
  assign m_sc_payld[2418] = \<const0> ;
  assign m_sc_payld[2417] = \<const0> ;
  assign m_sc_payld[2416] = \<const0> ;
  assign m_sc_payld[2415] = \<const0> ;
  assign m_sc_payld[2414] = \<const0> ;
  assign m_sc_payld[2413] = \<const0> ;
  assign m_sc_payld[2412] = \<const0> ;
  assign m_sc_payld[2411] = \<const0> ;
  assign m_sc_payld[2410] = \<const0> ;
  assign m_sc_payld[2409] = \<const0> ;
  assign m_sc_payld[2408] = \<const0> ;
  assign m_sc_payld[2407] = \<const0> ;
  assign m_sc_payld[2406] = \<const0> ;
  assign m_sc_payld[2405] = \<const0> ;
  assign m_sc_payld[2404] = \<const0> ;
  assign m_sc_payld[2403] = \<const0> ;
  assign m_sc_payld[2402] = \<const0> ;
  assign m_sc_payld[2401] = \<const0> ;
  assign m_sc_payld[2400] = \<const0> ;
  assign m_sc_payld[2399] = \<const0> ;
  assign m_sc_payld[2398] = \<const0> ;
  assign m_sc_payld[2397] = \<const0> ;
  assign m_sc_payld[2396] = \<const0> ;
  assign m_sc_payld[2395] = \<const0> ;
  assign m_sc_payld[2394] = \<const0> ;
  assign m_sc_payld[2393] = \<const0> ;
  assign m_sc_payld[2392] = \<const0> ;
  assign m_sc_payld[2391] = \<const0> ;
  assign m_sc_payld[2390] = \<const0> ;
  assign m_sc_payld[2389] = \<const0> ;
  assign m_sc_payld[2388] = \<const0> ;
  assign m_sc_payld[2387] = \<const0> ;
  assign m_sc_payld[2386] = \<const0> ;
  assign m_sc_payld[2385] = \<const0> ;
  assign m_sc_payld[2384] = \<const0> ;
  assign m_sc_payld[2383] = \<const0> ;
  assign m_sc_payld[2382] = \<const0> ;
  assign m_sc_payld[2381] = \<const0> ;
  assign m_sc_payld[2380] = \<const0> ;
  assign m_sc_payld[2379] = \<const0> ;
  assign m_sc_payld[2378] = \<const0> ;
  assign m_sc_payld[2377] = \<const0> ;
  assign m_sc_payld[2376] = \<const0> ;
  assign m_sc_payld[2375] = \<const0> ;
  assign m_sc_payld[2374] = \<const0> ;
  assign m_sc_payld[2373] = \<const0> ;
  assign m_sc_payld[2372] = \<const0> ;
  assign m_sc_payld[2371] = \<const0> ;
  assign m_sc_payld[2370] = \<const0> ;
  assign m_sc_payld[2369] = \<const0> ;
  assign m_sc_payld[2368] = \<const0> ;
  assign m_sc_payld[2367] = \<const0> ;
  assign m_sc_payld[2366] = \<const0> ;
  assign m_sc_payld[2365] = \<const0> ;
  assign m_sc_payld[2364] = \<const0> ;
  assign m_sc_payld[2363] = \<const0> ;
  assign m_sc_payld[2362] = \<const0> ;
  assign m_sc_payld[2361] = \<const0> ;
  assign m_sc_payld[2360] = \<const0> ;
  assign m_sc_payld[2359] = \<const0> ;
  assign m_sc_payld[2358] = \<const0> ;
  assign m_sc_payld[2357] = \<const0> ;
  assign m_sc_payld[2356] = \<const0> ;
  assign m_sc_payld[2355] = \<const0> ;
  assign m_sc_payld[2354] = \<const0> ;
  assign m_sc_payld[2353] = \<const0> ;
  assign m_sc_payld[2352] = \<const0> ;
  assign m_sc_payld[2351] = \<const0> ;
  assign m_sc_payld[2350] = \<const0> ;
  assign m_sc_payld[2349] = \<const0> ;
  assign m_sc_payld[2348] = \<const0> ;
  assign m_sc_payld[2347] = \<const0> ;
  assign m_sc_payld[2346] = \<const0> ;
  assign m_sc_payld[2345] = \<const0> ;
  assign m_sc_payld[2344] = \<const0> ;
  assign m_sc_payld[2343] = \<const0> ;
  assign m_sc_payld[2342] = \<const0> ;
  assign m_sc_payld[2341] = \<const0> ;
  assign m_sc_payld[2340] = \<const0> ;
  assign m_sc_payld[2339] = \<const0> ;
  assign m_sc_payld[2338] = \<const0> ;
  assign m_sc_payld[2337] = \<const0> ;
  assign m_sc_payld[2336] = \<const0> ;
  assign m_sc_payld[2335] = \<const0> ;
  assign m_sc_payld[2334] = \<const0> ;
  assign m_sc_payld[2333] = \<const0> ;
  assign m_sc_payld[2332] = \<const0> ;
  assign m_sc_payld[2331] = \<const0> ;
  assign m_sc_payld[2330] = \<const0> ;
  assign m_sc_payld[2329] = \<const0> ;
  assign m_sc_payld[2328] = \<const0> ;
  assign m_sc_payld[2327] = \<const0> ;
  assign m_sc_payld[2326] = \<const0> ;
  assign m_sc_payld[2325] = \<const0> ;
  assign m_sc_payld[2324] = \<const0> ;
  assign m_sc_payld[2323] = \<const0> ;
  assign m_sc_payld[2322] = \<const0> ;
  assign m_sc_payld[2321] = \<const0> ;
  assign m_sc_payld[2320] = \<const0> ;
  assign m_sc_payld[2319] = \<const0> ;
  assign m_sc_payld[2318] = \<const0> ;
  assign m_sc_payld[2317] = \<const0> ;
  assign m_sc_payld[2316] = \<const0> ;
  assign m_sc_payld[2315] = \<const0> ;
  assign m_sc_payld[2314] = \<const0> ;
  assign m_sc_payld[2313] = \<const0> ;
  assign m_sc_payld[2312] = \<const0> ;
  assign m_sc_payld[2311] = \<const0> ;
  assign m_sc_payld[2310] = \<const0> ;
  assign m_sc_payld[2309] = \<const0> ;
  assign m_sc_payld[2308] = \<const0> ;
  assign m_sc_payld[2307] = \<const0> ;
  assign m_sc_payld[2306] = \<const0> ;
  assign m_sc_payld[2305] = \<const0> ;
  assign m_sc_payld[2304] = \<const0> ;
  assign m_sc_payld[2303] = \<const0> ;
  assign m_sc_payld[2302] = \<const0> ;
  assign m_sc_payld[2301] = \<const0> ;
  assign m_sc_payld[2300] = \<const0> ;
  assign m_sc_payld[2299] = \<const0> ;
  assign m_sc_payld[2298] = \<const0> ;
  assign m_sc_payld[2297] = \<const0> ;
  assign m_sc_payld[2296] = \<const0> ;
  assign m_sc_payld[2295] = \<const0> ;
  assign m_sc_payld[2294] = \<const0> ;
  assign m_sc_payld[2293] = \<const0> ;
  assign m_sc_payld[2292] = \<const0> ;
  assign m_sc_payld[2291] = \<const0> ;
  assign m_sc_payld[2290] = \<const0> ;
  assign m_sc_payld[2289] = \<const0> ;
  assign m_sc_payld[2288] = \<const0> ;
  assign m_sc_payld[2287] = \<const0> ;
  assign m_sc_payld[2286] = \<const0> ;
  assign m_sc_payld[2285] = \<const0> ;
  assign m_sc_payld[2284] = \<const0> ;
  assign m_sc_payld[2283] = \<const0> ;
  assign m_sc_payld[2282] = \<const0> ;
  assign m_sc_payld[2281] = \<const0> ;
  assign m_sc_payld[2280] = \<const0> ;
  assign m_sc_payld[2279] = \<const0> ;
  assign m_sc_payld[2278] = \<const0> ;
  assign m_sc_payld[2277] = \<const0> ;
  assign m_sc_payld[2276] = \<const0> ;
  assign m_sc_payld[2275] = \<const0> ;
  assign m_sc_payld[2274] = \<const0> ;
  assign m_sc_payld[2273] = \<const0> ;
  assign m_sc_payld[2272] = \<const0> ;
  assign m_sc_payld[2271] = \<const0> ;
  assign m_sc_payld[2270] = \<const0> ;
  assign m_sc_payld[2269] = \<const0> ;
  assign m_sc_payld[2268] = \<const0> ;
  assign m_sc_payld[2267] = \<const0> ;
  assign m_sc_payld[2266] = \<const0> ;
  assign m_sc_payld[2265] = \<const0> ;
  assign m_sc_payld[2264] = \<const0> ;
  assign m_sc_payld[2263] = \<const0> ;
  assign m_sc_payld[2262] = \<const0> ;
  assign m_sc_payld[2261] = \<const0> ;
  assign m_sc_payld[2260] = \<const0> ;
  assign m_sc_payld[2259] = \<const0> ;
  assign m_sc_payld[2258] = \<const0> ;
  assign m_sc_payld[2257] = \<const0> ;
  assign m_sc_payld[2256] = \<const0> ;
  assign m_sc_payld[2255] = \<const0> ;
  assign m_sc_payld[2254] = \<const0> ;
  assign m_sc_payld[2253] = \<const0> ;
  assign m_sc_payld[2252] = \<const0> ;
  assign m_sc_payld[2251] = \<const0> ;
  assign m_sc_payld[2250] = \<const0> ;
  assign m_sc_payld[2249] = \<const0> ;
  assign m_sc_payld[2248] = \<const0> ;
  assign m_sc_payld[2247] = \<const0> ;
  assign m_sc_payld[2246] = \<const0> ;
  assign m_sc_payld[2245] = \<const0> ;
  assign m_sc_payld[2244] = \<const0> ;
  assign m_sc_payld[2243] = \<const0> ;
  assign m_sc_payld[2242] = \<const0> ;
  assign m_sc_payld[2241] = \<const0> ;
  assign m_sc_payld[2240] = \<const0> ;
  assign m_sc_payld[2239] = \<const0> ;
  assign m_sc_payld[2238] = \<const0> ;
  assign m_sc_payld[2237] = \<const0> ;
  assign m_sc_payld[2236] = \<const0> ;
  assign m_sc_payld[2235] = \<const0> ;
  assign m_sc_payld[2234] = \<const0> ;
  assign m_sc_payld[2233] = \<const0> ;
  assign m_sc_payld[2232] = \<const0> ;
  assign m_sc_payld[2231] = \<const0> ;
  assign m_sc_payld[2230] = \<const0> ;
  assign m_sc_payld[2229] = \<const0> ;
  assign m_sc_payld[2228] = \<const0> ;
  assign m_sc_payld[2227] = \<const0> ;
  assign m_sc_payld[2226] = \<const0> ;
  assign m_sc_payld[2225] = \<const0> ;
  assign m_sc_payld[2224] = \<const0> ;
  assign m_sc_payld[2223] = \<const0> ;
  assign m_sc_payld[2222] = \<const0> ;
  assign m_sc_payld[2221] = \<const0> ;
  assign m_sc_payld[2220] = \<const0> ;
  assign m_sc_payld[2219] = \<const0> ;
  assign m_sc_payld[2218] = \<const0> ;
  assign m_sc_payld[2217] = \<const0> ;
  assign m_sc_payld[2216] = \<const0> ;
  assign m_sc_payld[2215] = \<const0> ;
  assign m_sc_payld[2214] = \<const0> ;
  assign m_sc_payld[2213] = \<const0> ;
  assign m_sc_payld[2212] = \<const0> ;
  assign m_sc_payld[2211] = \<const0> ;
  assign m_sc_payld[2210] = \<const0> ;
  assign m_sc_payld[2209] = \<const0> ;
  assign m_sc_payld[2208] = \<const0> ;
  assign m_sc_payld[2207] = \<const0> ;
  assign m_sc_payld[2206] = \<const0> ;
  assign m_sc_payld[2205] = \<const0> ;
  assign m_sc_payld[2204] = \<const0> ;
  assign m_sc_payld[2203] = \<const0> ;
  assign m_sc_payld[2202] = \<const0> ;
  assign m_sc_payld[2201] = \<const0> ;
  assign m_sc_payld[2200] = \<const0> ;
  assign m_sc_payld[2199] = \<const0> ;
  assign m_sc_payld[2198] = \<const0> ;
  assign m_sc_payld[2197] = \<const0> ;
  assign m_sc_payld[2196] = \<const0> ;
  assign m_sc_payld[2195] = \<const0> ;
  assign m_sc_payld[2194] = \<const0> ;
  assign m_sc_payld[2193] = \<const0> ;
  assign m_sc_payld[2192] = \<const0> ;
  assign m_sc_payld[2191] = \<const0> ;
  assign m_sc_payld[2190] = \<const0> ;
  assign m_sc_payld[2189] = \<const0> ;
  assign m_sc_payld[2188] = \<const0> ;
  assign m_sc_payld[2187] = \<const0> ;
  assign m_sc_payld[2186] = \<const0> ;
  assign m_sc_payld[2185] = \<const0> ;
  assign m_sc_payld[2184] = \<const0> ;
  assign m_sc_payld[2183] = \<const0> ;
  assign m_sc_payld[2182] = \<const0> ;
  assign m_sc_payld[2181] = \<const0> ;
  assign m_sc_payld[2180] = \<const0> ;
  assign m_sc_payld[2179] = \<const0> ;
  assign m_sc_payld[2178] = \<const0> ;
  assign m_sc_payld[2177] = \<const0> ;
  assign m_sc_payld[2176] = \<const0> ;
  assign m_sc_payld[2175] = \<const0> ;
  assign m_sc_payld[2174] = \<const0> ;
  assign m_sc_payld[2173] = \<const0> ;
  assign m_sc_payld[2172] = \<const0> ;
  assign m_sc_payld[2171] = \<const0> ;
  assign m_sc_payld[2170] = \<const0> ;
  assign m_sc_payld[2169] = \<const0> ;
  assign m_sc_payld[2168] = \<const0> ;
  assign m_sc_payld[2167] = \<const0> ;
  assign m_sc_payld[2166] = \<const0> ;
  assign m_sc_payld[2165] = \<const0> ;
  assign m_sc_payld[2164] = \<const0> ;
  assign m_sc_payld[2163] = \<const0> ;
  assign m_sc_payld[2162] = \<const0> ;
  assign m_sc_payld[2161] = \<const0> ;
  assign m_sc_payld[2160] = \<const0> ;
  assign m_sc_payld[2159] = \<const0> ;
  assign m_sc_payld[2158] = \<const0> ;
  assign m_sc_payld[2157] = \<const0> ;
  assign m_sc_payld[2156] = \<const0> ;
  assign m_sc_payld[2155] = \<const0> ;
  assign m_sc_payld[2154] = \<const0> ;
  assign m_sc_payld[2153] = \<const0> ;
  assign m_sc_payld[2152] = \<const0> ;
  assign m_sc_payld[2151] = \<const0> ;
  assign m_sc_payld[2150] = \<const0> ;
  assign m_sc_payld[2149] = \<const0> ;
  assign m_sc_payld[2148] = \<const0> ;
  assign m_sc_payld[2147] = \<const0> ;
  assign m_sc_payld[2146] = \<const0> ;
  assign m_sc_payld[2145] = \<const0> ;
  assign m_sc_payld[2144] = \<const0> ;
  assign m_sc_payld[2143] = \<const0> ;
  assign m_sc_payld[2142] = \<const0> ;
  assign m_sc_payld[2141] = \<const0> ;
  assign m_sc_payld[2140] = \<const0> ;
  assign m_sc_payld[2139] = \<const0> ;
  assign m_sc_payld[2138] = \<const0> ;
  assign m_sc_payld[2137] = \<const0> ;
  assign m_sc_payld[2136] = \<const0> ;
  assign m_sc_payld[2135] = \<const0> ;
  assign m_sc_payld[2134] = \<const0> ;
  assign m_sc_payld[2133] = \<const0> ;
  assign m_sc_payld[2132] = \<const0> ;
  assign m_sc_payld[2131] = \<const0> ;
  assign m_sc_payld[2130] = \<const0> ;
  assign m_sc_payld[2129] = \<const0> ;
  assign m_sc_payld[2128] = \<const0> ;
  assign m_sc_payld[2127] = \<const0> ;
  assign m_sc_payld[2126] = \<const0> ;
  assign m_sc_payld[2125] = \<const0> ;
  assign m_sc_payld[2124] = \<const0> ;
  assign m_sc_payld[2123] = \<const0> ;
  assign m_sc_payld[2122] = \<const0> ;
  assign m_sc_payld[2121] = \<const0> ;
  assign m_sc_payld[2120] = \<const0> ;
  assign m_sc_payld[2119] = \<const0> ;
  assign m_sc_payld[2118] = \<const0> ;
  assign m_sc_payld[2117] = \<const0> ;
  assign m_sc_payld[2116] = \<const0> ;
  assign m_sc_payld[2115] = \<const0> ;
  assign m_sc_payld[2114] = \<const0> ;
  assign m_sc_payld[2113] = \<const0> ;
  assign m_sc_payld[2112] = \<const0> ;
  assign m_sc_payld[2111] = \<const0> ;
  assign m_sc_payld[2110] = \<const0> ;
  assign m_sc_payld[2109] = \<const0> ;
  assign m_sc_payld[2108] = \<const0> ;
  assign m_sc_payld[2107] = \<const0> ;
  assign m_sc_payld[2106] = \<const0> ;
  assign m_sc_payld[2105] = \<const0> ;
  assign m_sc_payld[2104] = \<const0> ;
  assign m_sc_payld[2103] = \<const0> ;
  assign m_sc_payld[2102] = \<const0> ;
  assign m_sc_payld[2101] = \<const0> ;
  assign m_sc_payld[2100] = \<const0> ;
  assign m_sc_payld[2099] = \<const0> ;
  assign m_sc_payld[2098] = \<const0> ;
  assign m_sc_payld[2097] = \<const0> ;
  assign m_sc_payld[2096] = \<const0> ;
  assign m_sc_payld[2095] = \<const0> ;
  assign m_sc_payld[2094] = \<const0> ;
  assign m_sc_payld[2093] = \<const0> ;
  assign m_sc_payld[2092] = \<const0> ;
  assign m_sc_payld[2091] = \<const0> ;
  assign m_sc_payld[2090] = \<const0> ;
  assign m_sc_payld[2089] = \<const0> ;
  assign m_sc_payld[2088] = \<const0> ;
  assign m_sc_payld[2087] = \<const0> ;
  assign m_sc_payld[2086] = \<const0> ;
  assign m_sc_payld[2085] = \<const0> ;
  assign m_sc_payld[2084] = \<const0> ;
  assign m_sc_payld[2083] = \<const0> ;
  assign m_sc_payld[2082] = \<const0> ;
  assign m_sc_payld[2081] = \<const0> ;
  assign m_sc_payld[2080] = \<const0> ;
  assign m_sc_payld[2079] = \<const0> ;
  assign m_sc_payld[2078] = \<const0> ;
  assign m_sc_payld[2077] = \<const0> ;
  assign m_sc_payld[2076] = \<const0> ;
  assign m_sc_payld[2075] = \<const0> ;
  assign m_sc_payld[2074] = \<const0> ;
  assign m_sc_payld[2073] = \<const0> ;
  assign m_sc_payld[2072] = \<const0> ;
  assign m_sc_payld[2071] = \<const0> ;
  assign m_sc_payld[2070] = \<const0> ;
  assign m_sc_payld[2069] = \<const0> ;
  assign m_sc_payld[2068] = \<const0> ;
  assign m_sc_payld[2067] = \<const0> ;
  assign m_sc_payld[2066] = \<const0> ;
  assign m_sc_payld[2065] = \<const0> ;
  assign m_sc_payld[2064] = \<const0> ;
  assign m_sc_payld[2063] = \<const0> ;
  assign m_sc_payld[2062] = \<const0> ;
  assign m_sc_payld[2061] = \<const0> ;
  assign m_sc_payld[2060] = \<const0> ;
  assign m_sc_payld[2059] = \<const0> ;
  assign m_sc_payld[2058] = \<const0> ;
  assign m_sc_payld[2057] = \<const0> ;
  assign m_sc_payld[2056] = \<const0> ;
  assign m_sc_payld[2055] = \<const0> ;
  assign m_sc_payld[2054] = \<const0> ;
  assign m_sc_payld[2053] = \<const0> ;
  assign m_sc_payld[2052] = \<const0> ;
  assign m_sc_payld[2051] = \<const0> ;
  assign m_sc_payld[2050] = \<const0> ;
  assign m_sc_payld[2049] = \<const0> ;
  assign m_sc_payld[2048] = \<const0> ;
  assign m_sc_payld[2047] = \<const0> ;
  assign m_sc_payld[2046] = \<const0> ;
  assign m_sc_payld[2045] = \<const0> ;
  assign m_sc_payld[2044] = \<const0> ;
  assign m_sc_payld[2043] = \<const0> ;
  assign m_sc_payld[2042] = \<const0> ;
  assign m_sc_payld[2041] = \<const0> ;
  assign m_sc_payld[2040] = \<const0> ;
  assign m_sc_payld[2039] = \<const0> ;
  assign m_sc_payld[2038] = \<const0> ;
  assign m_sc_payld[2037] = \<const0> ;
  assign m_sc_payld[2036] = \<const0> ;
  assign m_sc_payld[2035] = \<const0> ;
  assign m_sc_payld[2034] = \<const0> ;
  assign m_sc_payld[2033] = \<const0> ;
  assign m_sc_payld[2032] = \<const0> ;
  assign m_sc_payld[2031] = \<const0> ;
  assign m_sc_payld[2030] = \<const0> ;
  assign m_sc_payld[2029] = \<const0> ;
  assign m_sc_payld[2028] = \<const0> ;
  assign m_sc_payld[2027] = \<const0> ;
  assign m_sc_payld[2026] = \<const0> ;
  assign m_sc_payld[2025] = \<const0> ;
  assign m_sc_payld[2024] = \<const0> ;
  assign m_sc_payld[2023] = \<const0> ;
  assign m_sc_payld[2022] = \<const0> ;
  assign m_sc_payld[2021] = \<const0> ;
  assign m_sc_payld[2020] = \<const0> ;
  assign m_sc_payld[2019] = \<const0> ;
  assign m_sc_payld[2018] = \<const0> ;
  assign m_sc_payld[2017] = \<const0> ;
  assign m_sc_payld[2016] = \<const0> ;
  assign m_sc_payld[2015] = \<const0> ;
  assign m_sc_payld[2014] = \<const0> ;
  assign m_sc_payld[2013] = \<const0> ;
  assign m_sc_payld[2012] = \<const0> ;
  assign m_sc_payld[2011] = \<const0> ;
  assign m_sc_payld[2010] = \<const0> ;
  assign m_sc_payld[2009] = \<const0> ;
  assign m_sc_payld[2008] = \<const0> ;
  assign m_sc_payld[2007] = \<const0> ;
  assign m_sc_payld[2006] = \<const0> ;
  assign m_sc_payld[2005] = \<const0> ;
  assign m_sc_payld[2004] = \<const0> ;
  assign m_sc_payld[2003] = \<const0> ;
  assign m_sc_payld[2002] = \<const0> ;
  assign m_sc_payld[2001] = \<const0> ;
  assign m_sc_payld[2000] = \<const0> ;
  assign m_sc_payld[1999] = \<const0> ;
  assign m_sc_payld[1998] = \<const0> ;
  assign m_sc_payld[1997] = \<const0> ;
  assign m_sc_payld[1996] = \<const0> ;
  assign m_sc_payld[1995] = \<const0> ;
  assign m_sc_payld[1994] = \<const0> ;
  assign m_sc_payld[1993] = \<const0> ;
  assign m_sc_payld[1992] = \<const0> ;
  assign m_sc_payld[1991] = \<const0> ;
  assign m_sc_payld[1990] = \<const0> ;
  assign m_sc_payld[1989] = \<const0> ;
  assign m_sc_payld[1988] = \<const0> ;
  assign m_sc_payld[1987] = \<const0> ;
  assign m_sc_payld[1986] = \<const0> ;
  assign m_sc_payld[1985] = \<const0> ;
  assign m_sc_payld[1984] = \<const0> ;
  assign m_sc_payld[1983] = \<const0> ;
  assign m_sc_payld[1982] = \<const0> ;
  assign m_sc_payld[1981] = \<const0> ;
  assign m_sc_payld[1980] = \<const0> ;
  assign m_sc_payld[1979] = \<const0> ;
  assign m_sc_payld[1978] = \<const0> ;
  assign m_sc_payld[1977] = \<const0> ;
  assign m_sc_payld[1976] = \<const0> ;
  assign m_sc_payld[1975] = \<const0> ;
  assign m_sc_payld[1974] = \<const0> ;
  assign m_sc_payld[1973] = \<const0> ;
  assign m_sc_payld[1972] = \<const0> ;
  assign m_sc_payld[1971] = \<const0> ;
  assign m_sc_payld[1970] = \<const0> ;
  assign m_sc_payld[1969] = \<const0> ;
  assign m_sc_payld[1968] = \<const0> ;
  assign m_sc_payld[1967] = \<const0> ;
  assign m_sc_payld[1966] = \<const0> ;
  assign m_sc_payld[1965] = \<const0> ;
  assign m_sc_payld[1964] = \<const0> ;
  assign m_sc_payld[1963] = \<const0> ;
  assign m_sc_payld[1962] = \<const0> ;
  assign m_sc_payld[1961] = \<const0> ;
  assign m_sc_payld[1960] = \<const0> ;
  assign m_sc_payld[1959] = \<const0> ;
  assign m_sc_payld[1958] = \<const0> ;
  assign m_sc_payld[1957] = \<const0> ;
  assign m_sc_payld[1956] = \<const0> ;
  assign m_sc_payld[1955] = \<const0> ;
  assign m_sc_payld[1954] = \<const0> ;
  assign m_sc_payld[1953] = \<const0> ;
  assign m_sc_payld[1952] = \<const0> ;
  assign m_sc_payld[1951] = \<const0> ;
  assign m_sc_payld[1950] = \<const0> ;
  assign m_sc_payld[1949] = \<const0> ;
  assign m_sc_payld[1948] = \<const0> ;
  assign m_sc_payld[1947] = \<const0> ;
  assign m_sc_payld[1946] = \<const0> ;
  assign m_sc_payld[1945] = \<const0> ;
  assign m_sc_payld[1944] = \<const0> ;
  assign m_sc_payld[1943] = \<const0> ;
  assign m_sc_payld[1942] = \<const0> ;
  assign m_sc_payld[1941] = \<const0> ;
  assign m_sc_payld[1940] = \<const0> ;
  assign m_sc_payld[1939] = \<const0> ;
  assign m_sc_payld[1938] = \<const0> ;
  assign m_sc_payld[1937] = \<const0> ;
  assign m_sc_payld[1936] = \<const0> ;
  assign m_sc_payld[1935] = \<const0> ;
  assign m_sc_payld[1934] = \<const0> ;
  assign m_sc_payld[1933] = \<const0> ;
  assign m_sc_payld[1932] = \<const0> ;
  assign m_sc_payld[1931] = \<const0> ;
  assign m_sc_payld[1930] = \<const0> ;
  assign m_sc_payld[1929] = \<const0> ;
  assign m_sc_payld[1928] = \<const0> ;
  assign m_sc_payld[1927] = \<const0> ;
  assign m_sc_payld[1926] = \<const0> ;
  assign m_sc_payld[1925] = \<const0> ;
  assign m_sc_payld[1924] = \<const0> ;
  assign m_sc_payld[1923] = \<const0> ;
  assign m_sc_payld[1922] = \<const0> ;
  assign m_sc_payld[1921] = \<const0> ;
  assign m_sc_payld[1920] = \<const0> ;
  assign m_sc_payld[1919] = \<const0> ;
  assign m_sc_payld[1918] = \<const0> ;
  assign m_sc_payld[1917] = \<const0> ;
  assign m_sc_payld[1916] = \<const0> ;
  assign m_sc_payld[1915] = \<const0> ;
  assign m_sc_payld[1914] = \<const0> ;
  assign m_sc_payld[1913] = \<const0> ;
  assign m_sc_payld[1912] = \<const0> ;
  assign m_sc_payld[1911] = \<const0> ;
  assign m_sc_payld[1910] = \<const0> ;
  assign m_sc_payld[1909] = \<const0> ;
  assign m_sc_payld[1908] = \<const0> ;
  assign m_sc_payld[1907] = \<const0> ;
  assign m_sc_payld[1906] = \<const0> ;
  assign m_sc_payld[1905] = \<const0> ;
  assign m_sc_payld[1904] = \<const0> ;
  assign m_sc_payld[1903] = \<const0> ;
  assign m_sc_payld[1902] = \<const0> ;
  assign m_sc_payld[1901] = \<const0> ;
  assign m_sc_payld[1900] = \<const0> ;
  assign m_sc_payld[1899] = \<const0> ;
  assign m_sc_payld[1898] = \<const0> ;
  assign m_sc_payld[1897] = \<const0> ;
  assign m_sc_payld[1896] = \<const0> ;
  assign m_sc_payld[1895] = \<const0> ;
  assign m_sc_payld[1894] = \<const0> ;
  assign m_sc_payld[1893] = \<const0> ;
  assign m_sc_payld[1892] = \<const0> ;
  assign m_sc_payld[1891] = \<const0> ;
  assign m_sc_payld[1890] = \<const0> ;
  assign m_sc_payld[1889] = \<const0> ;
  assign m_sc_payld[1888] = \<const0> ;
  assign m_sc_payld[1887] = \<const0> ;
  assign m_sc_payld[1886] = \<const0> ;
  assign m_sc_payld[1885] = \<const0> ;
  assign m_sc_payld[1884] = \<const0> ;
  assign m_sc_payld[1883] = \<const0> ;
  assign m_sc_payld[1882] = \<const0> ;
  assign m_sc_payld[1881] = \<const0> ;
  assign m_sc_payld[1880] = \<const0> ;
  assign m_sc_payld[1879] = \<const0> ;
  assign m_sc_payld[1878] = \<const0> ;
  assign m_sc_payld[1877] = \<const0> ;
  assign m_sc_payld[1876] = \<const0> ;
  assign m_sc_payld[1875] = \<const0> ;
  assign m_sc_payld[1874] = \<const0> ;
  assign m_sc_payld[1873] = \<const0> ;
  assign m_sc_payld[1872] = \<const0> ;
  assign m_sc_payld[1871] = \<const0> ;
  assign m_sc_payld[1870] = \<const0> ;
  assign m_sc_payld[1869] = \<const0> ;
  assign m_sc_payld[1868] = \<const0> ;
  assign m_sc_payld[1867] = \<const0> ;
  assign m_sc_payld[1866] = \<const0> ;
  assign m_sc_payld[1865] = \<const0> ;
  assign m_sc_payld[1864] = \<const0> ;
  assign m_sc_payld[1863] = \<const0> ;
  assign m_sc_payld[1862] = \<const0> ;
  assign m_sc_payld[1861] = \<const0> ;
  assign m_sc_payld[1860] = \<const0> ;
  assign m_sc_payld[1859] = \<const0> ;
  assign m_sc_payld[1858] = \<const0> ;
  assign m_sc_payld[1857] = \<const0> ;
  assign m_sc_payld[1856] = \<const0> ;
  assign m_sc_payld[1855] = \<const0> ;
  assign m_sc_payld[1854] = \<const0> ;
  assign m_sc_payld[1853] = \<const0> ;
  assign m_sc_payld[1852] = \<const0> ;
  assign m_sc_payld[1851] = \<const0> ;
  assign m_sc_payld[1850] = \<const0> ;
  assign m_sc_payld[1849] = \<const0> ;
  assign m_sc_payld[1848] = \<const0> ;
  assign m_sc_payld[1847] = \<const0> ;
  assign m_sc_payld[1846] = \<const0> ;
  assign m_sc_payld[1845] = \<const0> ;
  assign m_sc_payld[1844] = \<const0> ;
  assign m_sc_payld[1843] = \<const0> ;
  assign m_sc_payld[1842] = \<const0> ;
  assign m_sc_payld[1841] = \<const0> ;
  assign m_sc_payld[1840] = \<const0> ;
  assign m_sc_payld[1839] = \<const0> ;
  assign m_sc_payld[1838] = \<const0> ;
  assign m_sc_payld[1837] = \<const0> ;
  assign m_sc_payld[1836] = \<const0> ;
  assign m_sc_payld[1835] = \<const0> ;
  assign m_sc_payld[1834] = \<const0> ;
  assign m_sc_payld[1833] = \<const0> ;
  assign m_sc_payld[1832] = \<const0> ;
  assign m_sc_payld[1831] = \<const0> ;
  assign m_sc_payld[1830] = \<const0> ;
  assign m_sc_payld[1829] = \<const0> ;
  assign m_sc_payld[1828] = \<const0> ;
  assign m_sc_payld[1827] = \<const0> ;
  assign m_sc_payld[1826] = \<const0> ;
  assign m_sc_payld[1825] = \<const0> ;
  assign m_sc_payld[1824] = \<const0> ;
  assign m_sc_payld[1823] = \<const0> ;
  assign m_sc_payld[1822] = \<const0> ;
  assign m_sc_payld[1821] = \<const0> ;
  assign m_sc_payld[1820] = \<const0> ;
  assign m_sc_payld[1819] = \<const0> ;
  assign m_sc_payld[1818] = \<const0> ;
  assign m_sc_payld[1817] = \<const0> ;
  assign m_sc_payld[1816] = \<const0> ;
  assign m_sc_payld[1815] = \<const0> ;
  assign m_sc_payld[1814] = \<const0> ;
  assign m_sc_payld[1813] = \<const0> ;
  assign m_sc_payld[1812] = \<const0> ;
  assign m_sc_payld[1811] = \<const0> ;
  assign m_sc_payld[1810] = \<const0> ;
  assign m_sc_payld[1809] = \<const0> ;
  assign m_sc_payld[1808] = \<const0> ;
  assign m_sc_payld[1807] = \<const0> ;
  assign m_sc_payld[1806] = \<const0> ;
  assign m_sc_payld[1805] = \<const0> ;
  assign m_sc_payld[1804] = \<const0> ;
  assign m_sc_payld[1803] = \<const0> ;
  assign m_sc_payld[1802] = \<const0> ;
  assign m_sc_payld[1801] = \<const0> ;
  assign m_sc_payld[1800] = \<const0> ;
  assign m_sc_payld[1799] = \<const0> ;
  assign m_sc_payld[1798] = \<const0> ;
  assign m_sc_payld[1797] = \<const0> ;
  assign m_sc_payld[1796] = \<const0> ;
  assign m_sc_payld[1795] = \<const0> ;
  assign m_sc_payld[1794] = \<const0> ;
  assign m_sc_payld[1793] = \<const0> ;
  assign m_sc_payld[1792] = \<const0> ;
  assign m_sc_payld[1791] = \<const0> ;
  assign m_sc_payld[1790] = \<const0> ;
  assign m_sc_payld[1789] = \<const0> ;
  assign m_sc_payld[1788] = \<const0> ;
  assign m_sc_payld[1787] = \<const0> ;
  assign m_sc_payld[1786] = \<const0> ;
  assign m_sc_payld[1785] = \<const0> ;
  assign m_sc_payld[1784] = \<const0> ;
  assign m_sc_payld[1783] = \<const0> ;
  assign m_sc_payld[1782] = \<const0> ;
  assign m_sc_payld[1781] = \<const0> ;
  assign m_sc_payld[1780] = \<const0> ;
  assign m_sc_payld[1779] = \<const0> ;
  assign m_sc_payld[1778] = \<const0> ;
  assign m_sc_payld[1777] = \<const0> ;
  assign m_sc_payld[1776] = \<const0> ;
  assign m_sc_payld[1775] = \<const0> ;
  assign m_sc_payld[1774] = \<const0> ;
  assign m_sc_payld[1773] = \<const0> ;
  assign m_sc_payld[1772] = \<const0> ;
  assign m_sc_payld[1771] = \<const0> ;
  assign m_sc_payld[1770] = \<const0> ;
  assign m_sc_payld[1769] = \<const0> ;
  assign m_sc_payld[1768] = \<const0> ;
  assign m_sc_payld[1767] = \<const0> ;
  assign m_sc_payld[1766] = \<const0> ;
  assign m_sc_payld[1765] = \<const0> ;
  assign m_sc_payld[1764] = \<const0> ;
  assign m_sc_payld[1763] = \<const0> ;
  assign m_sc_payld[1762] = \<const0> ;
  assign m_sc_payld[1761] = \<const0> ;
  assign m_sc_payld[1760] = \<const0> ;
  assign m_sc_payld[1759] = \<const0> ;
  assign m_sc_payld[1758] = \<const0> ;
  assign m_sc_payld[1757] = \<const0> ;
  assign m_sc_payld[1756] = \<const0> ;
  assign m_sc_payld[1755] = \<const0> ;
  assign m_sc_payld[1754] = \<const0> ;
  assign m_sc_payld[1753] = \<const0> ;
  assign m_sc_payld[1752] = \<const0> ;
  assign m_sc_payld[1751] = \<const0> ;
  assign m_sc_payld[1750] = \<const0> ;
  assign m_sc_payld[1749] = \<const0> ;
  assign m_sc_payld[1748] = \<const0> ;
  assign m_sc_payld[1747] = \<const0> ;
  assign m_sc_payld[1746] = \<const0> ;
  assign m_sc_payld[1745] = \<const0> ;
  assign m_sc_payld[1744] = \<const0> ;
  assign m_sc_payld[1743] = \<const0> ;
  assign m_sc_payld[1742] = \<const0> ;
  assign m_sc_payld[1741] = \<const0> ;
  assign m_sc_payld[1740] = \<const0> ;
  assign m_sc_payld[1739] = \<const0> ;
  assign m_sc_payld[1738] = \<const0> ;
  assign m_sc_payld[1737] = \<const0> ;
  assign m_sc_payld[1736] = \<const0> ;
  assign m_sc_payld[1735] = \<const0> ;
  assign m_sc_payld[1734] = \<const0> ;
  assign m_sc_payld[1733] = \<const0> ;
  assign m_sc_payld[1732] = \<const0> ;
  assign m_sc_payld[1731] = \<const0> ;
  assign m_sc_payld[1730] = \<const0> ;
  assign m_sc_payld[1729] = \<const0> ;
  assign m_sc_payld[1728] = \<const0> ;
  assign m_sc_payld[1727] = \<const0> ;
  assign m_sc_payld[1726] = \<const0> ;
  assign m_sc_payld[1725] = \<const0> ;
  assign m_sc_payld[1724] = \<const0> ;
  assign m_sc_payld[1723] = \<const0> ;
  assign m_sc_payld[1722] = \<const0> ;
  assign m_sc_payld[1721] = \<const0> ;
  assign m_sc_payld[1720] = \<const0> ;
  assign m_sc_payld[1719] = \<const0> ;
  assign m_sc_payld[1718] = \<const0> ;
  assign m_sc_payld[1717] = \<const0> ;
  assign m_sc_payld[1716] = \<const0> ;
  assign m_sc_payld[1715] = \<const0> ;
  assign m_sc_payld[1714] = \<const0> ;
  assign m_sc_payld[1713] = \<const0> ;
  assign m_sc_payld[1712] = \<const0> ;
  assign m_sc_payld[1711] = \<const0> ;
  assign m_sc_payld[1710] = \<const0> ;
  assign m_sc_payld[1709] = \<const0> ;
  assign m_sc_payld[1708] = \<const0> ;
  assign m_sc_payld[1707] = \<const0> ;
  assign m_sc_payld[1706] = \<const0> ;
  assign m_sc_payld[1705] = \<const0> ;
  assign m_sc_payld[1704] = \<const0> ;
  assign m_sc_payld[1703] = \<const0> ;
  assign m_sc_payld[1702] = \<const0> ;
  assign m_sc_payld[1701] = \<const0> ;
  assign m_sc_payld[1700] = \<const0> ;
  assign m_sc_payld[1699] = \<const0> ;
  assign m_sc_payld[1698] = \<const0> ;
  assign m_sc_payld[1697] = \<const0> ;
  assign m_sc_payld[1696] = \<const0> ;
  assign m_sc_payld[1695] = \<const0> ;
  assign m_sc_payld[1694] = \<const0> ;
  assign m_sc_payld[1693] = \<const0> ;
  assign m_sc_payld[1692] = \<const0> ;
  assign m_sc_payld[1691] = \<const0> ;
  assign m_sc_payld[1690] = \<const0> ;
  assign m_sc_payld[1689] = \<const0> ;
  assign m_sc_payld[1688] = \<const0> ;
  assign m_sc_payld[1687] = \<const0> ;
  assign m_sc_payld[1686] = \<const0> ;
  assign m_sc_payld[1685] = \<const0> ;
  assign m_sc_payld[1684] = \<const0> ;
  assign m_sc_payld[1683] = \<const0> ;
  assign m_sc_payld[1682] = \<const0> ;
  assign m_sc_payld[1681] = \<const0> ;
  assign m_sc_payld[1680] = \<const0> ;
  assign m_sc_payld[1679] = \<const0> ;
  assign m_sc_payld[1678] = \<const0> ;
  assign m_sc_payld[1677] = \<const0> ;
  assign m_sc_payld[1676] = \<const0> ;
  assign m_sc_payld[1675] = \<const0> ;
  assign m_sc_payld[1674] = \<const0> ;
  assign m_sc_payld[1673] = \<const0> ;
  assign m_sc_payld[1672] = \<const0> ;
  assign m_sc_payld[1671] = \<const0> ;
  assign m_sc_payld[1670] = \<const0> ;
  assign m_sc_payld[1669] = \<const0> ;
  assign m_sc_payld[1668] = \<const0> ;
  assign m_sc_payld[1667] = \<const0> ;
  assign m_sc_payld[1666] = \<const0> ;
  assign m_sc_payld[1665] = \<const0> ;
  assign m_sc_payld[1664] = \<const0> ;
  assign m_sc_payld[1663] = \<const0> ;
  assign m_sc_payld[1662] = \<const0> ;
  assign m_sc_payld[1661] = \<const0> ;
  assign m_sc_payld[1660] = \<const0> ;
  assign m_sc_payld[1659] = \<const0> ;
  assign m_sc_payld[1658] = \<const0> ;
  assign m_sc_payld[1657] = \<const0> ;
  assign m_sc_payld[1656] = \<const0> ;
  assign m_sc_payld[1655] = \<const0> ;
  assign m_sc_payld[1654] = \<const0> ;
  assign m_sc_payld[1653] = \<const0> ;
  assign m_sc_payld[1652] = \<const0> ;
  assign m_sc_payld[1651] = \<const0> ;
  assign m_sc_payld[1650] = \<const0> ;
  assign m_sc_payld[1649] = \<const0> ;
  assign m_sc_payld[1648] = \<const0> ;
  assign m_sc_payld[1647] = \<const0> ;
  assign m_sc_payld[1646] = \<const0> ;
  assign m_sc_payld[1645] = \<const0> ;
  assign m_sc_payld[1644] = \<const0> ;
  assign m_sc_payld[1643] = \<const0> ;
  assign m_sc_payld[1642] = \<const0> ;
  assign m_sc_payld[1641] = \<const0> ;
  assign m_sc_payld[1640] = \<const0> ;
  assign m_sc_payld[1639] = \<const0> ;
  assign m_sc_payld[1638] = \<const0> ;
  assign m_sc_payld[1637] = \<const0> ;
  assign m_sc_payld[1636] = \<const0> ;
  assign m_sc_payld[1635] = \<const0> ;
  assign m_sc_payld[1634] = \<const0> ;
  assign m_sc_payld[1633] = \<const0> ;
  assign m_sc_payld[1632] = \<const0> ;
  assign m_sc_payld[1631] = \<const0> ;
  assign m_sc_payld[1630] = \<const0> ;
  assign m_sc_payld[1629] = \<const0> ;
  assign m_sc_payld[1628] = \<const0> ;
  assign m_sc_payld[1627] = \<const0> ;
  assign m_sc_payld[1626] = \<const0> ;
  assign m_sc_payld[1625] = \<const0> ;
  assign m_sc_payld[1624] = \<const0> ;
  assign m_sc_payld[1623] = \<const0> ;
  assign m_sc_payld[1622] = \<const0> ;
  assign m_sc_payld[1621] = \<const0> ;
  assign m_sc_payld[1620] = \<const0> ;
  assign m_sc_payld[1619] = \<const0> ;
  assign m_sc_payld[1618] = \<const0> ;
  assign m_sc_payld[1617] = \<const0> ;
  assign m_sc_payld[1616] = \<const0> ;
  assign m_sc_payld[1615] = \<const0> ;
  assign m_sc_payld[1614] = \<const0> ;
  assign m_sc_payld[1613] = \<const0> ;
  assign m_sc_payld[1612] = \<const0> ;
  assign m_sc_payld[1611] = \<const0> ;
  assign m_sc_payld[1610] = \<const0> ;
  assign m_sc_payld[1609] = \<const0> ;
  assign m_sc_payld[1608] = \<const0> ;
  assign m_sc_payld[1607] = \<const0> ;
  assign m_sc_payld[1606] = \<const0> ;
  assign m_sc_payld[1605] = \<const0> ;
  assign m_sc_payld[1604] = \<const0> ;
  assign m_sc_payld[1603] = \<const0> ;
  assign m_sc_payld[1602] = \<const0> ;
  assign m_sc_payld[1601] = \<const0> ;
  assign m_sc_payld[1600] = \<const0> ;
  assign m_sc_payld[1599] = \<const0> ;
  assign m_sc_payld[1598] = \<const0> ;
  assign m_sc_payld[1597] = \<const0> ;
  assign m_sc_payld[1596] = \<const0> ;
  assign m_sc_payld[1595] = \<const0> ;
  assign m_sc_payld[1594] = \<const0> ;
  assign m_sc_payld[1593] = \<const0> ;
  assign m_sc_payld[1592] = \<const0> ;
  assign m_sc_payld[1591] = \<const0> ;
  assign m_sc_payld[1590] = \<const0> ;
  assign m_sc_payld[1589] = \<const0> ;
  assign m_sc_payld[1588] = \<const0> ;
  assign m_sc_payld[1587] = \<const0> ;
  assign m_sc_payld[1586] = \<const0> ;
  assign m_sc_payld[1585] = \<const0> ;
  assign m_sc_payld[1584] = \<const0> ;
  assign m_sc_payld[1583] = \<const0> ;
  assign m_sc_payld[1582] = \<const0> ;
  assign m_sc_payld[1581] = \<const0> ;
  assign m_sc_payld[1580] = \<const0> ;
  assign m_sc_payld[1579] = \<const0> ;
  assign m_sc_payld[1578] = \<const0> ;
  assign m_sc_payld[1577] = \<const0> ;
  assign m_sc_payld[1576] = \<const0> ;
  assign m_sc_payld[1575] = \<const0> ;
  assign m_sc_payld[1574] = \<const0> ;
  assign m_sc_payld[1573] = \<const0> ;
  assign m_sc_payld[1572] = \<const0> ;
  assign m_sc_payld[1571] = \<const0> ;
  assign m_sc_payld[1570] = \<const0> ;
  assign m_sc_payld[1569] = \<const0> ;
  assign m_sc_payld[1568] = \<const0> ;
  assign m_sc_payld[1567] = \<const0> ;
  assign m_sc_payld[1566] = \<const0> ;
  assign m_sc_payld[1565] = \<const0> ;
  assign m_sc_payld[1564] = \<const0> ;
  assign m_sc_payld[1563] = \<const0> ;
  assign m_sc_payld[1562] = \<const0> ;
  assign m_sc_payld[1561] = \<const0> ;
  assign m_sc_payld[1560] = \<const0> ;
  assign m_sc_payld[1559] = \<const0> ;
  assign m_sc_payld[1558] = \<const0> ;
  assign m_sc_payld[1557] = \<const0> ;
  assign m_sc_payld[1556] = \<const0> ;
  assign m_sc_payld[1555] = \<const0> ;
  assign m_sc_payld[1554] = \<const0> ;
  assign m_sc_payld[1553] = \<const0> ;
  assign m_sc_payld[1552] = \<const0> ;
  assign m_sc_payld[1551] = \<const0> ;
  assign m_sc_payld[1550] = \<const0> ;
  assign m_sc_payld[1549] = \<const0> ;
  assign m_sc_payld[1548] = \<const0> ;
  assign m_sc_payld[1547] = \<const0> ;
  assign m_sc_payld[1546] = \<const0> ;
  assign m_sc_payld[1545] = \<const0> ;
  assign m_sc_payld[1544] = \<const0> ;
  assign m_sc_payld[1543] = \<const0> ;
  assign m_sc_payld[1542] = \<const0> ;
  assign m_sc_payld[1541] = \<const0> ;
  assign m_sc_payld[1540] = \<const0> ;
  assign m_sc_payld[1539] = \<const0> ;
  assign m_sc_payld[1538] = \<const0> ;
  assign m_sc_payld[1537] = \<const0> ;
  assign m_sc_payld[1536] = \<const0> ;
  assign m_sc_payld[1535] = \<const0> ;
  assign m_sc_payld[1534] = \<const0> ;
  assign m_sc_payld[1533] = \<const0> ;
  assign m_sc_payld[1532] = \<const0> ;
  assign m_sc_payld[1531] = \<const0> ;
  assign m_sc_payld[1530] = \<const0> ;
  assign m_sc_payld[1529] = \<const0> ;
  assign m_sc_payld[1528] = \<const0> ;
  assign m_sc_payld[1527] = \<const0> ;
  assign m_sc_payld[1526] = \<const0> ;
  assign m_sc_payld[1525] = \<const0> ;
  assign m_sc_payld[1524] = \<const0> ;
  assign m_sc_payld[1523] = \<const0> ;
  assign m_sc_payld[1522] = \<const0> ;
  assign m_sc_payld[1521] = \<const0> ;
  assign m_sc_payld[1520] = \<const0> ;
  assign m_sc_payld[1519] = \<const0> ;
  assign m_sc_payld[1518] = \<const0> ;
  assign m_sc_payld[1517] = \<const0> ;
  assign m_sc_payld[1516] = \<const0> ;
  assign m_sc_payld[1515] = \<const0> ;
  assign m_sc_payld[1514] = \<const0> ;
  assign m_sc_payld[1513] = \<const0> ;
  assign m_sc_payld[1512] = \<const0> ;
  assign m_sc_payld[1511] = \<const0> ;
  assign m_sc_payld[1510] = \<const0> ;
  assign m_sc_payld[1509] = \<const0> ;
  assign m_sc_payld[1508] = \<const0> ;
  assign m_sc_payld[1507] = \<const0> ;
  assign m_sc_payld[1506] = \<const0> ;
  assign m_sc_payld[1505] = \<const0> ;
  assign m_sc_payld[1504] = \<const0> ;
  assign m_sc_payld[1503] = \<const0> ;
  assign m_sc_payld[1502] = \<const0> ;
  assign m_sc_payld[1501] = \<const0> ;
  assign m_sc_payld[1500] = \<const0> ;
  assign m_sc_payld[1499] = \<const0> ;
  assign m_sc_payld[1498] = \<const0> ;
  assign m_sc_payld[1497] = \<const0> ;
  assign m_sc_payld[1496] = \<const0> ;
  assign m_sc_payld[1495] = \<const0> ;
  assign m_sc_payld[1494] = \<const0> ;
  assign m_sc_payld[1493] = \<const0> ;
  assign m_sc_payld[1492] = \<const0> ;
  assign m_sc_payld[1491] = \<const0> ;
  assign m_sc_payld[1490] = \<const0> ;
  assign m_sc_payld[1489] = \<const0> ;
  assign m_sc_payld[1488] = \<const0> ;
  assign m_sc_payld[1487] = \<const0> ;
  assign m_sc_payld[1486] = \<const0> ;
  assign m_sc_payld[1485] = \<const0> ;
  assign m_sc_payld[1484] = \<const0> ;
  assign m_sc_payld[1483] = \<const0> ;
  assign m_sc_payld[1482] = \<const0> ;
  assign m_sc_payld[1481] = \<const0> ;
  assign m_sc_payld[1480] = \<const0> ;
  assign m_sc_payld[1479] = \<const0> ;
  assign m_sc_payld[1478] = \<const0> ;
  assign m_sc_payld[1477] = \<const0> ;
  assign m_sc_payld[1476] = \<const0> ;
  assign m_sc_payld[1475] = \<const0> ;
  assign m_sc_payld[1474] = \<const0> ;
  assign m_sc_payld[1473] = \<const0> ;
  assign m_sc_payld[1472] = \<const0> ;
  assign m_sc_payld[1471] = \<const0> ;
  assign m_sc_payld[1470] = \<const0> ;
  assign m_sc_payld[1469] = \<const0> ;
  assign m_sc_payld[1468] = \<const0> ;
  assign m_sc_payld[1467] = \<const0> ;
  assign m_sc_payld[1466] = \<const0> ;
  assign m_sc_payld[1465] = \<const0> ;
  assign m_sc_payld[1464] = \<const0> ;
  assign m_sc_payld[1463] = \<const0> ;
  assign m_sc_payld[1462] = \<const0> ;
  assign m_sc_payld[1461] = \<const0> ;
  assign m_sc_payld[1460] = \<const0> ;
  assign m_sc_payld[1459] = \<const0> ;
  assign m_sc_payld[1458] = \<const0> ;
  assign m_sc_payld[1457] = \<const0> ;
  assign m_sc_payld[1456] = \<const0> ;
  assign m_sc_payld[1455] = \<const0> ;
  assign m_sc_payld[1454] = \<const0> ;
  assign m_sc_payld[1453] = \<const0> ;
  assign m_sc_payld[1452] = \<const0> ;
  assign m_sc_payld[1451] = \<const0> ;
  assign m_sc_payld[1450] = \<const0> ;
  assign m_sc_payld[1449] = \<const0> ;
  assign m_sc_payld[1448] = \<const0> ;
  assign m_sc_payld[1447] = \<const0> ;
  assign m_sc_payld[1446] = \<const0> ;
  assign m_sc_payld[1445] = \<const0> ;
  assign m_sc_payld[1444] = \<const0> ;
  assign m_sc_payld[1443] = \<const0> ;
  assign m_sc_payld[1442] = \<const0> ;
  assign m_sc_payld[1441] = \<const0> ;
  assign m_sc_payld[1440] = \<const0> ;
  assign m_sc_payld[1439] = \<const0> ;
  assign m_sc_payld[1438] = \<const0> ;
  assign m_sc_payld[1437] = \<const0> ;
  assign m_sc_payld[1436] = \<const0> ;
  assign m_sc_payld[1435] = \<const0> ;
  assign m_sc_payld[1434] = \<const0> ;
  assign m_sc_payld[1433] = \<const0> ;
  assign m_sc_payld[1432] = \<const0> ;
  assign m_sc_payld[1431] = \<const0> ;
  assign m_sc_payld[1430] = \<const0> ;
  assign m_sc_payld[1429] = \<const0> ;
  assign m_sc_payld[1428] = \<const0> ;
  assign m_sc_payld[1427] = \<const0> ;
  assign m_sc_payld[1426] = \<const0> ;
  assign m_sc_payld[1425] = \<const0> ;
  assign m_sc_payld[1424] = \<const0> ;
  assign m_sc_payld[1423] = \<const0> ;
  assign m_sc_payld[1422] = \<const0> ;
  assign m_sc_payld[1421] = \<const0> ;
  assign m_sc_payld[1420] = \<const0> ;
  assign m_sc_payld[1419] = \<const0> ;
  assign m_sc_payld[1418] = \<const0> ;
  assign m_sc_payld[1417] = \<const0> ;
  assign m_sc_payld[1416] = \<const0> ;
  assign m_sc_payld[1415] = \<const0> ;
  assign m_sc_payld[1414] = \<const0> ;
  assign m_sc_payld[1413] = \<const0> ;
  assign m_sc_payld[1412] = \<const0> ;
  assign m_sc_payld[1411] = \<const0> ;
  assign m_sc_payld[1410] = \<const0> ;
  assign m_sc_payld[1409] = \<const0> ;
  assign m_sc_payld[1408] = \<const0> ;
  assign m_sc_payld[1407] = \<const0> ;
  assign m_sc_payld[1406] = \<const0> ;
  assign m_sc_payld[1405] = \<const0> ;
  assign m_sc_payld[1404] = \<const0> ;
  assign m_sc_payld[1403] = \<const0> ;
  assign m_sc_payld[1402] = \<const0> ;
  assign m_sc_payld[1401] = \<const0> ;
  assign m_sc_payld[1400] = \<const0> ;
  assign m_sc_payld[1399] = \<const0> ;
  assign m_sc_payld[1398] = \<const0> ;
  assign m_sc_payld[1397] = \<const0> ;
  assign m_sc_payld[1396] = \<const0> ;
  assign m_sc_payld[1395] = \<const0> ;
  assign m_sc_payld[1394] = \<const0> ;
  assign m_sc_payld[1393] = \<const0> ;
  assign m_sc_payld[1392] = \<const0> ;
  assign m_sc_payld[1391] = \<const0> ;
  assign m_sc_payld[1390] = \<const0> ;
  assign m_sc_payld[1389] = \<const0> ;
  assign m_sc_payld[1388] = \<const0> ;
  assign m_sc_payld[1387] = \<const0> ;
  assign m_sc_payld[1386] = \<const0> ;
  assign m_sc_payld[1385] = \<const0> ;
  assign m_sc_payld[1384] = \<const0> ;
  assign m_sc_payld[1383] = \<const0> ;
  assign m_sc_payld[1382] = \<const0> ;
  assign m_sc_payld[1381] = \<const0> ;
  assign m_sc_payld[1380] = \<const0> ;
  assign m_sc_payld[1379] = \<const0> ;
  assign m_sc_payld[1378] = \<const0> ;
  assign m_sc_payld[1377] = \<const0> ;
  assign m_sc_payld[1376] = \<const0> ;
  assign m_sc_payld[1375] = \<const0> ;
  assign m_sc_payld[1374] = \<const0> ;
  assign m_sc_payld[1373] = \<const0> ;
  assign m_sc_payld[1372] = \<const0> ;
  assign m_sc_payld[1371] = \<const0> ;
  assign m_sc_payld[1370] = \<const0> ;
  assign m_sc_payld[1369] = \<const0> ;
  assign m_sc_payld[1368] = \<const0> ;
  assign m_sc_payld[1367] = \<const0> ;
  assign m_sc_payld[1366] = \<const0> ;
  assign m_sc_payld[1365] = \<const0> ;
  assign m_sc_payld[1364] = \<const0> ;
  assign m_sc_payld[1363] = \<const0> ;
  assign m_sc_payld[1362] = \<const0> ;
  assign m_sc_payld[1361] = \<const0> ;
  assign m_sc_payld[1360] = \<const0> ;
  assign m_sc_payld[1359] = \<const0> ;
  assign m_sc_payld[1358] = \<const0> ;
  assign m_sc_payld[1357] = \<const0> ;
  assign m_sc_payld[1356] = \<const0> ;
  assign m_sc_payld[1355] = \<const0> ;
  assign m_sc_payld[1354] = \<const0> ;
  assign m_sc_payld[1353] = \<const0> ;
  assign m_sc_payld[1352] = \<const0> ;
  assign m_sc_payld[1351] = \<const0> ;
  assign m_sc_payld[1350] = \<const0> ;
  assign m_sc_payld[1349] = \<const0> ;
  assign m_sc_payld[1348] = \<const0> ;
  assign m_sc_payld[1347] = \<const0> ;
  assign m_sc_payld[1346] = \<const0> ;
  assign m_sc_payld[1345] = \<const0> ;
  assign m_sc_payld[1344] = \<const0> ;
  assign m_sc_payld[1343] = \<const0> ;
  assign m_sc_payld[1342] = \<const0> ;
  assign m_sc_payld[1341] = \<const0> ;
  assign m_sc_payld[1340] = \<const0> ;
  assign m_sc_payld[1339] = \<const0> ;
  assign m_sc_payld[1338] = \<const0> ;
  assign m_sc_payld[1337] = \<const0> ;
  assign m_sc_payld[1336] = \<const0> ;
  assign m_sc_payld[1335] = \<const0> ;
  assign m_sc_payld[1334] = \<const0> ;
  assign m_sc_payld[1333] = \<const0> ;
  assign m_sc_payld[1332] = \<const0> ;
  assign m_sc_payld[1331] = \<const0> ;
  assign m_sc_payld[1330] = \<const0> ;
  assign m_sc_payld[1329] = \<const0> ;
  assign m_sc_payld[1328] = \<const0> ;
  assign m_sc_payld[1327] = \<const0> ;
  assign m_sc_payld[1326] = \<const0> ;
  assign m_sc_payld[1325] = \<const0> ;
  assign m_sc_payld[1324] = \<const0> ;
  assign m_sc_payld[1323] = \<const0> ;
  assign m_sc_payld[1322] = \<const0> ;
  assign m_sc_payld[1321] = \<const0> ;
  assign m_sc_payld[1320] = \<const0> ;
  assign m_sc_payld[1319] = \<const0> ;
  assign m_sc_payld[1318] = \<const0> ;
  assign m_sc_payld[1317] = \<const0> ;
  assign m_sc_payld[1316] = \<const0> ;
  assign m_sc_payld[1315] = \<const0> ;
  assign m_sc_payld[1314] = \<const0> ;
  assign m_sc_payld[1313] = \<const0> ;
  assign m_sc_payld[1312] = \<const0> ;
  assign m_sc_payld[1311] = \<const0> ;
  assign m_sc_payld[1310] = \<const0> ;
  assign m_sc_payld[1309] = \<const0> ;
  assign m_sc_payld[1308] = \<const0> ;
  assign m_sc_payld[1307] = \<const0> ;
  assign m_sc_payld[1306] = \<const0> ;
  assign m_sc_payld[1305] = \<const0> ;
  assign m_sc_payld[1304] = \<const0> ;
  assign m_sc_payld[1303] = \<const0> ;
  assign m_sc_payld[1302] = \<const0> ;
  assign m_sc_payld[1301] = \<const0> ;
  assign m_sc_payld[1300] = \<const0> ;
  assign m_sc_payld[1299] = \<const0> ;
  assign m_sc_payld[1298] = \<const0> ;
  assign m_sc_payld[1297] = \<const0> ;
  assign m_sc_payld[1296] = \<const0> ;
  assign m_sc_payld[1295] = \<const0> ;
  assign m_sc_payld[1294] = \<const0> ;
  assign m_sc_payld[1293] = \<const0> ;
  assign m_sc_payld[1292] = \<const0> ;
  assign m_sc_payld[1291] = \<const0> ;
  assign m_sc_payld[1290] = \<const0> ;
  assign m_sc_payld[1289] = \<const0> ;
  assign m_sc_payld[1288] = \<const0> ;
  assign m_sc_payld[1287] = \<const0> ;
  assign m_sc_payld[1286] = \<const0> ;
  assign m_sc_payld[1285] = \<const0> ;
  assign m_sc_payld[1284] = \<const0> ;
  assign m_sc_payld[1283] = \<const0> ;
  assign m_sc_payld[1282] = \<const0> ;
  assign m_sc_payld[1281] = \<const0> ;
  assign m_sc_payld[1280] = \<const0> ;
  assign m_sc_payld[1279] = \<const0> ;
  assign m_sc_payld[1278] = \<const0> ;
  assign m_sc_payld[1277] = \<const0> ;
  assign m_sc_payld[1276] = \<const0> ;
  assign m_sc_payld[1275] = \<const0> ;
  assign m_sc_payld[1274] = \<const0> ;
  assign m_sc_payld[1273] = \<const0> ;
  assign m_sc_payld[1272] = \<const0> ;
  assign m_sc_payld[1271] = \<const0> ;
  assign m_sc_payld[1270] = \<const0> ;
  assign m_sc_payld[1269] = \<const0> ;
  assign m_sc_payld[1268] = \<const0> ;
  assign m_sc_payld[1267] = \<const0> ;
  assign m_sc_payld[1266] = \<const0> ;
  assign m_sc_payld[1265] = \<const0> ;
  assign m_sc_payld[1264] = \<const0> ;
  assign m_sc_payld[1263] = \<const0> ;
  assign m_sc_payld[1262] = \<const0> ;
  assign m_sc_payld[1261] = \<const0> ;
  assign m_sc_payld[1260] = \<const0> ;
  assign m_sc_payld[1259] = \<const0> ;
  assign m_sc_payld[1258] = \<const0> ;
  assign m_sc_payld[1257] = \<const0> ;
  assign m_sc_payld[1256] = \<const0> ;
  assign m_sc_payld[1255] = \<const0> ;
  assign m_sc_payld[1254] = \<const0> ;
  assign m_sc_payld[1253] = \<const0> ;
  assign m_sc_payld[1252] = \<const0> ;
  assign m_sc_payld[1251] = \<const0> ;
  assign m_sc_payld[1250] = \<const0> ;
  assign m_sc_payld[1249] = \<const0> ;
  assign m_sc_payld[1248] = \<const0> ;
  assign m_sc_payld[1247] = \<const0> ;
  assign m_sc_payld[1246] = \<const0> ;
  assign m_sc_payld[1245] = \<const0> ;
  assign m_sc_payld[1244] = \<const0> ;
  assign m_sc_payld[1243] = \<const0> ;
  assign m_sc_payld[1242] = \<const0> ;
  assign m_sc_payld[1241] = \<const0> ;
  assign m_sc_payld[1240] = \<const0> ;
  assign m_sc_payld[1239] = \<const0> ;
  assign m_sc_payld[1238] = \<const0> ;
  assign m_sc_payld[1237] = \<const0> ;
  assign m_sc_payld[1236] = \<const0> ;
  assign m_sc_payld[1235] = \<const0> ;
  assign m_sc_payld[1234] = \<const0> ;
  assign m_sc_payld[1233] = \<const0> ;
  assign m_sc_payld[1232] = \<const0> ;
  assign m_sc_payld[1231] = \<const0> ;
  assign m_sc_payld[1230] = \<const0> ;
  assign m_sc_payld[1229] = \<const0> ;
  assign m_sc_payld[1228] = \<const0> ;
  assign m_sc_payld[1227] = \<const0> ;
  assign m_sc_payld[1226] = \<const0> ;
  assign m_sc_payld[1225] = \<const0> ;
  assign m_sc_payld[1224] = \<const0> ;
  assign m_sc_payld[1223] = \<const0> ;
  assign m_sc_payld[1222] = \<const0> ;
  assign m_sc_payld[1221] = \<const0> ;
  assign m_sc_payld[1220] = \<const0> ;
  assign m_sc_payld[1219] = \<const0> ;
  assign m_sc_payld[1218] = \<const0> ;
  assign m_sc_payld[1217] = \<const0> ;
  assign m_sc_payld[1216] = \<const0> ;
  assign m_sc_payld[1215] = \<const0> ;
  assign m_sc_payld[1214] = \<const0> ;
  assign m_sc_payld[1213] = \<const0> ;
  assign m_sc_payld[1212] = \<const0> ;
  assign m_sc_payld[1211] = \<const0> ;
  assign m_sc_payld[1210] = \<const0> ;
  assign m_sc_payld[1209] = \<const0> ;
  assign m_sc_payld[1208] = \<const0> ;
  assign m_sc_payld[1207] = \<const0> ;
  assign m_sc_payld[1206] = \<const0> ;
  assign m_sc_payld[1205] = \<const0> ;
  assign m_sc_payld[1204] = \<const0> ;
  assign m_sc_payld[1203] = \<const0> ;
  assign m_sc_payld[1202] = \<const0> ;
  assign m_sc_payld[1201] = \<const0> ;
  assign m_sc_payld[1200] = \<const0> ;
  assign m_sc_payld[1199] = \<const0> ;
  assign m_sc_payld[1198] = \<const0> ;
  assign m_sc_payld[1197] = \<const0> ;
  assign m_sc_payld[1196] = \<const0> ;
  assign m_sc_payld[1195] = \<const0> ;
  assign m_sc_payld[1194] = \<const0> ;
  assign m_sc_payld[1193] = \<const0> ;
  assign m_sc_payld[1192] = \<const0> ;
  assign m_sc_payld[1191] = \<const0> ;
  assign m_sc_payld[1190] = \<const0> ;
  assign m_sc_payld[1189] = \<const0> ;
  assign m_sc_payld[1188] = \<const0> ;
  assign m_sc_payld[1187] = \<const0> ;
  assign m_sc_payld[1186] = \<const0> ;
  assign m_sc_payld[1185] = \<const0> ;
  assign m_sc_payld[1184] = \<const0> ;
  assign m_sc_payld[1183] = \<const0> ;
  assign m_sc_payld[1182] = \<const0> ;
  assign m_sc_payld[1181] = \<const0> ;
  assign m_sc_payld[1180] = \<const0> ;
  assign m_sc_payld[1179] = \<const0> ;
  assign m_sc_payld[1178] = \<const0> ;
  assign m_sc_payld[1177] = \<const0> ;
  assign m_sc_payld[1176] = \<const0> ;
  assign m_sc_payld[1175] = \<const0> ;
  assign m_sc_payld[1174] = \<const0> ;
  assign m_sc_payld[1173] = \<const0> ;
  assign m_sc_payld[1172] = \<const0> ;
  assign m_sc_payld[1171] = \<const0> ;
  assign m_sc_payld[1170] = \<const0> ;
  assign m_sc_payld[1169] = \<const0> ;
  assign m_sc_payld[1168] = \<const0> ;
  assign m_sc_payld[1167] = \<const0> ;
  assign m_sc_payld[1166] = \<const0> ;
  assign m_sc_payld[1165] = \<const0> ;
  assign m_sc_payld[1164] = \<const0> ;
  assign m_sc_payld[1163] = \<const0> ;
  assign m_sc_payld[1162] = \<const0> ;
  assign m_sc_payld[1161] = \<const0> ;
  assign m_sc_payld[1160] = \<const0> ;
  assign m_sc_payld[1159] = \<const0> ;
  assign m_sc_payld[1158] = \<const0> ;
  assign m_sc_payld[1157] = \<const0> ;
  assign m_sc_payld[1156] = \<const0> ;
  assign m_sc_payld[1155] = \<const0> ;
  assign m_sc_payld[1154] = \<const0> ;
  assign m_sc_payld[1153] = \<const0> ;
  assign m_sc_payld[1152] = \<const0> ;
  assign m_sc_payld[1151] = \<const0> ;
  assign m_sc_payld[1150] = \<const0> ;
  assign m_sc_payld[1149] = \<const0> ;
  assign m_sc_payld[1148] = \<const0> ;
  assign m_sc_payld[1147] = \<const0> ;
  assign m_sc_payld[1146] = \<const0> ;
  assign m_sc_payld[1145] = \<const0> ;
  assign m_sc_payld[1144] = \<const0> ;
  assign m_sc_payld[1143] = \<const0> ;
  assign m_sc_payld[1142] = \<const0> ;
  assign m_sc_payld[1141] = \<const0> ;
  assign m_sc_payld[1140] = \<const0> ;
  assign m_sc_payld[1139] = \<const0> ;
  assign m_sc_payld[1138] = \<const0> ;
  assign m_sc_payld[1137] = \<const0> ;
  assign m_sc_payld[1136] = \<const0> ;
  assign m_sc_payld[1135] = \<const0> ;
  assign m_sc_payld[1134] = \<const0> ;
  assign m_sc_payld[1133] = \<const0> ;
  assign m_sc_payld[1132] = \<const0> ;
  assign m_sc_payld[1131] = \<const0> ;
  assign m_sc_payld[1130] = \<const0> ;
  assign m_sc_payld[1129] = \<const0> ;
  assign m_sc_payld[1128] = \<const0> ;
  assign m_sc_payld[1127] = \<const0> ;
  assign m_sc_payld[1126] = \<const0> ;
  assign m_sc_payld[1125] = \<const0> ;
  assign m_sc_payld[1124] = \<const0> ;
  assign m_sc_payld[1123] = \<const0> ;
  assign m_sc_payld[1122] = \<const0> ;
  assign m_sc_payld[1121] = \<const0> ;
  assign m_sc_payld[1120] = \<const0> ;
  assign m_sc_payld[1119] = \<const0> ;
  assign m_sc_payld[1118] = \<const0> ;
  assign m_sc_payld[1117] = \<const0> ;
  assign m_sc_payld[1116] = \<const0> ;
  assign m_sc_payld[1115] = \<const0> ;
  assign m_sc_payld[1114] = \<const0> ;
  assign m_sc_payld[1113] = \<const0> ;
  assign m_sc_payld[1112] = \<const0> ;
  assign m_sc_payld[1111] = \<const0> ;
  assign m_sc_payld[1110] = \<const0> ;
  assign m_sc_payld[1109] = \<const0> ;
  assign m_sc_payld[1108] = \<const0> ;
  assign m_sc_payld[1107] = \<const0> ;
  assign m_sc_payld[1106] = \<const0> ;
  assign m_sc_payld[1105] = \<const0> ;
  assign m_sc_payld[1104] = \<const0> ;
  assign m_sc_payld[1103] = \<const0> ;
  assign m_sc_payld[1102] = \<const0> ;
  assign m_sc_payld[1101] = \<const0> ;
  assign m_sc_payld[1100] = \<const0> ;
  assign m_sc_payld[1099] = \<const0> ;
  assign m_sc_payld[1098] = \<const0> ;
  assign m_sc_payld[1097] = \<const0> ;
  assign m_sc_payld[1096] = \<const0> ;
  assign m_sc_payld[1095] = \<const0> ;
  assign m_sc_payld[1094] = \<const0> ;
  assign m_sc_payld[1093] = \<const0> ;
  assign m_sc_payld[1092] = \<const0> ;
  assign m_sc_payld[1091] = \<const0> ;
  assign m_sc_payld[1090] = \<const0> ;
  assign m_sc_payld[1089] = \<const0> ;
  assign m_sc_payld[1088] = \<const0> ;
  assign m_sc_payld[1087] = \<const0> ;
  assign m_sc_payld[1086] = \<const0> ;
  assign m_sc_payld[1085] = \<const0> ;
  assign m_sc_payld[1084] = \<const0> ;
  assign m_sc_payld[1083] = \<const0> ;
  assign m_sc_payld[1082] = \<const0> ;
  assign m_sc_payld[1081] = \<const0> ;
  assign m_sc_payld[1080] = \<const0> ;
  assign m_sc_payld[1079] = \<const0> ;
  assign m_sc_payld[1078] = \<const0> ;
  assign m_sc_payld[1077] = \<const0> ;
  assign m_sc_payld[1076] = \<const0> ;
  assign m_sc_payld[1075] = \<const0> ;
  assign m_sc_payld[1074] = \<const0> ;
  assign m_sc_payld[1073] = \<const0> ;
  assign m_sc_payld[1072] = \<const0> ;
  assign m_sc_payld[1071] = \<const0> ;
  assign m_sc_payld[1070] = \<const0> ;
  assign m_sc_payld[1069] = \<const0> ;
  assign m_sc_payld[1068] = \<const0> ;
  assign m_sc_payld[1067] = \<const0> ;
  assign m_sc_payld[1066] = \<const0> ;
  assign m_sc_payld[1065] = \<const0> ;
  assign m_sc_payld[1064] = \<const0> ;
  assign m_sc_payld[1063] = \<const0> ;
  assign m_sc_payld[1062] = \<const0> ;
  assign m_sc_payld[1061] = \<const0> ;
  assign m_sc_payld[1060] = \<const0> ;
  assign m_sc_payld[1059] = \<const0> ;
  assign m_sc_payld[1058] = \<const0> ;
  assign m_sc_payld[1057] = \<const0> ;
  assign m_sc_payld[1056] = \<const0> ;
  assign m_sc_payld[1055] = \<const0> ;
  assign m_sc_payld[1054] = \<const0> ;
  assign m_sc_payld[1053] = \<const0> ;
  assign m_sc_payld[1052] = \<const0> ;
  assign m_sc_payld[1051] = \<const0> ;
  assign m_sc_payld[1050] = \<const0> ;
  assign m_sc_payld[1049] = \<const0> ;
  assign m_sc_payld[1048] = \<const0> ;
  assign m_sc_payld[1047] = \<const0> ;
  assign m_sc_payld[1046] = \<const0> ;
  assign m_sc_payld[1045] = \<const0> ;
  assign m_sc_payld[1044] = \<const0> ;
  assign m_sc_payld[1043] = \<const0> ;
  assign m_sc_payld[1042] = \<const0> ;
  assign m_sc_payld[1041] = \<const0> ;
  assign m_sc_payld[1040] = \<const0> ;
  assign m_sc_payld[1039] = \<const0> ;
  assign m_sc_payld[1038] = \<const0> ;
  assign m_sc_payld[1037] = \<const0> ;
  assign m_sc_payld[1036] = \<const0> ;
  assign m_sc_payld[1035] = \<const0> ;
  assign m_sc_payld[1034] = \<const0> ;
  assign m_sc_payld[1033] = \<const0> ;
  assign m_sc_payld[1032] = \<const0> ;
  assign m_sc_payld[1031] = \<const0> ;
  assign m_sc_payld[1030] = \<const0> ;
  assign m_sc_payld[1029] = \<const0> ;
  assign m_sc_payld[1028] = \<const0> ;
  assign m_sc_payld[1027] = \<const0> ;
  assign m_sc_payld[1026] = \<const0> ;
  assign m_sc_payld[1025] = \<const0> ;
  assign m_sc_payld[1024] = \<const0> ;
  assign m_sc_payld[1023] = \<const0> ;
  assign m_sc_payld[1022] = \<const0> ;
  assign m_sc_payld[1021] = \<const0> ;
  assign m_sc_payld[1020] = \<const0> ;
  assign m_sc_payld[1019] = \<const0> ;
  assign m_sc_payld[1018] = \<const0> ;
  assign m_sc_payld[1017] = \<const0> ;
  assign m_sc_payld[1016] = \<const0> ;
  assign m_sc_payld[1015] = \<const0> ;
  assign m_sc_payld[1014] = \<const0> ;
  assign m_sc_payld[1013] = \<const0> ;
  assign m_sc_payld[1012] = \<const0> ;
  assign m_sc_payld[1011] = \<const0> ;
  assign m_sc_payld[1010] = \<const0> ;
  assign m_sc_payld[1009] = \<const0> ;
  assign m_sc_payld[1008] = \<const0> ;
  assign m_sc_payld[1007] = \<const0> ;
  assign m_sc_payld[1006] = \<const0> ;
  assign m_sc_payld[1005] = \<const0> ;
  assign m_sc_payld[1004] = \<const0> ;
  assign m_sc_payld[1003] = \<const0> ;
  assign m_sc_payld[1002] = \<const0> ;
  assign m_sc_payld[1001] = \<const0> ;
  assign m_sc_payld[1000] = \<const0> ;
  assign m_sc_payld[999] = \<const0> ;
  assign m_sc_payld[998] = \<const0> ;
  assign m_sc_payld[997] = \<const0> ;
  assign m_sc_payld[996] = \<const0> ;
  assign m_sc_payld[995] = \<const0> ;
  assign m_sc_payld[994] = \<const0> ;
  assign m_sc_payld[993] = \<const0> ;
  assign m_sc_payld[992] = \<const0> ;
  assign m_sc_payld[991] = \<const0> ;
  assign m_sc_payld[990] = \<const0> ;
  assign m_sc_payld[989] = \<const0> ;
  assign m_sc_payld[988] = \<const0> ;
  assign m_sc_payld[987] = \<const0> ;
  assign m_sc_payld[986] = \<const0> ;
  assign m_sc_payld[985] = \<const0> ;
  assign m_sc_payld[984] = \<const0> ;
  assign m_sc_payld[983] = \<const0> ;
  assign m_sc_payld[982] = \<const0> ;
  assign m_sc_payld[981] = \<const0> ;
  assign m_sc_payld[980] = \<const0> ;
  assign m_sc_payld[979] = \<const0> ;
  assign m_sc_payld[978] = \<const0> ;
  assign m_sc_payld[977] = \<const0> ;
  assign m_sc_payld[976] = \<const0> ;
  assign m_sc_payld[975] = \<const0> ;
  assign m_sc_payld[974] = \<const0> ;
  assign m_sc_payld[973] = \<const0> ;
  assign m_sc_payld[972] = \<const0> ;
  assign m_sc_payld[971] = \<const0> ;
  assign m_sc_payld[970] = \<const0> ;
  assign m_sc_payld[969] = \<const0> ;
  assign m_sc_payld[968] = \<const0> ;
  assign m_sc_payld[967] = \<const0> ;
  assign m_sc_payld[966] = \<const0> ;
  assign m_sc_payld[965] = \<const0> ;
  assign m_sc_payld[964] = \<const0> ;
  assign m_sc_payld[963] = \<const0> ;
  assign m_sc_payld[962] = \<const0> ;
  assign m_sc_payld[961] = \<const0> ;
  assign m_sc_payld[960] = \<const0> ;
  assign m_sc_payld[959] = \<const0> ;
  assign m_sc_payld[958] = \<const0> ;
  assign m_sc_payld[957] = \<const0> ;
  assign m_sc_payld[956] = \<const0> ;
  assign m_sc_payld[955] = \<const0> ;
  assign m_sc_payld[954] = \<const0> ;
  assign m_sc_payld[953] = \<const0> ;
  assign m_sc_payld[952] = \<const0> ;
  assign m_sc_payld[951] = \<const0> ;
  assign m_sc_payld[950] = \<const0> ;
  assign m_sc_payld[949] = \<const0> ;
  assign m_sc_payld[948] = \<const0> ;
  assign m_sc_payld[947] = \<const0> ;
  assign m_sc_payld[946] = \<const0> ;
  assign m_sc_payld[945] = \<const0> ;
  assign m_sc_payld[944] = \<const0> ;
  assign m_sc_payld[943] = \<const0> ;
  assign m_sc_payld[942] = \<const0> ;
  assign m_sc_payld[941] = \<const0> ;
  assign m_sc_payld[940] = \<const0> ;
  assign m_sc_payld[939] = \<const0> ;
  assign m_sc_payld[938] = \<const0> ;
  assign m_sc_payld[937] = \<const0> ;
  assign m_sc_payld[936] = \<const0> ;
  assign m_sc_payld[935] = \<const0> ;
  assign m_sc_payld[934] = \<const0> ;
  assign m_sc_payld[933] = \<const0> ;
  assign m_sc_payld[932] = \<const0> ;
  assign m_sc_payld[931] = \<const0> ;
  assign m_sc_payld[930] = \<const0> ;
  assign m_sc_payld[929] = \<const0> ;
  assign m_sc_payld[928] = \<const0> ;
  assign m_sc_payld[927] = \<const0> ;
  assign m_sc_payld[926] = \<const0> ;
  assign m_sc_payld[925] = \<const0> ;
  assign m_sc_payld[924] = \<const0> ;
  assign m_sc_payld[923] = \<const0> ;
  assign m_sc_payld[922] = \<const0> ;
  assign m_sc_payld[921] = \<const0> ;
  assign m_sc_payld[920] = \<const0> ;
  assign m_sc_payld[919] = \<const0> ;
  assign m_sc_payld[918] = \<const0> ;
  assign m_sc_payld[917] = \<const0> ;
  assign m_sc_payld[916] = \<const0> ;
  assign m_sc_payld[915] = \<const0> ;
  assign m_sc_payld[914] = \<const0> ;
  assign m_sc_payld[913] = \<const0> ;
  assign m_sc_payld[912] = \<const0> ;
  assign m_sc_payld[911] = \<const0> ;
  assign m_sc_payld[910] = \<const0> ;
  assign m_sc_payld[909] = \<const0> ;
  assign m_sc_payld[908] = \<const0> ;
  assign m_sc_payld[907] = \<const0> ;
  assign m_sc_payld[906] = \<const0> ;
  assign m_sc_payld[905] = \<const0> ;
  assign m_sc_payld[904] = \<const0> ;
  assign m_sc_payld[903] = \<const0> ;
  assign m_sc_payld[902] = \<const0> ;
  assign m_sc_payld[901] = \<const0> ;
  assign m_sc_payld[900] = \<const0> ;
  assign m_sc_payld[899] = \<const0> ;
  assign m_sc_payld[898] = \<const0> ;
  assign m_sc_payld[897] = \<const0> ;
  assign m_sc_payld[896] = \<const0> ;
  assign m_sc_payld[895] = \<const0> ;
  assign m_sc_payld[894] = \<const0> ;
  assign m_sc_payld[893] = \<const0> ;
  assign m_sc_payld[892] = \<const0> ;
  assign m_sc_payld[891] = \<const0> ;
  assign m_sc_payld[890] = \<const0> ;
  assign m_sc_payld[889] = \<const0> ;
  assign m_sc_payld[888] = \<const0> ;
  assign m_sc_payld[887] = \<const0> ;
  assign m_sc_payld[886] = \<const0> ;
  assign m_sc_payld[885] = \<const0> ;
  assign m_sc_payld[884] = \<const0> ;
  assign m_sc_payld[883] = \<const0> ;
  assign m_sc_payld[882] = \<const0> ;
  assign m_sc_payld[881] = \<const0> ;
  assign m_sc_payld[880] = \<const0> ;
  assign m_sc_payld[879] = \<const0> ;
  assign m_sc_payld[878] = \<const0> ;
  assign m_sc_payld[877] = \<const0> ;
  assign m_sc_payld[876] = \<const0> ;
  assign m_sc_payld[875] = \<const0> ;
  assign m_sc_payld[874] = \<const0> ;
  assign m_sc_payld[873] = \<const0> ;
  assign m_sc_payld[872] = \<const0> ;
  assign m_sc_payld[871] = \<const0> ;
  assign m_sc_payld[870] = \<const0> ;
  assign m_sc_payld[869] = \<const0> ;
  assign m_sc_payld[868] = \<const0> ;
  assign m_sc_payld[867] = \<const0> ;
  assign m_sc_payld[866] = \<const0> ;
  assign m_sc_payld[865] = \<const0> ;
  assign m_sc_payld[864] = \<const0> ;
  assign m_sc_payld[863] = \<const0> ;
  assign m_sc_payld[862] = \<const0> ;
  assign m_sc_payld[861] = \<const0> ;
  assign m_sc_payld[860] = \<const0> ;
  assign m_sc_payld[859] = \<const0> ;
  assign m_sc_payld[858] = \<const0> ;
  assign m_sc_payld[857] = \<const0> ;
  assign m_sc_payld[856] = \<const0> ;
  assign m_sc_payld[855] = \<const0> ;
  assign m_sc_payld[854] = \<const0> ;
  assign m_sc_payld[853] = \<const0> ;
  assign m_sc_payld[852] = \<const0> ;
  assign m_sc_payld[851] = \<const0> ;
  assign m_sc_payld[850] = \<const0> ;
  assign m_sc_payld[849] = \<const0> ;
  assign m_sc_payld[848] = \<const0> ;
  assign m_sc_payld[847] = \<const0> ;
  assign m_sc_payld[846] = \<const0> ;
  assign m_sc_payld[845] = \<const0> ;
  assign m_sc_payld[844] = \<const0> ;
  assign m_sc_payld[843] = \<const0> ;
  assign m_sc_payld[842] = \<const0> ;
  assign m_sc_payld[841] = \<const0> ;
  assign m_sc_payld[840] = \<const0> ;
  assign m_sc_payld[839] = \<const0> ;
  assign m_sc_payld[838] = \<const0> ;
  assign m_sc_payld[837] = \<const0> ;
  assign m_sc_payld[836] = \<const0> ;
  assign m_sc_payld[835] = \<const0> ;
  assign m_sc_payld[834] = \<const0> ;
  assign m_sc_payld[833] = \<const0> ;
  assign m_sc_payld[832] = \<const0> ;
  assign m_sc_payld[831] = \<const0> ;
  assign m_sc_payld[830] = \<const0> ;
  assign m_sc_payld[829] = \<const0> ;
  assign m_sc_payld[828] = \<const0> ;
  assign m_sc_payld[827] = \<const0> ;
  assign m_sc_payld[826] = \<const0> ;
  assign m_sc_payld[825] = \<const0> ;
  assign m_sc_payld[824] = \<const0> ;
  assign m_sc_payld[823] = \<const0> ;
  assign m_sc_payld[822] = \<const0> ;
  assign m_sc_payld[821] = \<const0> ;
  assign m_sc_payld[820] = \<const0> ;
  assign m_sc_payld[819] = \<const0> ;
  assign m_sc_payld[818] = \<const0> ;
  assign m_sc_payld[817] = \<const0> ;
  assign m_sc_payld[816] = \<const0> ;
  assign m_sc_payld[815] = \<const0> ;
  assign m_sc_payld[814] = \<const0> ;
  assign m_sc_payld[813] = \<const0> ;
  assign m_sc_payld[812] = \<const0> ;
  assign m_sc_payld[811] = \<const0> ;
  assign m_sc_payld[810] = \<const0> ;
  assign m_sc_payld[809] = \<const0> ;
  assign m_sc_payld[808] = \<const0> ;
  assign m_sc_payld[807] = \<const0> ;
  assign m_sc_payld[806] = \<const0> ;
  assign m_sc_payld[805] = \<const0> ;
  assign m_sc_payld[804] = \<const0> ;
  assign m_sc_payld[803] = \<const0> ;
  assign m_sc_payld[802] = \<const0> ;
  assign m_sc_payld[801] = \<const0> ;
  assign m_sc_payld[800] = \<const0> ;
  assign m_sc_payld[799] = \<const0> ;
  assign m_sc_payld[798] = \<const0> ;
  assign m_sc_payld[797] = \<const0> ;
  assign m_sc_payld[796] = \<const0> ;
  assign m_sc_payld[795] = \<const0> ;
  assign m_sc_payld[794] = \<const0> ;
  assign m_sc_payld[793] = \<const0> ;
  assign m_sc_payld[792] = \<const0> ;
  assign m_sc_payld[791] = \<const0> ;
  assign m_sc_payld[790] = \<const0> ;
  assign m_sc_payld[789] = \<const0> ;
  assign m_sc_payld[788] = \<const0> ;
  assign m_sc_payld[787] = \<const0> ;
  assign m_sc_payld[786] = \<const0> ;
  assign m_sc_payld[785] = \<const0> ;
  assign m_sc_payld[784] = \<const0> ;
  assign m_sc_payld[783] = \<const0> ;
  assign m_sc_payld[782] = \<const0> ;
  assign m_sc_payld[781] = \<const0> ;
  assign m_sc_payld[780] = \<const0> ;
  assign m_sc_payld[779] = \<const0> ;
  assign m_sc_payld[778] = \<const0> ;
  assign m_sc_payld[777] = \<const0> ;
  assign m_sc_payld[776] = \<const0> ;
  assign m_sc_payld[775] = \<const0> ;
  assign m_sc_payld[774] = \<const0> ;
  assign m_sc_payld[773] = \<const0> ;
  assign m_sc_payld[772] = \<const0> ;
  assign m_sc_payld[771] = \<const0> ;
  assign m_sc_payld[770] = \<const0> ;
  assign m_sc_payld[769] = \<const0> ;
  assign m_sc_payld[768] = \<const0> ;
  assign m_sc_payld[767] = \<const0> ;
  assign m_sc_payld[766] = \<const0> ;
  assign m_sc_payld[765] = \<const0> ;
  assign m_sc_payld[764] = \<const0> ;
  assign m_sc_payld[763] = \<const0> ;
  assign m_sc_payld[762] = \<const0> ;
  assign m_sc_payld[761] = \<const0> ;
  assign m_sc_payld[760] = \<const0> ;
  assign m_sc_payld[759] = \<const0> ;
  assign m_sc_payld[758] = \<const0> ;
  assign m_sc_payld[757] = \<const0> ;
  assign m_sc_payld[756] = \<const0> ;
  assign m_sc_payld[755] = \<const0> ;
  assign m_sc_payld[754] = \<const0> ;
  assign m_sc_payld[753] = \<const0> ;
  assign m_sc_payld[752] = \<const0> ;
  assign m_sc_payld[751] = \<const0> ;
  assign m_sc_payld[750] = \<const0> ;
  assign m_sc_payld[749] = \<const0> ;
  assign m_sc_payld[748] = \<const0> ;
  assign m_sc_payld[747] = \<const0> ;
  assign m_sc_payld[746] = \<const0> ;
  assign m_sc_payld[745] = \<const0> ;
  assign m_sc_payld[744] = \<const0> ;
  assign m_sc_payld[743] = \<const0> ;
  assign m_sc_payld[742] = \<const0> ;
  assign m_sc_payld[741] = \<const0> ;
  assign m_sc_payld[740] = \<const0> ;
  assign m_sc_payld[739] = \<const0> ;
  assign m_sc_payld[738] = \<const0> ;
  assign m_sc_payld[737] = \<const0> ;
  assign m_sc_payld[736] = \<const0> ;
  assign m_sc_payld[735] = \<const0> ;
  assign m_sc_payld[734] = \<const0> ;
  assign m_sc_payld[733] = \<const0> ;
  assign m_sc_payld[732] = \<const0> ;
  assign m_sc_payld[731] = \<const0> ;
  assign m_sc_payld[730] = \<const0> ;
  assign m_sc_payld[729] = \<const0> ;
  assign m_sc_payld[728] = \<const0> ;
  assign m_sc_payld[727] = \<const0> ;
  assign m_sc_payld[726] = \<const0> ;
  assign m_sc_payld[725] = \<const0> ;
  assign m_sc_payld[724] = \<const0> ;
  assign m_sc_payld[723] = \<const0> ;
  assign m_sc_payld[722] = \<const0> ;
  assign m_sc_payld[721] = \<const0> ;
  assign m_sc_payld[720] = \<const0> ;
  assign m_sc_payld[719] = \<const0> ;
  assign m_sc_payld[718] = \<const0> ;
  assign m_sc_payld[717] = \<const0> ;
  assign m_sc_payld[716] = \<const0> ;
  assign m_sc_payld[715] = \<const0> ;
  assign m_sc_payld[714] = \<const0> ;
  assign m_sc_payld[713] = \<const0> ;
  assign m_sc_payld[712] = \<const0> ;
  assign m_sc_payld[711] = \<const0> ;
  assign m_sc_payld[710] = \<const0> ;
  assign m_sc_payld[709] = \<const0> ;
  assign m_sc_payld[708] = \<const0> ;
  assign m_sc_payld[707] = \<const0> ;
  assign m_sc_payld[706] = \<const0> ;
  assign m_sc_payld[705] = \<const0> ;
  assign m_sc_payld[704] = \<const0> ;
  assign m_sc_payld[703] = \<const0> ;
  assign m_sc_payld[702] = \<const0> ;
  assign m_sc_payld[701] = \<const0> ;
  assign m_sc_payld[700] = \<const0> ;
  assign m_sc_payld[699] = \<const0> ;
  assign m_sc_payld[698] = \<const0> ;
  assign m_sc_payld[697] = \<const0> ;
  assign m_sc_payld[696] = \<const0> ;
  assign m_sc_payld[695] = \<const0> ;
  assign m_sc_payld[694] = \<const0> ;
  assign m_sc_payld[693] = \<const0> ;
  assign m_sc_payld[692] = \<const0> ;
  assign m_sc_payld[691] = \<const0> ;
  assign m_sc_payld[690] = \<const0> ;
  assign m_sc_payld[689] = \<const0> ;
  assign m_sc_payld[688] = \<const0> ;
  assign m_sc_payld[687] = \<const0> ;
  assign m_sc_payld[686] = \<const0> ;
  assign m_sc_payld[685] = \<const0> ;
  assign m_sc_payld[684] = \<const0> ;
  assign m_sc_payld[683] = \<const0> ;
  assign m_sc_payld[682] = \<const0> ;
  assign m_sc_payld[681] = \<const0> ;
  assign m_sc_payld[680] = \<const0> ;
  assign m_sc_payld[679] = \<const0> ;
  assign m_sc_payld[678] = \<const0> ;
  assign m_sc_payld[677] = \<const0> ;
  assign m_sc_payld[676] = \<const0> ;
  assign m_sc_payld[675] = \<const0> ;
  assign m_sc_payld[674] = \<const0> ;
  assign m_sc_payld[673] = \<const0> ;
  assign m_sc_payld[672] = \<const0> ;
  assign m_sc_payld[671] = \<const0> ;
  assign m_sc_payld[670] = \<const0> ;
  assign m_sc_payld[669] = \<const0> ;
  assign m_sc_payld[668] = \<const0> ;
  assign m_sc_payld[667] = \<const0> ;
  assign m_sc_payld[666] = \<const0> ;
  assign m_sc_payld[665] = \<const0> ;
  assign m_sc_payld[664] = \<const0> ;
  assign m_sc_payld[663] = \<const0> ;
  assign m_sc_payld[662] = \<const0> ;
  assign m_sc_payld[661] = \<const0> ;
  assign m_sc_payld[660] = \<const0> ;
  assign m_sc_payld[659] = \<const0> ;
  assign m_sc_payld[658] = \<const0> ;
  assign m_sc_payld[657] = \<const0> ;
  assign m_sc_payld[656] = \<const0> ;
  assign m_sc_payld[655] = \<const0> ;
  assign m_sc_payld[654] = \<const0> ;
  assign m_sc_payld[653] = \<const0> ;
  assign m_sc_payld[652] = \<const0> ;
  assign m_sc_payld[651] = \<const0> ;
  assign m_sc_payld[650] = \<const0> ;
  assign m_sc_payld[649] = \<const0> ;
  assign m_sc_payld[648] = \<const0> ;
  assign m_sc_payld[647] = \<const0> ;
  assign m_sc_payld[646] = \<const0> ;
  assign m_sc_payld[645] = \<const0> ;
  assign m_sc_payld[644] = \<const0> ;
  assign m_sc_payld[643] = \<const0> ;
  assign m_sc_payld[642] = \<const0> ;
  assign m_sc_payld[641] = \<const0> ;
  assign m_sc_payld[640] = \<const0> ;
  assign m_sc_payld[639] = \<const0> ;
  assign m_sc_payld[638] = \<const0> ;
  assign m_sc_payld[637] = \<const0> ;
  assign m_sc_payld[636] = \<const0> ;
  assign m_sc_payld[635] = \<const0> ;
  assign m_sc_payld[634] = \<const0> ;
  assign m_sc_payld[633] = \<const0> ;
  assign m_sc_payld[632] = \<const0> ;
  assign m_sc_payld[631] = \<const0> ;
  assign m_sc_payld[630] = \<const0> ;
  assign m_sc_payld[629] = \<const0> ;
  assign m_sc_payld[628] = \<const0> ;
  assign m_sc_payld[627] = \<const0> ;
  assign m_sc_payld[626] = \<const0> ;
  assign m_sc_payld[625] = \<const0> ;
  assign m_sc_payld[624] = \<const0> ;
  assign m_sc_payld[623] = \<const0> ;
  assign m_sc_payld[622] = \<const0> ;
  assign m_sc_payld[621] = \<const0> ;
  assign m_sc_payld[620] = \<const0> ;
  assign m_sc_payld[619] = \<const0> ;
  assign m_sc_payld[618] = \<const0> ;
  assign m_sc_payld[617] = \<const0> ;
  assign m_sc_payld[616] = \<const0> ;
  assign m_sc_payld[615] = \<const0> ;
  assign m_sc_payld[614] = \<const0> ;
  assign m_sc_payld[613] = \<const0> ;
  assign m_sc_payld[612] = \<const0> ;
  assign m_sc_payld[611] = \<const0> ;
  assign m_sc_payld[610] = \<const0> ;
  assign m_sc_payld[609] = \<const0> ;
  assign m_sc_payld[608] = \<const0> ;
  assign m_sc_payld[607] = \<const0> ;
  assign m_sc_payld[606] = \<const0> ;
  assign m_sc_payld[605] = \<const0> ;
  assign m_sc_payld[604] = \<const0> ;
  assign m_sc_payld[603] = \<const0> ;
  assign m_sc_payld[602] = \<const0> ;
  assign m_sc_payld[601] = \<const0> ;
  assign m_sc_payld[600] = \<const0> ;
  assign m_sc_payld[599] = \<const0> ;
  assign m_sc_payld[598] = \<const0> ;
  assign m_sc_payld[597] = \<const0> ;
  assign m_sc_payld[596] = \<const0> ;
  assign m_sc_payld[595] = \<const0> ;
  assign m_sc_payld[594] = \<const0> ;
  assign m_sc_payld[593] = \<const0> ;
  assign m_sc_payld[592] = \<const0> ;
  assign m_sc_payld[591] = \<const0> ;
  assign m_sc_payld[590] = \<const0> ;
  assign m_sc_payld[589] = \<const0> ;
  assign m_sc_payld[588] = \<const0> ;
  assign m_sc_payld[587] = \<const0> ;
  assign m_sc_payld[586] = \<const0> ;
  assign m_sc_payld[585] = \<const0> ;
  assign m_sc_payld[584] = \<const0> ;
  assign m_sc_payld[583] = \<const0> ;
  assign m_sc_payld[582] = \<const0> ;
  assign m_sc_payld[581] = \<const0> ;
  assign m_sc_payld[580] = \<const0> ;
  assign m_sc_payld[579] = \<const0> ;
  assign m_sc_payld[578] = \<const0> ;
  assign m_sc_payld[577] = \<const0> ;
  assign m_sc_payld[576] = \<const0> ;
  assign m_sc_payld[575] = \<const0> ;
  assign m_sc_payld[574] = \<const0> ;
  assign m_sc_payld[573] = \<const0> ;
  assign m_sc_payld[572] = \<const0> ;
  assign m_sc_payld[571] = \<const0> ;
  assign m_sc_payld[570] = \<const0> ;
  assign m_sc_payld[569] = \<const0> ;
  assign m_sc_payld[568] = \<const0> ;
  assign m_sc_payld[567] = \<const0> ;
  assign m_sc_payld[566] = \<const0> ;
  assign m_sc_payld[565] = \<const0> ;
  assign m_sc_payld[564] = \<const0> ;
  assign m_sc_payld[563] = \<const0> ;
  assign m_sc_payld[562] = \<const0> ;
  assign m_sc_payld[561] = \<const0> ;
  assign m_sc_payld[560] = \<const0> ;
  assign m_sc_payld[559] = \<const0> ;
  assign m_sc_payld[558] = \<const0> ;
  assign m_sc_payld[557] = \<const0> ;
  assign m_sc_payld[556] = \<const0> ;
  assign m_sc_payld[555] = \<const0> ;
  assign m_sc_payld[554] = \<const0> ;
  assign m_sc_payld[553] = \<const0> ;
  assign m_sc_payld[552] = \<const0> ;
  assign m_sc_payld[551] = \<const0> ;
  assign m_sc_payld[550] = \<const0> ;
  assign m_sc_payld[549] = \<const0> ;
  assign m_sc_payld[548] = \<const0> ;
  assign m_sc_payld[547] = \<const0> ;
  assign m_sc_payld[546] = \<const0> ;
  assign m_sc_payld[545] = \<const0> ;
  assign m_sc_payld[544] = \<const0> ;
  assign m_sc_payld[543] = \<const0> ;
  assign m_sc_payld[542] = \<const0> ;
  assign m_sc_payld[541] = \<const0> ;
  assign m_sc_payld[540] = \<const0> ;
  assign m_sc_payld[539] = \<const0> ;
  assign m_sc_payld[538] = \<const0> ;
  assign m_sc_payld[537] = \<const0> ;
  assign m_sc_payld[536] = \<const0> ;
  assign m_sc_payld[535] = \<const0> ;
  assign m_sc_payld[534] = \<const0> ;
  assign m_sc_payld[533] = \<const0> ;
  assign m_sc_payld[532] = \<const0> ;
  assign m_sc_payld[531] = \<const0> ;
  assign m_sc_payld[530] = \<const0> ;
  assign m_sc_payld[529] = \<const0> ;
  assign m_sc_payld[528] = \<const0> ;
  assign m_sc_payld[527] = \<const0> ;
  assign m_sc_payld[526] = \<const0> ;
  assign m_sc_payld[525] = \<const0> ;
  assign m_sc_payld[524] = \<const0> ;
  assign m_sc_payld[523] = \<const0> ;
  assign m_sc_payld[522] = \<const0> ;
  assign m_sc_payld[521] = \<const0> ;
  assign m_sc_payld[520] = \<const0> ;
  assign m_sc_payld[519] = \<const0> ;
  assign m_sc_payld[518] = \<const0> ;
  assign m_sc_payld[517] = \<const0> ;
  assign m_sc_payld[516] = \<const0> ;
  assign m_sc_payld[515] = \<const0> ;
  assign m_sc_payld[514] = \<const0> ;
  assign m_sc_payld[513] = \<const0> ;
  assign m_sc_payld[512] = \<const0> ;
  assign m_sc_payld[511] = \<const0> ;
  assign m_sc_payld[510] = \<const0> ;
  assign m_sc_payld[509] = \<const0> ;
  assign m_sc_payld[508] = \<const0> ;
  assign m_sc_payld[507] = \<const0> ;
  assign m_sc_payld[506] = \<const0> ;
  assign m_sc_payld[505] = \<const0> ;
  assign m_sc_payld[504] = \<const0> ;
  assign m_sc_payld[503] = \<const0> ;
  assign m_sc_payld[502] = \<const0> ;
  assign m_sc_payld[501] = \<const0> ;
  assign m_sc_payld[500] = \<const0> ;
  assign m_sc_payld[499] = \<const0> ;
  assign m_sc_payld[498] = \<const0> ;
  assign m_sc_payld[497] = \<const0> ;
  assign m_sc_payld[496] = \<const0> ;
  assign m_sc_payld[495] = \<const0> ;
  assign m_sc_payld[494] = \<const0> ;
  assign m_sc_payld[493] = \<const0> ;
  assign m_sc_payld[492] = \<const0> ;
  assign m_sc_payld[491] = \<const0> ;
  assign m_sc_payld[490] = \<const0> ;
  assign m_sc_payld[489] = \<const0> ;
  assign m_sc_payld[488] = \<const0> ;
  assign m_sc_payld[487] = \<const0> ;
  assign m_sc_payld[486] = \<const0> ;
  assign m_sc_payld[485] = \<const0> ;
  assign m_sc_payld[484] = \<const0> ;
  assign m_sc_payld[483] = \<const0> ;
  assign m_sc_payld[482] = \<const0> ;
  assign m_sc_payld[481] = \<const0> ;
  assign m_sc_payld[480] = \<const0> ;
  assign m_sc_payld[479] = \<const0> ;
  assign m_sc_payld[478] = \<const0> ;
  assign m_sc_payld[477] = \<const0> ;
  assign m_sc_payld[476] = \<const0> ;
  assign m_sc_payld[475] = \<const0> ;
  assign m_sc_payld[474] = \<const0> ;
  assign m_sc_payld[473] = \<const0> ;
  assign m_sc_payld[472] = \<const0> ;
  assign m_sc_payld[471] = \<const0> ;
  assign m_sc_payld[470] = \<const0> ;
  assign m_sc_payld[469] = \<const0> ;
  assign m_sc_payld[468] = \<const0> ;
  assign m_sc_payld[467] = \<const0> ;
  assign m_sc_payld[466] = \<const0> ;
  assign m_sc_payld[465] = \<const0> ;
  assign m_sc_payld[464] = \<const0> ;
  assign m_sc_payld[463] = \<const0> ;
  assign m_sc_payld[462] = \<const0> ;
  assign m_sc_payld[461] = \<const0> ;
  assign m_sc_payld[460] = \<const0> ;
  assign m_sc_payld[459] = \<const0> ;
  assign m_sc_payld[458] = \<const0> ;
  assign m_sc_payld[457] = \<const0> ;
  assign m_sc_payld[456] = \<const0> ;
  assign m_sc_payld[455] = \<const0> ;
  assign m_sc_payld[454] = \<const0> ;
  assign m_sc_payld[453] = \<const0> ;
  assign m_sc_payld[452] = \<const0> ;
  assign m_sc_payld[451] = \<const0> ;
  assign m_sc_payld[450] = \<const0> ;
  assign m_sc_payld[449] = \<const0> ;
  assign m_sc_payld[448] = \<const0> ;
  assign m_sc_payld[447] = \<const0> ;
  assign m_sc_payld[446] = \<const0> ;
  assign m_sc_payld[445] = \<const0> ;
  assign m_sc_payld[444] = \<const0> ;
  assign m_sc_payld[443] = \<const0> ;
  assign m_sc_payld[442] = \<const0> ;
  assign m_sc_payld[441] = \<const0> ;
  assign m_sc_payld[440] = \<const0> ;
  assign m_sc_payld[439] = \<const0> ;
  assign m_sc_payld[438] = \<const0> ;
  assign m_sc_payld[437] = \<const0> ;
  assign m_sc_payld[436] = \<const0> ;
  assign m_sc_payld[435] = \<const0> ;
  assign m_sc_payld[434] = \<const0> ;
  assign m_sc_payld[433] = \<const0> ;
  assign m_sc_payld[432] = \<const0> ;
  assign m_sc_payld[431] = \<const0> ;
  assign m_sc_payld[430] = \<const0> ;
  assign m_sc_payld[429] = \<const0> ;
  assign m_sc_payld[428] = \<const0> ;
  assign m_sc_payld[427] = \<const0> ;
  assign m_sc_payld[426] = \<const0> ;
  assign m_sc_payld[425] = \<const0> ;
  assign m_sc_payld[424] = \<const0> ;
  assign m_sc_payld[423] = \<const0> ;
  assign m_sc_payld[422] = \<const0> ;
  assign m_sc_payld[421] = \<const0> ;
  assign m_sc_payld[420] = \<const0> ;
  assign m_sc_payld[419] = \<const0> ;
  assign m_sc_payld[418] = \<const0> ;
  assign m_sc_payld[417] = \<const0> ;
  assign m_sc_payld[416] = \<const0> ;
  assign m_sc_payld[415] = \<const0> ;
  assign m_sc_payld[414] = \<const0> ;
  assign m_sc_payld[413] = \<const0> ;
  assign m_sc_payld[412] = \<const0> ;
  assign m_sc_payld[411] = \<const0> ;
  assign m_sc_payld[410] = \<const0> ;
  assign m_sc_payld[409] = \<const0> ;
  assign m_sc_payld[408] = \<const0> ;
  assign m_sc_payld[407] = \<const0> ;
  assign m_sc_payld[406] = \<const0> ;
  assign m_sc_payld[405] = \<const0> ;
  assign m_sc_payld[404] = \<const0> ;
  assign m_sc_payld[403] = \<const0> ;
  assign m_sc_payld[402] = \<const0> ;
  assign m_sc_payld[401] = \<const0> ;
  assign m_sc_payld[400] = \<const0> ;
  assign m_sc_payld[399] = \<const0> ;
  assign m_sc_payld[398] = \<const0> ;
  assign m_sc_payld[397] = \<const0> ;
  assign m_sc_payld[396] = \<const0> ;
  assign m_sc_payld[395] = \<const0> ;
  assign m_sc_payld[394] = \<const0> ;
  assign m_sc_payld[393] = \<const0> ;
  assign m_sc_payld[392] = \<const0> ;
  assign m_sc_payld[391] = \<const0> ;
  assign m_sc_payld[390] = \<const0> ;
  assign m_sc_payld[389] = \<const0> ;
  assign m_sc_payld[388] = \<const0> ;
  assign m_sc_payld[387] = \<const0> ;
  assign m_sc_payld[386] = \<const0> ;
  assign m_sc_payld[385] = \<const0> ;
  assign m_sc_payld[384] = \<const0> ;
  assign m_sc_payld[383] = \<const0> ;
  assign m_sc_payld[382] = \<const0> ;
  assign m_sc_payld[381] = \<const0> ;
  assign m_sc_payld[380] = \<const0> ;
  assign m_sc_payld[379] = \<const0> ;
  assign m_sc_payld[378] = \<const0> ;
  assign m_sc_payld[377] = \<const0> ;
  assign m_sc_payld[376] = \<const0> ;
  assign m_sc_payld[375] = \<const0> ;
  assign m_sc_payld[374] = \<const0> ;
  assign m_sc_payld[373] = \<const0> ;
  assign m_sc_payld[372] = \<const0> ;
  assign m_sc_payld[371] = \<const0> ;
  assign m_sc_payld[370] = \<const0> ;
  assign m_sc_payld[369] = \<const0> ;
  assign m_sc_payld[368] = \<const0> ;
  assign m_sc_payld[367] = \<const0> ;
  assign m_sc_payld[366] = \<const0> ;
  assign m_sc_payld[365] = \<const0> ;
  assign m_sc_payld[364] = \<const0> ;
  assign m_sc_payld[363] = \<const0> ;
  assign m_sc_payld[362] = \<const0> ;
  assign m_sc_payld[361] = \<const0> ;
  assign m_sc_payld[360] = \<const0> ;
  assign m_sc_payld[359] = \<const0> ;
  assign m_sc_payld[358] = \<const0> ;
  assign m_sc_payld[357] = \<const0> ;
  assign m_sc_payld[356] = \<const0> ;
  assign m_sc_payld[355] = \<const0> ;
  assign m_sc_payld[354] = \<const0> ;
  assign m_sc_payld[353] = \<const0> ;
  assign m_sc_payld[352] = \<const0> ;
  assign m_sc_payld[351] = \<const0> ;
  assign m_sc_payld[350] = \<const0> ;
  assign m_sc_payld[349] = \<const0> ;
  assign m_sc_payld[348] = \<const0> ;
  assign m_sc_payld[347] = \<const0> ;
  assign m_sc_payld[346] = \<const0> ;
  assign m_sc_payld[345] = \<const0> ;
  assign m_sc_payld[344] = \<const0> ;
  assign m_sc_payld[343] = \<const0> ;
  assign m_sc_payld[342] = \<const0> ;
  assign m_sc_payld[341] = \<const0> ;
  assign m_sc_payld[340] = \<const0> ;
  assign m_sc_payld[339] = \<const0> ;
  assign m_sc_payld[338] = \<const0> ;
  assign m_sc_payld[337] = \<const0> ;
  assign m_sc_payld[336] = \<const0> ;
  assign m_sc_payld[335] = \<const0> ;
  assign m_sc_payld[334] = \<const0> ;
  assign m_sc_payld[333] = \<const0> ;
  assign m_sc_payld[332] = \<const0> ;
  assign m_sc_payld[331] = \<const0> ;
  assign m_sc_payld[330] = \<const0> ;
  assign m_sc_payld[329] = \<const0> ;
  assign m_sc_payld[328] = \<const0> ;
  assign m_sc_payld[327] = \<const0> ;
  assign m_sc_payld[326] = \<const0> ;
  assign m_sc_payld[325] = \<const0> ;
  assign m_sc_payld[324] = \<const0> ;
  assign m_sc_payld[323] = \<const0> ;
  assign m_sc_payld[322] = \<const0> ;
  assign m_sc_payld[321] = \<const0> ;
  assign m_sc_payld[320] = \<const0> ;
  assign m_sc_payld[319] = \<const0> ;
  assign m_sc_payld[318] = \<const0> ;
  assign m_sc_payld[317] = \<const0> ;
  assign m_sc_payld[316] = \<const0> ;
  assign m_sc_payld[315] = \<const0> ;
  assign m_sc_payld[314] = \<const0> ;
  assign m_sc_payld[313] = \<const0> ;
  assign m_sc_payld[312] = \<const0> ;
  assign m_sc_payld[311] = \<const0> ;
  assign m_sc_payld[310] = \<const0> ;
  assign m_sc_payld[309] = \<const0> ;
  assign m_sc_payld[308] = \<const0> ;
  assign m_sc_payld[307] = \<const0> ;
  assign m_sc_payld[306] = \<const0> ;
  assign m_sc_payld[305] = \<const0> ;
  assign m_sc_payld[304] = \<const0> ;
  assign m_sc_payld[303] = \<const0> ;
  assign m_sc_payld[302] = \<const0> ;
  assign m_sc_payld[301] = \<const0> ;
  assign m_sc_payld[300] = \<const0> ;
  assign m_sc_payld[299] = \<const0> ;
  assign m_sc_payld[298] = \<const0> ;
  assign m_sc_payld[297] = \<const0> ;
  assign m_sc_payld[296] = \<const0> ;
  assign m_sc_payld[295] = \<const0> ;
  assign m_sc_payld[294] = \<const0> ;
  assign m_sc_payld[293] = \<const0> ;
  assign m_sc_payld[292] = \<const0> ;
  assign m_sc_payld[291] = \<const0> ;
  assign m_sc_payld[290] = \<const0> ;
  assign m_sc_payld[289] = \<const0> ;
  assign m_sc_payld[288] = \<const0> ;
  assign m_sc_payld[287] = \<const0> ;
  assign m_sc_payld[286] = \<const0> ;
  assign m_sc_payld[285] = \<const0> ;
  assign m_sc_payld[284] = \<const0> ;
  assign m_sc_payld[283] = \<const0> ;
  assign m_sc_payld[282] = \<const0> ;
  assign m_sc_payld[281] = \<const0> ;
  assign m_sc_payld[280] = \<const0> ;
  assign m_sc_payld[279] = \<const0> ;
  assign m_sc_payld[278] = \<const0> ;
  assign m_sc_payld[277] = \<const0> ;
  assign m_sc_payld[276] = \<const0> ;
  assign m_sc_payld[275] = \<const0> ;
  assign m_sc_payld[274] = \<const0> ;
  assign m_sc_payld[273] = \<const0> ;
  assign m_sc_payld[272] = \<const0> ;
  assign m_sc_payld[271] = \<const0> ;
  assign m_sc_payld[270] = \<const0> ;
  assign m_sc_payld[269] = \<const0> ;
  assign m_sc_payld[268] = \<const0> ;
  assign m_sc_payld[267] = \<const0> ;
  assign m_sc_payld[266] = \<const0> ;
  assign m_sc_payld[265] = \<const0> ;
  assign m_sc_payld[264] = \<const0> ;
  assign m_sc_payld[263] = \<const0> ;
  assign m_sc_payld[262] = \<const0> ;
  assign m_sc_payld[261] = \<const0> ;
  assign m_sc_payld[260] = \<const0> ;
  assign m_sc_payld[259] = \<const0> ;
  assign m_sc_payld[258] = \<const0> ;
  assign m_sc_payld[257] = \<const0> ;
  assign m_sc_payld[256] = \<const0> ;
  assign m_sc_payld[255] = \<const0> ;
  assign m_sc_payld[254] = \<const0> ;
  assign m_sc_payld[253] = \<const0> ;
  assign m_sc_payld[252] = \<const0> ;
  assign m_sc_payld[251] = \<const0> ;
  assign m_sc_payld[250] = \<const0> ;
  assign m_sc_payld[249] = \<const0> ;
  assign m_sc_payld[248] = \<const0> ;
  assign m_sc_payld[247] = \<const0> ;
  assign m_sc_payld[246] = \<const0> ;
  assign m_sc_payld[245] = \<const0> ;
  assign m_sc_payld[244] = \<const0> ;
  assign m_sc_payld[243] = \<const0> ;
  assign m_sc_payld[242] = \<const0> ;
  assign m_sc_payld[241] = \<const0> ;
  assign m_sc_payld[240] = \<const0> ;
  assign m_sc_payld[239] = \<const0> ;
  assign m_sc_payld[238] = \<const0> ;
  assign m_sc_payld[237] = \<const0> ;
  assign m_sc_payld[236] = \<const0> ;
  assign m_sc_payld[235] = \<const0> ;
  assign m_sc_payld[234] = \<const0> ;
  assign m_sc_payld[233] = \<const0> ;
  assign m_sc_payld[232] = \<const0> ;
  assign m_sc_payld[231] = \<const0> ;
  assign m_sc_payld[230] = \<const0> ;
  assign m_sc_payld[229] = \<const0> ;
  assign m_sc_payld[228] = \<const0> ;
  assign m_sc_payld[227] = \<const0> ;
  assign m_sc_payld[226] = \<const0> ;
  assign m_sc_payld[225] = \<const0> ;
  assign m_sc_payld[224] = \<const0> ;
  assign m_sc_payld[223] = \<const0> ;
  assign m_sc_payld[222] = \<const0> ;
  assign m_sc_payld[221] = \<const0> ;
  assign m_sc_payld[220] = \<const0> ;
  assign m_sc_payld[219] = \<const0> ;
  assign m_sc_payld[218] = \<const0> ;
  assign m_sc_payld[217] = \<const0> ;
  assign m_sc_payld[216] = \<const0> ;
  assign m_sc_payld[215] = \<const0> ;
  assign m_sc_payld[214] = \<const0> ;
  assign m_sc_payld[213] = \<const0> ;
  assign m_sc_payld[212] = \<const0> ;
  assign m_sc_payld[211] = \<const0> ;
  assign m_sc_payld[210] = \<const0> ;
  assign m_sc_payld[209] = \<const0> ;
  assign m_sc_payld[208] = \<const0> ;
  assign m_sc_payld[207] = \<const0> ;
  assign m_sc_payld[206] = \<const0> ;
  assign m_sc_payld[205] = \<const0> ;
  assign m_sc_payld[204] = \<const0> ;
  assign m_sc_payld[203] = \<const0> ;
  assign m_sc_payld[202] = \<const0> ;
  assign m_sc_payld[201] = \<const0> ;
  assign m_sc_payld[200] = \<const0> ;
  assign m_sc_payld[199] = \<const0> ;
  assign m_sc_payld[198] = \<const0> ;
  assign m_sc_payld[197] = \<const0> ;
  assign m_sc_payld[196] = \<const0> ;
  assign m_sc_payld[195] = \<const0> ;
  assign m_sc_payld[194] = \<const0> ;
  assign m_sc_payld[193] = \<const0> ;
  assign m_sc_payld[192] = \<const0> ;
  assign m_sc_payld[191] = \<const0> ;
  assign m_sc_payld[190] = \<const0> ;
  assign m_sc_payld[189] = \<const0> ;
  assign m_sc_payld[188] = \<const0> ;
  assign m_sc_payld[187] = \<const0> ;
  assign m_sc_payld[186] = \<const0> ;
  assign m_sc_payld[185] = \<const0> ;
  assign m_sc_payld[184] = \<const0> ;
  assign m_sc_payld[183] = \<const0> ;
  assign m_sc_payld[182] = \<const0> ;
  assign m_sc_payld[181] = \<const0> ;
  assign m_sc_payld[180] = \<const0> ;
  assign m_sc_payld[179] = \<const0> ;
  assign m_sc_payld[178] = \<const0> ;
  assign m_sc_payld[177] = \<const0> ;
  assign m_sc_payld[176] = \<const0> ;
  assign m_sc_payld[175] = \<const0> ;
  assign m_sc_payld[174] = \<const0> ;
  assign m_sc_payld[173] = \<const0> ;
  assign m_sc_payld[172] = \<const0> ;
  assign m_sc_payld[171] = \<const0> ;
  assign m_sc_payld[170] = \<const0> ;
  assign m_sc_payld[169] = \<const0> ;
  assign m_sc_payld[168] = \<const0> ;
  assign m_sc_payld[167] = \<const0> ;
  assign m_sc_payld[166] = \<const0> ;
  assign m_sc_payld[165] = \<const0> ;
  assign m_sc_payld[164] = \<const0> ;
  assign m_sc_payld[163] = \<const0> ;
  assign m_sc_payld[162] = \<const0> ;
  assign m_sc_payld[161] = \<const0> ;
  assign m_sc_payld[160] = \<const0> ;
  assign m_sc_payld[159] = \<const0> ;
  assign m_sc_payld[158] = \<const0> ;
  assign m_sc_payld[157] = \<const0> ;
  assign m_sc_payld[156] = \<const0> ;
  assign m_sc_payld[155] = \<const0> ;
  assign m_sc_payld[154] = \<const0> ;
  assign m_sc_payld[153] = \<const0> ;
  assign m_sc_payld[152] = \<const0> ;
  assign m_sc_payld[151] = \<const0> ;
  assign m_sc_payld[150] = \<const0> ;
  assign m_sc_payld[149] = \<const0> ;
  assign m_sc_payld[148] = \<const0> ;
  assign m_sc_payld[147] = \<const0> ;
  assign m_sc_payld[146] = \<const0> ;
  assign m_sc_payld[145] = \<const0> ;
  assign m_sc_payld[144] = \<const0> ;
  assign m_sc_payld[143] = \<const0> ;
  assign m_sc_payld[142] = \<const0> ;
  assign m_sc_payld[141] = \<const0> ;
  assign m_sc_payld[140] = \<const0> ;
  assign m_sc_payld[139] = \<const0> ;
  assign m_sc_payld[138] = \<const0> ;
  assign m_sc_payld[137] = \<const0> ;
  assign m_sc_payld[136] = \<const0> ;
  assign m_sc_payld[135] = \<const0> ;
  assign m_sc_payld[134] = \<const0> ;
  assign m_sc_payld[133] = \<const0> ;
  assign m_sc_payld[132] = \<const0> ;
  assign m_sc_payld[131] = \<const0> ;
  assign m_sc_payld[130] = \<const0> ;
  assign m_sc_payld[129] = \<const0> ;
  assign m_sc_payld[128] = \<const0> ;
  assign m_sc_payld[127] = \<const0> ;
  assign m_sc_payld[126] = \<const0> ;
  assign m_sc_payld[125] = \<const0> ;
  assign m_sc_payld[124] = \<const0> ;
  assign m_sc_payld[123] = \<const0> ;
  assign m_sc_payld[122] = \<const0> ;
  assign m_sc_payld[121] = \<const0> ;
  assign m_sc_payld[120] = \<const0> ;
  assign m_sc_payld[119] = \<const0> ;
  assign m_sc_payld[118] = \<const0> ;
  assign m_sc_payld[117] = \<const0> ;
  assign m_sc_payld[116] = \<const0> ;
  assign m_sc_payld[115] = \<const0> ;
  assign m_sc_payld[114] = \<const0> ;
  assign m_sc_payld[113] = \<const0> ;
  assign m_sc_payld[112] = \<const0> ;
  assign m_sc_payld[111] = \<const0> ;
  assign m_sc_payld[110] = \<const0> ;
  assign m_sc_payld[109] = \<const0> ;
  assign m_sc_payld[108] = \<const0> ;
  assign m_sc_payld[107] = \<const0> ;
  assign m_sc_payld[106] = \<const0> ;
  assign m_sc_payld[105] = \<const0> ;
  assign m_sc_payld[104] = \<const0> ;
  assign m_sc_payld[103] = \<const0> ;
  assign m_sc_payld[102] = \<const0> ;
  assign m_sc_payld[101] = \<const0> ;
  assign m_sc_payld[100] = \<const0> ;
  assign m_sc_payld[99] = \<const0> ;
  assign m_sc_payld[98] = \<const0> ;
  assign m_sc_payld[97] = \<const0> ;
  assign m_sc_payld[96] = \<const0> ;
  assign m_sc_payld[95] = \<const0> ;
  assign m_sc_payld[94] = \<const0> ;
  assign m_sc_payld[93] = \<const0> ;
  assign m_sc_payld[92] = \<const0> ;
  assign m_sc_payld[91] = \<const0> ;
  assign m_sc_payld[90] = \<const0> ;
  assign m_sc_payld[89] = \<const0> ;
  assign m_sc_payld[88] = \<const0> ;
  assign m_sc_payld[87] = \<const0> ;
  assign m_sc_payld[86] = \<const0> ;
  assign m_sc_payld[85] = \<const0> ;
  assign m_sc_payld[84] = \<const0> ;
  assign m_sc_payld[83] = \<const0> ;
  assign m_sc_payld[82] = \<const0> ;
  assign m_sc_payld[81] = \<const0> ;
  assign m_sc_payld[80] = \<const0> ;
  assign m_sc_payld[79] = \<const0> ;
  assign m_sc_payld[78] = \<const0> ;
  assign m_sc_payld[77] = \<const0> ;
  assign m_sc_payld[76] = \<const0> ;
  assign m_sc_payld[75] = \<const0> ;
  assign m_sc_payld[74] = \<const0> ;
  assign m_sc_payld[73] = \<const0> ;
  assign m_sc_payld[72] = \<const0> ;
  assign m_sc_payld[71] = \<const0> ;
  assign m_sc_payld[70] = \<const0> ;
  assign m_sc_payld[69] = \<const0> ;
  assign m_sc_payld[68] = \<const0> ;
  assign m_sc_payld[67] = \<const0> ;
  assign m_sc_payld[66] = \<const0> ;
  assign m_sc_payld[65] = \<const0> ;
  assign m_sc_payld[64] = \<const0> ;
  assign m_sc_payld[63] = \<const0> ;
  assign m_sc_payld[62] = \<const0> ;
  assign m_sc_payld[61] = \<const0> ;
  assign m_sc_payld[60] = \<const0> ;
  assign m_sc_payld[59] = \<const0> ;
  assign m_sc_payld[58] = \<const0> ;
  assign m_sc_payld[57] = \<const0> ;
  assign m_sc_payld[56] = \<const0> ;
  assign m_sc_payld[55] = \<const0> ;
  assign m_sc_payld[54] = \<const0> ;
  assign m_sc_payld[53] = \<const0> ;
  assign m_sc_payld[52] = \<const0> ;
  assign m_sc_payld[51] = \<const0> ;
  assign m_sc_payld[50] = \<const0> ;
  assign m_sc_payld[49] = \<const0> ;
  assign m_sc_payld[48] = \<const0> ;
  assign m_sc_payld[47] = \<const0> ;
  assign m_sc_payld[46] = \<const0> ;
  assign m_sc_payld[45] = \<const0> ;
  assign m_sc_payld[44] = \<const0> ;
  assign m_sc_payld[43] = \<const0> ;
  assign m_sc_payld[42] = \<const0> ;
  assign m_sc_payld[41] = \<const0> ;
  assign m_sc_payld[40] = \<const0> ;
  assign m_sc_payld[39] = \<const0> ;
  assign m_sc_payld[38] = \<const0> ;
  assign m_sc_payld[37] = \<const0> ;
  assign m_sc_payld[36] = \<const0> ;
  assign m_sc_payld[35] = \<const0> ;
  assign m_sc_payld[34] = \<const0> ;
  assign m_sc_payld[33] = \<const0> ;
  assign m_sc_payld[32] = \<const0> ;
  assign m_sc_payld[31] = \<const0> ;
  assign m_sc_payld[30] = \<const0> ;
  assign m_sc_payld[29] = \<const0> ;
  assign m_sc_payld[28] = \<const0> ;
  assign m_sc_payld[27] = \<const0> ;
  assign m_sc_payld[26] = \<const0> ;
  assign m_sc_payld[25] = \<const0> ;
  assign m_sc_payld[24] = \<const0> ;
  assign m_sc_payld[23] = \<const0> ;
  assign m_sc_payld[22] = \<const0> ;
  assign m_sc_payld[21] = \<const0> ;
  assign m_sc_payld[20] = \<const0> ;
  assign m_sc_payld[19] = \<const0> ;
  assign m_sc_payld[18] = \<const0> ;
  assign m_sc_payld[17] = \<const0> ;
  assign m_sc_payld[16] = \<const0> ;
  assign m_sc_payld[15] = \<const0> ;
  assign m_sc_payld[14] = \<const0> ;
  assign m_sc_payld[13] = \<const0> ;
  assign m_sc_payld[12] = \<const0> ;
  assign m_sc_payld[11] = \<const0> ;
  assign m_sc_payld[10] = \<const0> ;
  assign m_sc_payld[9] = \<const0> ;
  assign m_sc_payld[8] = \<const0> ;
  assign m_sc_payld[7] = \<const0> ;
  assign m_sc_payld[6] = \<const0> ;
  assign m_sc_payld[5] = \<const0> ;
  assign m_sc_payld[4] = \<const0> ;
  assign m_sc_payld[3] = \<const0> ;
  assign m_sc_payld[2] = \<const0> ;
  assign m_sc_payld[1] = \<const0> ;
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \<const0> ;
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_sc_recv[2] = \<const0> ;
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r ));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\gen_mi[1].m_sc_sel_mi_r ));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(\gen_mi[2].m_sc_sel_mi_r ));
endmodule

(* C_CONNECTIVITY = "3'b100" *) (* C_M_PIPELINES = "32'b00000000000000000000000000000001" *) (* C_NUM_MI = "1" *) 
(* C_NUM_SI = "3" *) (* C_PAYLD_WIDTH = "88" *) (* C_S_LATENCY = "32'b00000000000000000000000000000000" *) 
(* C_S_PIPELINES = "32'b00000000000000000000000000000000" *) (* C_TESTING_MODE = "0" *) (* K_MAX_INFO_WIDTH = "1" *) 
(* LP_LOG_NUM_SI = "32'b00000000000000000000000000000010" *) (* LP_MUX_IMPL = "32'b00000000000000000000000000000000" *) (* LP_M_SC_SEL_MI_PIPELINE_DEPTH = "32'b00000000000000000000000000000000" *) 
(* ORIG_REF_NAME = "sc_switchboard_v1_0_4_top" *) 
module ADC_axi_smc_0_sc_switchboard_v1_0_4_top__parameterized3
   (aclk,
    aclken,
    connectivity,
    s_sc_send,
    s_sc_req,
    s_sc_info,
    s_sc_payld,
    s_sc_recv,
    m_sc_recv,
    m_sc_send,
    m_sc_req,
    m_sc_info,
    m_sc_payld);
  input aclk;
  input aclken;
  input [2:0]connectivity;
  input [2:0]s_sc_send;
  input [2:0]s_sc_req;
  input [2:0]s_sc_info;
  input [263:0]s_sc_payld;
  output [2:0]s_sc_recv;
  input [2:0]m_sc_recv;
  output [2:0]m_sc_send;
  output [2:0]m_sc_req;
  output [2:0]m_sc_info;
  output [87:0]m_sc_payld;

  wire \<const0> ;
  wire aclk;
  wire [87:1]\^m_sc_payld ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire [2:0]m_sc_recv;
  wire [263:0]s_sc_payld;

  assign m_sc_info[2] = \<const0> ;
  assign m_sc_info[1] = \<const0> ;
  assign m_sc_info[0] = \<const0> ;
  assign m_sc_payld[87:1] = \^m_sc_payld [87:1];
  assign m_sc_payld[0] = \<const0> ;
  assign m_sc_req[2] = \<const0> ;
  assign m_sc_req[1] = \<const0> ;
  assign m_sc_req[0] = \<const0> ;
  assign m_sc_send[2] = \<const0> ;
  assign m_sc_send[1] = \<const0> ;
  assign m_sc_send[0] = \<const0> ;
  assign s_sc_recv[2] = \<const0> ;
  assign s_sc_recv[1] = \<const0> ;
  assign s_sc_recv[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized16 \gen_mi[0].inst_opipe_payld 
       (.aclk(aclk),
        .m_sc_payld(\^m_sc_payld ),
        .m_sc_recv(m_sc_recv[2]),
        .s_sc_payld(s_sc_payld[263:177]));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall
   (mr_axi_awvalid,
    \state_reg[m_valid_i]_0 ,
    \gen_endpoint.w_state_reg[0] ,
    \gen_axi.gen_write.s_axi_awready_i_reg ,
    \m_vector_i_reg[1061]_0 ,
    \gen_endpoint.w_cnt_reg[5] ,
    s_axi_awready_d,
    m_axi_awvalid,
    \gen_pipe[1].pipe_reg[1][139] ,
    areset,
    aclk,
    \gen_endpoint.w_state ,
    \gen_endpoint.err_bvalid ,
    \state_reg[s_ready_i]_0 ,
    \gen_endpoint.err_awready ,
    s_split_awvalid,
    Q,
    \m_vector_i_reg[1144]_0 ,
    sr_axi_awvalid,
    mr_axi_awready,
    \gen_endpoint.w_trigger_decerr ,
    w_resume,
    m_axi_awready);
  output mr_axi_awvalid;
  output \state_reg[m_valid_i]_0 ;
  output \gen_endpoint.w_state_reg[0] ;
  output \gen_axi.gen_write.s_axi_awready_i_reg ;
  output \m_vector_i_reg[1061]_0 ;
  output \gen_endpoint.w_cnt_reg[5] ;
  output s_axi_awready_d;
  output m_axi_awvalid;
  output [51:0]\gen_pipe[1].pipe_reg[1][139] ;
  input areset;
  input aclk;
  input [1:0]\gen_endpoint.w_state ;
  input \gen_endpoint.err_bvalid ;
  input \state_reg[s_ready_i]_0 ;
  input \gen_endpoint.err_awready ;
  input s_split_awvalid;
  input [0:0]Q;
  input [51:0]\m_vector_i_reg[1144]_0 ;
  input sr_axi_awvalid;
  input mr_axi_awready;
  input \gen_endpoint.w_trigger_decerr ;
  input w_resume;
  input m_axi_awready;

  wire [0:0]Q;
  wire aclk;
  wire areset;
  wire \gen_axi.gen_write.s_axi_awready_i_reg ;
  wire \gen_endpoint.err_awready ;
  wire \gen_endpoint.err_bvalid ;
  wire \gen_endpoint.w_cnt_reg[5] ;
  wire [1:0]\gen_endpoint.w_state ;
  wire \gen_endpoint.w_state_reg[0] ;
  wire \gen_endpoint.w_trigger_decerr ;
  wire [51:0]\gen_pipe[1].pipe_reg[1][139] ;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_vector_i;
  wire \m_vector_i[1061]_i_1_n_0 ;
  wire \m_vector_i[1062]_i_1_n_0 ;
  wire \m_vector_i[1063]_i_1_n_0 ;
  wire \m_vector_i[1064]_i_1_n_0 ;
  wire \m_vector_i[1065]_i_1_n_0 ;
  wire \m_vector_i[1066]_i_1_n_0 ;
  wire \m_vector_i[1067]_i_1_n_0 ;
  wire \m_vector_i[1068]_i_1_n_0 ;
  wire \m_vector_i[1069]_i_1_n_0 ;
  wire \m_vector_i[1070]_i_1_n_0 ;
  wire \m_vector_i[1071]_i_1_n_0 ;
  wire \m_vector_i[1072]_i_1_n_0 ;
  wire \m_vector_i[1073]_i_1_n_0 ;
  wire \m_vector_i[1074]_i_1_n_0 ;
  wire \m_vector_i[1075]_i_1_n_0 ;
  wire \m_vector_i[1076]_i_1_n_0 ;
  wire \m_vector_i[1077]_i_1_n_0 ;
  wire \m_vector_i[1078]_i_1_n_0 ;
  wire \m_vector_i[1079]_i_1_n_0 ;
  wire \m_vector_i[1080]_i_1_n_0 ;
  wire \m_vector_i[1081]_i_1_n_0 ;
  wire \m_vector_i[1082]_i_1_n_0 ;
  wire \m_vector_i[1083]_i_1_n_0 ;
  wire \m_vector_i[1084]_i_1_n_0 ;
  wire \m_vector_i[1085]_i_1_n_0 ;
  wire \m_vector_i[1086]_i_1_n_0 ;
  wire \m_vector_i[1087]_i_1_n_0 ;
  wire \m_vector_i[1088]_i_1_n_0 ;
  wire \m_vector_i[1089]_i_1_n_0 ;
  wire \m_vector_i[1090]_i_1_n_0 ;
  wire \m_vector_i[1091]_i_1_n_0 ;
  wire \m_vector_i[1092]_i_2_n_0 ;
  wire \m_vector_i[1125]_i_1_n_0 ;
  wire \m_vector_i[1126]_i_1_n_0 ;
  wire \m_vector_i[1127]_i_1_n_0 ;
  wire \m_vector_i[1128]_i_1_n_0 ;
  wire \m_vector_i[1129]_i_1_n_0 ;
  wire \m_vector_i[1130]_i_1_n_0 ;
  wire \m_vector_i[1131]_i_1_n_0 ;
  wire \m_vector_i[1132]_i_1_n_0 ;
  wire \m_vector_i[1133]_i_1_n_0 ;
  wire \m_vector_i[1134]_i_1_n_0 ;
  wire \m_vector_i[1135]_i_1_n_0 ;
  wire \m_vector_i[1136]_i_1_n_0 ;
  wire \m_vector_i[1137]_i_1_n_0 ;
  wire \m_vector_i[1138]_i_1_n_0 ;
  wire \m_vector_i[1139]_i_1_n_0 ;
  wire \m_vector_i[1140]_i_1_n_0 ;
  wire \m_vector_i[1141]_i_1_n_0 ;
  wire \m_vector_i[1142]_i_1_n_0 ;
  wire \m_vector_i[1143]_i_1_n_0 ;
  wire \m_vector_i[1144]_i_1_n_0 ;
  wire \m_vector_i_reg[1061]_0 ;
  wire [51:0]\m_vector_i_reg[1144]_0 ;
  wire mr_axi_awready;
  wire mr_axi_awvalid;
  wire [0:0]p_0_in;
  wire s_axi_awready_d;
  wire s_split_awvalid;
  wire \skid_buffer[1144]_i_1_n_0 ;
  wire \skid_buffer_reg_n_0_[1061] ;
  wire \skid_buffer_reg_n_0_[1062] ;
  wire \skid_buffer_reg_n_0_[1063] ;
  wire \skid_buffer_reg_n_0_[1064] ;
  wire \skid_buffer_reg_n_0_[1065] ;
  wire \skid_buffer_reg_n_0_[1066] ;
  wire \skid_buffer_reg_n_0_[1067] ;
  wire \skid_buffer_reg_n_0_[1068] ;
  wire \skid_buffer_reg_n_0_[1069] ;
  wire \skid_buffer_reg_n_0_[1070] ;
  wire \skid_buffer_reg_n_0_[1071] ;
  wire \skid_buffer_reg_n_0_[1072] ;
  wire \skid_buffer_reg_n_0_[1073] ;
  wire \skid_buffer_reg_n_0_[1074] ;
  wire \skid_buffer_reg_n_0_[1075] ;
  wire \skid_buffer_reg_n_0_[1076] ;
  wire \skid_buffer_reg_n_0_[1077] ;
  wire \skid_buffer_reg_n_0_[1078] ;
  wire \skid_buffer_reg_n_0_[1079] ;
  wire \skid_buffer_reg_n_0_[1080] ;
  wire \skid_buffer_reg_n_0_[1081] ;
  wire \skid_buffer_reg_n_0_[1082] ;
  wire \skid_buffer_reg_n_0_[1083] ;
  wire \skid_buffer_reg_n_0_[1084] ;
  wire \skid_buffer_reg_n_0_[1085] ;
  wire \skid_buffer_reg_n_0_[1086] ;
  wire \skid_buffer_reg_n_0_[1087] ;
  wire \skid_buffer_reg_n_0_[1088] ;
  wire \skid_buffer_reg_n_0_[1089] ;
  wire \skid_buffer_reg_n_0_[1090] ;
  wire \skid_buffer_reg_n_0_[1091] ;
  wire \skid_buffer_reg_n_0_[1092] ;
  wire \skid_buffer_reg_n_0_[1125] ;
  wire \skid_buffer_reg_n_0_[1126] ;
  wire \skid_buffer_reg_n_0_[1127] ;
  wire \skid_buffer_reg_n_0_[1128] ;
  wire \skid_buffer_reg_n_0_[1129] ;
  wire \skid_buffer_reg_n_0_[1130] ;
  wire \skid_buffer_reg_n_0_[1131] ;
  wire \skid_buffer_reg_n_0_[1132] ;
  wire \skid_buffer_reg_n_0_[1133] ;
  wire \skid_buffer_reg_n_0_[1134] ;
  wire \skid_buffer_reg_n_0_[1135] ;
  wire \skid_buffer_reg_n_0_[1136] ;
  wire \skid_buffer_reg_n_0_[1137] ;
  wire \skid_buffer_reg_n_0_[1138] ;
  wire \skid_buffer_reg_n_0_[1139] ;
  wire \skid_buffer_reg_n_0_[1140] ;
  wire \skid_buffer_reg_n_0_[1141] ;
  wire \skid_buffer_reg_n_0_[1142] ;
  wire \skid_buffer_reg_n_0_[1143] ;
  wire \skid_buffer_reg_n_0_[1144] ;
  wire sr_axi_awvalid;
  wire state;
  wire \state[m_valid_i]_i_1_n_0 ;
  wire \state[m_valid_i]_i_2_n_0 ;
  wire \state[m_valid_i]_i_3_n_0 ;
  wire \state[s_ready_i]_i_1__2_n_0 ;
  wire \state[s_ready_i]_i_2_n_0 ;
  wire \state[s_ready_i]_i_3_n_0 ;
  wire \state[s_stall_d]_i_1_n_0 ;
  wire \state_reg[m_valid_i]_0 ;
  wire \state_reg[s_ready_i]_0 ;
  wire \state_reg[s_stall_d]0 ;
  wire w_resume;

  LUT4 #(
    .INIT(16'h7FFF)) 
    \gen_axi.gen_write.s_axi_awready_i_i_2 
       (.I0(mr_axi_awvalid),
        .I1(\gen_endpoint.err_awready ),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.w_state [0]),
        .O(\gen_axi.gen_write.s_axi_awready_i_reg ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \gen_endpoint.w_cnt[5]_i_6 
       (.I0(\state_reg[m_valid_i]_0 ),
        .I1(s_split_awvalid),
        .I2(\gen_endpoint.w_state [0]),
        .I3(\gen_endpoint.w_state [1]),
        .I4(Q),
        .I5(areset),
        .O(\gen_endpoint.w_cnt_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hC4040404)) 
    \gen_endpoint.w_state[1]_i_5 
       (.I0(mr_axi_awvalid),
        .I1(\gen_endpoint.w_state [0]),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.err_bvalid ),
        .I4(\state_reg[s_ready_i]_0 ),
        .O(\gen_endpoint.w_state_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h2)) 
    m_axi_awvalid_INST_0
       (.I0(mr_axi_awvalid),
        .I1(\gen_endpoint.w_state [1]),
        .O(m_axi_awvalid));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \m_vector_i[1057]_i_3 
       (.I0(\gen_endpoint.w_state [0]),
        .I1(\gen_endpoint.w_state [1]),
        .O(\m_vector_i_reg[1061]_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1061]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1061] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [0]),
        .O(\m_vector_i[1061]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1062]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1062] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [1]),
        .O(\m_vector_i[1062]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1063]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1063] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [2]),
        .O(\m_vector_i[1063]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1064]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1064] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [3]),
        .O(\m_vector_i[1064]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1065]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1065] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [4]),
        .O(\m_vector_i[1065]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1066]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1066] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [5]),
        .O(\m_vector_i[1066]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1067]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1067] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [6]),
        .O(\m_vector_i[1067]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1068]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1068] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [7]),
        .O(\m_vector_i[1068]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1069]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1069] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [8]),
        .O(\m_vector_i[1069]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1070]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1070] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [9]),
        .O(\m_vector_i[1070]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1071]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1071] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [10]),
        .O(\m_vector_i[1071]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1072]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1072] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [11]),
        .O(\m_vector_i[1072]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1073]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1073] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [12]),
        .O(\m_vector_i[1073]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1074]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1074] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [13]),
        .O(\m_vector_i[1074]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1075]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1075] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [14]),
        .O(\m_vector_i[1075]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1076]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1076] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [15]),
        .O(\m_vector_i[1076]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1077]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1077] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [16]),
        .O(\m_vector_i[1077]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1078]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1078] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [17]),
        .O(\m_vector_i[1078]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1079]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1079] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [18]),
        .O(\m_vector_i[1079]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1080]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1080] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [19]),
        .O(\m_vector_i[1080]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1081]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1081] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [20]),
        .O(\m_vector_i[1081]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1082]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1082] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [21]),
        .O(\m_vector_i[1082]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1083]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1083] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [22]),
        .O(\m_vector_i[1083]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1084]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1084] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [23]),
        .O(\m_vector_i[1084]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1085]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1085] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [24]),
        .O(\m_vector_i[1085]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1086]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1086] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [25]),
        .O(\m_vector_i[1086]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1087]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1087] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [26]),
        .O(\m_vector_i[1087]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1088]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1088] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [27]),
        .O(\m_vector_i[1088]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1089]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1089] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [28]),
        .O(\m_vector_i[1089]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1090]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1090] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [29]),
        .O(\m_vector_i[1090]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1091]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1091] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [30]),
        .O(\m_vector_i[1091]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFB8FFB800B8FF)) 
    \m_vector_i[1092]_i_1 
       (.I0(m_axi_awready),
        .I1(\m_vector_i_reg[1061]_0 ),
        .I2(\gen_endpoint.err_awready ),
        .I3(mr_axi_awvalid),
        .I4(p_0_in),
        .I5(\state_reg[m_valid_i]_0 ),
        .O(m_vector_i));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1092]_i_2 
       (.I0(\skid_buffer_reg_n_0_[1092] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [31]),
        .O(\m_vector_i[1092]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1125]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1125] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [32]),
        .O(\m_vector_i[1125]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1126]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1126] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [33]),
        .O(\m_vector_i[1126]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1127]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1127] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [34]),
        .O(\m_vector_i[1127]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1128]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1128] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [35]),
        .O(\m_vector_i[1128]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1129]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1129] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [36]),
        .O(\m_vector_i[1129]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1130]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1130] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [37]),
        .O(\m_vector_i[1130]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1131]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1131] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [38]),
        .O(\m_vector_i[1131]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1132]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1132] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [39]),
        .O(\m_vector_i[1132]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1133]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1133] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [40]),
        .O(\m_vector_i[1133]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1134]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1134] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [41]),
        .O(\m_vector_i[1134]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1135]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1135] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [42]),
        .O(\m_vector_i[1135]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1136]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1136] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [43]),
        .O(\m_vector_i[1136]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1137]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1137] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [44]),
        .O(\m_vector_i[1137]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1138]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1138] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [45]),
        .O(\m_vector_i[1138]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1139]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1139] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [46]),
        .O(\m_vector_i[1139]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1140]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1140] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [47]),
        .O(\m_vector_i[1140]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1141]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1141] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [48]),
        .O(\m_vector_i[1141]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1142]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1142] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [49]),
        .O(\m_vector_i[1142]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1143]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1143] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [50]),
        .O(\m_vector_i[1143]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1144]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1144] ),
        .I1(mr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\m_vector_i_reg[1144]_0 [51]),
        .O(\m_vector_i[1144]_i_1_n_0 ));
  FDRE \m_vector_i_reg[1061] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1061]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1062] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1062]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [1]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1063] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1063]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [2]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1064] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1064]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [3]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1065] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1065]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [4]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1066] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1066]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [5]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1067] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1067]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [6]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1068] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1068]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [7]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1069] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1069]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [8]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1070] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1070]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [9]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1071] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1071]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [10]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1072] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1072]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [11]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1073] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1073]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [12]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1074] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1074]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [13]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1075] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1075]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [14]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1076] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1076]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [15]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1077] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1077]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [16]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1078] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1078]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [17]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1079] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1079]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [18]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1080] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1080]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [19]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1081] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1081]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [20]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1082] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1082]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [21]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1083] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1083]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [22]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1084] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1084]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [23]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1085] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1085]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [24]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1086] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1086]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [25]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1087] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1087]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [26]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1088] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1088]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [27]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1089] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1089]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [28]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1090] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1090]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [29]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1091] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1091]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [30]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1092] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1092]_i_2_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [31]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1125] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1125]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [32]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1126] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1126]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [33]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1127] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1127]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [34]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1128] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1128]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [35]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1129] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1129]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [36]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1130] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1130]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [37]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1131] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1131]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [38]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1132] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1132]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [39]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1133] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1133]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [40]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1134] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1134]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [41]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1135] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1135]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [42]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1136] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1136]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [43]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1137] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1137]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [44]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1138] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1138]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [45]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1139] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1139]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [46]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1140] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1140]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [47]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1141] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1141]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [48]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1142] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1142]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [49]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1143] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1143]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [50]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1144] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1144]_i_1_n_0 ),
        .Q(\gen_pipe[1].pipe_reg[1][139] [51]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[1144]_i_1 
       (.I0(\state_reg[m_valid_i]_0 ),
        .I1(mr_axi_awvalid),
        .O(\skid_buffer[1144]_i_1_n_0 ));
  FDRE \skid_buffer_reg[1061] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [0]),
        .Q(\skid_buffer_reg_n_0_[1061] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1062] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [1]),
        .Q(\skid_buffer_reg_n_0_[1062] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1063] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [2]),
        .Q(\skid_buffer_reg_n_0_[1063] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1064] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [3]),
        .Q(\skid_buffer_reg_n_0_[1064] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1065] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [4]),
        .Q(\skid_buffer_reg_n_0_[1065] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1066] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [5]),
        .Q(\skid_buffer_reg_n_0_[1066] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1067] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [6]),
        .Q(\skid_buffer_reg_n_0_[1067] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1068] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [7]),
        .Q(\skid_buffer_reg_n_0_[1068] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1069] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [8]),
        .Q(\skid_buffer_reg_n_0_[1069] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1070] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [9]),
        .Q(\skid_buffer_reg_n_0_[1070] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1071] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [10]),
        .Q(\skid_buffer_reg_n_0_[1071] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1072] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [11]),
        .Q(\skid_buffer_reg_n_0_[1072] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1073] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [12]),
        .Q(\skid_buffer_reg_n_0_[1073] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1074] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [13]),
        .Q(\skid_buffer_reg_n_0_[1074] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1075] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [14]),
        .Q(\skid_buffer_reg_n_0_[1075] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1076] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [15]),
        .Q(\skid_buffer_reg_n_0_[1076] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1077] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [16]),
        .Q(\skid_buffer_reg_n_0_[1077] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1078] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [17]),
        .Q(\skid_buffer_reg_n_0_[1078] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1079] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [18]),
        .Q(\skid_buffer_reg_n_0_[1079] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1080] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [19]),
        .Q(\skid_buffer_reg_n_0_[1080] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1081] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [20]),
        .Q(\skid_buffer_reg_n_0_[1081] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1082] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [21]),
        .Q(\skid_buffer_reg_n_0_[1082] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1083] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [22]),
        .Q(\skid_buffer_reg_n_0_[1083] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1084] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [23]),
        .Q(\skid_buffer_reg_n_0_[1084] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1085] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [24]),
        .Q(\skid_buffer_reg_n_0_[1085] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1086] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [25]),
        .Q(\skid_buffer_reg_n_0_[1086] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1087] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [26]),
        .Q(\skid_buffer_reg_n_0_[1087] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1088] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [27]),
        .Q(\skid_buffer_reg_n_0_[1088] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1089] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [28]),
        .Q(\skid_buffer_reg_n_0_[1089] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1090] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [29]),
        .Q(\skid_buffer_reg_n_0_[1090] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1091] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [30]),
        .Q(\skid_buffer_reg_n_0_[1091] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1092] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [31]),
        .Q(\skid_buffer_reg_n_0_[1092] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1125] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [32]),
        .Q(\skid_buffer_reg_n_0_[1125] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1126] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [33]),
        .Q(\skid_buffer_reg_n_0_[1126] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1127] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [34]),
        .Q(\skid_buffer_reg_n_0_[1127] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1128] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [35]),
        .Q(\skid_buffer_reg_n_0_[1128] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1129] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [36]),
        .Q(\skid_buffer_reg_n_0_[1129] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1130] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [37]),
        .Q(\skid_buffer_reg_n_0_[1130] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1131] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [38]),
        .Q(\skid_buffer_reg_n_0_[1131] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1132] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [39]),
        .Q(\skid_buffer_reg_n_0_[1132] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1133] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [40]),
        .Q(\skid_buffer_reg_n_0_[1133] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1134] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [41]),
        .Q(\skid_buffer_reg_n_0_[1134] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1135] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [42]),
        .Q(\skid_buffer_reg_n_0_[1135] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1136] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [43]),
        .Q(\skid_buffer_reg_n_0_[1136] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1137] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [44]),
        .Q(\skid_buffer_reg_n_0_[1137] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1138] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [45]),
        .Q(\skid_buffer_reg_n_0_[1138] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1139] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [46]),
        .Q(\skid_buffer_reg_n_0_[1139] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1140] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [47]),
        .Q(\skid_buffer_reg_n_0_[1140] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1141] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [48]),
        .Q(\skid_buffer_reg_n_0_[1141] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1142] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [49]),
        .Q(\skid_buffer_reg_n_0_[1142] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1143] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [50]),
        .Q(\skid_buffer_reg_n_0_[1143] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1144] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(\m_vector_i_reg[1144]_0 [51]),
        .Q(\skid_buffer_reg_n_0_[1144] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h3A0AFFFF3A0A0000)) 
    \state[m_valid_i]_i_1 
       (.I0(\state[m_valid_i]_i_2_n_0 ),
        .I1(p_0_in),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(\state[m_valid_i]_i_3_n_0 ),
        .I4(state),
        .I5(mr_axi_awvalid),
        .O(\state[m_valid_i]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8C8C8C8B8C8)) 
    \state[m_valid_i]_i_2 
       (.I0(w_resume),
        .I1(p_0_in),
        .I2(mr_axi_awvalid),
        .I3(\gen_endpoint.err_awready ),
        .I4(\m_vector_i_reg[1061]_0 ),
        .I5(m_axi_awready),
        .O(\state[m_valid_i]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h05055505FDFDDDFD)) 
    \state[m_valid_i]_i_3 
       (.I0(mr_axi_awready),
        .I1(sr_axi_awvalid),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(mr_axi_awvalid),
        .I4(p_0_in),
        .I5(\gen_endpoint.w_trigger_decerr ),
        .O(\state[m_valid_i]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFF0FAFACFCF)) 
    \state[m_valid_i]_i_4 
       (.I0(sr_axi_awvalid),
        .I1(mr_axi_awready),
        .I2(mr_axi_awvalid),
        .I3(w_resume),
        .I4(\state_reg[m_valid_i]_0 ),
        .I5(p_0_in),
        .O(state));
  LUT5 #(
    .INIT(32'hFCFFAA00)) 
    \state[s_ready_i]_i_1__2 
       (.I0(\state[s_ready_i]_i_2_n_0 ),
        .I1(p_0_in),
        .I2(\state[s_ready_i]_i_3_n_0 ),
        .I3(state),
        .I4(\state_reg[m_valid_i]_0 ),
        .O(\state[s_ready_i]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hBBB000B0BBBBBBBB)) 
    \state[s_ready_i]_i_2 
       (.I0(w_resume),
        .I1(p_0_in),
        .I2(\gen_endpoint.err_awready ),
        .I3(\m_vector_i_reg[1061]_0 ),
        .I4(m_axi_awready),
        .I5(mr_axi_awvalid),
        .O(\state[s_ready_i]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \state[s_ready_i]_i_2__1 
       (.I0(\gen_endpoint.w_state [0]),
        .I1(\gen_endpoint.w_state [1]),
        .I2(Q),
        .I3(areset),
        .I4(\state_reg[m_valid_i]_0 ),
        .O(s_axi_awready_d));
  LUT6 #(
    .INIT(64'h05055505FDFDDDFD)) 
    \state[s_ready_i]_i_3 
       (.I0(sr_axi_awvalid),
        .I1(mr_axi_awready),
        .I2(\state_reg[m_valid_i]_0 ),
        .I3(mr_axi_awvalid),
        .I4(p_0_in),
        .I5(\gen_endpoint.w_trigger_decerr ),
        .O(\state[s_ready_i]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \state[s_stall_d]_i_1 
       (.I0(\state_reg[s_stall_d]0 ),
        .I1(state),
        .I2(p_0_in),
        .O(\state[s_stall_d]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00A200A20000CC00)) 
    \state[s_stall_d]_i_2 
       (.I0(\gen_endpoint.w_trigger_decerr ),
        .I1(mr_axi_awvalid),
        .I2(sr_axi_awvalid),
        .I3(p_0_in),
        .I4(w_resume),
        .I5(\state_reg[m_valid_i]_0 ),
        .O(\state_reg[s_stall_d]0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1_n_0 ),
        .Q(mr_axi_awvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1__2_n_0 ),
        .Q(\state_reg[m_valid_i]_0 ),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_33
   (s_split_awvalid,
    S02_AXI_awready,
    \gen_endpoint.w_state_reg[1] ,
    \gen_endpoint.w_state_reg[0] ,
    \gen_endpoint.w_enable_reg ,
    p_13_in,
    \gen_endpoint.w_trigger_decerr ,
    E,
    sr_axi_awvalid,
    \skid_buffer_reg[1144]_0 ,
    areset,
    aclk,
    \gen_endpoint.w_state ,
    Q,
    \gen_endpoint.w_cnt_reg[2] ,
    \state_reg[m_valid_i]_0 ,
    \gen_endpoint.w_enable_reg_0 ,
    \state_reg[m_valid_i]_1 ,
    \gen_endpoint.b_cnt_reg[3] ,
    \gen_endpoint.w_state_reg[1]_0 ,
    \gen_endpoint.w_cnt_reg[1] ,
    \state_reg[s_ready_i]_0 ,
    m_axi_bvalid,
    \state_reg[s_ready_i]_1 ,
    areset_reg,
    s_axi_awvalid,
    s_axi_awready_d,
    D);
  output s_split_awvalid;
  output S02_AXI_awready;
  output \gen_endpoint.w_state_reg[1] ;
  output \gen_endpoint.w_state_reg[0] ;
  output \gen_endpoint.w_enable_reg ;
  output p_13_in;
  output \gen_endpoint.w_trigger_decerr ;
  output [0:0]E;
  output sr_axi_awvalid;
  output [51:0]\skid_buffer_reg[1144]_0 ;
  input areset;
  input aclk;
  input [1:0]\gen_endpoint.w_state ;
  input [2:0]Q;
  input \gen_endpoint.w_cnt_reg[2] ;
  input \state_reg[m_valid_i]_0 ;
  input \gen_endpoint.w_enable_reg_0 ;
  input \state_reg[m_valid_i]_1 ;
  input \gen_endpoint.b_cnt_reg[3] ;
  input \gen_endpoint.w_state_reg[1]_0 ;
  input \gen_endpoint.w_cnt_reg[1] ;
  input \state_reg[s_ready_i]_0 ;
  input m_axi_bvalid;
  input \state_reg[s_ready_i]_1 ;
  input areset_reg;
  input s_axi_awvalid;
  input s_axi_awready_d;
  input [53:0]D;

  wire [53:0]D;
  wire [0:0]E;
  wire [2:0]Q;
  wire S02_AXI_awready;
  wire aclk;
  wire areset;
  wire areset_reg;
  wire \gen_endpoint.b_cnt_reg[3] ;
  wire \gen_endpoint.w_cnt_reg[1] ;
  wire \gen_endpoint.w_cnt_reg[2] ;
  wire \gen_endpoint.w_enable_reg ;
  wire \gen_endpoint.w_enable_reg_0 ;
  wire [1:0]\gen_endpoint.w_state ;
  wire \gen_endpoint.w_state[1]_i_2_n_0 ;
  wire \gen_endpoint.w_state[1]_i_3_n_0 ;
  wire \gen_endpoint.w_state_reg[0] ;
  wire \gen_endpoint.w_state_reg[1] ;
  wire \gen_endpoint.w_state_reg[1]_0 ;
  wire \gen_endpoint.w_trigger_decerr ;
  wire m_axi_bvalid;
  wire m_vector_i;
  wire \m_vector_i[1024]_i_1_n_0 ;
  wire \m_vector_i[1025]_i_1_n_0 ;
  wire \m_vector_i[1061]_i_1__0_n_0 ;
  wire \m_vector_i[1062]_i_1__0_n_0 ;
  wire \m_vector_i[1063]_i_1__0_n_0 ;
  wire \m_vector_i[1064]_i_1__0_n_0 ;
  wire \m_vector_i[1065]_i_1__0_n_0 ;
  wire \m_vector_i[1066]_i_1__0_n_0 ;
  wire \m_vector_i[1067]_i_1__0_n_0 ;
  wire \m_vector_i[1068]_i_1__0_n_0 ;
  wire \m_vector_i[1069]_i_1__0_n_0 ;
  wire \m_vector_i[1070]_i_1__0_n_0 ;
  wire \m_vector_i[1071]_i_1__0_n_0 ;
  wire \m_vector_i[1072]_i_1__0_n_0 ;
  wire \m_vector_i[1073]_i_1__0_n_0 ;
  wire \m_vector_i[1074]_i_1__0_n_0 ;
  wire \m_vector_i[1075]_i_1__0_n_0 ;
  wire \m_vector_i[1076]_i_1__0_n_0 ;
  wire \m_vector_i[1077]_i_1__0_n_0 ;
  wire \m_vector_i[1078]_i_1__0_n_0 ;
  wire \m_vector_i[1079]_i_1__0_n_0 ;
  wire \m_vector_i[1080]_i_1__0_n_0 ;
  wire \m_vector_i[1081]_i_1__0_n_0 ;
  wire \m_vector_i[1082]_i_1__0_n_0 ;
  wire \m_vector_i[1083]_i_1__0_n_0 ;
  wire \m_vector_i[1084]_i_1__0_n_0 ;
  wire \m_vector_i[1085]_i_1__0_n_0 ;
  wire \m_vector_i[1086]_i_1__0_n_0 ;
  wire \m_vector_i[1087]_i_1__0_n_0 ;
  wire \m_vector_i[1088]_i_1__0_n_0 ;
  wire \m_vector_i[1089]_i_1__0_n_0 ;
  wire \m_vector_i[1090]_i_1__0_n_0 ;
  wire \m_vector_i[1091]_i_1__0_n_0 ;
  wire \m_vector_i[1092]_i_1__0_n_0 ;
  wire \m_vector_i[1125]_i_1__0_n_0 ;
  wire \m_vector_i[1126]_i_1__0_n_0 ;
  wire \m_vector_i[1127]_i_1__0_n_0 ;
  wire \m_vector_i[1128]_i_1__0_n_0 ;
  wire \m_vector_i[1129]_i_1__0_n_0 ;
  wire \m_vector_i[1130]_i_1__0_n_0 ;
  wire \m_vector_i[1131]_i_1__0_n_0 ;
  wire \m_vector_i[1132]_i_1__0_n_0 ;
  wire \m_vector_i[1133]_i_1__0_n_0 ;
  wire \m_vector_i[1134]_i_1__0_n_0 ;
  wire \m_vector_i[1135]_i_1__0_n_0 ;
  wire \m_vector_i[1136]_i_1__0_n_0 ;
  wire \m_vector_i[1137]_i_1__0_n_0 ;
  wire \m_vector_i[1138]_i_1__0_n_0 ;
  wire \m_vector_i[1139]_i_1__0_n_0 ;
  wire \m_vector_i[1140]_i_1__0_n_0 ;
  wire \m_vector_i[1141]_i_1__0_n_0 ;
  wire \m_vector_i[1142]_i_1__0_n_0 ;
  wire \m_vector_i[1143]_i_1__0_n_0 ;
  wire \m_vector_i[1144]_i_2_n_0 ;
  wire [0:0]p_0_in;
  wire p_13_in;
  wire [1025:1024]s_awvector_d;
  wire s_axi_awready_d;
  wire s_axi_awvalid;
  wire s_split_awvalid;
  wire \skid_buffer[1144]_i_1__0_n_0 ;
  wire [51:0]\skid_buffer_reg[1144]_0 ;
  wire \skid_buffer_reg_n_0_[1024] ;
  wire \skid_buffer_reg_n_0_[1025] ;
  wire \skid_buffer_reg_n_0_[1061] ;
  wire \skid_buffer_reg_n_0_[1062] ;
  wire \skid_buffer_reg_n_0_[1063] ;
  wire \skid_buffer_reg_n_0_[1064] ;
  wire \skid_buffer_reg_n_0_[1065] ;
  wire \skid_buffer_reg_n_0_[1066] ;
  wire \skid_buffer_reg_n_0_[1067] ;
  wire \skid_buffer_reg_n_0_[1068] ;
  wire \skid_buffer_reg_n_0_[1069] ;
  wire \skid_buffer_reg_n_0_[1070] ;
  wire \skid_buffer_reg_n_0_[1071] ;
  wire \skid_buffer_reg_n_0_[1072] ;
  wire \skid_buffer_reg_n_0_[1073] ;
  wire \skid_buffer_reg_n_0_[1074] ;
  wire \skid_buffer_reg_n_0_[1075] ;
  wire \skid_buffer_reg_n_0_[1076] ;
  wire \skid_buffer_reg_n_0_[1077] ;
  wire \skid_buffer_reg_n_0_[1078] ;
  wire \skid_buffer_reg_n_0_[1079] ;
  wire \skid_buffer_reg_n_0_[1080] ;
  wire \skid_buffer_reg_n_0_[1081] ;
  wire \skid_buffer_reg_n_0_[1082] ;
  wire \skid_buffer_reg_n_0_[1083] ;
  wire \skid_buffer_reg_n_0_[1084] ;
  wire \skid_buffer_reg_n_0_[1085] ;
  wire \skid_buffer_reg_n_0_[1086] ;
  wire \skid_buffer_reg_n_0_[1087] ;
  wire \skid_buffer_reg_n_0_[1088] ;
  wire \skid_buffer_reg_n_0_[1089] ;
  wire \skid_buffer_reg_n_0_[1090] ;
  wire \skid_buffer_reg_n_0_[1091] ;
  wire \skid_buffer_reg_n_0_[1092] ;
  wire \skid_buffer_reg_n_0_[1125] ;
  wire \skid_buffer_reg_n_0_[1126] ;
  wire \skid_buffer_reg_n_0_[1127] ;
  wire \skid_buffer_reg_n_0_[1128] ;
  wire \skid_buffer_reg_n_0_[1129] ;
  wire \skid_buffer_reg_n_0_[1130] ;
  wire \skid_buffer_reg_n_0_[1131] ;
  wire \skid_buffer_reg_n_0_[1132] ;
  wire \skid_buffer_reg_n_0_[1133] ;
  wire \skid_buffer_reg_n_0_[1134] ;
  wire \skid_buffer_reg_n_0_[1135] ;
  wire \skid_buffer_reg_n_0_[1136] ;
  wire \skid_buffer_reg_n_0_[1137] ;
  wire \skid_buffer_reg_n_0_[1138] ;
  wire \skid_buffer_reg_n_0_[1139] ;
  wire \skid_buffer_reg_n_0_[1140] ;
  wire \skid_buffer_reg_n_0_[1141] ;
  wire \skid_buffer_reg_n_0_[1142] ;
  wire \skid_buffer_reg_n_0_[1143] ;
  wire \skid_buffer_reg_n_0_[1144] ;
  wire sr_axi_awvalid;
  wire \state[m_valid_i]_i_1__0_n_0 ;
  wire \state[s_ready_i]_i_1_n_0 ;
  wire \state[s_stall_d]_i_1__0_n_0 ;
  wire \state_reg[m_valid_i]_0 ;
  wire \state_reg[m_valid_i]_1 ;
  wire \state_reg[s_ready_i]_0 ;
  wire \state_reg[s_ready_i]_1 ;

  LUT6 #(
    .INIT(64'hAA6A6A6AAAAAAAAA)) 
    \gen_endpoint.b_cnt[5]_i_1 
       (.I0(p_13_in),
        .I1(m_axi_bvalid),
        .I2(\state_reg[s_ready_i]_1 ),
        .I3(\gen_endpoint.w_state [0]),
        .I4(\gen_endpoint.w_state [1]),
        .I5(\gen_endpoint.b_cnt_reg[3] ),
        .O(E));
  LUT6 #(
    .INIT(64'hFFFBFFFF00FBFF00)) 
    \gen_endpoint.w_enable_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\gen_endpoint.w_cnt_reg[2] ),
        .I3(p_13_in),
        .I4(\state_reg[m_valid_i]_0 ),
        .I5(\gen_endpoint.w_enable_reg_0 ),
        .O(\gen_endpoint.w_enable_reg ));
  LUT4 #(
    .INIT(16'h0080)) 
    \gen_endpoint.w_enable_i_3 
       (.I0(areset_reg),
        .I1(s_split_awvalid),
        .I2(\state_reg[s_ready_i]_0 ),
        .I3(\gen_endpoint.w_trigger_decerr ),
        .O(p_13_in));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gen_endpoint.w_state[0]_i_1 
       (.I0(\gen_endpoint.w_state[1]_i_2_n_0 ),
        .I1(\gen_endpoint.w_state [0]),
        .O(\gen_endpoint.w_state_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gen_endpoint.w_state[1]_i_1 
       (.I0(\gen_endpoint.w_state [0]),
        .I1(\gen_endpoint.w_state[1]_i_2_n_0 ),
        .I2(\gen_endpoint.w_state [1]),
        .O(\gen_endpoint.w_state_reg[1] ));
  LUT6 #(
    .INIT(64'hF8F8F8F8F8FFF8F8)) 
    \gen_endpoint.w_state[1]_i_2 
       (.I0(\gen_endpoint.w_state[1]_i_3_n_0 ),
        .I1(\gen_endpoint.w_trigger_decerr ),
        .I2(\state_reg[m_valid_i]_1 ),
        .I3(\gen_endpoint.b_cnt_reg[3] ),
        .I4(\gen_endpoint.w_state_reg[1]_0 ),
        .I5(\gen_endpoint.w_cnt_reg[1] ),
        .O(\gen_endpoint.w_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \gen_endpoint.w_state[1]_i_3 
       (.I0(s_split_awvalid),
        .I1(\state_reg[s_ready_i]_0 ),
        .I2(\gen_endpoint.w_state [0]),
        .I3(\gen_endpoint.w_state [1]),
        .I4(Q[2]),
        .I5(areset),
        .O(\gen_endpoint.w_state[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFAB)) 
    \gen_endpoint.w_state[1]_i_4 
       (.I0(\skid_buffer_reg[1144]_0 [31]),
        .I1(s_awvector_d[1024]),
        .I2(s_awvector_d[1025]),
        .I3(\skid_buffer_reg[1144]_0 [29]),
        .I4(\skid_buffer_reg[1144]_0 [30]),
        .O(\gen_endpoint.w_trigger_decerr ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1024]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1024] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[0]),
        .O(\m_vector_i[1024]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1025]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1025] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[1]),
        .O(\m_vector_i[1025]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1061]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1061] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[2]),
        .O(\m_vector_i[1061]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1062]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1062] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[3]),
        .O(\m_vector_i[1062]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1063]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1063] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[4]),
        .O(\m_vector_i[1063]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1064]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1064] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[5]),
        .O(\m_vector_i[1064]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1065]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1065] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[6]),
        .O(\m_vector_i[1065]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1066]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1066] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[7]),
        .O(\m_vector_i[1066]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1067]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1067] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[8]),
        .O(\m_vector_i[1067]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1068]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1068] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[9]),
        .O(\m_vector_i[1068]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1069]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1069] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[10]),
        .O(\m_vector_i[1069]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1070]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1070] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[11]),
        .O(\m_vector_i[1070]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1071]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1071] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[12]),
        .O(\m_vector_i[1071]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1072]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1072] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[13]),
        .O(\m_vector_i[1072]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1073]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1073] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[14]),
        .O(\m_vector_i[1073]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1074]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1074] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[15]),
        .O(\m_vector_i[1074]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1075]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1075] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[16]),
        .O(\m_vector_i[1075]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1076]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1076] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[17]),
        .O(\m_vector_i[1076]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1077]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1077] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[18]),
        .O(\m_vector_i[1077]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1078]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1078] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[19]),
        .O(\m_vector_i[1078]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1079]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1079] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[20]),
        .O(\m_vector_i[1079]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1080]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1080] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[21]),
        .O(\m_vector_i[1080]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1081]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1081] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[22]),
        .O(\m_vector_i[1081]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1082]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1082] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[23]),
        .O(\m_vector_i[1082]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1083]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1083] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[24]),
        .O(\m_vector_i[1083]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1084]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1084] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[25]),
        .O(\m_vector_i[1084]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1085]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1085] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[26]),
        .O(\m_vector_i[1085]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1086]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1086] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[27]),
        .O(\m_vector_i[1086]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1087]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1087] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[28]),
        .O(\m_vector_i[1087]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1088]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1088] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[29]),
        .O(\m_vector_i[1088]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1089]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1089] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[30]),
        .O(\m_vector_i[1089]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1090]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1090] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[31]),
        .O(\m_vector_i[1090]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1091]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1091] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[32]),
        .O(\m_vector_i[1091]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1092]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1092] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[33]),
        .O(\m_vector_i[1092]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1125]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1125] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[34]),
        .O(\m_vector_i[1125]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1126]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1126] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[35]),
        .O(\m_vector_i[1126]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1127]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1127] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[36]),
        .O(\m_vector_i[1127]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1128]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1128] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[37]),
        .O(\m_vector_i[1128]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1129]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1129] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[38]),
        .O(\m_vector_i[1129]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1130]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1130] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[39]),
        .O(\m_vector_i[1130]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1131]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1131] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[40]),
        .O(\m_vector_i[1131]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1132]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1132] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[41]),
        .O(\m_vector_i[1132]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1133]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1133] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[42]),
        .O(\m_vector_i[1133]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1134]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1134] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[43]),
        .O(\m_vector_i[1134]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1135]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1135] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[44]),
        .O(\m_vector_i[1135]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1136]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1136] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[45]),
        .O(\m_vector_i[1136]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1137]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1137] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[46]),
        .O(\m_vector_i[1137]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1138]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1138] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[47]),
        .O(\m_vector_i[1138]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1139]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1139] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[48]),
        .O(\m_vector_i[1139]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1140]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1140] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[49]),
        .O(\m_vector_i[1140]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1141]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1141] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[50]),
        .O(\m_vector_i[1141]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1142]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1142] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[51]),
        .O(\m_vector_i[1142]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1143]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1143] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[52]),
        .O(\m_vector_i[1143]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1144]_i_1__0 
       (.I0(s_axi_awready_d),
        .I1(s_split_awvalid),
        .I2(p_0_in),
        .I3(S02_AXI_awready),
        .O(m_vector_i));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1144]_i_2 
       (.I0(\skid_buffer_reg_n_0_[1144] ),
        .I1(s_split_awvalid),
        .I2(S02_AXI_awready),
        .I3(D[53]),
        .O(\m_vector_i[1144]_i_2_n_0 ));
  FDRE \m_vector_i_reg[1024] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1024]_i_1_n_0 ),
        .Q(s_awvector_d[1024]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1025] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1025]_i_1_n_0 ),
        .Q(s_awvector_d[1025]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1061] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1061]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1062] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1062]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [1]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1063] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1063]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [2]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1064] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1064]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [3]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1065] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1065]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [4]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1066] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1066]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [5]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1067] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1067]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [6]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1068] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1068]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [7]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1069] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1069]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [8]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1070] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1070]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [9]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1071] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1071]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [10]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1072] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1072]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [11]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1073] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1073]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [12]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1074] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1074]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [13]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1075] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1075]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [14]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1076] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1076]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [15]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1077] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1077]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [16]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1078] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1078]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [17]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1079] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1079]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [18]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1080] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1080]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [19]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1081] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1081]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [20]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1082] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1082]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [21]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1083] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1083]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [22]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1084] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1084]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [23]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1085] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1085]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [24]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1086] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1086]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [25]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1087] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1087]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [26]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1088] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1088]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [27]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1089] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1089]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [28]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1090] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1090]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [29]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1091] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1091]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [30]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1092] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1092]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [31]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1125] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1125]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [32]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1126] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1126]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [33]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1127] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1127]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [34]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1128] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1128]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [35]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1129] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1129]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [36]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1130] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1130]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [37]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1131] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1131]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [38]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1132] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1132]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [39]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1133] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1133]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [40]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1134] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1134]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [41]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1135] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1135]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [42]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1136] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1136]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [43]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1137] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1137]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [44]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1138] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1138]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [45]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1139] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1139]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [46]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1140] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1140]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [47]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1141] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1141]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [48]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1142] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1142]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [49]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1143] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1143]_i_1__0_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [50]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1144] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1144]_i_2_n_0 ),
        .Q(\skid_buffer_reg[1144]_0 [51]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[1144]_i_1__0 
       (.I0(S02_AXI_awready),
        .I1(s_split_awvalid),
        .O(\skid_buffer[1144]_i_1__0_n_0 ));
  FDRE \skid_buffer_reg[1024] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[0]),
        .Q(\skid_buffer_reg_n_0_[1024] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1025] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[1]),
        .Q(\skid_buffer_reg_n_0_[1025] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1061] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[2]),
        .Q(\skid_buffer_reg_n_0_[1061] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1062] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[3]),
        .Q(\skid_buffer_reg_n_0_[1062] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1063] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[4]),
        .Q(\skid_buffer_reg_n_0_[1063] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1064] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[5]),
        .Q(\skid_buffer_reg_n_0_[1064] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1065] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[6]),
        .Q(\skid_buffer_reg_n_0_[1065] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1066] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[7]),
        .Q(\skid_buffer_reg_n_0_[1066] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1067] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[8]),
        .Q(\skid_buffer_reg_n_0_[1067] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1068] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[9]),
        .Q(\skid_buffer_reg_n_0_[1068] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1069] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[10]),
        .Q(\skid_buffer_reg_n_0_[1069] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1070] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[11]),
        .Q(\skid_buffer_reg_n_0_[1070] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1071] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[12]),
        .Q(\skid_buffer_reg_n_0_[1071] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1072] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[13]),
        .Q(\skid_buffer_reg_n_0_[1072] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1073] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[14]),
        .Q(\skid_buffer_reg_n_0_[1073] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1074] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[15]),
        .Q(\skid_buffer_reg_n_0_[1074] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1075] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[16]),
        .Q(\skid_buffer_reg_n_0_[1075] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1076] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[17]),
        .Q(\skid_buffer_reg_n_0_[1076] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1077] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[18]),
        .Q(\skid_buffer_reg_n_0_[1077] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1078] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[19]),
        .Q(\skid_buffer_reg_n_0_[1078] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1079] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[20]),
        .Q(\skid_buffer_reg_n_0_[1079] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1080] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[21]),
        .Q(\skid_buffer_reg_n_0_[1080] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1081] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[22]),
        .Q(\skid_buffer_reg_n_0_[1081] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1082] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[23]),
        .Q(\skid_buffer_reg_n_0_[1082] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1083] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[24]),
        .Q(\skid_buffer_reg_n_0_[1083] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1084] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[25]),
        .Q(\skid_buffer_reg_n_0_[1084] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1085] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[26]),
        .Q(\skid_buffer_reg_n_0_[1085] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1086] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[27]),
        .Q(\skid_buffer_reg_n_0_[1086] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1087] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[28]),
        .Q(\skid_buffer_reg_n_0_[1087] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1088] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[29]),
        .Q(\skid_buffer_reg_n_0_[1088] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1089] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[30]),
        .Q(\skid_buffer_reg_n_0_[1089] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1090] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[31]),
        .Q(\skid_buffer_reg_n_0_[1090] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1091] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[32]),
        .Q(\skid_buffer_reg_n_0_[1091] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1092] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[33]),
        .Q(\skid_buffer_reg_n_0_[1092] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1125] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[34]),
        .Q(\skid_buffer_reg_n_0_[1125] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1126] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[35]),
        .Q(\skid_buffer_reg_n_0_[1126] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1127] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[36]),
        .Q(\skid_buffer_reg_n_0_[1127] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1128] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[37]),
        .Q(\skid_buffer_reg_n_0_[1128] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1129] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[38]),
        .Q(\skid_buffer_reg_n_0_[1129] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1130] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[39]),
        .Q(\skid_buffer_reg_n_0_[1130] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1131] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[40]),
        .Q(\skid_buffer_reg_n_0_[1131] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1132] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[41]),
        .Q(\skid_buffer_reg_n_0_[1132] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1133] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[42]),
        .Q(\skid_buffer_reg_n_0_[1133] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1134] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[43]),
        .Q(\skid_buffer_reg_n_0_[1134] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1135] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[44]),
        .Q(\skid_buffer_reg_n_0_[1135] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1136] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[45]),
        .Q(\skid_buffer_reg_n_0_[1136] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1137] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[46]),
        .Q(\skid_buffer_reg_n_0_[1137] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1138] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[47]),
        .Q(\skid_buffer_reg_n_0_[1138] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1139] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[48]),
        .Q(\skid_buffer_reg_n_0_[1139] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1140] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[49]),
        .Q(\skid_buffer_reg_n_0_[1140] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1141] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[50]),
        .Q(\skid_buffer_reg_n_0_[1141] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1142] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[51]),
        .Q(\skid_buffer_reg_n_0_[1142] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1143] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[52]),
        .Q(\skid_buffer_reg_n_0_[1143] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1144] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1__0_n_0 ),
        .D(D[53]),
        .Q(\skid_buffer_reg_n_0_[1144] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h000CAECC)) 
    \state[m_valid_i]_i_1__0 
       (.I0(s_axi_awvalid),
        .I1(s_split_awvalid),
        .I2(s_axi_awready_d),
        .I3(S02_AXI_awready),
        .I4(p_0_in),
        .O(\state[m_valid_i]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00010000)) 
    \state[m_valid_i]_i_6 
       (.I0(\gen_endpoint.w_state [0]),
        .I1(\gen_endpoint.w_state [1]),
        .I2(Q[2]),
        .I3(areset),
        .I4(s_split_awvalid),
        .O(sr_axi_awvalid));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hFF00F7F3)) 
    \state[s_ready_i]_i_1 
       (.I0(s_axi_awvalid),
        .I1(s_split_awvalid),
        .I2(s_axi_awready_d),
        .I3(S02_AXI_awready),
        .I4(p_0_in),
        .O(\state[s_ready_i]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1__0 
       (.I0(S02_AXI_awready),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1__0_n_0 ),
        .Q(s_split_awvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1_n_0 ),
        .Q(S02_AXI_awready),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1__0_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_34
   (S02_AXI_bvalid,
    \state_reg[s_ready_i]_0 ,
    D,
    s_axi_bresp,
    areset,
    aclk,
    s_axi_bready,
    Q,
    \gen_endpoint.b_cnt_reg[3] ,
    \gen_endpoint.w_trigger_decerr ,
    \state_reg[s_ready_i]_1 ,
    \gen_endpoint.w_state_reg[0] ,
    m_axi_bvalid,
    \gen_endpoint.w_state ,
    mr_axi_bvalid,
    m_axi_bresp);
  output S02_AXI_bvalid;
  output \state_reg[s_ready_i]_0 ;
  output [4:0]D;
  output [1:0]s_axi_bresp;
  input areset;
  input aclk;
  input s_axi_bready;
  input [5:0]Q;
  input \gen_endpoint.b_cnt_reg[3] ;
  input \gen_endpoint.w_trigger_decerr ;
  input \state_reg[s_ready_i]_1 ;
  input \gen_endpoint.w_state_reg[0] ;
  input m_axi_bvalid;
  input [1:0]\gen_endpoint.w_state ;
  input mr_axi_bvalid;
  input [1:0]m_axi_bresp;

  wire [4:0]D;
  wire [5:0]Q;
  wire S02_AXI_bvalid;
  wire aclk;
  wire areset;
  wire \gen_endpoint.b_cnt[4]_i_2_n_0 ;
  wire \gen_endpoint.b_cnt[5]_i_4_n_0 ;
  wire \gen_endpoint.b_cnt[5]_i_5_n_0 ;
  wire \gen_endpoint.b_cnt_reg[3] ;
  wire [1:0]\gen_endpoint.w_state ;
  wire \gen_endpoint.w_state_reg[0] ;
  wire \gen_endpoint.w_trigger_decerr ;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire m_vector_i;
  wire \m_vector_i[1056]_i_1__0_n_0 ;
  wire \m_vector_i[1057]_i_1_n_0 ;
  wire \m_vector_i[1057]_i_2_n_0 ;
  wire mr_axi_bvalid;
  wire [0:0]p_0_in;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire \skid_buffer[1057]_i_1_n_0 ;
  wire \skid_buffer[1057]_i_2_n_0 ;
  wire \skid_buffer_reg_n_0_[1056] ;
  wire \skid_buffer_reg_n_0_[1057] ;
  wire \state[m_valid_i]_i_1__2_n_0 ;
  wire \state[s_ready_i]_i_1__1_n_0 ;
  wire \state[s_stall_d]_i_1__2_n_0 ;
  wire \state_reg[s_ready_i]_0 ;
  wire \state_reg[s_ready_i]_1 ;

  LUT3 #(
    .INIT(8'h96)) 
    \gen_endpoint.b_cnt[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\gen_endpoint.b_cnt[4]_i_2_n_0 ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'hA96A)) 
    \gen_endpoint.b_cnt[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\gen_endpoint.b_cnt[4]_i_2_n_0 ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'hAAA96AAA)) 
    \gen_endpoint.b_cnt[3]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(\gen_endpoint.b_cnt[4]_i_2_n_0 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hAAAAAAA96AAAAAAA)) 
    \gen_endpoint.b_cnt[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\gen_endpoint.b_cnt[4]_i_2_n_0 ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hFFFF8000FFFFFFFF)) 
    \gen_endpoint.b_cnt[4]_i_2 
       (.I0(\gen_endpoint.b_cnt_reg[3] ),
        .I1(\gen_endpoint.w_state_reg[0] ),
        .I2(\state_reg[s_ready_i]_0 ),
        .I3(m_axi_bvalid),
        .I4(\gen_endpoint.w_trigger_decerr ),
        .I5(\state_reg[s_ready_i]_1 ),
        .O(\gen_endpoint.b_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \gen_endpoint.b_cnt[5]_i_2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(\gen_endpoint.b_cnt[5]_i_4_n_0 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h0700FFFF00000700)) 
    \gen_endpoint.b_cnt[5]_i_4 
       (.I0(\gen_endpoint.b_cnt_reg[3] ),
        .I1(\gen_endpoint.b_cnt[5]_i_5_n_0 ),
        .I2(\gen_endpoint.w_trigger_decerr ),
        .I3(\state_reg[s_ready_i]_1 ),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\gen_endpoint.b_cnt[5]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'h7000)) 
    \gen_endpoint.b_cnt[5]_i_5 
       (.I0(\gen_endpoint.w_state [1]),
        .I1(\gen_endpoint.w_state [0]),
        .I2(\state_reg[s_ready_i]_0 ),
        .I3(m_axi_bvalid),
        .O(\gen_endpoint.b_cnt[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBFFFFB8BB0000)) 
    \m_vector_i[1056]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1056] ),
        .I1(\m_vector_i[1057]_i_2_n_0 ),
        .I2(m_axi_bresp[0]),
        .I3(\gen_endpoint.w_state_reg[0] ),
        .I4(m_vector_i),
        .I5(s_axi_bresp[0]),
        .O(\m_vector_i[1056]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBFFFFB8BB0000)) 
    \m_vector_i[1057]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1057] ),
        .I1(\m_vector_i[1057]_i_2_n_0 ),
        .I2(m_axi_bresp[1]),
        .I3(\gen_endpoint.w_state_reg[0] ),
        .I4(m_vector_i),
        .I5(s_axi_bresp[1]),
        .O(\m_vector_i[1057]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_vector_i[1057]_i_2 
       (.I0(S02_AXI_bvalid),
        .I1(\state_reg[s_ready_i]_0 ),
        .O(\m_vector_i[1057]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1057]_i_4 
       (.I0(s_axi_bready),
        .I1(S02_AXI_bvalid),
        .I2(p_0_in),
        .I3(\state_reg[s_ready_i]_0 ),
        .O(m_vector_i));
  FDRE \m_vector_i_reg[1056] 
       (.C(aclk),
        .CE(1'b1),
        .D(\m_vector_i[1056]_i_1__0_n_0 ),
        .Q(s_axi_bresp[0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1057] 
       (.C(aclk),
        .CE(1'b1),
        .D(\m_vector_i[1057]_i_1_n_0 ),
        .Q(s_axi_bresp[1]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hD000)) 
    \skid_buffer[1057]_i_1 
       (.I0(S02_AXI_bvalid),
        .I1(\state_reg[s_ready_i]_0 ),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.w_state [0]),
        .O(\skid_buffer[1057]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[1057]_i_2 
       (.I0(\state_reg[s_ready_i]_0 ),
        .I1(S02_AXI_bvalid),
        .O(\skid_buffer[1057]_i_2_n_0 ));
  FDSE \skid_buffer_reg[1056] 
       (.C(aclk),
        .CE(\skid_buffer[1057]_i_2_n_0 ),
        .D(m_axi_bresp[0]),
        .Q(\skid_buffer_reg_n_0_[1056] ),
        .S(\skid_buffer[1057]_i_1_n_0 ));
  FDSE \skid_buffer_reg[1057] 
       (.C(aclk),
        .CE(\skid_buffer[1057]_i_2_n_0 ),
        .D(m_axi_bresp[1]),
        .Q(\skid_buffer_reg_n_0_[1057] ),
        .S(\skid_buffer[1057]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h000CAECC)) 
    \state[m_valid_i]_i_1__2 
       (.I0(mr_axi_bvalid),
        .I1(S02_AXI_bvalid),
        .I2(s_axi_bready),
        .I3(\state_reg[s_ready_i]_0 ),
        .I4(p_0_in),
        .O(\state[m_valid_i]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'hFF00F7F3)) 
    \state[s_ready_i]_i_1__1 
       (.I0(mr_axi_bvalid),
        .I1(S02_AXI_bvalid),
        .I2(s_axi_bready),
        .I3(\state_reg[s_ready_i]_0 ),
        .I4(p_0_in),
        .O(\state[s_ready_i]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1__2 
       (.I0(\state_reg[s_ready_i]_0 ),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1__2_n_0 ),
        .Q(S02_AXI_bvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1__1_n_0 ),
        .Q(\state_reg[s_ready_i]_0 ),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1__2_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_35
   (mr_axi_wvalid,
    S02_AXI_wready,
    m_axi_wvalid,
    D,
    \gen_w_ch.accum_reg[bytes][7][strb] ,
    \gen_endpoint.w_enable_reg ,
    \gen_axi.gen_write.s_axi_bvalid_i_reg ,
    E,
    areset,
    aclk,
    \gen_endpoint.w_enable_reg_0 ,
    \gen_endpoint.w_state ,
    Q,
    \gen_endpoint.w_cnt_reg[1] ,
    \gen_endpoint.w_trigger_decerr ,
    \state_reg[s_ready_i]_0 ,
    m_axi_wready,
    s_axi_wvalid,
    mr_axi_wready,
    p_13_in,
    \S02_AXI_wstrb[3] );
  output mr_axi_wvalid;
  output S02_AXI_wready;
  output m_axi_wvalid;
  output [4:0]D;
  output [36:0]\gen_w_ch.accum_reg[bytes][7][strb] ;
  output \gen_endpoint.w_enable_reg ;
  output \gen_axi.gen_write.s_axi_bvalid_i_reg ;
  output [0:0]E;
  input areset;
  input aclk;
  input \gen_endpoint.w_enable_reg_0 ;
  input [1:0]\gen_endpoint.w_state ;
  input [5:0]Q;
  input \gen_endpoint.w_cnt_reg[1] ;
  input \gen_endpoint.w_trigger_decerr ;
  input \state_reg[s_ready_i]_0 ;
  input m_axi_wready;
  input s_axi_wvalid;
  input mr_axi_wready;
  input p_13_in;
  input [36:0]\S02_AXI_wstrb[3] ;

  wire [4:0]D;
  wire [0:0]E;
  wire [5:0]Q;
  wire S02_AXI_wready;
  wire [36:0]\S02_AXI_wstrb[3] ;
  wire aclk;
  wire areset;
  wire \gen_axi.gen_write.s_axi_bvalid_i_reg ;
  wire \gen_endpoint.w_cnt[4]_i_2_n_0 ;
  wire \gen_endpoint.w_cnt[5]_i_4_n_0 ;
  wire \gen_endpoint.w_cnt[5]_i_5_n_0 ;
  wire \gen_endpoint.w_cnt_reg[1] ;
  wire \gen_endpoint.w_enable_reg ;
  wire \gen_endpoint.w_enable_reg_0 ;
  wire [1:0]\gen_endpoint.w_state ;
  wire \gen_endpoint.w_trigger_decerr ;
  wire [36:0]\gen_w_ch.accum_reg[bytes][7][strb] ;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire m_vector_i;
  wire \m_vector_i[1024]_i_1__0_n_0 ;
  wire \m_vector_i[1025]_i_1__0_n_0 ;
  wire \m_vector_i[1026]_i_1_n_0 ;
  wire \m_vector_i[1027]_i_1_n_0 ;
  wire \m_vector_i[1028]_i_1_n_0 ;
  wire \m_vector_i[1029]_i_1_n_0 ;
  wire \m_vector_i[1030]_i_1_n_0 ;
  wire \m_vector_i[1031]_i_1_n_0 ;
  wire \m_vector_i[1032]_i_1_n_0 ;
  wire \m_vector_i[1033]_i_1_n_0 ;
  wire \m_vector_i[1034]_i_1_n_0 ;
  wire \m_vector_i[1035]_i_1_n_0 ;
  wire \m_vector_i[1036]_i_1_n_0 ;
  wire \m_vector_i[1037]_i_1_n_0 ;
  wire \m_vector_i[1038]_i_1_n_0 ;
  wire \m_vector_i[1039]_i_1_n_0 ;
  wire \m_vector_i[1040]_i_1_n_0 ;
  wire \m_vector_i[1041]_i_1_n_0 ;
  wire \m_vector_i[1042]_i_1_n_0 ;
  wire \m_vector_i[1043]_i_1_n_0 ;
  wire \m_vector_i[1044]_i_1_n_0 ;
  wire \m_vector_i[1045]_i_1_n_0 ;
  wire \m_vector_i[1046]_i_1_n_0 ;
  wire \m_vector_i[1047]_i_1_n_0 ;
  wire \m_vector_i[1048]_i_1_n_0 ;
  wire \m_vector_i[1049]_i_1_n_0 ;
  wire \m_vector_i[1050]_i_1_n_0 ;
  wire \m_vector_i[1051]_i_1_n_0 ;
  wire \m_vector_i[1052]_i_1_n_0 ;
  wire \m_vector_i[1053]_i_1_n_0 ;
  wire \m_vector_i[1054]_i_1_n_0 ;
  wire \m_vector_i[1055]_i_1_n_0 ;
  wire \m_vector_i[1056]_i_2_n_0 ;
  wire \m_vector_i[2049]_i_1_n_0 ;
  wire \m_vector_i[2050]_i_1_n_0 ;
  wire \m_vector_i[2051]_i_1_n_0 ;
  wire \m_vector_i[2052]_i_1_n_0 ;
  wire mr_axi_wready;
  wire mr_axi_wvalid;
  wire [0:0]p_0_in;
  wire p_13_in;
  wire s_axi_wvalid;
  wire \skid_buffer[2052]_i_1_n_0 ;
  wire \skid_buffer_reg_n_0_[1024] ;
  wire \skid_buffer_reg_n_0_[1025] ;
  wire \skid_buffer_reg_n_0_[1026] ;
  wire \skid_buffer_reg_n_0_[1027] ;
  wire \skid_buffer_reg_n_0_[1028] ;
  wire \skid_buffer_reg_n_0_[1029] ;
  wire \skid_buffer_reg_n_0_[1030] ;
  wire \skid_buffer_reg_n_0_[1031] ;
  wire \skid_buffer_reg_n_0_[1032] ;
  wire \skid_buffer_reg_n_0_[1033] ;
  wire \skid_buffer_reg_n_0_[1034] ;
  wire \skid_buffer_reg_n_0_[1035] ;
  wire \skid_buffer_reg_n_0_[1036] ;
  wire \skid_buffer_reg_n_0_[1037] ;
  wire \skid_buffer_reg_n_0_[1038] ;
  wire \skid_buffer_reg_n_0_[1039] ;
  wire \skid_buffer_reg_n_0_[1040] ;
  wire \skid_buffer_reg_n_0_[1041] ;
  wire \skid_buffer_reg_n_0_[1042] ;
  wire \skid_buffer_reg_n_0_[1043] ;
  wire \skid_buffer_reg_n_0_[1044] ;
  wire \skid_buffer_reg_n_0_[1045] ;
  wire \skid_buffer_reg_n_0_[1046] ;
  wire \skid_buffer_reg_n_0_[1047] ;
  wire \skid_buffer_reg_n_0_[1048] ;
  wire \skid_buffer_reg_n_0_[1049] ;
  wire \skid_buffer_reg_n_0_[1050] ;
  wire \skid_buffer_reg_n_0_[1051] ;
  wire \skid_buffer_reg_n_0_[1052] ;
  wire \skid_buffer_reg_n_0_[1053] ;
  wire \skid_buffer_reg_n_0_[1054] ;
  wire \skid_buffer_reg_n_0_[1055] ;
  wire \skid_buffer_reg_n_0_[1056] ;
  wire \skid_buffer_reg_n_0_[2049] ;
  wire \skid_buffer_reg_n_0_[2050] ;
  wire \skid_buffer_reg_n_0_[2051] ;
  wire \skid_buffer_reg_n_0_[2052] ;
  wire \state[m_valid_i]_i_1__1_n_0 ;
  wire \state[s_ready_i]_i_1__0_n_0 ;
  wire \state[s_stall_d]_i_1__1_n_0 ;
  wire \state_reg[s_ready_i]_0 ;

  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \gen_axi.gen_write.s_axi_bvalid_i_i_3 
       (.I0(mr_axi_wvalid),
        .I1(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .O(\gen_axi.gen_write.s_axi_bvalid_i_reg ));
  LUT3 #(
    .INIT(8'h96)) 
    \gen_endpoint.w_cnt[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(\gen_endpoint.w_cnt[4]_i_2_n_0 ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hA96A)) 
    \gen_endpoint.w_cnt[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\gen_endpoint.w_cnt[4]_i_2_n_0 ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'hAAA96AAA)) 
    \gen_endpoint.w_cnt[3]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(\gen_endpoint.w_cnt[4]_i_2_n_0 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hAAAAAAA96AAAAAAA)) 
    \gen_endpoint.w_cnt[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\gen_endpoint.w_cnt[4]_i_2_n_0 ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hFFFF8000FFFFFFFF)) 
    \gen_endpoint.w_cnt[4]_i_2 
       (.I0(\gen_endpoint.w_cnt_reg[1] ),
        .I1(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .I2(mr_axi_wvalid),
        .I3(m_axi_wready),
        .I4(\gen_endpoint.w_trigger_decerr ),
        .I5(\state_reg[s_ready_i]_0 ),
        .O(\gen_endpoint.w_cnt[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \gen_endpoint.w_cnt[5]_i_1 
       (.I0(p_13_in),
        .I1(m_axi_wready),
        .I2(mr_axi_wvalid),
        .I3(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .I4(\gen_endpoint.w_cnt_reg[1] ),
        .O(E));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \gen_endpoint.w_cnt[5]_i_2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(\gen_endpoint.w_cnt[5]_i_4_n_0 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h07000000FFFF0700)) 
    \gen_endpoint.w_cnt[5]_i_4 
       (.I0(\gen_endpoint.w_cnt_reg[1] ),
        .I1(\gen_endpoint.w_cnt[5]_i_5_n_0 ),
        .I2(\gen_endpoint.w_trigger_decerr ),
        .I3(\state_reg[s_ready_i]_0 ),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\gen_endpoint.w_cnt[5]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \gen_endpoint.w_cnt[5]_i_5 
       (.I0(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .I1(mr_axi_wvalid),
        .I2(m_axi_wready),
        .O(\gen_endpoint.w_cnt[5]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gen_endpoint.w_enable_i_4 
       (.I0(m_axi_wready),
        .I1(mr_axi_wvalid),
        .I2(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .I3(\gen_endpoint.w_cnt_reg[1] ),
        .O(\gen_endpoint.w_enable_reg ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h0888)) 
    m_axi_wvalid_INST_0
       (.I0(mr_axi_wvalid),
        .I1(\gen_endpoint.w_enable_reg_0 ),
        .I2(\gen_endpoint.w_state [1]),
        .I3(\gen_endpoint.w_state [0]),
        .O(m_axi_wvalid));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1024]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1024] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [0]),
        .O(\m_vector_i[1024]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1025]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1025] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [1]),
        .O(\m_vector_i[1025]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1026]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1026] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [2]),
        .O(\m_vector_i[1026]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1027]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1027] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [3]),
        .O(\m_vector_i[1027]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1028]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1028] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [4]),
        .O(\m_vector_i[1028]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1029]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1029] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [5]),
        .O(\m_vector_i[1029]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1030]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1030] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [6]),
        .O(\m_vector_i[1030]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1031]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1031] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [7]),
        .O(\m_vector_i[1031]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1032]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1032] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [8]),
        .O(\m_vector_i[1032]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1033]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1033] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [9]),
        .O(\m_vector_i[1033]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1034]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1034] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [10]),
        .O(\m_vector_i[1034]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1035]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1035] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [11]),
        .O(\m_vector_i[1035]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1036]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1036] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [12]),
        .O(\m_vector_i[1036]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1037]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1037] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [13]),
        .O(\m_vector_i[1037]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1038]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1038] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [14]),
        .O(\m_vector_i[1038]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1039]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1039] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [15]),
        .O(\m_vector_i[1039]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1040]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1040] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [16]),
        .O(\m_vector_i[1040]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1041]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1041] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [17]),
        .O(\m_vector_i[1041]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1042]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1042] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [18]),
        .O(\m_vector_i[1042]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1043]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1043] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [19]),
        .O(\m_vector_i[1043]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1044]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1044] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [20]),
        .O(\m_vector_i[1044]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1045]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1045] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [21]),
        .O(\m_vector_i[1045]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1046]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1046] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [22]),
        .O(\m_vector_i[1046]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1047]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1047] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [23]),
        .O(\m_vector_i[1047]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1048]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1048] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [24]),
        .O(\m_vector_i[1048]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1049]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1049] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [25]),
        .O(\m_vector_i[1049]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1050]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1050] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [26]),
        .O(\m_vector_i[1050]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1051]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1051] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [27]),
        .O(\m_vector_i[1051]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1052]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1052] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [28]),
        .O(\m_vector_i[1052]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1053]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1053] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [29]),
        .O(\m_vector_i[1053]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1054]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1054] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [30]),
        .O(\m_vector_i[1054]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1055]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1055] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [31]),
        .O(\m_vector_i[1055]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1056]_i_1 
       (.I0(mr_axi_wready),
        .I1(mr_axi_wvalid),
        .I2(p_0_in),
        .I3(S02_AXI_wready),
        .O(m_vector_i));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1056]_i_2 
       (.I0(\skid_buffer_reg_n_0_[1056] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [32]),
        .O(\m_vector_i[1056]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2049]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2049] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [33]),
        .O(\m_vector_i[2049]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2050]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2050] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [34]),
        .O(\m_vector_i[2050]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2051]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2051] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [35]),
        .O(\m_vector_i[2051]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2052]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2052] ),
        .I1(mr_axi_wvalid),
        .I2(S02_AXI_wready),
        .I3(\S02_AXI_wstrb[3] [36]),
        .O(\m_vector_i[2052]_i_1_n_0 ));
  FDRE \m_vector_i_reg[1024] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1024]_i_1__0_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1025] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1025]_i_1__0_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [1]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1026] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1026]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [2]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1027] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1027]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [3]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1028] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1028]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [4]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1029] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1029]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [5]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1030] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1030]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [6]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1031] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1031]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [7]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1032] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1032]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [8]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1033] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1033]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [9]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1034] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1034]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [10]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1035] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1035]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [11]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1036] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1036]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [12]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1037] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1037]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [13]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1038] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1038]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [14]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1039] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1039]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [15]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1040] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1040]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [16]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1041] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1041]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [17]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1042] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1042]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [18]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1043] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1043]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [19]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1044] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1044]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [20]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1045] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1045]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [21]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1046] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1046]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [22]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1047] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1047]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [23]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1048] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1048]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [24]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1049] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1049]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [25]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1050] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1050]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [26]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1051] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1051]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [27]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1052] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1052]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [28]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1053] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1053]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [29]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1054] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1054]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [30]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1055] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1055]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [31]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1056] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1056]_i_2_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [32]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2049] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2049]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [33]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2050] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2050]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [34]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2051] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2051]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [35]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2052] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2052]_i_1_n_0 ),
        .Q(\gen_w_ch.accum_reg[bytes][7][strb] [36]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[2052]_i_1 
       (.I0(S02_AXI_wready),
        .I1(mr_axi_wvalid),
        .O(\skid_buffer[2052]_i_1_n_0 ));
  FDRE \skid_buffer_reg[1024] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [0]),
        .Q(\skid_buffer_reg_n_0_[1024] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1025] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [1]),
        .Q(\skid_buffer_reg_n_0_[1025] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1026] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [2]),
        .Q(\skid_buffer_reg_n_0_[1026] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1027] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [3]),
        .Q(\skid_buffer_reg_n_0_[1027] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1028] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [4]),
        .Q(\skid_buffer_reg_n_0_[1028] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1029] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [5]),
        .Q(\skid_buffer_reg_n_0_[1029] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1030] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [6]),
        .Q(\skid_buffer_reg_n_0_[1030] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1031] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [7]),
        .Q(\skid_buffer_reg_n_0_[1031] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1032] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [8]),
        .Q(\skid_buffer_reg_n_0_[1032] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1033] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [9]),
        .Q(\skid_buffer_reg_n_0_[1033] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1034] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [10]),
        .Q(\skid_buffer_reg_n_0_[1034] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1035] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [11]),
        .Q(\skid_buffer_reg_n_0_[1035] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1036] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [12]),
        .Q(\skid_buffer_reg_n_0_[1036] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1037] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [13]),
        .Q(\skid_buffer_reg_n_0_[1037] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1038] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [14]),
        .Q(\skid_buffer_reg_n_0_[1038] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1039] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [15]),
        .Q(\skid_buffer_reg_n_0_[1039] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1040] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [16]),
        .Q(\skid_buffer_reg_n_0_[1040] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1041] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [17]),
        .Q(\skid_buffer_reg_n_0_[1041] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1042] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [18]),
        .Q(\skid_buffer_reg_n_0_[1042] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1043] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [19]),
        .Q(\skid_buffer_reg_n_0_[1043] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1044] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [20]),
        .Q(\skid_buffer_reg_n_0_[1044] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1045] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [21]),
        .Q(\skid_buffer_reg_n_0_[1045] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1046] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [22]),
        .Q(\skid_buffer_reg_n_0_[1046] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1047] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [23]),
        .Q(\skid_buffer_reg_n_0_[1047] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1048] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [24]),
        .Q(\skid_buffer_reg_n_0_[1048] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1049] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [25]),
        .Q(\skid_buffer_reg_n_0_[1049] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1050] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [26]),
        .Q(\skid_buffer_reg_n_0_[1050] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1051] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [27]),
        .Q(\skid_buffer_reg_n_0_[1051] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1052] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [28]),
        .Q(\skid_buffer_reg_n_0_[1052] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1053] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [29]),
        .Q(\skid_buffer_reg_n_0_[1053] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1054] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [30]),
        .Q(\skid_buffer_reg_n_0_[1054] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1055] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [31]),
        .Q(\skid_buffer_reg_n_0_[1055] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1056] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [32]),
        .Q(\skid_buffer_reg_n_0_[1056] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2049] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [33]),
        .Q(\skid_buffer_reg_n_0_[2049] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2050] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [34]),
        .Q(\skid_buffer_reg_n_0_[2050] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2051] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [35]),
        .Q(\skid_buffer_reg_n_0_[2051] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2052] 
       (.C(aclk),
        .CE(\skid_buffer[2052]_i_1_n_0 ),
        .D(\S02_AXI_wstrb[3] [36]),
        .Q(\skid_buffer_reg_n_0_[2052] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h000CAECC)) 
    \state[m_valid_i]_i_1__1 
       (.I0(s_axi_wvalid),
        .I1(mr_axi_wvalid),
        .I2(mr_axi_wready),
        .I3(S02_AXI_wready),
        .I4(p_0_in),
        .O(\state[m_valid_i]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'hFF00F7F3)) 
    \state[s_ready_i]_i_1__0 
       (.I0(s_axi_wvalid),
        .I1(mr_axi_wvalid),
        .I2(mr_axi_wready),
        .I3(S02_AXI_wready),
        .I4(p_0_in),
        .O(\state[s_ready_i]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1__1 
       (.I0(S02_AXI_wready),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1__1_n_0 ),
        .Q(mr_axi_wvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1__0_n_0 ),
        .Q(S02_AXI_wready),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1__1_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_62
   (M00_AXI_awvalid,
    mr_axi_awready,
    \m_vector_i_reg[1064]_0 ,
    \m_vector_i_reg[1092]_0 ,
    \M00_AXI_awcache[3] ,
    areset,
    aclk,
    m_axi_awready,
    Q,
    split_ongoing,
    access_is_incr_q,
    \S_AXI_ALEN_Q_reg[3] ,
    \pushed_commands_reg[0] ,
    need_to_split_q,
    D,
    s_write_cmd_vacancy,
    command_ongoing_reg,
    \skid_buffer_reg[1092]_0 );
  output M00_AXI_awvalid;
  output mr_axi_awready;
  output \m_vector_i_reg[1064]_0 ;
  output [28:0]\m_vector_i_reg[1092]_0 ;
  output [46:0]\M00_AXI_awcache[3] ;
  input areset;
  input aclk;
  input m_axi_awready;
  input [2:0]Q;
  input split_ongoing;
  input access_is_incr_q;
  input [3:0]\S_AXI_ALEN_Q_reg[3] ;
  input \pushed_commands_reg[0] ;
  input need_to_split_q;
  input [46:0]D;
  input s_write_cmd_vacancy;
  input command_ongoing_reg;
  input [28:0]\skid_buffer_reg[1092]_0 ;

  wire [46:0]D;
  wire [46:0]\M00_AXI_awcache[3] ;
  wire M00_AXI_awvalid;
  wire [2:0]Q;
  wire [3:0]\S_AXI_ALEN_Q_reg[3] ;
  wire access_is_incr_q;
  wire aclk;
  wire areset;
  wire command_ongoing_reg;
  wire m_axi_awready;
  wire m_vector_i;
  wire \m_vector_i[1061]_i_1_n_0 ;
  wire \m_vector_i[1062]_i_1_n_0 ;
  wire \m_vector_i[1063]_i_1_n_0 ;
  wire \m_vector_i[1125]_i_1_n_0 ;
  wire \m_vector_i[1126]_i_1_n_0 ;
  wire \m_vector_i[1127]_i_1_n_0 ;
  wire \m_vector_i[1128]_i_1_n_0 ;
  wire \m_vector_i[1134]_i_1_n_0 ;
  wire \m_vector_i[1135]_i_1_n_0 ;
  wire \m_vector_i[1136]_i_1_n_0 ;
  wire \m_vector_i[1137]_i_1_n_0 ;
  wire \m_vector_i[1138]_i_1_n_0 ;
  wire \m_vector_i[1139]_i_1_n_0 ;
  wire \m_vector_i[1140]_i_1_n_0 ;
  wire \m_vector_i[1141]_i_1_n_0 ;
  wire \m_vector_i[1142]_i_1_n_0 ;
  wire \m_vector_i[1143]_i_1_n_0 ;
  wire \m_vector_i[1144]_i_1_n_0 ;
  wire \m_vector_i_reg[1064]_0 ;
  wire [28:0]\m_vector_i_reg[1092]_0 ;
  wire mr_axi_awready;
  wire need_to_split_q;
  wire [0:0]p_0_in;
  wire \pushed_commands_reg[0] ;
  wire s_write_cmd_vacancy;
  wire \skid_buffer[1144]_i_1_n_0 ;
  wire [28:0]\skid_buffer_reg[1092]_0 ;
  wire \skid_buffer_reg_n_0_[1061] ;
  wire \skid_buffer_reg_n_0_[1062] ;
  wire \skid_buffer_reg_n_0_[1063] ;
  wire \skid_buffer_reg_n_0_[1125] ;
  wire \skid_buffer_reg_n_0_[1126] ;
  wire \skid_buffer_reg_n_0_[1127] ;
  wire \skid_buffer_reg_n_0_[1128] ;
  wire \skid_buffer_reg_n_0_[1134] ;
  wire \skid_buffer_reg_n_0_[1135] ;
  wire \skid_buffer_reg_n_0_[1136] ;
  wire \skid_buffer_reg_n_0_[1137] ;
  wire \skid_buffer_reg_n_0_[1138] ;
  wire \skid_buffer_reg_n_0_[1139] ;
  wire \skid_buffer_reg_n_0_[1140] ;
  wire \skid_buffer_reg_n_0_[1141] ;
  wire \skid_buffer_reg_n_0_[1142] ;
  wire \skid_buffer_reg_n_0_[1143] ;
  wire \skid_buffer_reg_n_0_[1144] ;
  wire split_ongoing;
  wire \state[m_valid_i]_i_1_n_0 ;
  wire \state[s_ready_i]_i_1_n_0 ;
  wire \state[s_stall_d]_i_1_n_0 ;

  LUT6 #(
    .INIT(64'h0808FB08FB08FB08)) 
    \m_vector_i[1061]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1061] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(Q[0]),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(\m_vector_i[1061]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0808FB08FB08FB08)) 
    \m_vector_i[1062]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1062] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(Q[1]),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(\m_vector_i[1062]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0808FB08FB08FB08)) 
    \m_vector_i[1063]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1063] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(Q[2]),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(\m_vector_i[1063]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1092]_i_1 
       (.I0(m_axi_awready),
        .I1(M00_AXI_awvalid),
        .I2(p_0_in),
        .I3(mr_axi_awready),
        .O(m_vector_i));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_vector_i[1092]_i_3 
       (.I0(M00_AXI_awvalid),
        .I1(mr_axi_awready),
        .O(\m_vector_i_reg[1064]_0 ));
  LUT6 #(
    .INIT(64'hFB08FBFBFB08FB08)) 
    \m_vector_i[1125]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1125] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(\S_AXI_ALEN_Q_reg[3] [0]),
        .I4(\pushed_commands_reg[0] ),
        .I5(need_to_split_q),
        .O(\m_vector_i[1125]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFB08FBFBFB08FB08)) 
    \m_vector_i[1126]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1126] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(\S_AXI_ALEN_Q_reg[3] [1]),
        .I4(\pushed_commands_reg[0] ),
        .I5(need_to_split_q),
        .O(\m_vector_i[1126]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFB08FBFBFB08FB08)) 
    \m_vector_i[1127]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1127] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(\S_AXI_ALEN_Q_reg[3] [2]),
        .I4(\pushed_commands_reg[0] ),
        .I5(need_to_split_q),
        .O(\m_vector_i[1127]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFB08FBFBFB08FB08)) 
    \m_vector_i[1128]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1128] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(\S_AXI_ALEN_Q_reg[3] [3]),
        .I4(\pushed_commands_reg[0] ),
        .I5(need_to_split_q),
        .O(\m_vector_i[1128]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1134]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1134] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[36]),
        .O(\m_vector_i[1134]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1135]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1135] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[37]),
        .O(\m_vector_i[1135]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1136]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1136] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[38]),
        .O(\m_vector_i[1136]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1137]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1137] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[39]),
        .O(\m_vector_i[1137]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1138]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1138] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[40]),
        .O(\m_vector_i[1138]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1139]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1139] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[41]),
        .O(\m_vector_i[1139]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1140]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1140] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[42]),
        .O(\m_vector_i[1140]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1141]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1141] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[43]),
        .O(\m_vector_i[1141]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1142]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1142] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[44]),
        .O(\m_vector_i[1142]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1143]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1143] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[45]),
        .O(\m_vector_i[1143]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1144]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1144] ),
        .I1(M00_AXI_awvalid),
        .I2(mr_axi_awready),
        .I3(D[46]),
        .O(\m_vector_i[1144]_i_1_n_0 ));
  FDRE \m_vector_i_reg[1061] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1061]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1062] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1062]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [1]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1063] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1063]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [2]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1064] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [0]),
        .Q(\M00_AXI_awcache[3] [3]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1065] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [1]),
        .Q(\M00_AXI_awcache[3] [4]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1066] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [2]),
        .Q(\M00_AXI_awcache[3] [5]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1067] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [3]),
        .Q(\M00_AXI_awcache[3] [6]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1068] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [4]),
        .Q(\M00_AXI_awcache[3] [7]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1069] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [5]),
        .Q(\M00_AXI_awcache[3] [8]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1070] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [6]),
        .Q(\M00_AXI_awcache[3] [9]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1071] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [7]),
        .Q(\M00_AXI_awcache[3] [10]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1072] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [8]),
        .Q(\M00_AXI_awcache[3] [11]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1073] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [9]),
        .Q(\M00_AXI_awcache[3] [12]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1074] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [10]),
        .Q(\M00_AXI_awcache[3] [13]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1075] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [11]),
        .Q(\M00_AXI_awcache[3] [14]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1076] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [12]),
        .Q(\M00_AXI_awcache[3] [15]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1077] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [13]),
        .Q(\M00_AXI_awcache[3] [16]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1078] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [14]),
        .Q(\M00_AXI_awcache[3] [17]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1079] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [15]),
        .Q(\M00_AXI_awcache[3] [18]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1080] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [16]),
        .Q(\M00_AXI_awcache[3] [19]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1081] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [17]),
        .Q(\M00_AXI_awcache[3] [20]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1082] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [18]),
        .Q(\M00_AXI_awcache[3] [21]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1083] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [19]),
        .Q(\M00_AXI_awcache[3] [22]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1084] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [20]),
        .Q(\M00_AXI_awcache[3] [23]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1085] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [21]),
        .Q(\M00_AXI_awcache[3] [24]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1086] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [22]),
        .Q(\M00_AXI_awcache[3] [25]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1087] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [23]),
        .Q(\M00_AXI_awcache[3] [26]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1088] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [24]),
        .Q(\M00_AXI_awcache[3] [27]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1089] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [25]),
        .Q(\M00_AXI_awcache[3] [28]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1090] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [26]),
        .Q(\M00_AXI_awcache[3] [29]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1091] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [27]),
        .Q(\M00_AXI_awcache[3] [30]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1092] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\skid_buffer_reg[1092]_0 [28]),
        .Q(\M00_AXI_awcache[3] [31]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1125] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1125]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [32]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1126] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1126]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [33]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1127] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1127]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [34]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1128] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1128]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [35]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1134] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1134]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [36]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1135] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1135]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [37]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1136] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1136]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [38]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1137] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1137]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [39]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1138] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1138]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [40]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1139] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1139]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [41]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1140] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1140]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [42]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1141] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1141]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [43]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1142] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1142]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [44]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1143] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1143]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [45]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1144] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1144]_i_1_n_0 ),
        .Q(\M00_AXI_awcache[3] [46]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[1144]_i_1 
       (.I0(mr_axi_awready),
        .I1(M00_AXI_awvalid),
        .O(\skid_buffer[1144]_i_1_n_0 ));
  FDRE \skid_buffer_reg[1061] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[0]),
        .Q(\skid_buffer_reg_n_0_[1061] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1062] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[1]),
        .Q(\skid_buffer_reg_n_0_[1062] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1063] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[2]),
        .Q(\skid_buffer_reg_n_0_[1063] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1064] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[3]),
        .Q(\m_vector_i_reg[1092]_0 [0]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1065] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[4]),
        .Q(\m_vector_i_reg[1092]_0 [1]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1066] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[5]),
        .Q(\m_vector_i_reg[1092]_0 [2]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1067] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[6]),
        .Q(\m_vector_i_reg[1092]_0 [3]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1068] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[7]),
        .Q(\m_vector_i_reg[1092]_0 [4]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1069] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[8]),
        .Q(\m_vector_i_reg[1092]_0 [5]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1070] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[9]),
        .Q(\m_vector_i_reg[1092]_0 [6]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1071] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[10]),
        .Q(\m_vector_i_reg[1092]_0 [7]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1072] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[11]),
        .Q(\m_vector_i_reg[1092]_0 [8]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1073] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[12]),
        .Q(\m_vector_i_reg[1092]_0 [9]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1074] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[13]),
        .Q(\m_vector_i_reg[1092]_0 [10]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1075] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[14]),
        .Q(\m_vector_i_reg[1092]_0 [11]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1076] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[15]),
        .Q(\m_vector_i_reg[1092]_0 [12]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1077] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[16]),
        .Q(\m_vector_i_reg[1092]_0 [13]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1078] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[17]),
        .Q(\m_vector_i_reg[1092]_0 [14]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1079] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[18]),
        .Q(\m_vector_i_reg[1092]_0 [15]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1080] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[19]),
        .Q(\m_vector_i_reg[1092]_0 [16]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1081] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[20]),
        .Q(\m_vector_i_reg[1092]_0 [17]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1082] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[21]),
        .Q(\m_vector_i_reg[1092]_0 [18]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1083] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[22]),
        .Q(\m_vector_i_reg[1092]_0 [19]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1084] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[23]),
        .Q(\m_vector_i_reg[1092]_0 [20]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1085] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[24]),
        .Q(\m_vector_i_reg[1092]_0 [21]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1086] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[25]),
        .Q(\m_vector_i_reg[1092]_0 [22]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1087] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[26]),
        .Q(\m_vector_i_reg[1092]_0 [23]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1088] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[27]),
        .Q(\m_vector_i_reg[1092]_0 [24]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1089] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[28]),
        .Q(\m_vector_i_reg[1092]_0 [25]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1090] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[29]),
        .Q(\m_vector_i_reg[1092]_0 [26]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1091] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[30]),
        .Q(\m_vector_i_reg[1092]_0 [27]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1092] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[31]),
        .Q(\m_vector_i_reg[1092]_0 [28]),
        .R(1'b0));
  FDRE \skid_buffer_reg[1125] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[32]),
        .Q(\skid_buffer_reg_n_0_[1125] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1126] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[33]),
        .Q(\skid_buffer_reg_n_0_[1126] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1127] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[34]),
        .Q(\skid_buffer_reg_n_0_[1127] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1128] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[35]),
        .Q(\skid_buffer_reg_n_0_[1128] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1134] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[36]),
        .Q(\skid_buffer_reg_n_0_[1134] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1135] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[37]),
        .Q(\skid_buffer_reg_n_0_[1135] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1136] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[38]),
        .Q(\skid_buffer_reg_n_0_[1136] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1137] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[39]),
        .Q(\skid_buffer_reg_n_0_[1137] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1138] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[40]),
        .Q(\skid_buffer_reg_n_0_[1138] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1139] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[41]),
        .Q(\skid_buffer_reg_n_0_[1139] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1140] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[42]),
        .Q(\skid_buffer_reg_n_0_[1140] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1141] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[43]),
        .Q(\skid_buffer_reg_n_0_[1141] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1142] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[44]),
        .Q(\skid_buffer_reg_n_0_[1142] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1143] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[45]),
        .Q(\skid_buffer_reg_n_0_[1143] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1144] 
       (.C(aclk),
        .CE(\skid_buffer[1144]_i_1_n_0 ),
        .D(D[46]),
        .Q(\skid_buffer_reg_n_0_[1144] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000F022F2F0F0)) 
    \state[m_valid_i]_i_1 
       (.I0(s_write_cmd_vacancy),
        .I1(command_ongoing_reg),
        .I2(M00_AXI_awvalid),
        .I3(m_axi_awready),
        .I4(mr_axi_awready),
        .I5(p_0_in),
        .O(\state[m_valid_i]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFDFFF0F)) 
    \state[s_ready_i]_i_1 
       (.I0(s_write_cmd_vacancy),
        .I1(command_ongoing_reg),
        .I2(M00_AXI_awvalid),
        .I3(m_axi_awready),
        .I4(mr_axi_awready),
        .I5(p_0_in),
        .O(\state[s_ready_i]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1 
       (.I0(mr_axi_awready),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1_n_0 ),
        .Q(M00_AXI_awvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1_n_0 ),
        .Q(mr_axi_awready),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_63
   (M00_AXI_bready,
    exit_bready,
    \fifoaddr_reg[2] ,
    s_axi_bvalid,
    mr_bvector,
    areset,
    aclk,
    s_axi_bready,
    \gen_pipelined.mesg_reg_reg[4] ,
    m_axi_bvalid,
    m_axi_bresp);
  output M00_AXI_bready;
  output exit_bready;
  output \fifoaddr_reg[2] ;
  output s_axi_bvalid;
  output [1:0]mr_bvector;
  input areset;
  input aclk;
  input s_axi_bready;
  input \gen_pipelined.mesg_reg_reg[4] ;
  input m_axi_bvalid;
  input [1:0]m_axi_bresp;

  wire M00_AXI_bready;
  wire aclk;
  wire areset;
  wire exit_bready;
  wire \fifoaddr_reg[2] ;
  wire \gen_pipelined.mesg_reg_reg[4] ;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire m_vector_i;
  wire \m_vector_i[1056]_i_1__0_n_0 ;
  wire \m_vector_i[1057]_i_1__0_n_0 ;
  wire mr_axi_bvalid;
  wire [1:0]mr_bvector;
  wire [0:0]p_0_in;
  wire s_axi_bready;
  wire s_axi_bvalid;
  wire \skid_buffer[1056]_i_1_n_0 ;
  wire \skid_buffer[1057]_i_1_n_0 ;
  wire \skid_buffer_reg_n_0_[1056] ;
  wire \skid_buffer_reg_n_0_[1057] ;
  wire \state[m_valid_i]_i_1__1_n_0 ;
  wire \state[s_ready_i]_i_1__1_n_0 ;
  wire \state[s_stall_d]_i_1__1_n_0 ;

  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    first_mi_word_i_1
       (.I0(mr_axi_bvalid),
        .I1(\gen_pipelined.mesg_reg_reg[4] ),
        .I2(s_axi_bready),
        .O(exit_bready));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \gen_pipelined.mesg_reg[4]_i_3 
       (.I0(s_axi_bready),
        .I1(mr_axi_bvalid),
        .I2(\gen_pipelined.mesg_reg_reg[4] ),
        .O(\fifoaddr_reg[2] ));
  LUT6 #(
    .INIT(64'hFB08FFFFFB080000)) 
    \m_vector_i[1056]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1056] ),
        .I1(mr_axi_bvalid),
        .I2(M00_AXI_bready),
        .I3(m_axi_bresp[0]),
        .I4(m_vector_i),
        .I5(mr_bvector[0]),
        .O(\m_vector_i[1056]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFB08FFFFFB080000)) 
    \m_vector_i[1057]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1057] ),
        .I1(mr_axi_bvalid),
        .I2(M00_AXI_bready),
        .I3(m_axi_bresp[1]),
        .I4(m_vector_i),
        .I5(mr_bvector[1]),
        .O(\m_vector_i[1057]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1057]_i_2 
       (.I0(exit_bready),
        .I1(mr_axi_bvalid),
        .I2(p_0_in),
        .I3(M00_AXI_bready),
        .O(m_vector_i));
  FDRE \m_vector_i_reg[1056] 
       (.C(aclk),
        .CE(1'b1),
        .D(\m_vector_i[1056]_i_1__0_n_0 ),
        .Q(mr_bvector[0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1057] 
       (.C(aclk),
        .CE(1'b1),
        .D(\m_vector_i[1057]_i_1__0_n_0 ),
        .Q(mr_bvector[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_bvalid_INST_0
       (.I0(mr_axi_bvalid),
        .I1(\gen_pipelined.mesg_reg_reg[4] ),
        .O(s_axi_bvalid));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \skid_buffer[1056]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(M00_AXI_bready),
        .I2(mr_axi_bvalid),
        .I3(\skid_buffer_reg_n_0_[1056] ),
        .O(\skid_buffer[1056]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \skid_buffer[1057]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(M00_AXI_bready),
        .I2(mr_axi_bvalid),
        .I3(\skid_buffer_reg_n_0_[1057] ),
        .O(\skid_buffer[1057]_i_1_n_0 ));
  FDRE \skid_buffer_reg[1056] 
       (.C(aclk),
        .CE(1'b1),
        .D(\skid_buffer[1056]_i_1_n_0 ),
        .Q(\skid_buffer_reg_n_0_[1056] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1057] 
       (.C(aclk),
        .CE(1'b1),
        .D(\skid_buffer[1057]_i_1_n_0 ),
        .Q(\skid_buffer_reg_n_0_[1057] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h000CAECC)) 
    \state[m_valid_i]_i_1__1 
       (.I0(m_axi_bvalid),
        .I1(mr_axi_bvalid),
        .I2(exit_bready),
        .I3(M00_AXI_bready),
        .I4(p_0_in),
        .O(\state[m_valid_i]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'hFF00F7F3)) 
    \state[s_ready_i]_i_1__1 
       (.I0(m_axi_bvalid),
        .I1(mr_axi_bvalid),
        .I2(exit_bready),
        .I3(M00_AXI_bready),
        .I4(p_0_in),
        .O(\state[s_ready_i]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1__1 
       (.I0(M00_AXI_bready),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1__1_n_0 ),
        .Q(mr_axi_bvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1__1_n_0 ),
        .Q(M00_AXI_bready),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1__1_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axi_reg_stall" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axi_reg_stall_64
   (M00_AXI_wvalid,
    mr_axi_wready,
    s_axi_wready,
    Q,
    areset,
    aclk,
    \USE_WRITE.wr_cmd_valid ,
    s_axi_wvalid,
    m_axi_wready,
    D);
  output M00_AXI_wvalid;
  output mr_axi_wready;
  output s_axi_wready;
  output [72:0]Q;
  input areset;
  input aclk;
  input \USE_WRITE.wr_cmd_valid ;
  input s_axi_wvalid;
  input m_axi_wready;
  input [72:0]D;

  wire [72:0]D;
  wire M00_AXI_wvalid;
  wire [72:0]Q;
  wire \USE_WRITE.wr_cmd_valid ;
  wire aclk;
  wire areset;
  wire m_axi_wready;
  wire m_vector_i;
  wire \m_vector_i[1024]_i_1_n_0 ;
  wire \m_vector_i[1025]_i_1_n_0 ;
  wire \m_vector_i[1026]_i_1_n_0 ;
  wire \m_vector_i[1027]_i_1_n_0 ;
  wire \m_vector_i[1028]_i_1_n_0 ;
  wire \m_vector_i[1029]_i_1_n_0 ;
  wire \m_vector_i[1030]_i_1_n_0 ;
  wire \m_vector_i[1031]_i_1_n_0 ;
  wire \m_vector_i[1032]_i_1_n_0 ;
  wire \m_vector_i[1033]_i_1_n_0 ;
  wire \m_vector_i[1034]_i_1_n_0 ;
  wire \m_vector_i[1035]_i_1_n_0 ;
  wire \m_vector_i[1036]_i_1_n_0 ;
  wire \m_vector_i[1037]_i_1_n_0 ;
  wire \m_vector_i[1038]_i_1_n_0 ;
  wire \m_vector_i[1039]_i_1_n_0 ;
  wire \m_vector_i[1040]_i_1_n_0 ;
  wire \m_vector_i[1041]_i_1_n_0 ;
  wire \m_vector_i[1042]_i_1_n_0 ;
  wire \m_vector_i[1043]_i_1_n_0 ;
  wire \m_vector_i[1044]_i_1_n_0 ;
  wire \m_vector_i[1045]_i_1_n_0 ;
  wire \m_vector_i[1046]_i_1_n_0 ;
  wire \m_vector_i[1047]_i_1_n_0 ;
  wire \m_vector_i[1048]_i_1_n_0 ;
  wire \m_vector_i[1049]_i_1_n_0 ;
  wire \m_vector_i[1050]_i_1_n_0 ;
  wire \m_vector_i[1051]_i_1_n_0 ;
  wire \m_vector_i[1052]_i_1_n_0 ;
  wire \m_vector_i[1053]_i_1_n_0 ;
  wire \m_vector_i[1054]_i_1_n_0 ;
  wire \m_vector_i[1055]_i_1_n_0 ;
  wire \m_vector_i[1056]_i_1_n_0 ;
  wire \m_vector_i[1057]_i_1_n_0 ;
  wire \m_vector_i[1058]_i_1_n_0 ;
  wire \m_vector_i[1059]_i_1_n_0 ;
  wire \m_vector_i[1060]_i_1_n_0 ;
  wire \m_vector_i[1061]_i_1__0_n_0 ;
  wire \m_vector_i[1062]_i_1__0_n_0 ;
  wire \m_vector_i[1063]_i_1__0_n_0 ;
  wire \m_vector_i[1064]_i_1__0_n_0 ;
  wire \m_vector_i[1065]_i_1__0_n_0 ;
  wire \m_vector_i[1066]_i_1__0_n_0 ;
  wire \m_vector_i[1067]_i_1__0_n_0 ;
  wire \m_vector_i[1068]_i_1__0_n_0 ;
  wire \m_vector_i[1069]_i_1__0_n_0 ;
  wire \m_vector_i[1070]_i_1__0_n_0 ;
  wire \m_vector_i[1071]_i_1__0_n_0 ;
  wire \m_vector_i[1072]_i_1__0_n_0 ;
  wire \m_vector_i[1073]_i_1__0_n_0 ;
  wire \m_vector_i[1074]_i_1__0_n_0 ;
  wire \m_vector_i[1075]_i_1__0_n_0 ;
  wire \m_vector_i[1076]_i_1__0_n_0 ;
  wire \m_vector_i[1077]_i_1__0_n_0 ;
  wire \m_vector_i[1078]_i_1__0_n_0 ;
  wire \m_vector_i[1079]_i_1__0_n_0 ;
  wire \m_vector_i[1080]_i_1__0_n_0 ;
  wire \m_vector_i[1081]_i_1__0_n_0 ;
  wire \m_vector_i[1082]_i_1__0_n_0 ;
  wire \m_vector_i[1083]_i_1__0_n_0 ;
  wire \m_vector_i[1084]_i_1__0_n_0 ;
  wire \m_vector_i[1085]_i_1__0_n_0 ;
  wire \m_vector_i[1086]_i_1__0_n_0 ;
  wire \m_vector_i[1087]_i_1__0_n_0 ;
  wire \m_vector_i[1088]_i_2_n_0 ;
  wire \m_vector_i[2049]_i_1_n_0 ;
  wire \m_vector_i[2050]_i_1_n_0 ;
  wire \m_vector_i[2051]_i_1_n_0 ;
  wire \m_vector_i[2052]_i_1_n_0 ;
  wire \m_vector_i[2053]_i_1_n_0 ;
  wire \m_vector_i[2054]_i_1_n_0 ;
  wire \m_vector_i[2055]_i_1_n_0 ;
  wire \m_vector_i[2056]_i_1_n_0 ;
  wire mr_axi_wready;
  wire [0:0]p_0_in;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire \skid_buffer[2056]_i_1_n_0 ;
  wire \skid_buffer_reg_n_0_[1024] ;
  wire \skid_buffer_reg_n_0_[1025] ;
  wire \skid_buffer_reg_n_0_[1026] ;
  wire \skid_buffer_reg_n_0_[1027] ;
  wire \skid_buffer_reg_n_0_[1028] ;
  wire \skid_buffer_reg_n_0_[1029] ;
  wire \skid_buffer_reg_n_0_[1030] ;
  wire \skid_buffer_reg_n_0_[1031] ;
  wire \skid_buffer_reg_n_0_[1032] ;
  wire \skid_buffer_reg_n_0_[1033] ;
  wire \skid_buffer_reg_n_0_[1034] ;
  wire \skid_buffer_reg_n_0_[1035] ;
  wire \skid_buffer_reg_n_0_[1036] ;
  wire \skid_buffer_reg_n_0_[1037] ;
  wire \skid_buffer_reg_n_0_[1038] ;
  wire \skid_buffer_reg_n_0_[1039] ;
  wire \skid_buffer_reg_n_0_[1040] ;
  wire \skid_buffer_reg_n_0_[1041] ;
  wire \skid_buffer_reg_n_0_[1042] ;
  wire \skid_buffer_reg_n_0_[1043] ;
  wire \skid_buffer_reg_n_0_[1044] ;
  wire \skid_buffer_reg_n_0_[1045] ;
  wire \skid_buffer_reg_n_0_[1046] ;
  wire \skid_buffer_reg_n_0_[1047] ;
  wire \skid_buffer_reg_n_0_[1048] ;
  wire \skid_buffer_reg_n_0_[1049] ;
  wire \skid_buffer_reg_n_0_[1050] ;
  wire \skid_buffer_reg_n_0_[1051] ;
  wire \skid_buffer_reg_n_0_[1052] ;
  wire \skid_buffer_reg_n_0_[1053] ;
  wire \skid_buffer_reg_n_0_[1054] ;
  wire \skid_buffer_reg_n_0_[1055] ;
  wire \skid_buffer_reg_n_0_[1056] ;
  wire \skid_buffer_reg_n_0_[1057] ;
  wire \skid_buffer_reg_n_0_[1058] ;
  wire \skid_buffer_reg_n_0_[1059] ;
  wire \skid_buffer_reg_n_0_[1060] ;
  wire \skid_buffer_reg_n_0_[1061] ;
  wire \skid_buffer_reg_n_0_[1062] ;
  wire \skid_buffer_reg_n_0_[1063] ;
  wire \skid_buffer_reg_n_0_[1064] ;
  wire \skid_buffer_reg_n_0_[1065] ;
  wire \skid_buffer_reg_n_0_[1066] ;
  wire \skid_buffer_reg_n_0_[1067] ;
  wire \skid_buffer_reg_n_0_[1068] ;
  wire \skid_buffer_reg_n_0_[1069] ;
  wire \skid_buffer_reg_n_0_[1070] ;
  wire \skid_buffer_reg_n_0_[1071] ;
  wire \skid_buffer_reg_n_0_[1072] ;
  wire \skid_buffer_reg_n_0_[1073] ;
  wire \skid_buffer_reg_n_0_[1074] ;
  wire \skid_buffer_reg_n_0_[1075] ;
  wire \skid_buffer_reg_n_0_[1076] ;
  wire \skid_buffer_reg_n_0_[1077] ;
  wire \skid_buffer_reg_n_0_[1078] ;
  wire \skid_buffer_reg_n_0_[1079] ;
  wire \skid_buffer_reg_n_0_[1080] ;
  wire \skid_buffer_reg_n_0_[1081] ;
  wire \skid_buffer_reg_n_0_[1082] ;
  wire \skid_buffer_reg_n_0_[1083] ;
  wire \skid_buffer_reg_n_0_[1084] ;
  wire \skid_buffer_reg_n_0_[1085] ;
  wire \skid_buffer_reg_n_0_[1086] ;
  wire \skid_buffer_reg_n_0_[1087] ;
  wire \skid_buffer_reg_n_0_[1088] ;
  wire \skid_buffer_reg_n_0_[2049] ;
  wire \skid_buffer_reg_n_0_[2050] ;
  wire \skid_buffer_reg_n_0_[2051] ;
  wire \skid_buffer_reg_n_0_[2052] ;
  wire \skid_buffer_reg_n_0_[2053] ;
  wire \skid_buffer_reg_n_0_[2054] ;
  wire \skid_buffer_reg_n_0_[2055] ;
  wire \skid_buffer_reg_n_0_[2056] ;
  wire \state[m_valid_i]_i_1__0_n_0 ;
  wire \state[s_ready_i]_i_1__0_n_0 ;
  wire \state[s_stall_d]_i_1__0_n_0 ;

  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1024]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1024] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[0]),
        .O(\m_vector_i[1024]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1025]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1025] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[1]),
        .O(\m_vector_i[1025]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1026]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1026] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[2]),
        .O(\m_vector_i[1026]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1027]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1027] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[3]),
        .O(\m_vector_i[1027]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1028]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1028] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[4]),
        .O(\m_vector_i[1028]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1029]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1029] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[5]),
        .O(\m_vector_i[1029]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1030]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1030] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[6]),
        .O(\m_vector_i[1030]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1031]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1031] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[7]),
        .O(\m_vector_i[1031]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1032]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1032] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[8]),
        .O(\m_vector_i[1032]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1033]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1033] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[9]),
        .O(\m_vector_i[1033]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1034]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1034] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[10]),
        .O(\m_vector_i[1034]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1035]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1035] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[11]),
        .O(\m_vector_i[1035]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1036]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1036] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[12]),
        .O(\m_vector_i[1036]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1037]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1037] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[13]),
        .O(\m_vector_i[1037]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1038]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1038] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[14]),
        .O(\m_vector_i[1038]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1039]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1039] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[15]),
        .O(\m_vector_i[1039]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1040]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1040] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[16]),
        .O(\m_vector_i[1040]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1041]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1041] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[17]),
        .O(\m_vector_i[1041]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1042]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1042] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[18]),
        .O(\m_vector_i[1042]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1043]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1043] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[19]),
        .O(\m_vector_i[1043]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1044]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1044] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[20]),
        .O(\m_vector_i[1044]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1045]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1045] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[21]),
        .O(\m_vector_i[1045]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1046]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1046] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[22]),
        .O(\m_vector_i[1046]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1047]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1047] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[23]),
        .O(\m_vector_i[1047]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1048]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1048] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[24]),
        .O(\m_vector_i[1048]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1049]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1049] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[25]),
        .O(\m_vector_i[1049]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1050]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1050] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[26]),
        .O(\m_vector_i[1050]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1051]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1051] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[27]),
        .O(\m_vector_i[1051]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1052]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1052] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[28]),
        .O(\m_vector_i[1052]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1053]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1053] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[29]),
        .O(\m_vector_i[1053]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1054]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1054] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[30]),
        .O(\m_vector_i[1054]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1055]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1055] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[31]),
        .O(\m_vector_i[1055]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1056]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1056] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[32]),
        .O(\m_vector_i[1056]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1057]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1057] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[33]),
        .O(\m_vector_i[1057]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1058]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1058] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[34]),
        .O(\m_vector_i[1058]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1059]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1059] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[35]),
        .O(\m_vector_i[1059]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1060]_i_1 
       (.I0(\skid_buffer_reg_n_0_[1060] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[36]),
        .O(\m_vector_i[1060]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1061]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1061] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[37]),
        .O(\m_vector_i[1061]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1062]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1062] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[38]),
        .O(\m_vector_i[1062]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1063]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1063] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[39]),
        .O(\m_vector_i[1063]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1064]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1064] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[40]),
        .O(\m_vector_i[1064]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1065]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1065] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[41]),
        .O(\m_vector_i[1065]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1066]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1066] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[42]),
        .O(\m_vector_i[1066]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1067]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1067] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[43]),
        .O(\m_vector_i[1067]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1068]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1068] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[44]),
        .O(\m_vector_i[1068]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1069]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1069] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[45]),
        .O(\m_vector_i[1069]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1070]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1070] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[46]),
        .O(\m_vector_i[1070]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1071]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1071] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[47]),
        .O(\m_vector_i[1071]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1072]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1072] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[48]),
        .O(\m_vector_i[1072]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1073]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1073] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[49]),
        .O(\m_vector_i[1073]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1074]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1074] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[50]),
        .O(\m_vector_i[1074]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1075]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1075] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[51]),
        .O(\m_vector_i[1075]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1076]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1076] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[52]),
        .O(\m_vector_i[1076]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1077]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1077] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[53]),
        .O(\m_vector_i[1077]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1078]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1078] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[54]),
        .O(\m_vector_i[1078]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1079]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1079] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[55]),
        .O(\m_vector_i[1079]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1080]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1080] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[56]),
        .O(\m_vector_i[1080]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1081]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1081] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[57]),
        .O(\m_vector_i[1081]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1082]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1082] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[58]),
        .O(\m_vector_i[1082]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1083]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1083] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[59]),
        .O(\m_vector_i[1083]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1084]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1084] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[60]),
        .O(\m_vector_i[1084]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1085]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1085] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[61]),
        .O(\m_vector_i[1085]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1086]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1086] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[62]),
        .O(\m_vector_i[1086]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1087]_i_1__0 
       (.I0(\skid_buffer_reg_n_0_[1087] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[63]),
        .O(\m_vector_i[1087]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFB8B)) 
    \m_vector_i[1088]_i_1__0 
       (.I0(m_axi_wready),
        .I1(M00_AXI_wvalid),
        .I2(p_0_in),
        .I3(mr_axi_wready),
        .O(m_vector_i));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[1088]_i_2 
       (.I0(\skid_buffer_reg_n_0_[1088] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[64]),
        .O(\m_vector_i[1088]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2049]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2049] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[65]),
        .O(\m_vector_i[2049]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2050]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2050] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[66]),
        .O(\m_vector_i[2050]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2051]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2051] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[67]),
        .O(\m_vector_i[2051]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2052]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2052] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[68]),
        .O(\m_vector_i[2052]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2053]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2053] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[69]),
        .O(\m_vector_i[2053]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2054]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2054] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[70]),
        .O(\m_vector_i[2054]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2055]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2055] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[71]),
        .O(\m_vector_i[2055]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \m_vector_i[2056]_i_1 
       (.I0(\skid_buffer_reg_n_0_[2056] ),
        .I1(M00_AXI_wvalid),
        .I2(mr_axi_wready),
        .I3(D[72]),
        .O(\m_vector_i[2056]_i_1_n_0 ));
  FDRE \m_vector_i_reg[1024] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1024]_i_1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1025] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1025]_i_1_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1026] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1026]_i_1_n_0 ),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1027] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1027]_i_1_n_0 ),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1028] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1028]_i_1_n_0 ),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1029] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1029]_i_1_n_0 ),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1030] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1030]_i_1_n_0 ),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1031] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1031]_i_1_n_0 ),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1032] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1032]_i_1_n_0 ),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1033] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1033]_i_1_n_0 ),
        .Q(Q[9]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1034] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1034]_i_1_n_0 ),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1035] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1035]_i_1_n_0 ),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1036] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1036]_i_1_n_0 ),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1037] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1037]_i_1_n_0 ),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1038] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1038]_i_1_n_0 ),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1039] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1039]_i_1_n_0 ),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1040] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1040]_i_1_n_0 ),
        .Q(Q[16]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1041] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1041]_i_1_n_0 ),
        .Q(Q[17]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1042] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1042]_i_1_n_0 ),
        .Q(Q[18]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1043] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1043]_i_1_n_0 ),
        .Q(Q[19]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1044] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1044]_i_1_n_0 ),
        .Q(Q[20]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1045] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1045]_i_1_n_0 ),
        .Q(Q[21]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1046] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1046]_i_1_n_0 ),
        .Q(Q[22]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1047] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1047]_i_1_n_0 ),
        .Q(Q[23]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1048] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1048]_i_1_n_0 ),
        .Q(Q[24]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1049] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1049]_i_1_n_0 ),
        .Q(Q[25]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1050] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1050]_i_1_n_0 ),
        .Q(Q[26]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1051] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1051]_i_1_n_0 ),
        .Q(Q[27]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1052] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1052]_i_1_n_0 ),
        .Q(Q[28]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1053] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1053]_i_1_n_0 ),
        .Q(Q[29]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1054] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1054]_i_1_n_0 ),
        .Q(Q[30]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1055] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1055]_i_1_n_0 ),
        .Q(Q[31]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1056] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1056]_i_1_n_0 ),
        .Q(Q[32]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1057] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1057]_i_1_n_0 ),
        .Q(Q[33]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1058] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1058]_i_1_n_0 ),
        .Q(Q[34]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1059] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1059]_i_1_n_0 ),
        .Q(Q[35]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1060] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1060]_i_1_n_0 ),
        .Q(Q[36]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1061] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1061]_i_1__0_n_0 ),
        .Q(Q[37]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1062] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1062]_i_1__0_n_0 ),
        .Q(Q[38]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1063] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1063]_i_1__0_n_0 ),
        .Q(Q[39]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1064] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1064]_i_1__0_n_0 ),
        .Q(Q[40]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1065] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1065]_i_1__0_n_0 ),
        .Q(Q[41]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1066] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1066]_i_1__0_n_0 ),
        .Q(Q[42]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1067] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1067]_i_1__0_n_0 ),
        .Q(Q[43]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1068] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1068]_i_1__0_n_0 ),
        .Q(Q[44]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1069] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1069]_i_1__0_n_0 ),
        .Q(Q[45]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1070] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1070]_i_1__0_n_0 ),
        .Q(Q[46]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1071] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1071]_i_1__0_n_0 ),
        .Q(Q[47]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1072] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1072]_i_1__0_n_0 ),
        .Q(Q[48]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1073] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1073]_i_1__0_n_0 ),
        .Q(Q[49]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1074] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1074]_i_1__0_n_0 ),
        .Q(Q[50]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1075] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1075]_i_1__0_n_0 ),
        .Q(Q[51]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1076] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1076]_i_1__0_n_0 ),
        .Q(Q[52]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1077] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1077]_i_1__0_n_0 ),
        .Q(Q[53]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1078] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1078]_i_1__0_n_0 ),
        .Q(Q[54]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1079] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1079]_i_1__0_n_0 ),
        .Q(Q[55]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1080] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1080]_i_1__0_n_0 ),
        .Q(Q[56]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1081] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1081]_i_1__0_n_0 ),
        .Q(Q[57]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1082] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1082]_i_1__0_n_0 ),
        .Q(Q[58]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1083] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1083]_i_1__0_n_0 ),
        .Q(Q[59]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1084] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1084]_i_1__0_n_0 ),
        .Q(Q[60]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1085] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1085]_i_1__0_n_0 ),
        .Q(Q[61]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1086] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1086]_i_1__0_n_0 ),
        .Q(Q[62]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1087] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1087]_i_1__0_n_0 ),
        .Q(Q[63]),
        .R(1'b0));
  FDRE \m_vector_i_reg[1088] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[1088]_i_2_n_0 ),
        .Q(Q[64]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2049] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2049]_i_1_n_0 ),
        .Q(Q[65]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2050] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2050]_i_1_n_0 ),
        .Q(Q[66]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2051] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2051]_i_1_n_0 ),
        .Q(Q[67]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2052] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2052]_i_1_n_0 ),
        .Q(Q[68]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2053] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2053]_i_1_n_0 ),
        .Q(Q[69]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2054] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2054]_i_1_n_0 ),
        .Q(Q[70]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2055] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2055]_i_1_n_0 ),
        .Q(Q[71]),
        .R(1'b0));
  FDRE \m_vector_i_reg[2056] 
       (.C(aclk),
        .CE(m_vector_i),
        .D(\m_vector_i[2056]_i_1_n_0 ),
        .Q(Q[72]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'h80)) 
    s_axi_wready_INST_0
       (.I0(mr_axi_wready),
        .I1(s_axi_wvalid),
        .I2(\USE_WRITE.wr_cmd_valid ),
        .O(s_axi_wready));
  LUT2 #(
    .INIT(4'hB)) 
    \skid_buffer[2056]_i_1 
       (.I0(mr_axi_wready),
        .I1(M00_AXI_wvalid),
        .O(\skid_buffer[2056]_i_1_n_0 ));
  FDRE \skid_buffer_reg[1024] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[0]),
        .Q(\skid_buffer_reg_n_0_[1024] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1025] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[1]),
        .Q(\skid_buffer_reg_n_0_[1025] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1026] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[2]),
        .Q(\skid_buffer_reg_n_0_[1026] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1027] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[3]),
        .Q(\skid_buffer_reg_n_0_[1027] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1028] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[4]),
        .Q(\skid_buffer_reg_n_0_[1028] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1029] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[5]),
        .Q(\skid_buffer_reg_n_0_[1029] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1030] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[6]),
        .Q(\skid_buffer_reg_n_0_[1030] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1031] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[7]),
        .Q(\skid_buffer_reg_n_0_[1031] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1032] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[8]),
        .Q(\skid_buffer_reg_n_0_[1032] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1033] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[9]),
        .Q(\skid_buffer_reg_n_0_[1033] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1034] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[10]),
        .Q(\skid_buffer_reg_n_0_[1034] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1035] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[11]),
        .Q(\skid_buffer_reg_n_0_[1035] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1036] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[12]),
        .Q(\skid_buffer_reg_n_0_[1036] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1037] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[13]),
        .Q(\skid_buffer_reg_n_0_[1037] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1038] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[14]),
        .Q(\skid_buffer_reg_n_0_[1038] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1039] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[15]),
        .Q(\skid_buffer_reg_n_0_[1039] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1040] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[16]),
        .Q(\skid_buffer_reg_n_0_[1040] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1041] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[17]),
        .Q(\skid_buffer_reg_n_0_[1041] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1042] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[18]),
        .Q(\skid_buffer_reg_n_0_[1042] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1043] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[19]),
        .Q(\skid_buffer_reg_n_0_[1043] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1044] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[20]),
        .Q(\skid_buffer_reg_n_0_[1044] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1045] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[21]),
        .Q(\skid_buffer_reg_n_0_[1045] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1046] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[22]),
        .Q(\skid_buffer_reg_n_0_[1046] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1047] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[23]),
        .Q(\skid_buffer_reg_n_0_[1047] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1048] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[24]),
        .Q(\skid_buffer_reg_n_0_[1048] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1049] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[25]),
        .Q(\skid_buffer_reg_n_0_[1049] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1050] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[26]),
        .Q(\skid_buffer_reg_n_0_[1050] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1051] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[27]),
        .Q(\skid_buffer_reg_n_0_[1051] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1052] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[28]),
        .Q(\skid_buffer_reg_n_0_[1052] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1053] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[29]),
        .Q(\skid_buffer_reg_n_0_[1053] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1054] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[30]),
        .Q(\skid_buffer_reg_n_0_[1054] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1055] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[31]),
        .Q(\skid_buffer_reg_n_0_[1055] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1056] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[32]),
        .Q(\skid_buffer_reg_n_0_[1056] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1057] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[33]),
        .Q(\skid_buffer_reg_n_0_[1057] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1058] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[34]),
        .Q(\skid_buffer_reg_n_0_[1058] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1059] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[35]),
        .Q(\skid_buffer_reg_n_0_[1059] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1060] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[36]),
        .Q(\skid_buffer_reg_n_0_[1060] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1061] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[37]),
        .Q(\skid_buffer_reg_n_0_[1061] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1062] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[38]),
        .Q(\skid_buffer_reg_n_0_[1062] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1063] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[39]),
        .Q(\skid_buffer_reg_n_0_[1063] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1064] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[40]),
        .Q(\skid_buffer_reg_n_0_[1064] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1065] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[41]),
        .Q(\skid_buffer_reg_n_0_[1065] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1066] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[42]),
        .Q(\skid_buffer_reg_n_0_[1066] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1067] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[43]),
        .Q(\skid_buffer_reg_n_0_[1067] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1068] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[44]),
        .Q(\skid_buffer_reg_n_0_[1068] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1069] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[45]),
        .Q(\skid_buffer_reg_n_0_[1069] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1070] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[46]),
        .Q(\skid_buffer_reg_n_0_[1070] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1071] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[47]),
        .Q(\skid_buffer_reg_n_0_[1071] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1072] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[48]),
        .Q(\skid_buffer_reg_n_0_[1072] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1073] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[49]),
        .Q(\skid_buffer_reg_n_0_[1073] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1074] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[50]),
        .Q(\skid_buffer_reg_n_0_[1074] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1075] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[51]),
        .Q(\skid_buffer_reg_n_0_[1075] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1076] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[52]),
        .Q(\skid_buffer_reg_n_0_[1076] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1077] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[53]),
        .Q(\skid_buffer_reg_n_0_[1077] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1078] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[54]),
        .Q(\skid_buffer_reg_n_0_[1078] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1079] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[55]),
        .Q(\skid_buffer_reg_n_0_[1079] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1080] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[56]),
        .Q(\skid_buffer_reg_n_0_[1080] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1081] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[57]),
        .Q(\skid_buffer_reg_n_0_[1081] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1082] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[58]),
        .Q(\skid_buffer_reg_n_0_[1082] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1083] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[59]),
        .Q(\skid_buffer_reg_n_0_[1083] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1084] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[60]),
        .Q(\skid_buffer_reg_n_0_[1084] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1085] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[61]),
        .Q(\skid_buffer_reg_n_0_[1085] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1086] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[62]),
        .Q(\skid_buffer_reg_n_0_[1086] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1087] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[63]),
        .Q(\skid_buffer_reg_n_0_[1087] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[1088] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[64]),
        .Q(\skid_buffer_reg_n_0_[1088] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2049] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[65]),
        .Q(\skid_buffer_reg_n_0_[2049] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2050] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[66]),
        .Q(\skid_buffer_reg_n_0_[2050] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2051] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[67]),
        .Q(\skid_buffer_reg_n_0_[2051] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2052] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[68]),
        .Q(\skid_buffer_reg_n_0_[2052] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2053] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[69]),
        .Q(\skid_buffer_reg_n_0_[2053] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2054] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[70]),
        .Q(\skid_buffer_reg_n_0_[2054] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2055] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[71]),
        .Q(\skid_buffer_reg_n_0_[2055] ),
        .R(1'b0));
  FDRE \skid_buffer_reg[2056] 
       (.C(aclk),
        .CE(\skid_buffer[2056]_i_1_n_0 ),
        .D(D[72]),
        .Q(\skid_buffer_reg_n_0_[2056] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000F088F8F0F0)) 
    \state[m_valid_i]_i_1__0 
       (.I0(\USE_WRITE.wr_cmd_valid ),
        .I1(s_axi_wvalid),
        .I2(M00_AXI_wvalid),
        .I3(m_axi_wready),
        .I4(mr_axi_wready),
        .I5(p_0_in),
        .O(\state[m_valid_i]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FF7FFF0F)) 
    \state[s_ready_i]_i_1__0 
       (.I0(\USE_WRITE.wr_cmd_valid ),
        .I1(s_axi_wvalid),
        .I2(M00_AXI_wvalid),
        .I3(m_axi_wready),
        .I4(mr_axi_wready),
        .I5(p_0_in),
        .O(\state[s_ready_i]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \state[s_stall_d]_i_1__0 
       (.I0(mr_axi_wready),
        .I1(p_0_in),
        .O(\state[s_stall_d]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[m_valid_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[m_valid_i]_i_1__0_n_0 ),
        .Q(M00_AXI_wvalid),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_ready_i] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_ready_i]_i_1__0_n_0 ),
        .Q(mr_axi_wready),
        .R(areset));
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[s_stall_d] 
       (.C(aclk),
        .CE(1'b1),
        .D(\state[s_stall_d]_i_1__0_n_0 ),
        .Q(p_0_in),
        .R(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo
   (D,
    s_ready,
    \gen_pipelined.mesg_reg_reg[3]_0 ,
    \gen_pipelined.state_reg[1]_0 ,
    \fifoaddr_reg[1]_0 ,
    cmd_b_push_block_reg,
    cmd_b_push_block_reg_0,
    \gen_pipelined.mesg_reg_reg[3]_1 ,
    S_AXI_AREADY_I_reg,
    command_ongoing_reg,
    \length_counter_1_reg[3] ,
    aclk,
    areset,
    cmd_push_block,
    \USE_B_CHANNEL.s_b_ready ,
    command_ongoing,
    \length_counter_1_reg[0] ,
    mr_axi_awready,
    access_is_incr_q_reg,
    s_write_cmd_vacancy,
    cmd_b_push_block,
    E,
    \S_AXI_ALEN_Q_reg[3] ,
    incr_need_to_split_q_reg,
    Q,
    s_axi_awvalid,
    areset_d);
  output [3:0]D;
  output s_ready;
  output \gen_pipelined.mesg_reg_reg[3]_0 ;
  output \gen_pipelined.state_reg[1]_0 ;
  output \fifoaddr_reg[1]_0 ;
  output cmd_b_push_block_reg;
  output cmd_b_push_block_reg_0;
  output \gen_pipelined.mesg_reg_reg[3]_1 ;
  output S_AXI_AREADY_I_reg;
  output command_ongoing_reg;
  output [3:0]\length_counter_1_reg[3] ;
  input aclk;
  input areset;
  input cmd_push_block;
  input \USE_B_CHANNEL.s_b_ready ;
  input command_ongoing;
  input \length_counter_1_reg[0] ;
  input mr_axi_awready;
  input access_is_incr_q_reg;
  input s_write_cmd_vacancy;
  input cmd_b_push_block;
  input [0:0]E;
  input [3:0]\S_AXI_ALEN_Q_reg[3] ;
  input incr_need_to_split_q_reg;
  input [3:0]Q;
  input s_axi_awvalid;
  input [1:0]areset_d;

  wire [3:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]\S_AXI_ALEN_Q_reg[3] ;
  wire S_AXI_AREADY_I_i_2_n_0;
  wire S_AXI_AREADY_I_reg;
  wire \USE_B_CHANNEL.s_b_ready ;
  wire access_is_incr_q_reg;
  wire aclk;
  wire areset;
  wire [1:0]areset_d;
  wire cmd_b_push_block;
  wire cmd_b_push_block_reg;
  wire cmd_b_push_block_reg_0;
  wire cmd_push_block;
  wire command_ongoing;
  wire command_ongoing_reg;
  wire [4:0]fifoaddr;
  wire \fifoaddr[0]_i_1_n_0 ;
  wire \fifoaddr[1]_i_1__1_n_0 ;
  wire \fifoaddr[2]_i_1__1_n_0 ;
  wire \fifoaddr[3]_i_1__1_n_0 ;
  wire \fifoaddr[3]_i_2__0_n_0 ;
  wire \fifoaddr[4]_i_1__1_n_0 ;
  wire \fifoaddr[4]_i_2__1_n_0 ;
  wire \fifoaddr[4]_i_3__0_n_0 ;
  wire \fifoaddr[4]_i_4_n_0 ;
  wire fifoaddr_afull04_out;
  wire fifoaddr_afull_i_1_n_0;
  wire fifoaddr_afull_i_3__0_n_0;
  wire fifoaddr_afull_i_4_n_0;
  wire fifoaddr_afull_reg_n_0;
  wire \fifoaddr_reg[1]_0 ;
  wire \gen_pipelined.load_mesg ;
  wire \gen_pipelined.mesg_reg_reg[3]_0 ;
  wire \gen_pipelined.mesg_reg_reg[3]_1 ;
  wire \gen_pipelined.state[0]_i_1_n_0 ;
  wire \gen_pipelined.state[0]_i_2__0_n_0 ;
  wire \gen_pipelined.state[1]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_3_n_0 ;
  wire \gen_pipelined.state_reg[1]_0 ;
  wire \gen_pipelined.state_reg_n_0_[0] ;
  wire \gen_srls[0].srl_nx1_n_1 ;
  wire \gen_srls[1].srl_nx1_n_1 ;
  wire \gen_srls[2].srl_nx1_n_1 ;
  wire \gen_srls[3].srl_nx1_n_2 ;
  wire incr_need_to_split_q_reg;
  wire \length_counter_1_reg[0] ;
  wire [3:0]\length_counter_1_reg[3] ;
  wire mr_axi_awready;
  wire s_axi_awvalid;
  wire s_ready;
  wire s_write_cmd_vacancy;
  wire shift;

  LUT5 #(
    .INIT(32'h3AFF3A3A)) 
    S_AXI_AREADY_I_i_1
       (.I0(S_AXI_AREADY_I_i_2_n_0),
        .I1(s_axi_awvalid),
        .I2(E),
        .I3(areset_d[0]),
        .I4(areset_d[1]),
        .O(S_AXI_AREADY_I_reg));
  LUT2 #(
    .INIT(4'h1)) 
    S_AXI_AREADY_I_i_2
       (.I0(\fifoaddr_reg[1]_0 ),
        .I1(access_is_incr_q_reg),
        .O(S_AXI_AREADY_I_i_2_n_0));
  LUT4 #(
    .INIT(16'h000D)) 
    cmd_b_push_block_i_1
       (.I0(cmd_b_push_block_reg_0),
        .I1(cmd_b_push_block),
        .I2(areset),
        .I3(E),
        .O(cmd_b_push_block_reg));
  LUT6 #(
    .INIT(64'hD5FFD5D5C000C0C0)) 
    command_ongoing_i_1
       (.I0(S_AXI_AREADY_I_i_2_n_0),
        .I1(s_axi_awvalid),
        .I2(E),
        .I3(areset_d[0]),
        .I4(areset_d[1]),
        .I5(command_ongoing),
        .O(command_ongoing_reg));
  LUT3 #(
    .INIT(8'h1E)) 
    \fifoaddr[0]_i_1 
       (.I0(\fifoaddr[3]_i_2__0_n_0 ),
        .I1(\fifoaddr[4]_i_2__1_n_0 ),
        .I2(fifoaddr[0]),
        .O(\fifoaddr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'h56A6)) 
    \fifoaddr[1]_i_1__1 
       (.I0(fifoaddr[1]),
        .I1(\fifoaddr[3]_i_2__0_n_0 ),
        .I2(fifoaddr[0]),
        .I3(\fifoaddr[4]_i_2__1_n_0 ),
        .O(\fifoaddr[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h15FFFFFFFFFFFFFF)) 
    \fifoaddr[1]_i_2 
       (.I0(cmd_push_block),
        .I1(s_ready),
        .I2(\USE_B_CHANNEL.s_b_ready ),
        .I3(command_ongoing),
        .I4(s_write_cmd_vacancy),
        .I5(mr_axi_awready),
        .O(\fifoaddr_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'h5AA6AAA6)) 
    \fifoaddr[2]_i_1__1 
       (.I0(fifoaddr[2]),
        .I1(\fifoaddr[3]_i_2__0_n_0 ),
        .I2(fifoaddr[1]),
        .I3(fifoaddr[0]),
        .I4(\fifoaddr[4]_i_2__1_n_0 ),
        .O(\fifoaddr[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h6AA66AAAAAA9AAAA)) 
    \fifoaddr[3]_i_1__1 
       (.I0(fifoaddr[3]),
        .I1(\fifoaddr[4]_i_2__1_n_0 ),
        .I2(fifoaddr[0]),
        .I3(fifoaddr[1]),
        .I4(\fifoaddr[3]_i_2__0_n_0 ),
        .I5(fifoaddr[2]),
        .O(\fifoaddr[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h02002200)) 
    \fifoaddr[3]_i_2__0 
       (.I0(\gen_pipelined.state_reg_n_0_[0] ),
        .I1(\length_counter_1_reg[0] ),
        .I2(s_ready),
        .I3(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I4(\gen_pipelined.state[2]_i_3_n_0 ),
        .O(\fifoaddr[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hAAAA6AA9)) 
    \fifoaddr[4]_i_1__1 
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[3]),
        .I2(\fifoaddr[4]_i_2__1_n_0 ),
        .I3(fifoaddr[2]),
        .I4(\fifoaddr[4]_i_3__0_n_0 ),
        .O(\fifoaddr[4]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \fifoaddr[4]_i_2__1 
       (.I0(\gen_pipelined.state[2]_i_3_n_0 ),
        .I1(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I2(s_ready),
        .I3(\length_counter_1_reg[0] ),
        .O(\fifoaddr[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h7777F7FFFFFFEFFF)) 
    \fifoaddr[4]_i_3__0 
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .I2(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\length_counter_1_reg[0] ),
        .I5(\fifoaddr[4]_i_4_n_0 ),
        .O(\fifoaddr[4]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h08000000)) 
    \fifoaddr[4]_i_4 
       (.I0(command_ongoing),
        .I1(\USE_B_CHANNEL.s_b_ready ),
        .I2(cmd_push_block),
        .I3(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I4(s_ready),
        .O(\fifoaddr[4]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hEFFFAAAA)) 
    fifoaddr_afull_i_1
       (.I0(fifoaddr_afull04_out),
        .I1(fifoaddr[0]),
        .I2(\fifoaddr[3]_i_2__0_n_0 ),
        .I3(fifoaddr_afull_i_3__0_n_0),
        .I4(fifoaddr_afull_reg_n_0),
        .O(fifoaddr_afull_i_1_n_0));
  LUT6 #(
    .INIT(64'h00000000CC400000)) 
    fifoaddr_afull_i_2__0
       (.I0(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I1(\fifoaddr[4]_i_4_n_0 ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\length_counter_1_reg[0] ),
        .I4(fifoaddr[3]),
        .I5(fifoaddr_afull_i_4_n_0),
        .O(fifoaddr_afull04_out));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    fifoaddr_afull_i_3__0
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[2]),
        .I2(fifoaddr[1]),
        .I3(fifoaddr[3]),
        .O(fifoaddr_afull_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'hFF7F)) 
    fifoaddr_afull_i_4
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[2]),
        .I2(fifoaddr[0]),
        .I3(fifoaddr[1]),
        .O(fifoaddr_afull_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifoaddr_afull_reg
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr_afull_i_1_n_0),
        .Q(fifoaddr_afull_reg_n_0),
        .R(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[1]_i_1__1_n_0 ),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[2]_i_1__1_n_0 ),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[3]_i_1__1_n_0 ),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[4]_i_1__1_n_0 ),
        .Q(fifoaddr[4]),
        .S(areset));
  LUT4 #(
    .INIT(16'h5F7F)) 
    \gen_pipelined.mesg_reg[3]_i_1 
       (.I0(\length_counter_1_reg[0] ),
        .I1(s_ready),
        .I2(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.load_mesg ));
  FDRE \gen_pipelined.mesg_reg_reg[0] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[0].srl_nx1_n_1 ),
        .Q(\length_counter_1_reg[3] [0]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[1] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[1].srl_nx1_n_1 ),
        .Q(\length_counter_1_reg[3] [1]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[2] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[2].srl_nx1_n_1 ),
        .Q(\length_counter_1_reg[3] [2]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[3] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[3].srl_nx1_n_2 ),
        .Q(\length_counter_1_reg[3] [3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFDDDC00000000000)) 
    \gen_pipelined.state[0]_i_1 
       (.I0(\gen_pipelined.state[0]_i_2__0_n_0 ),
        .I1(\length_counter_1_reg[0] ),
        .I2(\gen_pipelined.state[2]_i_3_n_0 ),
        .I3(s_ready),
        .I4(\gen_pipelined.state_reg_n_0_[0] ),
        .I5(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .O(\gen_pipelined.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \gen_pipelined.state[0]_i_2__0 
       (.I0(fifoaddr[3]),
        .I1(s_ready),
        .I2(fifoaddr[2]),
        .I3(fifoaddr[4]),
        .I4(fifoaddr[1]),
        .I5(fifoaddr[0]),
        .O(\gen_pipelined.state[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'hFFE000C0)) 
    \gen_pipelined.state[1]_i_1 
       (.I0(\length_counter_1_reg[0] ),
        .I1(\gen_pipelined.state[2]_i_3_n_0 ),
        .I2(s_ready),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .O(\gen_pipelined.state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F55FFFFFFFFFFFF)) 
    \gen_pipelined.state[2]_i_1 
       (.I0(\length_counter_1_reg[0] ),
        .I1(fifoaddr_afull_reg_n_0),
        .I2(\gen_pipelined.state[2]_i_3_n_0 ),
        .I3(s_ready),
        .I4(\gen_pipelined.state_reg_n_0_[0] ),
        .I5(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .O(\gen_pipelined.state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \gen_pipelined.state[2]_i_3 
       (.I0(cmd_push_block),
        .I1(s_ready),
        .I2(\USE_B_CHANNEL.s_b_ready ),
        .I3(command_ongoing),
        .O(\gen_pipelined.state[2]_i_3_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[0]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[0] ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[1]_i_1_n_0 ),
        .Q(\gen_pipelined.mesg_reg_reg[3]_0 ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[2]_i_1_n_0 ),
        .Q(s_ready),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_70 \gen_srls[0].srl_nx1 
       (.D(D[0]),
        .Q(fifoaddr),
        .\S_AXI_ALEN_Q_reg[0] (\S_AXI_ALEN_Q_reg[3] [0]),
        .aclk(aclk),
        .\gen_pipelined.mesg_reg_reg[0] (\gen_srls[0].srl_nx1_n_1 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .incr_need_to_split_q_reg(incr_need_to_split_q_reg),
        .\pushed_commands_reg[0] (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\pushed_commands_reg[3] (Q),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_71 \gen_srls[1].srl_nx1 
       (.D(D[1]),
        .Q(fifoaddr),
        .\S_AXI_ALEN_Q_reg[1] (\S_AXI_ALEN_Q_reg[3] [1]),
        .aclk(aclk),
        .\gen_pipelined.mesg_reg_reg[1] (\gen_srls[1].srl_nx1_n_1 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .incr_need_to_split_q_reg(incr_need_to_split_q_reg),
        .\pushed_commands_reg[0] (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\pushed_commands_reg[3] (Q),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_72 \gen_srls[2].srl_nx1 
       (.D(D[2]),
        .Q(fifoaddr),
        .\S_AXI_ALEN_Q_reg[2] (\S_AXI_ALEN_Q_reg[3] [2]),
        .aclk(aclk),
        .\gen_pipelined.mesg_reg_reg[2] (\gen_srls[2].srl_nx1_n_1 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .incr_need_to_split_q_reg(incr_need_to_split_q_reg),
        .\pushed_commands_reg[0] (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\pushed_commands_reg[3] (Q),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_73 \gen_srls[3].srl_nx1 
       (.D(D[3]),
        .Q(fifoaddr),
        .\S_AXI_ALEN_Q_reg[3] (\S_AXI_ALEN_Q_reg[3] [3]),
        .\USE_B_CHANNEL.s_b_ready (\USE_B_CHANNEL.s_b_ready ),
        .aclk(aclk),
        .cmd_push_block(cmd_push_block),
        .command_ongoing(command_ongoing),
        .\gen_pipelined.mesg_reg_reg[3] (\gen_srls[3].srl_nx1_n_2 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg_reg[3]_0 ),
        .\gen_pipelined.state_reg[2] (s_ready),
        .incr_need_to_split_q_reg(incr_need_to_split_q_reg),
        .\pushed_commands_reg[0] (\gen_pipelined.mesg_reg_reg[3]_1 ),
        .\pushed_commands_reg[3] (Q),
        .shift(shift));
  LUT4 #(
    .INIT(16'h0001)) 
    \m_vector_i[1128]_i_2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\gen_pipelined.mesg_reg_reg[3]_1 ));
  LUT5 #(
    .INIT(32'h15FFFFFF)) 
    \shift_reg_reg[0]_srl1_i_2 
       (.I0(cmd_push_block),
        .I1(s_ready),
        .I2(\USE_B_CHANNEL.s_b_ready ),
        .I3(command_ongoing),
        .I4(mr_axi_awready),
        .O(\gen_pipelined.state_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'hABBBFFFF)) 
    \shift_reg_reg[0]_srl1_i_2__0 
       (.I0(cmd_b_push_block),
        .I1(cmd_push_block),
        .I2(s_ready),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .I4(command_ongoing),
        .O(cmd_b_push_block_reg_0));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized0
   (cmd_b_split_i,
    \USE_B_CHANNEL.s_b_ready ,
    cmd_push_block_reg,
    cmd_push_block_reg_0,
    E,
    \gen_pipelined.mesg_reg_reg[4]_0 ,
    first_mi_word_reg,
    num_transactions_q,
    aclk,
    areset,
    \state_reg[m_valid_i] ,
    cmd_b_push_block_reg,
    mr_axi_awready,
    s_write_cmd_vacancy,
    cmd_push_block,
    command_ongoing,
    s_ready,
    cmd_b_push_block,
    incr_need_to_split_q_reg,
    access_is_incr_q_reg,
    Q);
  output cmd_b_split_i;
  output \USE_B_CHANNEL.s_b_ready ;
  output cmd_push_block_reg;
  output cmd_push_block_reg_0;
  output [0:0]E;
  output \gen_pipelined.mesg_reg_reg[4]_0 ;
  output [4:0]first_mi_word_reg;
  input [3:0]num_transactions_q;
  input aclk;
  input areset;
  input \state_reg[m_valid_i] ;
  input cmd_b_push_block_reg;
  input mr_axi_awready;
  input s_write_cmd_vacancy;
  input cmd_push_block;
  input command_ongoing;
  input s_ready;
  input cmd_b_push_block;
  input incr_need_to_split_q_reg;
  input access_is_incr_q_reg;
  input [3:0]Q;

  wire [0:0]E;
  wire [3:0]Q;
  wire \USE_B_CHANNEL.s_b_ready ;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire access_is_incr_q_reg;
  wire aclk;
  wire areset;
  wire cmd_b_push_block;
  wire cmd_b_push_block_reg;
  wire cmd_b_split_i;
  wire cmd_push_block;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire command_ongoing;
  wire [4:0]fifoaddr;
  wire \fifoaddr[0]_i_1__0_n_0 ;
  wire \fifoaddr[1]_i_1_n_0 ;
  wire \fifoaddr[2]_i_1_n_0 ;
  wire \fifoaddr[2]_i_2_n_0 ;
  wire \fifoaddr[2]_i_3_n_0 ;
  wire \fifoaddr[3]_i_1_n_0 ;
  wire \fifoaddr[4]_i_1_n_0 ;
  wire \fifoaddr[4]_i_2_n_0 ;
  wire \fifoaddr[4]_i_3_n_0 ;
  wire fifoaddr_afull_i_1__0_n_0;
  wire fifoaddr_afull_i_2_n_0;
  wire fifoaddr_afull_i_3_n_0;
  wire fifoaddr_afull_i_4__0_n_0;
  wire fifoaddr_afull_reg_n_0;
  wire [4:0]first_mi_word_reg;
  wire \gen_pipelined.load_mesg ;
  wire \gen_pipelined.mesg_reg_reg[4]_0 ;
  wire \gen_pipelined.state[0]_i_1_n_0 ;
  wire \gen_pipelined.state[0]_i_2__1_n_0 ;
  wire \gen_pipelined.state[1]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_1_n_0 ;
  wire \gen_pipelined.state_reg_n_0_[0] ;
  wire \gen_srls[0].srl_nx1_n_0 ;
  wire \gen_srls[1].srl_nx1_n_0 ;
  wire \gen_srls[2].srl_nx1_n_0 ;
  wire \gen_srls[3].srl_nx1_n_0 ;
  wire \gen_srls[4].srl_nx1_n_3 ;
  wire incr_need_to_split_q_reg;
  wire mr_axi_awready;
  wire [3:0]num_transactions_q;
  wire s_ready;
  wire s_write_cmd_vacancy;
  wire shift;
  wire \state_reg[m_valid_i] ;

  LUT5 #(
    .INIT(32'h0000F707)) 
    cmd_push_block_i_1
       (.I0(mr_axi_awready),
        .I1(s_write_cmd_vacancy),
        .I2(cmd_push_block_reg_0),
        .I3(cmd_push_block),
        .I4(areset),
        .O(cmd_push_block_reg));
  LUT6 #(
    .INIT(64'h6AAA6AAA9A9A6AAA)) 
    \fifoaddr[0]_i_1__0 
       (.I0(fifoaddr[0]),
        .I1(\state_reg[m_valid_i] ),
        .I2(\USE_WRITE.wr_cmd_b_valid ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\USE_B_CHANNEL.s_b_ready ),
        .I5(cmd_b_push_block_reg),
        .O(\fifoaddr[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA66669AAAAAAA)) 
    \fifoaddr[1]_i_1 
       (.I0(fifoaddr[1]),
        .I1(\fifoaddr[2]_i_2_n_0 ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .I4(\state_reg[m_valid_i] ),
        .I5(fifoaddr[0]),
        .O(\fifoaddr[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AA9AAAA6AAAAA)) 
    \fifoaddr[2]_i_1 
       (.I0(fifoaddr[2]),
        .I1(fifoaddr[1]),
        .I2(fifoaddr[0]),
        .I3(\state_reg[m_valid_i] ),
        .I4(\fifoaddr[2]_i_2_n_0 ),
        .I5(\fifoaddr[2]_i_3_n_0 ),
        .O(\fifoaddr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000080808000)) 
    \fifoaddr[2]_i_2 
       (.I0(\USE_WRITE.wr_cmd_b_valid ),
        .I1(command_ongoing),
        .I2(\USE_B_CHANNEL.s_b_ready ),
        .I3(s_ready),
        .I4(cmd_push_block),
        .I5(cmd_b_push_block),
        .O(\fifoaddr[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \fifoaddr[2]_i_3 
       (.I0(\USE_WRITE.wr_cmd_b_valid ),
        .I1(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\fifoaddr[2]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \fifoaddr[3]_i_1 
       (.I0(\fifoaddr[4]_i_2_n_0 ),
        .I1(fifoaddr[2]),
        .I2(fifoaddr[3]),
        .O(\fifoaddr[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h696AA9AA)) 
    \fifoaddr[4]_i_1 
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[2]),
        .I2(fifoaddr[3]),
        .I3(\fifoaddr[4]_i_2_n_0 ),
        .I4(\fifoaddr[4]_i_3_n_0 ),
        .O(\fifoaddr[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCC0CCCCCCCCCCECC)) 
    \fifoaddr[4]_i_2 
       (.I0(\fifoaddr[2]_i_3_n_0 ),
        .I1(fifoaddr[2]),
        .I2(\fifoaddr[2]_i_2_n_0 ),
        .I3(\state_reg[m_valid_i] ),
        .I4(fifoaddr[0]),
        .I5(fifoaddr[1]),
        .O(\fifoaddr[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    \fifoaddr[4]_i_3 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(\state_reg[m_valid_i] ),
        .I3(cmd_b_push_block_reg),
        .I4(\USE_B_CHANNEL.s_b_ready ),
        .I5(\USE_WRITE.wr_cmd_b_valid ),
        .O(\fifoaddr[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF5FF00000030)) 
    fifoaddr_afull_i_1__0
       (.I0(fifoaddr_afull_i_2_n_0),
        .I1(fifoaddr_afull_i_3_n_0),
        .I2(fifoaddr[0]),
        .I3(fifoaddr[1]),
        .I4(fifoaddr_afull_i_4__0_n_0),
        .I5(fifoaddr_afull_reg_n_0),
        .O(fifoaddr_afull_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h80800080)) 
    fifoaddr_afull_i_2
       (.I0(\state_reg[m_valid_i] ),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .I4(cmd_b_push_block_reg),
        .O(fifoaddr_afull_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hEFFF)) 
    fifoaddr_afull_i_3
       (.I0(\state_reg[m_valid_i] ),
        .I1(cmd_b_push_block_reg),
        .I2(\USE_B_CHANNEL.s_b_ready ),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .O(fifoaddr_afull_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    fifoaddr_afull_i_4__0
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[2]),
        .I2(fifoaddr[3]),
        .O(fifoaddr_afull_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifoaddr_afull_reg
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr_afull_i_1__0_n_0),
        .Q(fifoaddr_afull_reg_n_0),
        .R(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[0]_i_1__0_n_0 ),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[1]_i_1_n_0 ),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[2]_i_1_n_0 ),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[3]_i_1_n_0 ),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[4]_i_1_n_0 ),
        .Q(fifoaddr[4]),
        .S(areset));
  LUT4 #(
    .INIT(16'hBBBF)) 
    \gen_pipelined.mesg_reg[4]_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .O(\gen_pipelined.load_mesg ));
  FDRE \gen_pipelined.mesg_reg_reg[0] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[0].srl_nx1_n_0 ),
        .Q(first_mi_word_reg[0]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[1] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[1].srl_nx1_n_0 ),
        .Q(first_mi_word_reg[1]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[2] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[2].srl_nx1_n_0 ),
        .Q(first_mi_word_reg[2]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[3] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[3].srl_nx1_n_0 ),
        .Q(first_mi_word_reg[3]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[4] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[4].srl_nx1_n_3 ),
        .Q(first_mi_word_reg[4]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hDF00DF0005000000)) 
    \gen_pipelined.state[0]_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(\gen_pipelined.state[0]_i_2__1_n_0 ),
        .I2(cmd_b_push_block_reg),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .I4(\USE_B_CHANNEL.s_b_ready ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \gen_pipelined.state[0]_i_2__1 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(fifoaddr[4]),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .I4(fifoaddr[3]),
        .I5(fifoaddr[2]),
        .O(\gen_pipelined.state[0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'hF0F07300)) 
    \gen_pipelined.state[1]_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(cmd_b_push_block_reg),
        .I2(\USE_WRITE.wr_cmd_b_valid ),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .I4(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFAAFFFFFFFFFF)) 
    \gen_pipelined.state[2]_i_1 
       (.I0(\state_reg[m_valid_i] ),
        .I1(fifoaddr_afull_reg_n_0),
        .I2(cmd_b_push_block_reg),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .I4(\USE_B_CHANNEL.s_b_ready ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[2]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[0]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[0] ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[1]_i_1_n_0 ),
        .Q(\USE_WRITE.wr_cmd_b_valid ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[2]_i_1_n_0 ),
        .Q(\USE_B_CHANNEL.s_b_ready ),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_65 \gen_srls[0].srl_nx1 
       (.D(\gen_srls[0].srl_nx1_n_0 ),
        .Q(fifoaddr),
        .\USE_WRITE.wr_cmd_b_valid (\USE_WRITE.wr_cmd_b_valid ),
        .aclk(aclk),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .num_transactions_q(num_transactions_q[0]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_66 \gen_srls[1].srl_nx1 
       (.D(\gen_srls[1].srl_nx1_n_0 ),
        .Q(fifoaddr),
        .\USE_WRITE.wr_cmd_b_valid (\USE_WRITE.wr_cmd_b_valid ),
        .aclk(aclk),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .num_transactions_q(num_transactions_q[1]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_67 \gen_srls[2].srl_nx1 
       (.D(\gen_srls[2].srl_nx1_n_0 ),
        .Q(fifoaddr),
        .\USE_WRITE.wr_cmd_b_valid (\USE_WRITE.wr_cmd_b_valid ),
        .aclk(aclk),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .num_transactions_q(num_transactions_q[2]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_68 \gen_srls[3].srl_nx1 
       (.D(\gen_srls[3].srl_nx1_n_0 ),
        .Q(fifoaddr),
        .\USE_WRITE.wr_cmd_b_valid (\USE_WRITE.wr_cmd_b_valid ),
        .aclk(aclk),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .num_transactions_q(num_transactions_q[3]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_69 \gen_srls[4].srl_nx1 
       (.D(\gen_srls[4].srl_nx1_n_3 ),
        .Q(fifoaddr),
        .\USE_WRITE.wr_cmd_b_valid (\USE_WRITE.wr_cmd_b_valid ),
        .access_is_incr_q_reg(access_is_incr_q_reg),
        .aclk(aclk),
        .cmd_b_push_block_reg(cmd_b_push_block_reg),
        .cmd_b_split_i(cmd_b_split_i),
        .\gen_pipelined.mesg_reg_reg[4] (\gen_pipelined.mesg_reg_reg[4]_0 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[2] (\USE_B_CHANNEL.s_b_ready ),
        .incr_need_to_split_q_reg(incr_need_to_split_q_reg),
        .num_transactions_q(num_transactions_q),
        .\pushed_commands_reg[3] (Q),
        .shift(shift));
  LUT6 #(
    .INIT(64'h8080808080000000)) 
    split_ongoing_i_1
       (.I0(mr_axi_awready),
        .I1(s_write_cmd_vacancy),
        .I2(command_ongoing),
        .I3(\USE_B_CHANNEL.s_b_ready ),
        .I4(s_ready),
        .I5(cmd_push_block),
        .O(E));
  LUT4 #(
    .INIT(16'h557F)) 
    \state[m_valid_i]_i_2 
       (.I0(command_ongoing),
        .I1(\USE_B_CHANNEL.s_b_ready ),
        .I2(s_ready),
        .I3(cmd_push_block),
        .O(cmd_push_block_reg_0));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized1
   (areset,
    aclk);
  input areset;
  input aclk;

  wire aclk;
  wire areset;
  wire [4:0]fifoaddr;

  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[0]),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[1]),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[2]),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[3]),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[4]),
        .Q(fifoaddr[4]),
        .S(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized2
   (areset,
    aclk);
  input areset;
  input aclk;

  wire aclk;
  wire areset;
  wire [4:0]fifoaddr;

  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[0]),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[1]),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[2]),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[3]),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr[4]),
        .Q(fifoaddr[4]),
        .S(areset));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized3
   (\gen_pipelined.state_reg[1]_0 ,
    s_axi_bid,
    Q,
    aclk,
    areset,
    exit_bready,
    cmd_push_block_reg,
    cmd_push_block_reg_0);
  output \gen_pipelined.state_reg[1]_0 ;
  output [1:0]s_axi_bid;
  input [1:0]Q;
  input aclk;
  input areset;
  input exit_bready;
  input cmd_push_block_reg;
  input cmd_push_block_reg_0;

  wire [1:0]Q;
  wire aclk;
  wire areset;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire exit_bready;
  wire [4:0]fifoaddr;
  wire \fifoaddr[0]_i_1__1_n_0 ;
  wire \fifoaddr[1]_i_1__0_n_0 ;
  wire \fifoaddr[2]_i_1__0_n_0 ;
  wire \fifoaddr[3]_i_1__0_n_0 ;
  wire \fifoaddr[3]_i_2_n_0 ;
  wire \fifoaddr[4]_i_1__0_n_0 ;
  wire \fifoaddr[4]_i_2__0_n_0 ;
  wire \fifoaddr[4]_i_3__1_n_0 ;
  wire fifoaddr_afull_i_1__1_n_0;
  wire fifoaddr_afull_i_2__1_n_0;
  wire fifoaddr_afull_i_3__1_n_0;
  wire fifoaddr_afull_i_4__1_n_0;
  wire fifoaddr_afull_reg_n_0;
  wire \gen_pipelined.mesg_reg ;
  wire \gen_pipelined.mesg_reg[1]_i_1_n_0 ;
  wire \gen_pipelined.mesg_reg[2]_i_1_n_0 ;
  wire \gen_pipelined.state ;
  wire \gen_pipelined.state[0]_i_1_n_0 ;
  wire \gen_pipelined.state[0]_i_2_n_0 ;
  wire \gen_pipelined.state[0]_i_4_n_0 ;
  wire \gen_pipelined.state[1]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_1_n_0 ;
  wire \gen_pipelined.state_reg[1]_0 ;
  wire \gen_pipelined.state_reg_n_0_[0] ;
  wire \gen_pipelined.state_reg_n_0_[1] ;
  wire p_31_out;
  wire p_32_out;
  wire [1:0]s_axi_bid;
  wire shift_qual;

  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h6AAA9A9A)) 
    \fifoaddr[0]_i_1__1 
       (.I0(fifoaddr[0]),
        .I1(exit_bready),
        .I2(\gen_pipelined.state_reg_n_0_[1] ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(cmd_push_block_reg),
        .O(\fifoaddr[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA99AA6AAAAAAA)) 
    \fifoaddr[1]_i_1__0 
       (.I0(fifoaddr[1]),
        .I1(cmd_push_block_reg),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\gen_pipelined.state_reg_n_0_[1] ),
        .I4(exit_bready),
        .I5(fifoaddr[0]),
        .O(\fifoaddr[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'hAAA65555)) 
    \fifoaddr[2]_i_1__0 
       (.I0(fifoaddr[2]),
        .I1(\fifoaddr[3]_i_2_n_0 ),
        .I2(fifoaddr[1]),
        .I3(fifoaddr[0]),
        .I4(\fifoaddr[4]_i_3__1_n_0 ),
        .O(\fifoaddr[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF00EFFF00FF1000)) 
    \fifoaddr[3]_i_1__0 
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .I2(\fifoaddr[3]_i_2_n_0 ),
        .I3(\fifoaddr[4]_i_3__1_n_0 ),
        .I4(fifoaddr[2]),
        .I5(fifoaddr[3]),
        .O(\fifoaddr[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \fifoaddr[3]_i_2 
       (.I0(exit_bready),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(cmd_push_block_reg),
        .O(\fifoaddr[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hA9AA6A6A)) 
    \fifoaddr[4]_i_1__0 
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[3]),
        .I2(fifoaddr[2]),
        .I3(\fifoaddr[4]_i_2__0_n_0 ),
        .I4(\fifoaddr[4]_i_3__1_n_0 ),
        .O(\fifoaddr[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \fifoaddr[4]_i_2__0 
       (.I0(cmd_push_block_reg),
        .I1(\gen_pipelined.state_reg_n_0_[0] ),
        .I2(\gen_pipelined.state_reg_n_0_[1] ),
        .I3(exit_bready),
        .I4(fifoaddr[1]),
        .I5(fifoaddr[0]),
        .O(\fifoaddr[4]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \fifoaddr[4]_i_3__1 
       (.I0(fifoaddr[0]),
        .I1(exit_bready),
        .I2(\gen_pipelined.state_reg_n_0_[1] ),
        .I3(cmd_push_block_reg),
        .I4(fifoaddr[1]),
        .O(\fifoaddr[4]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hF1FFFFFF11111111)) 
    fifoaddr_afull_i_1__1
       (.I0(fifoaddr_afull_i_2__1_n_0),
        .I1(fifoaddr_afull_i_3__1_n_0),
        .I2(fifoaddr_afull_i_4__1_n_0),
        .I3(\fifoaddr[3]_i_2_n_0 ),
        .I4(fifoaddr[1]),
        .I5(fifoaddr_afull_reg_n_0),
        .O(fifoaddr_afull_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'hF7FF)) 
    fifoaddr_afull_i_2__1
       (.I0(fifoaddr[2]),
        .I1(fifoaddr[3]),
        .I2(fifoaddr[1]),
        .I3(fifoaddr[4]),
        .O(fifoaddr_afull_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hFBFF)) 
    fifoaddr_afull_i_3__1
       (.I0(cmd_push_block_reg),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(exit_bready),
        .I3(fifoaddr[0]),
        .O(fifoaddr_afull_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'hF7FF)) 
    fifoaddr_afull_i_4__1
       (.I0(fifoaddr[2]),
        .I1(fifoaddr[3]),
        .I2(fifoaddr[0]),
        .I3(fifoaddr[4]),
        .O(fifoaddr_afull_i_4__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifoaddr_afull_reg
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr_afull_i_1__1_n_0),
        .Q(fifoaddr_afull_reg_n_0),
        .R(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[0]_i_1__1_n_0 ),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[1]_i_1__0_n_0 ),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[2]_i_1__0_n_0 ),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[3]_i_1__0_n_0 ),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[4]_i_1__0_n_0 ),
        .Q(fifoaddr[4]),
        .S(areset));
  LUT6 #(
    .INIT(64'hBF80FFFFBF800000)) 
    \gen_pipelined.mesg_reg[1]_i_1 
       (.I0(p_32_out),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(Q[0]),
        .I4(\gen_pipelined.mesg_reg ),
        .I5(s_axi_bid[0]),
        .O(\gen_pipelined.mesg_reg[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF80FFFFBF800000)) 
    \gen_pipelined.mesg_reg[2]_i_1 
       (.I0(p_31_out),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(Q[1]),
        .I4(\gen_pipelined.mesg_reg ),
        .I5(s_axi_bid[1]),
        .O(\gen_pipelined.mesg_reg[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'hBBBF)) 
    \gen_pipelined.mesg_reg[2]_i_2 
       (.I0(exit_bready),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\gen_pipelined.state_reg[1]_0 ),
        .O(\gen_pipelined.mesg_reg ));
  FDRE \gen_pipelined.mesg_reg_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.mesg_reg[1]_i_1_n_0 ),
        .Q(s_axi_bid[0]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.mesg_reg[2]_i_1_n_0 ),
        .Q(s_axi_bid[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0CCCFFFF00440000)) 
    \gen_pipelined.state[0]_i_1 
       (.I0(cmd_push_block_reg),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state[0]_i_2_n_0 ),
        .I3(exit_bready),
        .I4(\gen_pipelined.state ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \gen_pipelined.state[0]_i_2 
       (.I0(cmd_push_block_reg_0),
        .I1(\gen_pipelined.state[0]_i_4_n_0 ),
        .I2(\gen_pipelined.state_reg[1]_0 ),
        .I3(fifoaddr[4]),
        .I4(fifoaddr[3]),
        .I5(fifoaddr[2]),
        .O(\gen_pipelined.state[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \gen_pipelined.state[0]_i_3 
       (.I0(cmd_push_block_reg_0),
        .I1(\gen_pipelined.state_reg_n_0_[1] ),
        .I2(\gen_pipelined.state_reg[1]_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \gen_pipelined.state[0]_i_4 
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .O(\gen_pipelined.state[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'hF0F07300)) 
    \gen_pipelined.state[1]_i_1 
       (.I0(exit_bready),
        .I1(cmd_push_block_reg_0),
        .I2(\gen_pipelined.state_reg_n_0_[1] ),
        .I3(\gen_pipelined.state_reg[1]_0 ),
        .I4(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFAAFFFFFFFFFF)) 
    \gen_pipelined.state[2]_i_1 
       (.I0(exit_bready),
        .I1(fifoaddr_afull_reg_n_0),
        .I2(cmd_push_block_reg_0),
        .I3(\gen_pipelined.state_reg_n_0_[1] ),
        .I4(\gen_pipelined.state_reg[1]_0 ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.state[2]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[0]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[0] ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[1]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[1] ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[2]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg[1]_0 ),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_74 \gen_srls[1].srl_nx1 
       (.A(fifoaddr),
        .Q(Q[0]),
        .aclk(aclk),
        .p_32_out(p_32_out),
        .shift_qual(shift_qual));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_75 \gen_srls[2].srl_nx1 
       (.A(fifoaddr),
        .Q(Q[1]),
        .aclk(aclk),
        .cmd_push_block_reg(cmd_push_block_reg_0),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.state_reg_n_0_[1] ),
        .\gen_pipelined.state_reg[2] (\gen_pipelined.state_reg[1]_0 ),
        .p_31_out(p_31_out),
        .shift_qual(shift_qual));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized4
   (m_axis_arb_tdata,
    \grant_i_reg[2] ,
    \fifoaddr_reg[0]_0 ,
    E,
    s_sc_aclk,
    areset_r_reg,
    \gen_wr.afull_r ,
    p_4_in,
    is_zero_r_reg,
    s_sc_send,
    \grant_i_reg[2]_0 ,
    m_axis_arb_tready,
    \grant_i_reg[2]_1 );
  output [0:0]m_axis_arb_tdata;
  output \grant_i_reg[2] ;
  output \fifoaddr_reg[0]_0 ;
  input [0:0]E;
  input s_sc_aclk;
  input areset_r_reg;
  input \gen_wr.afull_r ;
  input p_4_in;
  input is_zero_r_reg;
  input [0:0]s_sc_send;
  input \grant_i_reg[2]_0 ;
  input m_axis_arb_tready;
  input \grant_i_reg[2]_1 ;

  wire [0:0]E;
  wire areset_r_reg;
  wire axis_arb_fifo_afull;
  wire [4:1]fifoaddr;
  wire \fifoaddr[0]_i_1_n_0 ;
  wire \fifoaddr[2]_i_1_n_0 ;
  wire \fifoaddr[3]_i_2_n_0 ;
  wire \fifoaddr[4]_i_2_n_0 ;
  wire \fifoaddr[4]_i_3_n_0 ;
  wire \fifoaddr[4]_i_4_n_0 ;
  wire [4:0]fifoaddr_0;
  wire fifoaddr_afull04_out;
  wire fifoaddr_afull_i_1_n_0;
  wire fifoaddr_afull_i_3_n_0;
  wire \fifoaddr_reg[0]_0 ;
  wire \gen_pipelined.mesg_reg[2]_i_3_n_0 ;
  wire \gen_pipelined.mesg_reg[2]_i_4_n_0 ;
  wire \gen_pipelined.state[0]_i_1_n_0 ;
  wire \gen_pipelined.state[0]_i_2_n_0 ;
  wire \gen_pipelined.state[0]_i_3_n_0 ;
  wire \gen_pipelined.state[1]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_1_n_0 ;
  wire \gen_pipelined.state_reg_n_0_[0] ;
  wire \gen_pipelined.state_reg_n_0_[2] ;
  wire \gen_srls[2].srl_nx1_n_0 ;
  wire \gen_wr.afull_r ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire \grant_i_reg[2]_1 ;
  wire is_zero_r_reg;
  wire [0:0]m_axis_arb_tdata;
  wire m_axis_arb_tready;
  wire p_4_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  LUT6 #(
    .INIT(64'h6A99AAAA5AAAAAAA)) 
    \fifoaddr[0]_i_1 
       (.I0(fifoaddr_0[0]),
        .I1(\grant_i_reg[2]_1 ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(m_axis_arb_tready),
        .I4(\fifoaddr_reg[0]_0 ),
        .I5(\gen_pipelined.state_reg_n_0_[2] ),
        .O(\fifoaddr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'hCB34)) 
    \fifoaddr[1]_i_1 
       (.I0(\fifoaddr[3]_i_2_n_0 ),
        .I1(fifoaddr_0[0]),
        .I2(\fifoaddr[4]_i_3_n_0 ),
        .I3(fifoaddr_0[1]),
        .O(fifoaddr[1]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT5 #(
    .INIT(32'hAAA65AA6)) 
    \fifoaddr[2]_i_1 
       (.I0(fifoaddr_0[2]),
        .I1(\fifoaddr[4]_i_3_n_0 ),
        .I2(fifoaddr_0[1]),
        .I3(fifoaddr_0[0]),
        .I4(\fifoaddr[3]_i_2_n_0 ),
        .O(\fifoaddr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF3F00C0FDFD0202)) 
    \fifoaddr[3]_i_1 
       (.I0(\fifoaddr[4]_i_3_n_0 ),
        .I1(fifoaddr_0[0]),
        .I2(fifoaddr_0[1]),
        .I3(\fifoaddr[3]_i_2_n_0 ),
        .I4(fifoaddr_0[3]),
        .I5(fifoaddr_0[2]),
        .O(fifoaddr[3]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \fifoaddr[3]_i_2 
       (.I0(s_sc_send),
        .I1(\grant_i_reg[2]_0 ),
        .I2(\fifoaddr_reg[0]_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[2] ),
        .I4(m_axis_arb_tready),
        .O(\fifoaddr[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA96AAA6AAA6AAA6A)) 
    \fifoaddr[4]_i_1 
       (.I0(fifoaddr_0[4]),
        .I1(fifoaddr_0[3]),
        .I2(fifoaddr_0[2]),
        .I3(\fifoaddr[4]_i_2_n_0 ),
        .I4(\fifoaddr[4]_i_3_n_0 ),
        .I5(\fifoaddr[4]_i_4_n_0 ),
        .O(fifoaddr[4]));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    \fifoaddr[4]_i_2 
       (.I0(fifoaddr_0[0]),
        .I1(\grant_i_reg[2]_1 ),
        .I2(\fifoaddr_reg[0]_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[2] ),
        .I4(m_axis_arb_tready),
        .I5(fifoaddr_0[1]),
        .O(\fifoaddr[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h70000000F0000000)) 
    \fifoaddr[4]_i_3 
       (.I0(s_sc_send),
        .I1(\grant_i_reg[2]_0 ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(m_axis_arb_tready),
        .I4(\fifoaddr_reg[0]_0 ),
        .I5(\gen_pipelined.state_reg_n_0_[2] ),
        .O(\fifoaddr[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \fifoaddr[4]_i_4 
       (.I0(fifoaddr_0[0]),
        .I1(fifoaddr_0[1]),
        .O(\fifoaddr[4]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    fifoaddr_afull_i_1
       (.I0(fifoaddr_afull04_out),
        .I1(fifoaddr_afull_i_3_n_0),
        .I2(axis_arb_fifo_afull),
        .O(fifoaddr_afull_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    fifoaddr_afull_i_2
       (.I0(fifoaddr_0[1]),
        .I1(fifoaddr_0[4]),
        .I2(fifoaddr_0[2]),
        .I3(fifoaddr_0[3]),
        .I4(fifoaddr_0[0]),
        .I5(\fifoaddr[3]_i_2_n_0 ),
        .O(fifoaddr_afull04_out));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    fifoaddr_afull_i_3
       (.I0(\fifoaddr[4]_i_3_n_0 ),
        .I1(fifoaddr_0[0]),
        .I2(fifoaddr_0[1]),
        .I3(fifoaddr_0[4]),
        .I4(fifoaddr_0[2]),
        .I5(fifoaddr_0[3]),
        .O(fifoaddr_afull_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifoaddr_afull_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(fifoaddr_afull_i_1_n_0),
        .Q(axis_arb_fifo_afull),
        .R(areset_r_reg));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr_0[0]),
        .S(areset_r_reg));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(fifoaddr[1]),
        .Q(fifoaddr_0[1]),
        .S(areset_r_reg));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\fifoaddr[2]_i_1_n_0 ),
        .Q(fifoaddr_0[2]),
        .S(areset_r_reg));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(fifoaddr[3]),
        .Q(fifoaddr_0[3]),
        .S(areset_r_reg));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(fifoaddr[4]),
        .Q(fifoaddr_0[4]),
        .S(areset_r_reg));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \gen_pipelined.mesg_reg[2]_i_3 
       (.I0(\fifoaddr_reg[0]_0 ),
        .I1(\gen_pipelined.state_reg_n_0_[2] ),
        .O(\gen_pipelined.mesg_reg[2]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \gen_pipelined.mesg_reg[2]_i_4 
       (.I0(\gen_pipelined.state_reg_n_0_[0] ),
        .I1(\fifoaddr_reg[0]_0 ),
        .O(\gen_pipelined.mesg_reg[2]_i_4_n_0 ));
  FDRE \gen_pipelined.mesg_reg_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_srls[2].srl_nx1_n_0 ),
        .Q(m_axis_arb_tdata),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAA000000AA200000)) 
    \gen_pipelined.state[0]_i_1 
       (.I0(\gen_pipelined.state[0]_i_2_n_0 ),
        .I1(m_axis_arb_tready),
        .I2(\gen_pipelined.state_reg_n_0_[2] ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\fifoaddr_reg[0]_0 ),
        .I5(\grant_i_reg[2]_1 ),
        .O(\gen_pipelined.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    \gen_pipelined.state[0]_i_2 
       (.I0(m_axis_arb_tready),
        .I1(fifoaddr_0[4]),
        .I2(\gen_pipelined.state_reg_n_0_[2] ),
        .I3(\grant_i_reg[2]_1 ),
        .I4(\gen_pipelined.state[0]_i_3_n_0 ),
        .I5(\fifoaddr[4]_i_4_n_0 ),
        .O(\gen_pipelined.state[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_pipelined.state[0]_i_3 
       (.I0(fifoaddr_0[2]),
        .I1(fifoaddr_0[3]),
        .O(\gen_pipelined.state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFC0CF400F400F400)) 
    \gen_pipelined.state[1]_i_1 
       (.I0(m_axis_arb_tready),
        .I1(\gen_pipelined.state_reg_n_0_[2] ),
        .I2(\gen_pipelined.state_reg_n_0_[0] ),
        .I3(\fifoaddr_reg[0]_0 ),
        .I4(s_sc_send),
        .I5(\grant_i_reg[2]_0 ),
        .O(\gen_pipelined.state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFAFFFFFFBAFFFFFF)) 
    \gen_pipelined.state[2]_i_1 
       (.I0(m_axis_arb_tready),
        .I1(axis_arb_fifo_afull),
        .I2(\gen_pipelined.state_reg_n_0_[2] ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\fifoaddr_reg[0]_0 ),
        .I5(\grant_i_reg[2]_1 ),
        .O(\gen_pipelined.state[2]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[0]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[0] ),
        .R(areset_r_reg));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[1]_i_1_n_0 ),
        .Q(\fifoaddr_reg[0]_0 ),
        .R(areset_r_reg));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[2]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[2] ),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_53 \gen_srls[2].srl_nx1 
       (.A(fifoaddr_0),
        .E(E),
        .\gen_pipelined.mesg_reg_reg[2] (\gen_srls[2].srl_nx1_n_0 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .\gen_pipelined.state_reg[0]_0 (\gen_pipelined.mesg_reg[2]_i_4_n_0 ),
        .\gen_pipelined.state_reg[1] (\fifoaddr_reg[0]_0 ),
        .\gen_pipelined.state_reg[1]_0 (\gen_pipelined.mesg_reg[2]_i_3_n_0 ),
        .\gen_pipelined.state_reg[2] (\gen_pipelined.state_reg_n_0_[2] ),
        .\grant_i_reg[2] (\grant_i_reg[2]_0 ),
        .\grant_i_reg[2]_0 (\grant_i_reg[2]_1 ),
        .m_axis_arb_tdata(m_axis_arb_tdata),
        .m_axis_arb_tready(m_axis_arb_tready),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  LUT5 #(
    .INIT(32'h00000010)) 
    \grant_i[2]_i_1 
       (.I0(\gen_wr.afull_r ),
        .I1(axis_arb_fifo_afull),
        .I2(p_4_in),
        .I3(is_zero_r_reg),
        .I4(areset_r_reg),
        .O(\grant_i_reg[2] ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_axic_reg_srl_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_axic_reg_srl_fifo__parameterized5
   (m_axi_awuser,
    s_axi_awready,
    s_axi_wready,
    m_axi_wvalid,
    m_axi_awvalid,
    m_axi_wuser,
    \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg ,
    aclk,
    s_axi_awaddr,
    areset,
    m_axi_awready,
    s_axi_awvalid,
    m_axi_wready,
    s_axi_wvalid,
    s_axi_wlast,
    s_axi_awlen,
    \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue );
  output [4:0]m_axi_awuser;
  output s_axi_awready;
  output s_axi_wready;
  output m_axi_wvalid;
  output m_axi_awvalid;
  output [13:0]m_axi_wuser;
  output \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg ;
  input aclk;
  input [6:0]s_axi_awaddr;
  input areset;
  input m_axi_awready;
  input s_axi_awvalid;
  input m_axi_wready;
  input s_axi_wvalid;
  input s_axi_wlast;
  input [4:0]s_axi_awlen;
  input \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ;

  wire aclk;
  wire areset;
  wire [4:0]fifoaddr;
  wire \fifoaddr[0]_i_1_n_0 ;
  wire \fifoaddr[1]_i_1_n_0 ;
  wire \fifoaddr[1]_i_2_n_0 ;
  wire \fifoaddr[1]_i_3_n_0 ;
  wire \fifoaddr[2]_i_1_n_0 ;
  wire \fifoaddr[3]_i_1_n_0 ;
  wire \fifoaddr[3]_i_2_n_0 ;
  wire \fifoaddr[4]_i_1_n_0 ;
  wire \fifoaddr[4]_i_2_n_0 ;
  wire \fifoaddr[4]_i_3_n_0 ;
  wire fifoaddr_afull04_out;
  wire fifoaddr_afull_i_1_n_0;
  wire fifoaddr_afull_i_3_n_0;
  wire fifoaddr_afull_i_4_n_0;
  wire fifoaddr_afull_reg_n_0;
  wire \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ;
  wire \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg ;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.load_mesg ;
  wire [13:0]\gen_pipelined.mesg_reg ;
  wire \gen_pipelined.mesg_reg[1]_i_1_n_0 ;
  wire \gen_pipelined.mesg_reg[3]_i_2_n_0 ;
  wire \gen_pipelined.state[0]_i_1_n_0 ;
  wire \gen_pipelined.state[0]_i_2_n_0 ;
  wire \gen_pipelined.state[1]_i_1_n_0 ;
  wire \gen_pipelined.state[2]_i_1_n_0 ;
  wire \gen_pipelined.state_reg_n_0_[0] ;
  wire \gen_srls[10].srl_nx1_n_0 ;
  wire \gen_srls[11].srl_nx1_n_0 ;
  wire \gen_srls[12].srl_nx1_n_0 ;
  wire \gen_srls[13].srl_nx1_n_1 ;
  wire \gen_srls[2].srl_nx1_n_1 ;
  wire \gen_srls[3].srl_nx1_n_1 ;
  wire \gen_srls[4].srl_nx1_n_1 ;
  wire \gen_srls[5].srl_nx1_n_1 ;
  wire \gen_srls[6].srl_nx1_n_1 ;
  wire \gen_srls[6].srl_nx1_n_2 ;
  wire \gen_srls[7].srl_nx1_n_0 ;
  wire \gen_srls[8].srl_nx1_n_0 ;
  wire \gen_srls[9].srl_nx1_n_0 ;
  wire m_axi_awready;
  wire [4:0]m_axi_awuser;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire [13:0]m_axi_wuser;
  wire m_axi_wvalid;
  wire p_13_out;
  wire p_14_out;
  wire [6:0]s_axi_awaddr;
  wire [4:0]s_axi_awlen;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire shift;

  LUT5 #(
    .INIT(32'hAA5A6AAA)) 
    \fifoaddr[0]_i_1 
       (.I0(fifoaddr[0]),
        .I1(\gen_pipelined.state_reg_n_0_[0] ),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(\fifoaddr[1]_i_3_n_0 ),
        .I4(\fifoaddr[1]_i_2_n_0 ),
        .O(\fifoaddr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAA9A6AAAAAAA6AAA)) 
    \fifoaddr[1]_i_1 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(\fifoaddr[1]_i_2_n_0 ),
        .I4(\fifoaddr[1]_i_3_n_0 ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\fifoaddr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \fifoaddr[1]_i_2 
       (.I0(s_axi_awvalid),
        .I1(m_axi_awready),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .O(\fifoaddr[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \fifoaddr[1]_i_3 
       (.I0(s_axi_wlast),
        .I1(s_axi_wvalid),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(m_axi_wready),
        .O(\fifoaddr[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6A59AA59)) 
    \fifoaddr[2]_i_1 
       (.I0(fifoaddr[2]),
        .I1(fifoaddr[1]),
        .I2(\fifoaddr[4]_i_2_n_0 ),
        .I3(\fifoaddr[3]_i_2_n_0 ),
        .I4(fifoaddr[0]),
        .O(\fifoaddr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h65AAA5AAAAAAAAA5)) 
    \fifoaddr[3]_i_1 
       (.I0(fifoaddr[3]),
        .I1(fifoaddr[0]),
        .I2(\fifoaddr[3]_i_2_n_0 ),
        .I3(\fifoaddr[4]_i_2_n_0 ),
        .I4(fifoaddr[1]),
        .I5(fifoaddr[2]),
        .O(\fifoaddr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFEAAAFFFF)) 
    \fifoaddr[3]_i_2 
       (.I0(fifoaddr[0]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I2(m_axi_awready),
        .I3(s_axi_awvalid),
        .I4(\fifoaddr[1]_i_3_n_0 ),
        .I5(\gen_pipelined.mesg_reg[3]_i_2_n_0 ),
        .O(\fifoaddr[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hAAAA6AA9)) 
    \fifoaddr[4]_i_1 
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[3]),
        .I2(\fifoaddr[4]_i_2_n_0 ),
        .I3(fifoaddr[2]),
        .I4(\fifoaddr[4]_i_3_n_0 ),
        .O(\fifoaddr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'h7F000000)) 
    \fifoaddr[4]_i_2 
       (.I0(m_axi_wready),
        .I1(s_axi_wvalid),
        .I2(s_axi_wlast),
        .I3(\fifoaddr[1]_i_2_n_0 ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .O(\fifoaddr[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF5FFFFFFFFBFFFFF)) 
    \fifoaddr[4]_i_3 
       (.I0(fifoaddr[0]),
        .I1(\gen_pipelined.state_reg_n_0_[0] ),
        .I2(\fifoaddr[1]_i_3_n_0 ),
        .I3(\fifoaddr[1]_i_2_n_0 ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I5(fifoaddr[1]),
        .O(\fifoaddr[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFFFFAAAAAAAA)) 
    fifoaddr_afull_i_1
       (.I0(fifoaddr_afull04_out),
        .I1(\fifoaddr[3]_i_2_n_0 ),
        .I2(fifoaddr_afull_i_3_n_0),
        .I3(fifoaddr[3]),
        .I4(fifoaddr[1]),
        .I5(fifoaddr_afull_reg_n_0),
        .O(fifoaddr_afull_i_1_n_0));
  LUT5 #(
    .INIT(32'h00004000)) 
    fifoaddr_afull_i_2
       (.I0(\fifoaddr[1]_i_3_n_0 ),
        .I1(\fifoaddr[1]_i_2_n_0 ),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(fifoaddr[3]),
        .I4(fifoaddr_afull_i_4_n_0),
        .O(fifoaddr_afull04_out));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT2 #(
    .INIT(4'h7)) 
    fifoaddr_afull_i_3
       (.I0(fifoaddr[4]),
        .I1(fifoaddr[2]),
        .O(fifoaddr_afull_i_3_n_0));
  LUT4 #(
    .INIT(16'hFF7F)) 
    fifoaddr_afull_i_4
       (.I0(fifoaddr[2]),
        .I1(fifoaddr[4]),
        .I2(fifoaddr[0]),
        .I3(fifoaddr[1]),
        .O(fifoaddr_afull_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifoaddr_afull_reg
       (.C(aclk),
        .CE(1'b1),
        .D(fifoaddr_afull_i_1_n_0),
        .Q(fifoaddr_afull_reg_n_0),
        .R(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr[0]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[1]_i_1_n_0 ),
        .Q(fifoaddr[1]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[2]_i_1_n_0 ),
        .Q(fifoaddr[2]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[3]_i_1_n_0 ),
        .Q(fifoaddr[3]),
        .S(areset));
  (* MAX_FANOUT = "200" *) 
  FDSE #(
    .INIT(1'b1)) 
    \fifoaddr_reg[4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\fifoaddr[4]_i_1_n_0 ),
        .Q(fifoaddr[4]),
        .S(areset));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h2AAAEAAA)) 
    \gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_i_1 
       (.I0(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .I1(m_axi_wready),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(s_axi_wvalid),
        .I4(s_axi_wlast),
        .O(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue_reg ));
  LUT6 #(
    .INIT(64'h8080FFFF80FFFFFF)) 
    \gen_pipelined.mesg_reg[13]_i_1 
       (.I0(m_axi_wready),
        .I1(s_axi_wvalid),
        .I2(s_axi_wlast),
        .I3(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I5(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.load_mesg ));
  LUT6 #(
    .INIT(64'h7737373737373737)) 
    \gen_pipelined.mesg_reg[1]_i_1 
       (.I0(\gen_pipelined.state_reg_n_0_[0] ),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I3(s_axi_wlast),
        .I4(s_axi_wvalid),
        .I5(m_axi_wready),
        .O(\gen_pipelined.mesg_reg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \gen_pipelined.mesg_reg[3]_i_2 
       (.I0(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I1(\gen_pipelined.state_reg_n_0_[0] ),
        .O(\gen_pipelined.mesg_reg[3]_i_2_n_0 ));
  FDSE \gen_pipelined.mesg_reg_reg[0] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(p_14_out),
        .Q(\gen_pipelined.mesg_reg [0]),
        .S(\gen_pipelined.mesg_reg[1]_i_1_n_0 ));
  FDRE \gen_pipelined.mesg_reg_reg[10] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[10].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [10]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[11] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[11].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [11]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[12] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[12].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [12]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[13] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[13].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [13]),
        .R(1'b0));
  FDSE \gen_pipelined.mesg_reg_reg[1] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(p_13_out),
        .Q(\gen_pipelined.mesg_reg [1]),
        .S(\gen_pipelined.mesg_reg[1]_i_1_n_0 ));
  FDRE \gen_pipelined.mesg_reg_reg[2] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[2].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [2]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[3] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[3].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [3]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[4] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[4].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [4]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[5] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[5].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [5]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[6] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[6].srl_nx1_n_1 ),
        .Q(\gen_pipelined.mesg_reg [6]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[7] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[7].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [7]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[8] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[8].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [8]),
        .R(1'b0));
  FDRE \gen_pipelined.mesg_reg_reg[9] 
       (.C(aclk),
        .CE(\gen_pipelined.load_mesg ),
        .D(\gen_srls[9].srl_nx1_n_0 ),
        .Q(\gen_pipelined.mesg_reg [9]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFB300000)) 
    \gen_pipelined.state[0]_i_1 
       (.I0(\gen_pipelined.state[0]_i_2_n_0 ),
        .I1(\fifoaddr[1]_i_3_n_0 ),
        .I2(\fifoaddr[1]_i_2_n_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .O(\gen_pipelined.state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \gen_pipelined.state[0]_i_2 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(fifoaddr[3]),
        .I3(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I4(fifoaddr[4]),
        .I5(fifoaddr[2]),
        .O(\gen_pipelined.state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFD5FF0000C00000)) 
    \gen_pipelined.state[1]_i_1 
       (.I0(\fifoaddr[1]_i_3_n_0 ),
        .I1(m_axi_awready),
        .I2(s_axi_awvalid),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I5(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .O(\gen_pipelined.state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFAAFFFFFFFFFF)) 
    \gen_pipelined.state[2]_i_1 
       (.I0(\fifoaddr[1]_i_3_n_0 ),
        .I1(fifoaddr_afull_reg_n_0),
        .I2(\fifoaddr[1]_i_2_n_0 ),
        .I3(\gen_pipelined.state_reg_n_0_[0] ),
        .I4(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I5(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .O(\gen_pipelined.state[2]_i_1_n_0 ));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[0] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[0]_i_1_n_0 ),
        .Q(\gen_pipelined.state_reg_n_0_[0] ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[1]_i_1_n_0 ),
        .Q(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .R(areset));
  (* FSM_ENCODING = "none" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipelined.state_reg[2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipelined.state[2]_i_1_n_0 ),
        .Q(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .R(areset));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl \gen_srls[0].srl_nx1 
       (.A(fifoaddr),
        .aclk(aclk),
        .p_14_out(p_14_out),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_20 \gen_srls[10].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[10].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[3]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_21 \gen_srls[11].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[11].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[4]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_22 \gen_srls[12].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[12].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[5]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_23 \gen_srls[13].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[13].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy (\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .m_axi_awready(m_axi_awready),
        .s_axi_awaddr(s_axi_awaddr[6]),
        .s_axi_awvalid(s_axi_awvalid),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_24 \gen_srls[1].srl_nx1 
       (.A(fifoaddr),
        .aclk(aclk),
        .p_13_out(p_13_out),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_25 \gen_srls[2].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[2].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .m_axi_awuser(m_axi_awuser[0]),
        .s_axi_awaddr(s_axi_awaddr[2]),
        .s_axi_awlen(s_axi_awlen[0]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_26 \gen_srls[3].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[3].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_pipelined.state_reg[1] (\gen_pipelined.mesg_reg[3]_i_2_n_0 ),
        .m_axi_awuser(m_axi_awuser[1]),
        .s_axi_awaddr(s_axi_awaddr[3:2]),
        .s_axi_awlen(s_axi_awlen[1:0]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_27 \gen_srls[4].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[4].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .m_axi_awuser(m_axi_awuser[2]),
        .s_axi_awaddr(s_axi_awaddr[4:2]),
        .s_axi_awlen(s_axi_awlen[2:0]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_28 \gen_srls[5].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[5].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .m_axi_awuser(m_axi_awuser[3]),
        .\m_vector_i_reg[1127] (\gen_srls[6].srl_nx1_n_2 ),
        .s_axi_awaddr(s_axi_awaddr[5]),
        .s_axi_awlen(s_axi_awlen[3]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_29 \gen_srls[6].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[6].srl_nx1_n_1 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.mesg_reg_reg[5] (\gen_srls[6].srl_nx1_n_2 ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .m_axi_awuser(m_axi_awuser[4]),
        .s_axi_awaddr(s_axi_awaddr[6:2]),
        .s_axi_awlen(s_axi_awlen),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_30 \gen_srls[7].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[7].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[0]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_31 \gen_srls[8].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[8].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[1]),
        .shift(shift));
  ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_32 \gen_srls[9].srl_nx1 
       (.A(fifoaddr),
        .D(\gen_srls[9].srl_nx1_n_0 ),
        .aclk(aclk),
        .\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid (\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .\gen_pipelined.state_reg[0] (\gen_pipelined.state_reg_n_0_[0] ),
        .s_axi_awaddr(s_axi_awaddr[2]),
        .shift(shift));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT2 #(
    .INIT(4'h8)) 
    m_axi_awvalid_INST_0
       (.I0(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I1(s_axi_awvalid),
        .O(m_axi_awvalid));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[64]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [7]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[0]));
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[65]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [8]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[1]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[66]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [9]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[2]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[67]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [10]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[3]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[68]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [11]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[4]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[69]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [12]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[5]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_wuser[70]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [13]),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.w_burst_continue ),
        .O(m_axi_wuser[6]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[71]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [0]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[7]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[72]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [1]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[8]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[73]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [2]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[9]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[74]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [3]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[10]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[75]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [4]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[11]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[76]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [5]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[12]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_wuser[77]_INST_0 
       (.I0(\gen_pipelined.mesg_reg [6]),
        .I1(s_axi_wlast),
        .O(m_axi_wuser[13]));
  LUT2 #(
    .INIT(4'h8)) 
    m_axi_wvalid_INST_0
       (.I0(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I1(s_axi_wvalid),
        .O(m_axi_wvalid));
  LUT2 #(
    .INIT(4'h8)) 
    s_axi_awready_INST_0
       (.I0(m_axi_awready),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .O(s_axi_awready));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT2 #(
    .INIT(4'h8)) 
    s_axi_wready_INST_0
       (.I0(m_axi_wready),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .O(s_axi_wready));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter
   (is_zero_r_reg_0,
    areset_r_reg,
    s_sc_aclk,
    s_sc_req,
    s_sc_send,
    \grant_i_reg[2] );
  output is_zero_r_reg_0;
  input areset_r_reg;
  input s_sc_aclk;
  input [0:0]s_sc_req;
  input [0:0]s_sc_send;
  input \grant_i_reg[2] ;

  wire areset_r_reg;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r_reg_n_0_[0] ;
  wire \count_r_reg_n_0_[1] ;
  wire \grant_i_reg[2] ;
  wire is_zero_r_i_1_n_0;
  wire is_zero_r_reg_0;
  wire s_sc_aclk;
  wire [0:0]s_sc_req;
  wire [0:0]s_sc_send;

  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h8778)) 
    \count_r[0]_i_1 
       (.I0(\grant_i_reg[2] ),
        .I1(s_sc_send),
        .I2(s_sc_req),
        .I3(\count_r_reg_n_0_[0] ),
        .O(\count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'hE7771888)) 
    \count_r[1]_i_1 
       (.I0(\count_r_reg_n_0_[0] ),
        .I1(s_sc_req),
        .I2(s_sc_send),
        .I3(\grant_i_reg[2] ),
        .I4(\count_r_reg_n_0_[1] ),
        .O(\count_r[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\count_r_reg_n_0_[0] ),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\count_r_reg_n_0_[1] ),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'hF28F8F8F02808080)) 
    is_zero_r_i_1
       (.I0(\count_r_reg_n_0_[0] ),
        .I1(\count_r_reg_n_0_[1] ),
        .I2(s_sc_req),
        .I3(s_sc_send),
        .I4(\grant_i_reg[2] ),
        .I5(is_zero_r_reg_0),
        .O(is_zero_r_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    is_zero_r_reg
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(is_zero_r_i_1_n_0),
        .Q(is_zero_r_reg_0),
        .S(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0
   (Q,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    SR,
    \gen_AB_reg_slice.payld_o_reg[0]_1 ,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]SR;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;
  input s_sc_aclk;

  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAA9AAAA)) 
    \count_r[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I5(Q[3]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAA9A)) 
    \count_r[5]_i_2__4 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(\count_r[5]_i_3_n_0 ),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(Q[4]),
        .O(\count_r[5]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h2BBB)) 
    \count_r[5]_i_3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(m_sc_recv),
        .I3(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .O(\count_r[5]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .D(\count_r[5]_i_2__4_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_0
   (Q,
    E,
    areset_r_reg,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__2 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__4 
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(\count_r[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__0 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h9AAAAAAAAAAAAAA6)) 
    \count_r[5]_i_1__3 
       (.I0(Q[5]),
        .I1(\count_r[5]_i_2__3_n_0 ),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(Q[4]),
        .O(\count_r[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'h4D)) 
    \count_r[5]_i_2__3 
       (.I0(E),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[5]_i_2__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_1
   (Q,
    \gen_normal_area.fifo_send_ready ,
    \gen_rd.fifo_empty_r_reg ,
    SR,
    \gen_AB_reg_slice.state_reg[1] ,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_normal_area.fifo_send_ready ;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]SR;
  input [0:0]\gen_AB_reg_slice.state_reg[1] ;
  input s_sc_aclk;

  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_1_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire [0:0]\gen_AB_reg_slice.state_reg[1] ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__4 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAA9A)) 
    \count_r[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(\count_r[5]_i_2_n_0 ),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(Q[4]),
        .O(\count_r[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'hBB2B)) 
    \count_r[5]_i_2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(\gen_rd.fifo_empty_r_reg ),
        .O(\count_r[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(\gen_AB_reg_slice.state_reg[1] ),
        .D(\count_r[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_10
   (Q,
    arb_stall_late,
    s_sc_send,
    areset_r_reg,
    s_sc_valid,
    s_sc_aclk);
  output [5:0]Q;
  input arb_stall_late;
  input [0:0]s_sc_send;
  input [0:0]areset_r_reg;
  input s_sc_valid;
  input s_sc_aclk;

  wire [5:0]Q;
  wire arb_stall_late;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_1_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__0 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__0 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2_n_0 ),
        .O(\count_r[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2000FFFF0000FFBA)) 
    \count_r[5]_i_2 
       (.I0(Q[0]),
        .I1(arb_stall_late),
        .I2(s_sc_send),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\count_r[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_14
   (Q,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    m_sc_recv,
    SR,
    E,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]m_sc_recv;
  input [0:0]SR;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hBFFF4000FFFD0002)) 
    \count_r[4]_i_1__0 
       (.I0(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_2__0 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_3_n_0 ),
        .O(\count_r[5]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT5 #(
    .INIT(32'hD5545454)) 
    \count_r[5]_i_3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .I4(m_sc_recv),
        .O(\count_r[5]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2__0_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_15
   (Q,
    p_0_in3_in,
    areset_r,
    s_sc_aclk);
  output [5:0]Q;
  input p_0_in3_in;
  input areset_r;
  input s_sc_aclk;

  wire [5:0]Q;
  wire areset_r;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_1__2_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire p_0_in3_in;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1__2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_2__3_n_0 ),
        .O(\count_r[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \count_r[5]_i_2__3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(p_0_in3_in),
        .O(\count_r[5]_i_2__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__2_n_0 ),
        .Q(Q[5]),
        .R(areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_17
   (Q,
    \count_r_reg[4]_0 ,
    \gen_rd.fifo_empty_r_reg ,
    \gen_normal_area.fifo_send_ready ,
    SR,
    E,
    s_sc_aclk);
  output [5:0]Q;
  output \count_r_reg[4]_0 ;
  input \gen_rd.fifo_empty_r_reg ;
  input \gen_normal_area.fifo_send_ready ;
  input [0:0]SR;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_1_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire \count_r_reg[4]_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hBFFF4000FFFD0002)) 
    \count_r[4]_i_1 
       (.I0(\count_r_reg[4]_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \count_r[4]_i_2 
       (.I0(\gen_rd.fifo_empty_r_reg ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .O(\count_r_reg[4]_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_2_n_0 ),
        .O(\count_r[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT5 #(
    .INIT(32'h54D55454)) 
    \count_r[5]_i_2 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\gen_rd.fifo_empty_r_reg ),
        .I4(\gen_normal_area.fifo_send_ready ),
        .O(\count_r[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_18
   (Q,
    p_0_in3_in,
    areset_r,
    s_sc_aclk);
  output [5:0]Q;
  input p_0_in3_in;
  input areset_r;
  input s_sc_aclk;

  wire [5:0]Q;
  wire areset_r;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire p_0_in3_in;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_2__2_n_0 ),
        .O(\count_r[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \count_r[5]_i_2__2 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(p_0_in3_in),
        .O(\count_r[5]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_2
   (Q,
    E,
    areset_r_reg,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__2 
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(\count_r[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__2 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \count_r[5]_i_1__1 
       (.I0(Q[5]),
        .I1(\count_r[5]_i_2__1_n_0 ),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(Q[4]),
        .O(\count_r[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB2)) 
    \count_r[5]_i_2__1 
       (.I0(E),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[5]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_39
   (Q,
    E,
    m_sc_recv,
    \gen_rd.fifo_empty_r_reg ,
    m_sc_areset_r,
    s_sc_aclk);
  output [5:0]Q;
  output [0:0]E;
  input [0:0]m_sc_recv;
  input \gen_rd.fifo_empty_r_reg ;
  input m_sc_areset_r;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire m_sc_areset_r;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__4 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__2 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2__2_n_0 ),
        .O(\count_r[5]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_1__2 
       (.I0(m_sc_recv),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .O(E));
  LUT6 #(
    .INIT(64'h0800FFFF0000FFAE)) 
    \count_r[5]_i_2__2 
       (.I0(Q[0]),
        .I1(m_sc_recv),
        .I2(\gen_rd.fifo_empty_r_reg ),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\count_r[5]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(m_sc_areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_40
   (Q,
    E,
    SR,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]E;
  input [0:0]SR;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1__6_n_0 ;
  wire \count_r[2]_i_1__6_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__6 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_r[1]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__6 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[2]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__4 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__4 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1__3 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2__4_n_0 ),
        .O(\count_r[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_2__4 
       (.I0(Q[0]),
        .I1(E),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(\count_r[5]_i_2__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__6_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__6_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_42
   (Q,
    m_sc_recv,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_areset_r,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]m_sc_recv;
  input \gen_normal_area.fifo_node_payld_empty ;
  input m_sc_areset_r;
  input \gen_normal_area.m_sc_handshake0 ;
  input s_sc_aclk;

  wire [5:0]Q;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire m_sc_areset_r;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_3__0_n_0 ),
        .O(\count_r[5]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0800FFFF0000FFAE)) 
    \count_r[5]_i_3__0 
       (.I0(Q[0]),
        .I1(m_sc_recv),
        .I2(\gen_normal_area.fifo_node_payld_empty ),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\count_r[5]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[5]_i_2__1_n_0 ),
        .Q(Q[5]),
        .R(m_sc_areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_43
   (Q,
    p_0_in2_out,
    areset_r,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]p_0_in2_out;
  input areset_r;
  input s_sc_aclk;

  wire [5:0]Q;
  wire areset_r;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_1_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__0 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__0 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2_n_0 ),
        .O(\count_r[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_2 
       (.I0(p_0_in2_out),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(\count_r[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_47
   (Q,
    \gen_AB_reg_slice.payld_o_reg[2] ,
    \gen_AB_reg_slice.payld_o_reg[2]_0 ,
    m_sc_recv,
    SR,
    E,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_AB_reg_slice.payld_o_reg[2] ;
  input \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  input [0:0]m_sc_recv;
  input [0:0]SR;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \count_r[5]_i_4__0_n_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[2] ;
  wire \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__4 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hBFFF4000FFFD0002)) 
    \count_r[4]_i_1 
       (.I0(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h6A65AAAA)) 
    \count_r[5]_i_2__0 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_3__0_n_0 ),
        .I4(\count_r[5]_i_4__0_n_0 ),
        .O(\count_r[5]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'hFFFFFFF8)) 
    \count_r[5]_i_3__0 
       (.I0(m_sc_recv),
        .I1(\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(\count_r[5]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hD555555555555555)) 
    \count_r[5]_i_4__0 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .I5(m_sc_recv),
        .O(\count_r[5]_i_4__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2__0_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_48
   (Q,
    p_0_in3_in,
    areset_r,
    s_sc_aclk);
  output [5:0]Q;
  input p_0_in3_in;
  input areset_r;
  input s_sc_aclk;

  wire [5:0]Q;
  wire areset_r;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire p_0_in3_in;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1__3 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_2__3_n_0 ),
        .O(\count_r[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \count_r[5]_i_2__3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(p_0_in3_in),
        .O(\count_r[5]_i_2__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(Q[4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_50
   (Q,
    \gen_normal_area.fifo_send_ready ,
    \gen_rd.fifo_empty_r_reg ,
    SR,
    E,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_normal_area.fifo_send_ready ;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]SR;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \count_r[5]_i_4_n_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__3 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h6A65AAAA)) 
    \count_r[5]_i_2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_3_n_0 ),
        .I4(\count_r[5]_i_4_n_0 ),
        .O(\count_r[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'hFFFFFFF4)) 
    \count_r[5]_i_3 
       (.I0(\gen_rd.fifo_empty_r_reg ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(\count_r[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h55555555D5555555)) 
    \count_r[5]_i_4 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\gen_normal_area.fifo_send_ready ),
        .I5(\gen_rd.fifo_empty_r_reg ),
        .O(\count_r[5]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_51
   (Q,
    p_0_in3_in,
    areset_r,
    s_sc_aclk);
  output [5:0]Q;
  input p_0_in3_in;
  input areset_r;
  input s_sc_aclk;

  wire [5:0]Q;
  wire areset_r;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire p_0_in3_in;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_r[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(\count_r[5]_i_2__2_n_0 ),
        .O(\count_r[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \count_r[5]_i_2__2 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(p_0_in3_in),
        .O(\count_r[5]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(areset_r));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_56
   (Q,
    E,
    \count_r_reg[4]_0 ,
    \gen_rd.fifo_empty_r_reg ,
    m_sc_recv,
    SR,
    s_sc_aclk);
  output [5:0]Q;
  output [0:0]E;
  output \count_r_reg[4]_0 ;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]m_sc_recv;
  input [0:0]SR;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_1__0_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire \count_r_reg[4]_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\count_r[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAA9AA)) 
    \count_r[4]_i_1__1 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(\count_r_reg[4]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \count_r[4]_i_2 
       (.I0(\gen_rd.fifo_empty_r_reg ),
        .I1(m_sc_recv),
        .O(\count_r_reg[4]_0 ));
  LUT5 #(
    .INIT(32'hAA6AA9AA)) 
    \count_r[5]_i_1__0 
       (.I0(Q[5]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\count_r[5]_i_2__1_n_0 ),
        .I4(Q[4]),
        .O(\count_r[5]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_1__1 
       (.I0(m_sc_recv),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'hA2AABABB)) 
    \count_r[5]_i_2__1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(\gen_rd.fifo_empty_r_reg ),
        .I3(m_sc_recv),
        .I4(Q[1]),
        .O(\count_r[5]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__0_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_57
   (Q,
    E,
    areset_r_reg,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_1__2_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_r[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__4 
       (.I0(Q[4]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_1__2 
       (.I0(Q[5]),
        .I1(\count_r[5]_i_2__4_n_0 ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_r[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h80FE)) 
    \count_r[5]_i_2__4 
       (.I0(Q[1]),
        .I1(E),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(\count_r[5]_i_2__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__2_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_59
   (Q,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv,
    \gen_rd.fifo_empty_r_reg ,
    SR,
    S_AXI_AREADY_I_reg,
    s_sc_aclk);
  output [5:0]Q;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]SR;
  input [0:0]S_AXI_AREADY_I_reg;
  input s_sc_aclk;

  wire [5:0]Q;
  wire [0:0]SR;
  wire [0:0]S_AXI_AREADY_I_reg;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\count_r[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAA9AA)) 
    \count_r[4]_i_1__2 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(\gen_rd.fifo_empty_r_reg ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAA6AA9AA)) 
    \count_r[5]_i_2__2 
       (.I0(Q[5]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\count_r[5]_i_3_n_0 ),
        .I4(Q[4]),
        .O(\count_r[5]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'hA2AABABB)) 
    \count_r[5]_i_3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(\gen_normal_area.fifo_node_payld_empty ),
        .I3(m_sc_recv),
        .I4(Q[1]),
        .O(\count_r[5]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(S_AXI_AREADY_I_reg),
        .D(\count_r[5]_i_2__2_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_6
   (Q,
    \count_r_reg[0]_0 ,
    m_sc_recv,
    \gen_rd.fifo_empty_r_reg ,
    SR,
    s_sc_aclk);
  output [5:0]Q;
  output \count_r_reg[0]_0 ;
  input [0:0]m_sc_recv;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]SR;
  input s_sc_aclk;

  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__3_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1__2_n_0 ;
  wire \count_r[3]_i_1__2_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__2 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2__2_n_0 ),
        .O(\count_r[5]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_1__2 
       (.I0(m_sc_recv),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .O(\count_r_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h2000FFFF0000FFF2)) 
    \count_r[5]_i_2__2 
       (.I0(m_sc_recv),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\count_r[5]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(\count_r_reg[0]_0 ),
        .D(\count_r[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_60
   (Q,
    \grant_i_reg[2] ,
    s_sc_send,
    \grant_i_reg[2]_0 ,
    areset_r_reg,
    E,
    s_sc_aclk);
  output [5:0]Q;
  input \grant_i_reg[2] ;
  input [0:0]s_sc_send;
  input \grant_i_reg[2]_0 ;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__0_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire \count_r[3]_i_1__0_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_1_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\count_r[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAA9A)) 
    \count_r[4]_i_1__0 
       (.I0(Q[4]),
        .I1(Q[3]),
        .I2(\grant_i_reg[2]_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAA6AA9AA)) 
    \count_r[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\count_r[5]_i_2__0_n_0 ),
        .I4(Q[4]),
        .O(\count_r[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'h2AABABAB)) 
    \count_r[5]_i_2__0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\grant_i_reg[2] ),
        .I4(s_sc_send),
        .O(\count_r[5]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_7
   (Q,
    E,
    areset_r_reg,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1__4_n_0 ;
  wire \count_r[2]_i_1__4_n_0 ;
  wire \count_r[3]_i_1__4_n_0 ;
  wire \count_r[4]_i_1__4_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__4 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__4 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__4 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__4_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_1__3 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_2__4_n_0 ),
        .O(\count_r[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_2__4 
       (.I0(E),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(\count_r[5]_i_2__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_9
   (Q,
    m_sc_recv,
    \gen_normal_area.fifo_node_payld_empty ,
    SR,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_aclk);
  output [5:0]Q;
  input [0:0]m_sc_recv;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]SR;
  input \gen_normal_area.m_sc_handshake0 ;
  input s_sc_aclk;

  wire [5:0]Q;
  wire [0:0]SR;
  wire \count_r[0]_i_1__1_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire [0:0]m_sc_recv;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\count_r[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\count_r[5]_i_3__0_n_0 ),
        .O(\count_r[5]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h2000FFFF0000FFF2)) 
    \count_r[5]_i_3__0 
       (.I0(m_sc_recv),
        .I1(\gen_normal_area.fifo_node_payld_empty ),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(\count_r[5]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(\gen_normal_area.m_sc_handshake0 ),
        .D(\count_r[5]_i_2__1_n_0 ),
        .Q(Q[5]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1
   (\gen_wr.prog_full_r0 ,
    \gen_rd.fifo_empty_r_reg_inv ,
    \gen_wr.full_r0 ,
    E,
    out,
    \count_r_reg[0]_0 ,
    \count_r_reg[3]_0 ,
    \count_r_reg[4]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[0]_1 ,
    \count_r_reg[1]_0 ,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    \count_r_reg[5]_0 ,
    \count_r_reg[2]_1 ,
    \count_r_reg[3]_1 ,
    areset_r_reg,
    s_sc_aclk);
  output \gen_wr.prog_full_r0 ;
  output \gen_rd.fifo_empty_r_reg_inv ;
  output \gen_wr.full_r0 ;
  input [0:0]E;
  input [5:0]out;
  input \count_r_reg[0]_0 ;
  input \count_r_reg[3]_0 ;
  input \count_r_reg[4]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[0]_1 ;
  input \count_r_reg[1]_0 ;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [5:0]\count_r_reg[5]_0 ;
  input \count_r_reg[2]_1 ;
  input \count_r_reg[3]_1 ;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_1__2_n_0 ;
  wire \count_r[5]_i_2__2_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[0]_1 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[2]_1 ;
  wire \count_r_reg[3]_0 ;
  wire \count_r_reg[3]_1 ;
  wire \count_r_reg[4]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_i_10_n_0 ;
  wire \gen_wr.full_r_i_13_n_0 ;
  wire \gen_wr.full_r_i_2_n_0 ;
  wire \gen_wr.full_r_i_4_n_0 ;
  wire \gen_wr.full_r_i_6_n_0 ;
  wire \gen_wr.full_r_i_7_n_0 ;
  wire \gen_wr.full_r_i_8_n_0 ;
  wire \gen_wr.prog_full_r0 ;
  wire \gen_wr.prog_full_r_i_11_n_0 ;
  wire \gen_wr.prog_full_r_i_12_n_0 ;
  wire \gen_wr.prog_full_r_i_13_n_0 ;
  wire \gen_wr.prog_full_r_i_2_n_0 ;
  wire \gen_wr.prog_full_r_i_3_n_0 ;
  wire \gen_wr.prog_full_r_i_4_n_0 ;
  wire \gen_wr.prog_full_r_i_5_n_0 ;
  wire \gen_wr.prog_full_r_i_6_n_0 ;
  wire \gen_wr.prog_full_r_i_7_n_0 ;
  wire \gen_wr.prog_full_r_i_8_n_0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [5:0]out;
  wire s_sc_aclk;

  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[5]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_2__2_n_0 ),
        .O(\count_r[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000001)) 
    \count_r[5]_i_2__2 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(E),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[5]_i_2__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFF6FFFFF6)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(\gen_wr.full_r_i_2_n_0 ),
        .I1(\count_r_reg[3]_0 ),
        .I2(\gen_wr.full_r_i_4_n_0 ),
        .I3(\count_r_reg[4]_0 ),
        .I4(\gen_wr.full_r_i_6_n_0 ),
        .I5(\gen_wr.full_r_i_7_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  LUT6 #(
    .INIT(64'h0900000900000000)) 
    \gen_wr.full_r_i_1 
       (.I0(\gen_wr.full_r_i_2_n_0 ),
        .I1(\count_r_reg[3]_0 ),
        .I2(\gen_wr.full_r_i_4_n_0 ),
        .I3(\count_r_reg[4]_0 ),
        .I4(\gen_wr.full_r_i_6_n_0 ),
        .I5(\gen_wr.full_r_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_wr.full_r_i_10 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [0]),
        .O(\gen_wr.full_r_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_wr.full_r_i_13 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [1]),
        .O(\gen_wr.full_r_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_wr.full_r_i_2 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [3]),
        .O(\gen_wr.full_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_wr.full_r_i_4 
       (.I0(\gen_wr.full_r_i_8_n_0 ),
        .I1(\count_r_reg[2]_0 ),
        .I2(\gen_wr.full_r_i_10_n_0 ),
        .I3(\count_r_reg[0]_1 ),
        .I4(\count_r_reg[1]_0 ),
        .I5(\gen_wr.full_r_i_13_n_0 ),
        .O(\gen_wr.full_r_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_wr.full_r_i_6 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [4]),
        .O(\gen_wr.full_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hE21D1D1D1DE2E2E2)) 
    \gen_wr.full_r_i_7 
       (.I0(\count_r_reg[5]_0 [5]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(out[4]),
        .I4(\count_r_reg[3]_1 ),
        .I5(out[5]),
        .O(\gen_wr.full_r_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_wr.full_r_i_8 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [2]),
        .O(\gen_wr.full_r_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000C0CCBB33)) 
    \gen_wr.prog_full_r_i_1 
       (.I0(\gen_wr.prog_full_r_i_2_n_0 ),
        .I1(\gen_wr.prog_full_r_i_3_n_0 ),
        .I2(\gen_wr.prog_full_r_i_4_n_0 ),
        .I3(\gen_wr.prog_full_r_i_5_n_0 ),
        .I4(\gen_wr.prog_full_r_i_6_n_0 ),
        .I5(\gen_wr.prog_full_r_i_7_n_0 ),
        .O(\gen_wr.prog_full_r0 ));
  LUT6 #(
    .INIT(64'h0000007878780078)) 
    \gen_wr.prog_full_r_i_11 
       (.I0(m_sc_recv),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(out[0]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(E),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_wr.prog_full_r_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \gen_wr.prog_full_r_i_12 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(E),
        .I2(\count_r_reg[5]_0 [5]),
        .O(\gen_wr.prog_full_r_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'hCCA000A0)) 
    \gen_wr.prog_full_r_i_13 
       (.I0(\count_r_reg[5]_0 [3]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\count_r_reg[5]_0 [2]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_wr.prog_full_r_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h22F2FBBBFBBBF222)) 
    \gen_wr.prog_full_r_i_2 
       (.I0(\gen_wr.prog_full_r_i_8_n_0 ),
        .I1(\gen_wr.full_r_i_13_n_0 ),
        .I2(\gen_wr.full_r_i_8_n_0 ),
        .I3(out[2]),
        .I4(\count_r_reg[0]_0 ),
        .I5(out[1]),
        .O(\gen_wr.prog_full_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF6A283C283C6AFF)) 
    \gen_wr.prog_full_r_i_3 
       (.I0(\gen_wr.full_r_i_6_n_0 ),
        .I1(\gen_wr.full_r_i_8_n_0 ),
        .I2(\gen_wr.full_r_i_2_n_0 ),
        .I3(out[4]),
        .I4(\count_r_reg[2]_1 ),
        .I5(out[3]),
        .O(\gen_wr.prog_full_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hD0000070DD707077)) 
    \gen_wr.prog_full_r_i_4 
       (.I0(\gen_wr.full_r_i_8_n_0 ),
        .I1(out[2]),
        .I2(\gen_wr.full_r_i_13_n_0 ),
        .I3(\count_r_reg[0]_0 ),
        .I4(out[1]),
        .I5(\gen_wr.prog_full_r_i_11_n_0 ),
        .O(\gen_wr.prog_full_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFCCCFC888AAA8A)) 
    \gen_wr.prog_full_r_i_5 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\count_r_reg[3]_0 ),
        .I2(\count_r_reg[5]_0 [3]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\gen_wr.full_r_i_8_n_0 ),
        .O(\gen_wr.prog_full_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h956A6A956A956A95)) 
    \gen_wr.prog_full_r_i_6 
       (.I0(out[5]),
        .I1(\count_r_reg[3]_1 ),
        .I2(out[4]),
        .I3(\gen_wr.prog_full_r_i_12_n_0 ),
        .I4(\gen_wr.prog_full_r_i_13_n_0 ),
        .I5(\gen_wr.full_r_i_6_n_0 ),
        .O(\gen_wr.prog_full_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h656A00000000656A)) 
    \gen_wr.prog_full_r_i_7 
       (.I0(\gen_wr.prog_full_r_i_13_n_0 ),
        .I1(\gen_wr.wr_addra_p1 [4]),
        .I2(E),
        .I3(\count_r_reg[5]_0 [4]),
        .I4(\count_r_reg[3]_1 ),
        .I5(out[4]),
        .O(\gen_wr.prog_full_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h787878FFFFFF78FF)) 
    \gen_wr.prog_full_r_i_8 
       (.I0(m_sc_recv),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(out[0]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(E),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_wr.prog_full_r_i_8_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_11
   (\gen_wr.afull_r0 ,
    \gen_wr.full_r0 ,
    \gen_rd.fifo_empty_r_reg_inv ,
    s_sc_send,
    arb_stall_late,
    \count_r_reg[3]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[0]_0 ,
    out,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_valid,
    p_0_in,
    \count_r_reg[5]_0 ,
    SR,
    areset_r_reg,
    s_sc_aclk);
  output \gen_wr.afull_r0 ;
  output \gen_wr.full_r0 ;
  output \gen_rd.fifo_empty_r_reg_inv ;
  input [0:0]s_sc_send;
  input arb_stall_late;
  input \count_r_reg[3]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[0]_0 ;
  input [1:0]out;
  input \gen_normal_area.m_sc_handshake0 ;
  input s_sc_valid;
  input p_0_in;
  input [5:0]\count_r_reg[5]_0 ;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]SR;
  wire arb_stall_late;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_rd.fifo_empty_r_inv_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_inv_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_inv_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_i_11_n_0 ;
  wire \gen_wr.afull_r_i_12_n_0 ;
  wire \gen_wr.afull_r_i_2_n_0 ;
  wire \gen_wr.afull_r_i_3_n_0 ;
  wire \gen_wr.afull_r_i_5_n_0 ;
  wire \gen_wr.afull_r_i_6_n_0 ;
  wire \gen_wr.afull_r_i_7_n_0 ;
  wire \gen_wr.afull_r_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_inv_i_2_n_0 ;
  wire \gen_wr.full_r_inv_i_3_n_0 ;
  wire \gen_wr.full_r_inv_i_4_n_0 ;
  wire \gen_wr.full_r_inv_i_5_n_0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [1:0]out;
  wire p_0_in;
  wire p_1_in1_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__0 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r[5]_i_3_n_0 ),
        .O(\count_r[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0800FFFF0000FFAE)) 
    \count_r[5]_i_3 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(s_sc_send),
        .I2(arb_stall_late),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[5]_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(s_sc_valid),
        .D(\count_r[5]_i_2__0_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'h000000006FFFFFFF)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(p_0_in),
        .I1(p_1_in1_in),
        .I2(\gen_rd.fifo_empty_r_inv_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_inv_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_inv_i_6_n_0 ),
        .I5(SR),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \gen_rd.fifo_empty_r_inv_i_3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(s_sc_send),
        .I2(arb_stall_late),
        .I3(\count_r_reg[5]_0 [5]),
        .O(p_1_in1_in));
  LUT5 #(
    .INIT(32'hBA8A4575)) 
    \gen_rd.fifo_empty_r_inv_i_4 
       (.I0(\count_r_reg[5]_0 [3]),
        .I1(arb_stall_late),
        .I2(s_sc_send),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\count_r_reg[2]_0 ),
        .O(\gen_rd.fifo_empty_r_inv_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8008808080080808)) 
    \gen_rd.fifo_empty_r_inv_i_5 
       (.I0(\gen_wr.full_r_inv_i_4_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\count_r_reg[0]_0 ),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(s_sc_valid),
        .I5(\count_r_reg[5]_0 [2]),
        .O(\gen_rd.fifo_empty_r_inv_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hBA8A4575)) 
    \gen_rd.fifo_empty_r_inv_i_6 
       (.I0(\count_r_reg[5]_0 [4]),
        .I1(arb_stall_late),
        .I2(s_sc_send),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .I4(\count_r_reg[3]_0 ),
        .O(\gen_rd.fifo_empty_r_inv_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hCF0C0CCFA0FAFAA0)) 
    \gen_wr.afull_r_i_1 
       (.I0(\gen_wr.afull_r_i_2_n_0 ),
        .I1(\gen_wr.afull_r_i_3_n_0 ),
        .I2(\count_r_reg[3]_0 ),
        .I3(\gen_wr.afull_r_i_5_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .I5(\gen_wr.afull_r_i_6_n_0 ),
        .O(\gen_wr.afull_r0 ));
  LUT6 #(
    .INIT(64'h89F8F8981FF7F7F1)) 
    \gen_wr.afull_r_i_11 
       (.I0(out[0]),
        .I1(\gen_normal_area.m_sc_handshake0 ),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(s_sc_valid),
        .I5(out[1]),
        .O(\gen_wr.afull_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gen_wr.afull_r_i_12 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(s_sc_valid),
        .I5(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_wr.afull_r_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hB2FCF3B230E8B230)) 
    \gen_wr.afull_r_i_2 
       (.I0(\gen_wr.afull_r_i_7_n_0 ),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\count_r_reg[2]_0 ),
        .I3(\gen_wr.afull_r_i_9_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\count_r_reg[0]_0 ),
        .O(\gen_wr.afull_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB2F3032B30B2B2F3)) 
    \gen_wr.afull_r_i_3 
       (.I0(\gen_wr.afull_r_i_11_n_0 ),
        .I1(\count_r_reg[2]_0 ),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\count_r_reg[0]_0 ),
        .I4(\gen_wr.afull_r_i_9_n_0 ),
        .I5(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_wr.afull_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    \gen_wr.afull_r_i_5 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \gen_wr.afull_r_i_6 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.afull_r_i_12_n_0 ),
        .I2(p_0_in),
        .O(\gen_wr.afull_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFF78607E607E78FF)) 
    \gen_wr.afull_r_i_7 
       (.I0(out[0]),
        .I1(\gen_normal_area.m_sc_handshake0 ),
        .I2(out[1]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(s_sc_valid),
        .O(\gen_wr.afull_r_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'hDFFF)) 
    \gen_wr.afull_r_i_9 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_rd.fifo_empty_r_inv_i_6_n_0 ),
        .I1(\gen_wr.full_r_inv_i_2_n_0 ),
        .I2(\gen_wr.full_r_inv_i_3_n_0 ),
        .I3(\gen_wr.full_r_inv_i_4_n_0 ),
        .I4(\gen_rd.fifo_empty_r_inv_i_4_n_0 ),
        .I5(\gen_wr.full_r_inv_i_5_n_0 ),
        .O(\gen_wr.full_r0 ));
  LUT5 #(
    .INIT(32'hBA8A4575)) 
    \gen_wr.full_r_inv_i_2 
       (.I0(\count_r_reg[5]_0 [2]),
        .I1(arb_stall_late),
        .I2(s_sc_send),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\count_r_reg[0]_0 ),
        .O(\gen_wr.full_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h1DE2E21DE21DE21D)) 
    \gen_wr.full_r_inv_i_3 
       (.I0(\count_r_reg[5]_0 [1]),
        .I1(s_sc_valid),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(\gen_normal_area.m_sc_handshake0 ),
        .O(\gen_wr.full_r_inv_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4575BA8ABA8A4575)) 
    \gen_wr.full_r_inv_i_4 
       (.I0(\count_r_reg[5]_0 [0]),
        .I1(arb_stall_late),
        .I2(s_sc_send),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(\gen_normal_area.m_sc_handshake0 ),
        .I5(out[0]),
        .O(\gen_wr.full_r_inv_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT5 #(
    .INIT(32'h65666A66)) 
    \gen_wr.full_r_inv_i_5 
       (.I0(p_0_in),
        .I1(\count_r_reg[5]_0 [5]),
        .I2(arb_stall_late),
        .I3(s_sc_send),
        .I4(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.full_r_inv_i_5_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_16
   (\gen_wr.full_r_reg_inv ,
    \gen_wr.afull_r_reg ,
    \gen_rd.fifo_empty_r_reg_inv ,
    areset_r,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    m_sc_recv,
    out,
    \count_r_reg[5]_0 ,
    p_0_in3_in,
    \count_r_reg[2]_0 ,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    \count_r_reg[0]_0 ,
    \count_r_reg[1]_0 ,
    \count_r_reg[0]_1 ,
    \count_r_reg[3]_0 ,
    \count_r_reg[4]_0 ,
    \count_r_reg[1]_1 ,
    \count_r_reg[3]_1 ,
    s_sc_aclk);
  output \gen_wr.full_r_reg_inv ;
  output \gen_wr.afull_r_reg ;
  output \gen_rd.fifo_empty_r_reg_inv ;
  input areset_r;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]m_sc_recv;
  input [5:0]out;
  input [5:0]\count_r_reg[5]_0 ;
  input p_0_in3_in;
  input \count_r_reg[2]_0 ;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input \count_r_reg[0]_0 ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[0]_1 ;
  input \count_r_reg[3]_0 ;
  input \count_r_reg[4]_0 ;
  input \count_r_reg[1]_1 ;
  input \count_r_reg[3]_1 ;
  input s_sc_aclk;

  wire areset_r;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[0]_1 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[1]_1 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire \count_r_reg[3]_1 ;
  wire \count_r_reg[4]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.afull_r_i_10_n_0 ;
  wire \gen_wr.afull_r_i_12_n_0 ;
  wire \gen_wr.afull_r_i_13_n_0 ;
  wire \gen_wr.afull_r_i_17_n_0 ;
  wire \gen_wr.afull_r_i_2_n_0 ;
  wire \gen_wr.afull_r_i_3_n_0 ;
  wire \gen_wr.afull_r_i_4_n_0 ;
  wire \gen_wr.afull_r_i_5_n_0 ;
  wire \gen_wr.afull_r_i_6_n_0 ;
  wire \gen_wr.afull_r_i_7_n_0 ;
  wire \gen_wr.afull_r_i_9_n_0 ;
  wire \gen_wr.afull_r_reg ;
  wire \gen_wr.full_r_inv_i_2_n_0 ;
  wire \gen_wr.full_r_inv_i_3_n_0 ;
  wire \gen_wr.full_r_inv_i_4_n_0 ;
  wire \gen_wr.full_r_inv_i_5_n_0 ;
  wire \gen_wr.full_r_inv_i_7_n_0 ;
  wire \gen_wr.full_r_inv_i_8_n_0 ;
  wire \gen_wr.full_r_reg_inv ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [5:0]out;
  wire p_0_in3_in;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h6666666666666566)) 
    \count_r[5]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_2__4_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r[5]_i_3__0_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[5]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_r[5]_i_2__4 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\gen_wr.wr_addra_p1 [4]),
        .O(\count_r[5]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \count_r[5]_i_3__0 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(p_0_in3_in),
        .O(\count_r[5]_i_3__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'hFFBF)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_5_n_0 ),
        .I1(\gen_wr.full_r_inv_i_4_n_0 ),
        .I2(\gen_wr.full_r_inv_i_3_n_0 ),
        .I3(\gen_wr.full_r_inv_i_2_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAFD00FD0)) 
    \gen_wr.afull_r_i_1 
       (.I0(\gen_wr.afull_r_i_2_n_0 ),
        .I1(\gen_wr.afull_r_i_3_n_0 ),
        .I2(\gen_wr.afull_r_i_4_n_0 ),
        .I3(\gen_wr.afull_r_i_5_n_0 ),
        .I4(\gen_wr.afull_r_i_6_n_0 ),
        .I5(areset_r),
        .O(\gen_wr.afull_r_reg ));
  LUT6 #(
    .INIT(64'h7878FF78FFFF78FF)) 
    \gen_wr.afull_r_i_10 
       (.I0(p_0_in3_in),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(out[0]),
        .I4(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .I5(out[1]),
        .O(\gen_wr.afull_r_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFC45454545CFCFCF)) 
    \gen_wr.afull_r_i_12 
       (.I0(\count_r_reg[1]_0 ),
        .I1(\count_r_reg[2]_0 ),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h9555555555555555)) 
    \gen_wr.afull_r_i_13 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \gen_wr.afull_r_i_17 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_i_17_n_0 ));
  LUT6 #(
    .INIT(64'hBBEB0BE007D0BBEB)) 
    \gen_wr.afull_r_i_2 
       (.I0(out[4]),
        .I1(\gen_wr.wr_addra_p1 [4]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.afull_r_i_7_n_0 ),
        .I4(out[3]),
        .I5(\count_r_reg[1]_1 ),
        .O(\gen_wr.afull_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h08888808AAAAAAAA)) 
    \gen_wr.afull_r_i_3 
       (.I0(\gen_wr.afull_r_i_9_n_0 ),
        .I1(\gen_wr.afull_r_i_10_n_0 ),
        .I2(\count_r_reg[0]_0 ),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(\gen_wr.afull_r_i_12_n_0 ),
        .O(\gen_wr.afull_r_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \gen_wr.afull_r_i_4 
       (.I0(\gen_wr.afull_r_i_13_n_0 ),
        .I1(\count_r_reg[4]_0 ),
        .O(\gen_wr.afull_r_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h87787887)) 
    \gen_wr.afull_r_i_5 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[4]),
        .I2(out[5]),
        .I3(\count_r[5]_i_2__4_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.afull_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAAA2A2AAFFFFFFFF)) 
    \gen_wr.afull_r_i_6 
       (.I0(\gen_wr.afull_r_i_12_n_0 ),
        .I1(\gen_wr.afull_r_i_10_n_0 ),
        .I2(\count_r_reg[0]_0 ),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(\gen_wr.afull_r_i_9_n_0 ),
        .O(\gen_wr.afull_r_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gen_wr.afull_r_i_7 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_wr.afull_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFF593C18183CFF59)) 
    \gen_wr.afull_r_i_9 
       (.I0(out[3]),
        .I1(out[2]),
        .I2(\count_r_reg[0]_1 ),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.afull_r_i_17_n_0 ),
        .O(\gen_wr.afull_r_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'h0000FF7F)) 
    \gen_wr.full_r_inv_i_1__0 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(areset_r),
        .O(\gen_wr.full_r_reg_inv ));
  LUT6 #(
    .INIT(64'h8787877878788778)) 
    \gen_wr.full_r_inv_i_2 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[4]),
        .I2(out[5]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.full_r_inv_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h56A6)) 
    \gen_wr.full_r_inv_i_3 
       (.I0(\count_r_reg[3]_1 ),
        .I1(\count_r_reg[5]_0 [3]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.full_r_inv_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8088800008000888)) 
    \gen_wr.full_r_inv_i_4 
       (.I0(\gen_wr.full_r_inv_i_7_n_0 ),
        .I1(\gen_wr.full_r_inv_i_8_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(p_0_in3_in),
        .I4(\count_r_reg[5]_0 [2]),
        .I5(\count_r_reg[2]_0 ),
        .O(\gen_wr.full_r_inv_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'h56A6)) 
    \gen_wr.full_r_inv_i_5 
       (.I0(\count_r_reg[4]_0 ),
        .I1(\count_r_reg[5]_0 [4]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_wr.full_r_inv_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hD2D2D22D2D2DD22D)) 
    \gen_wr.full_r_inv_i_7 
       (.I0(out[0]),
        .I1(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .I2(out[1]),
        .I3(\count_r_reg[5]_0 [1]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.full_r_inv_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h7878788787877887)) 
    \gen_wr.full_r_inv_i_8 
       (.I0(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I1(m_sc_recv),
        .I2(out[0]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_wr.full_r_inv_i_8_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_19
   (\gen_wr.full_r_reg_inv ,
    \gen_rd.fifo_empty_r_reg ,
    areset_r,
    \gen_rd.fifo_empty_r_reg_0 ,
    \gen_normal_area.fifo_send_ready ,
    out,
    \count_r_reg[5]_0 ,
    p_0_in3_in,
    \gen_rd.fifo_empty_r_reg_1 ,
    \count_r_reg[1]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[3]_0 ,
    s_sc_aclk);
  output \gen_wr.full_r_reg_inv ;
  output \gen_rd.fifo_empty_r_reg ;
  input areset_r;
  input \gen_rd.fifo_empty_r_reg_0 ;
  input \gen_normal_area.fifo_send_ready ;
  input [5:0]out;
  input [5:0]\count_r_reg[5]_0 ;
  input p_0_in3_in;
  input \gen_rd.fifo_empty_r_reg_1 ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[3]_0 ;
  input s_sc_aclk;

  wire areset_r;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire \count_r[5]_i_4_n_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_rd.fifo_empty_r_reg_0 ;
  wire \gen_rd.fifo_empty_r_reg_1 ;
  wire \gen_wr.full_r_reg_inv ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [5:0]out;
  wire p_0_in3_in;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h6C)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[5]_i_2__1 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_4_n_0 ),
        .O(\count_r[5]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000001)) 
    \count_r[5]_i_4 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(p_0_in3_in),
        .O(\count_r[5]_i_4_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_2__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_8_n_0 ),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2D222DDDD2DDD222)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(out[4]),
        .I1(\count_r_reg[3]_0 ),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(p_0_in3_in),
        .I4(\count_r_reg[5]_0 [5]),
        .I5(out[5]),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[4]),
        .I2(\count_r_reg[5]_0 [4]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(\count_r_reg[1]_0 ),
        .I1(out[2]),
        .I2(\count_r_reg[5]_0 [2]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h1D1DE21DE2E21DE2)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(\count_r_reg[5]_0 [1]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(out[0]),
        .I4(\gen_rd.fifo_empty_r_reg_1 ),
        .I5(out[1]),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h4B4B4BB4B4B44BB4)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(\gen_rd.fifo_empty_r_reg_0 ),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(out[0]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\count_r_reg[2]_0 ),
        .I1(out[3]),
        .I2(\count_r_reg[5]_0 [3]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I2(areset_r),
        .O(\gen_wr.full_r_reg_inv ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_3
   (\gen_rd.fifo_empty_r_reg ,
    \gen_wr.full_r0 ,
    E,
    out,
    \count_r_reg[5]_0 ,
    \gen_AB_reg_slice.state_reg[1] ,
    \count_r_reg[1]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[3]_0 ,
    \gen_normal_area.fifo_send_ready ,
    \gen_rd.fifo_empty_r_reg_0 ,
    areset_r_reg,
    s_sc_aclk);
  output \gen_rd.fifo_empty_r_reg ;
  output \gen_wr.full_r0 ;
  input [0:0]E;
  input [5:0]out;
  input [5:0]\count_r_reg[5]_0 ;
  input [0:0]\gen_AB_reg_slice.state_reg[1] ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[3]_0 ;
  input \gen_normal_area.fifo_send_ready ;
  input \gen_rd.fifo_empty_r_reg_0 ;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__1_n_0 ;
  wire \count_r[5]_i_1__0_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire [0:0]\gen_AB_reg_slice.state_reg[1] ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_rd.fifo_empty_r_reg_0 ;
  wire \gen_wr.full_r0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [5:0]out;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h55A9AAA9)) 
    \count_r[5]_i_1__0 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_2__0_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .I4(\count_r[5]_i_3__0_n_0 ),
        .O(\count_r[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \count_r[5]_i_2__0 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(E),
        .O(\count_r[5]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \count_r[5]_i_3__0 
       (.I0(E),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[5]_i_3__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__0_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(\count_r_reg[3]_0 ),
        .I1(\count_r_reg[5]_0 [4]),
        .I2(out[4]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\count_r_reg[5]_0 [3]),
        .I2(out[3]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2D2D2DD2D2D22DD2)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(\gen_normal_area.fifo_send_ready ),
        .I1(\gen_rd.fifo_empty_r_reg_0 ),
        .I2(\count_r_reg[5]_0 [0]),
        .I3(out[0]),
        .I4(E),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hE21D1D1D1DE2E2E2)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(out[1]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(\gen_AB_reg_slice.state_reg[1] ),
        .I5(\count_r_reg[5]_0 [1]),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hE21D1DE2)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(out[2]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\count_r_reg[1]_0 ),
        .I4(\count_r_reg[5]_0 [2]),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8788877778777888)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(\count_r_reg[3]_0 ),
        .I1(\count_r_reg[5]_0 [4]),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(E),
        .I4(out[5]),
        .I5(\count_r_reg[5]_0 [5]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFBFFFFFFFF)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_41
   (\gen_rd.fifo_empty_r_reg ,
    \gen_wr.full_r0 ,
    out,
    E,
    \count_r_reg[5]_0 ,
    \gen_rd.fifo_empty_r_reg_0 ,
    \count_r_reg[1]_0 ,
    \count_r_reg[0]_0 ,
    \count_r_reg[2]_0 ,
    m_sc_recv,
    \gen_rd.fifo_empty_r_reg_1 ,
    SR,
    s_sc_aclk);
  output \gen_rd.fifo_empty_r_reg ;
  output \gen_wr.full_r0 ;
  input [5:0]out;
  input [0:0]E;
  input [5:0]\count_r_reg[5]_0 ;
  input [0:0]\gen_rd.fifo_empty_r_reg_0 ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[0]_0 ;
  input \count_r_reg[2]_0 ;
  input [0:0]m_sc_recv;
  input \gen_rd.fifo_empty_r_reg_1 ;
  input [0:0]SR;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]SR;
  wire \count_r[0]_i_1__5_n_0 ;
  wire \count_r[1]_i_1__5_n_0 ;
  wire \count_r[2]_i_1__5_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire \count_r[5]_i_3__1_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_rd.fifo_empty_r_i_2__0_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3__0_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4__0_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5__0_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire [0:0]\gen_rd.fifo_empty_r_reg_0 ;
  wire \gen_rd.fifo_empty_r_reg_1 ;
  wire \gen_wr.full_r0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [5:0]out;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__5 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__5 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[1]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__5 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r[5]_i_3__1_n_0 ),
        .O(\count_r[5]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_3__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[5]_i_3__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__5_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__5_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__5_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(SR));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gen_rd.fifo_empty_r_i_1__0 
       (.I0(\gen_rd.fifo_empty_r_i_2__0_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3__0_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4__0_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5__0_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT5 #(
    .INIT(32'hE21D1DE2)) 
    \gen_rd.fifo_empty_r_i_2__0 
       (.I0(out[3]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\count_r_reg[5]_0 [3]),
        .I4(\count_r_reg[0]_0 ),
        .O(\gen_rd.fifo_empty_r_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hE2E21DE21D1DE21D)) 
    \gen_rd.fifo_empty_r_i_3__0 
       (.I0(out[0]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(m_sc_recv),
        .I4(\gen_rd.fifo_empty_r_reg_1 ),
        .I5(\count_r_reg[5]_0 [0]),
        .O(\gen_rd.fifo_empty_r_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h1DE2E21DE21DE21D)) 
    \gen_rd.fifo_empty_r_i_4__0 
       (.I0(out[1]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\count_r_reg[5]_0 [1]),
        .I4(\count_r_reg[5]_0 [0]),
        .I5(\gen_rd.fifo_empty_r_reg_0 ),
        .O(\gen_rd.fifo_empty_r_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h1DE2E21D)) 
    \gen_rd.fifo_empty_r_i_5__0 
       (.I0(out[2]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\count_r_reg[5]_0 [2]),
        .I4(\count_r_reg[1]_0 ),
        .O(\gen_rd.fifo_empty_r_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'hE21D1DE2)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(out[4]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r_reg[5]_0 [4]),
        .I4(\count_r_reg[2]_0 ),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hE21D1DE2E21DE21D)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(out[5]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(\count_r_reg[2]_0 ),
        .I5(\count_r_reg[5]_0 [4]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF7FFFFFFF)) 
    \gen_wr.full_r_inv_i_1__2 
       (.I0(\gen_rd.fifo_empty_r_i_2__0_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3__0_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4__0_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5__0_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_44
   (\gen_wr.afull_r0 ,
    \gen_rd.fifo_empty_r_reg_inv ,
    \gen_wr.full_r0 ,
    p_0_in2_out,
    \count_r_reg[3]_0 ,
    \count_r_reg[0]_0 ,
    \count_r_reg[2]_0 ,
    out,
    \gen_normal_area.m_sc_handshake0 ,
    \count_r_reg[5]_0 ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv,
    \count_r_reg[2]_1 ,
    areset_r,
    s_sc_aclk);
  output \gen_wr.afull_r0 ;
  output \gen_rd.fifo_empty_r_reg_inv ;
  output \gen_wr.full_r0 ;
  input [0:0]p_0_in2_out;
  input \count_r_reg[3]_0 ;
  input \count_r_reg[0]_0 ;
  input \count_r_reg[2]_0 ;
  input [3:0]out;
  input \gen_normal_area.m_sc_handshake0 ;
  input [5:0]\count_r_reg[5]_0 ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;
  input \count_r_reg[2]_1 ;
  input areset_r;
  input s_sc_aclk;

  wire areset_r;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1__1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_2__0_n_0 ;
  wire \count_r[5]_i_3_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[2]_1 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_rd.fifo_empty_r_inv_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_inv_i_10_n_0 ;
  wire \gen_wr.afull_r_inv_i_11_n_0 ;
  wire \gen_wr.afull_r_inv_i_2_n_0 ;
  wire \gen_wr.afull_r_inv_i_3_n_0 ;
  wire \gen_wr.afull_r_inv_i_4_n_0 ;
  wire \gen_wr.afull_r_inv_i_6_n_0 ;
  wire \gen_wr.afull_r_inv_i_7_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_inv_i_2_n_0 ;
  wire \gen_wr.full_r_inv_i_3_n_0 ;
  wire \gen_wr.full_r_inv_i_4_n_0 ;
  wire \gen_wr.full_r_inv_i_5_n_0 ;
  wire \gen_wr.full_r_inv_i_6_n_0 ;
  wire \gen_wr.full_r_inv_i_7_n_0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [3:0]out;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__0 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r[5]_i_3_n_0 ),
        .O(\count_r[5]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_3 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(p_0_in2_out),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[5]_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[1]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in2_out),
        .D(\count_r[5]_i_2__0_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(\gen_wr.full_r_inv_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_inv_i_2_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  LUT6 #(
    .INIT(64'h9A9A9A6565659A65)) 
    \gen_rd.fifo_empty_r_inv_i_2 
       (.I0(out[3]),
        .I1(\count_r_reg[2]_1 ),
        .I2(out[2]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(p_0_in2_out),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_rd.fifo_empty_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h350FF035F035350F)) 
    \gen_wr.afull_r_inv_i_1 
       (.I0(\gen_wr.afull_r_inv_i_2_n_0 ),
        .I1(\gen_wr.afull_r_inv_i_3_n_0 ),
        .I2(\gen_wr.afull_r_inv_i_4_n_0 ),
        .I3(\count_r_reg[3]_0 ),
        .I4(\gen_wr.afull_r_inv_i_6_n_0 ),
        .I5(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_wr.afull_r0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \gen_wr.afull_r_inv_i_10 
       (.I0(p_0_in2_out),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_inv_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h89F8F8981FF7F7F1)) 
    \gen_wr.afull_r_inv_i_11 
       (.I0(out[0]),
        .I1(\gen_normal_area.m_sc_handshake0 ),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(p_0_in2_out),
        .I5(out[1]),
        .O(\gen_wr.afull_r_inv_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h80FEE080F8E0FEF8)) 
    \gen_wr.afull_r_inv_i_2 
       (.I0(\gen_wr.afull_r_inv_i_7_n_0 ),
        .I1(\count_r_reg[0]_0 ),
        .I2(\count_r_reg[2]_0 ),
        .I3(\gen_wr.afull_r_inv_i_10_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB02B0200F2FFBF2B)) 
    \gen_wr.afull_r_inv_i_3 
       (.I0(\gen_wr.afull_r_inv_i_11_n_0 ),
        .I1(\count_r_reg[0]_0 ),
        .I2(\gen_wr.afull_r_inv_i_10_n_0 ),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\count_r_reg[2]_0 ),
        .O(\gen_wr.afull_r_inv_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2DD2D22D2DD22DD2)) 
    \gen_wr.afull_r_inv_i_4 
       (.I0(out[2]),
        .I1(\count_r_reg[2]_1 ),
        .I2(out[3]),
        .I3(\gen_wr.wr_addra_p1 [5]),
        .I4(\gen_wr.afull_r_inv_i_6_n_0 ),
        .I5(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_wr.afull_r_inv_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gen_wr.afull_r_inv_i_6 
       (.I0(p_0_in2_out),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_inv_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFF78607E607E78FF)) 
    \gen_wr.afull_r_inv_i_7 
       (.I0(out[0]),
        .I1(\gen_normal_area.m_sc_handshake0 ),
        .I2(out[1]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(p_0_in2_out),
        .O(\gen_wr.afull_r_inv_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(\gen_wr.full_r_inv_i_6_n_0 ),
        .I5(\gen_wr.full_r_inv_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
  LUT4 #(
    .INIT(16'hE21D)) 
    \gen_wr.full_r_inv_i_2 
       (.I0(\count_r_reg[5]_0 [4]),
        .I1(p_0_in2_out),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r_reg[3]_0 ),
        .O(\gen_wr.full_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA55AA5A5C33CC3C3)) 
    \gen_wr.full_r_inv_i_3 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\count_r_reg[5]_0 [0]),
        .I2(out[0]),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(m_sc_recv),
        .I5(p_0_in2_out),
        .O(\gen_wr.full_r_inv_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hE21D)) 
    \gen_wr.full_r_inv_i_4 
       (.I0(\count_r_reg[5]_0 [2]),
        .I1(p_0_in2_out),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\count_r_reg[0]_0 ),
        .O(\gen_wr.full_r_inv_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h1DE2E21DE21DE21D)) 
    \gen_wr.full_r_inv_i_5 
       (.I0(\count_r_reg[5]_0 [1]),
        .I1(p_0_in2_out),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(\gen_normal_area.m_sc_handshake0 ),
        .O(\gen_wr.full_r_inv_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hE21D)) 
    \gen_wr.full_r_inv_i_6 
       (.I0(\count_r_reg[5]_0 [3]),
        .I1(p_0_in2_out),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\count_r_reg[2]_0 ),
        .O(\gen_wr.full_r_inv_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6565659A9A9A659A)) 
    \gen_wr.full_r_inv_i_7 
       (.I0(out[3]),
        .I1(\count_r_reg[2]_1 ),
        .I2(out[2]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(p_0_in2_out),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.full_r_inv_i_7_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_49
   (\gen_wr.full_r_reg_inv ,
    \gen_wr.afull_r_reg ,
    \gen_rd.fifo_empty_r_reg_inv ,
    areset_r,
    p_0_in3_in,
    out,
    \count_r_reg[2]_0 ,
    \gen_AB_reg_slice.payld_o_reg[2] ,
    m_sc_recv,
    \count_r_reg[5]_0 ,
    \count_r_reg[0]_0 ,
    \gen_AB_reg_slice.payld_o_reg[2]_0 ,
    \count_r_reg[1]_0 ,
    \count_r_reg[1]_1 ,
    \count_r_reg[2]_1 ,
    \count_r_reg[3]_0 ,
    \count_r_reg[3]_1 ,
    \count_r_reg[4]_0 ,
    s_sc_aclk);
  output \gen_wr.full_r_reg_inv ;
  output \gen_wr.afull_r_reg ;
  output \gen_rd.fifo_empty_r_reg_inv ;
  input areset_r;
  input p_0_in3_in;
  input [5:0]out;
  input \count_r_reg[2]_0 ;
  input \gen_AB_reg_slice.payld_o_reg[2] ;
  input [0:0]m_sc_recv;
  input [5:0]\count_r_reg[5]_0 ;
  input \count_r_reg[0]_0 ;
  input \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[1]_1 ;
  input \count_r_reg[2]_1 ;
  input \count_r_reg[3]_0 ;
  input \count_r_reg[3]_1 ;
  input \count_r_reg[4]_0 ;
  input s_sc_aclk;

  wire areset_r;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1__1_n_0 ;
  wire \count_r[3]_i_1__1_n_0 ;
  wire \count_r[4]_i_1__2_n_0 ;
  wire \count_r[5]_i_1__2_n_0 ;
  wire \count_r[5]_i_2__4_n_0 ;
  wire \count_r[5]_i_3__1_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[1]_1 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[2]_1 ;
  wire \count_r_reg[3]_0 ;
  wire \count_r_reg[3]_1 ;
  wire \count_r_reg[4]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[2] ;
  wire \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.afull_r_i_10_n_0 ;
  wire \gen_wr.afull_r_i_12_n_0 ;
  wire \gen_wr.afull_r_i_13_n_0 ;
  wire \gen_wr.afull_r_i_16_n_0 ;
  wire \gen_wr.afull_r_i_2_n_0 ;
  wire \gen_wr.afull_r_i_3_n_0 ;
  wire \gen_wr.afull_r_i_4_n_0 ;
  wire \gen_wr.afull_r_i_5_n_0 ;
  wire \gen_wr.afull_r_i_6_n_0 ;
  wire \gen_wr.afull_r_i_8_n_0 ;
  wire \gen_wr.afull_r_i_9_n_0 ;
  wire \gen_wr.afull_r_reg ;
  wire \gen_wr.full_r_inv_i_2_n_0 ;
  wire \gen_wr.full_r_inv_i_3_n_0 ;
  wire \gen_wr.full_r_inv_i_4_n_0 ;
  wire \gen_wr.full_r_inv_i_5_n_0 ;
  wire \gen_wr.full_r_inv_i_6_n_0 ;
  wire \gen_wr.full_r_inv_i_7_n_0 ;
  wire \gen_wr.full_r_reg_inv ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [5:0]out;
  wire p_0_in3_in;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h5555AAA6AAAAAAA6)) 
    \count_r[5]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_2__4_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .I5(\count_r[5]_i_3__1_n_0 ),
        .O(\count_r[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \count_r[5]_i_2__4 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(p_0_in3_in),
        .O(\count_r[5]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \count_r[5]_i_3__1 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[5]_i_3__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_5_n_0 ),
        .I1(\gen_wr.full_r_inv_i_4_n_0 ),
        .I2(\gen_wr.full_r_inv_i_3_n_0 ),
        .I3(\gen_wr.full_r_inv_i_2_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  LUT6 #(
    .INIT(64'hFFFFFFFF05F20FF2)) 
    \gen_wr.afull_r_i_1 
       (.I0(\gen_wr.afull_r_i_2_n_0 ),
        .I1(\gen_wr.afull_r_i_3_n_0 ),
        .I2(\gen_wr.afull_r_i_4_n_0 ),
        .I3(\gen_wr.afull_r_i_5_n_0 ),
        .I4(\gen_wr.afull_r_i_6_n_0 ),
        .I5(areset_r),
        .O(\gen_wr.afull_r_reg ));
  LUT6 #(
    .INIT(64'h78FF7878FF78FFFF)) 
    \gen_wr.afull_r_i_10 
       (.I0(p_0_in3_in),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .I4(\count_r_reg[5]_0 [0]),
        .I5(\count_r_reg[5]_0 [1]),
        .O(\gen_wr.afull_r_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hEEB0B0BBB0BBB0BB)) 
    \gen_wr.afull_r_i_12 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\count_r_reg[1]_0 ),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(p_0_in3_in),
        .O(\gen_wr.afull_r_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h9555555555555555)) 
    \gen_wr.afull_r_i_13 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \gen_wr.afull_r_i_16 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hDEEE0BB00BB07BBB)) 
    \gen_wr.afull_r_i_2 
       (.I0(\count_r_reg[5]_0 [4]),
        .I1(\gen_wr.wr_addra_p1 [4]),
        .I2(\count_r_reg[5]_0 [3]),
        .I3(\count_r_reg[2]_1 ),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\gen_wr.afull_r_i_8_n_0 ),
        .O(\gen_wr.afull_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00080800AAAAAAAA)) 
    \gen_wr.afull_r_i_3 
       (.I0(\gen_wr.afull_r_i_9_n_0 ),
        .I1(\gen_wr.afull_r_i_10_n_0 ),
        .I2(\count_r_reg[0]_0 ),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .I5(\gen_wr.afull_r_i_12_n_0 ),
        .O(\gen_wr.afull_r_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr.afull_r_i_4 
       (.I0(\gen_wr.afull_r_i_13_n_0 ),
        .I1(\count_r_reg[4]_0 ),
        .O(\gen_wr.afull_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    \gen_wr.afull_r_i_5 
       (.I0(\count_r[5]_i_3__1_n_0 ),
        .I1(\gen_wr.wr_addra_p1 [4]),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(\count_r_reg[3]_1 ),
        .I4(\count_r_reg[5]_0 [4]),
        .I5(\count_r_reg[5]_0 [5]),
        .O(\gen_wr.afull_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hD55D0000FFFFFFFF)) 
    \gen_wr.afull_r_i_6 
       (.I0(\gen_wr.afull_r_i_10_n_0 ),
        .I1(\count_r_reg[0]_0 ),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(\gen_wr.afull_r_i_12_n_0 ),
        .I5(\gen_wr.afull_r_i_9_n_0 ),
        .O(\gen_wr.afull_r_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \gen_wr.afull_r_i_8 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_wr.afull_r_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFF9A82C382C39AFF)) 
    \gen_wr.afull_r_i_9 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.afull_r_i_16_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\count_r_reg[5]_0 [3]),
        .I4(\count_r_reg[1]_1 ),
        .I5(\count_r_reg[5]_0 [2]),
        .O(\gen_wr.afull_r_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h0000FFFD)) 
    \gen_wr.full_r_inv_i_1__0 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(areset_r),
        .O(\gen_wr.full_r_reg_inv ));
  LUT6 #(
    .INIT(64'h8787877878788778)) 
    \gen_wr.full_r_inv_i_2 
       (.I0(\count_r_reg[3]_1 ),
        .I1(\count_r_reg[5]_0 [4]),
        .I2(\count_r_reg[5]_0 [5]),
        .I3(out[5]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.full_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEFEEEFFFFEFFFEEE)) 
    \gen_wr.full_r_inv_i_3 
       (.I0(\gen_wr.full_r_inv_i_6_n_0 ),
        .I1(\gen_wr.full_r_inv_i_7_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(p_0_in3_in),
        .I4(out[2]),
        .I5(\count_r_reg[2]_0 ),
        .O(\gen_wr.full_r_inv_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h56A6)) 
    \gen_wr.full_r_inv_i_4 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[3]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.full_r_inv_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'h56A6)) 
    \gen_wr.full_r_inv_i_5 
       (.I0(\count_r_reg[4]_0 ),
        .I1(out[4]),
        .I2(p_0_in3_in),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_wr.full_r_inv_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8787877878788778)) 
    \gen_wr.full_r_inv_i_6 
       (.I0(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I1(m_sc_recv),
        .I2(\count_r_reg[5]_0 [0]),
        .I3(out[0]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_wr.full_r_inv_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h4B4B4BB4B4B44BB4)) 
    \gen_wr.full_r_inv_i_7 
       (.I0(\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .I1(\count_r_reg[5]_0 [0]),
        .I2(\count_r_reg[5]_0 [1]),
        .I3(out[1]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.full_r_inv_i_7_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_52
   (\gen_wr.full_r_reg_inv ,
    \gen_rd.fifo_empty_r_reg ,
    areset_r,
    out,
    p_0_in3_in,
    \count_r_reg[5]_0 ,
    E,
    \count_r_reg[1]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[3]_0 ,
    \gen_normal_area.fifo_send_ready ,
    \gen_rd.fifo_empty_r_reg_0 ,
    s_sc_aclk);
  output \gen_wr.full_r_reg_inv ;
  output \gen_rd.fifo_empty_r_reg ;
  input areset_r;
  input [5:0]out;
  input p_0_in3_in;
  input [5:0]\count_r_reg[5]_0 ;
  input [0:0]E;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[3]_0 ;
  input \gen_normal_area.fifo_send_ready ;
  input \gen_rd.fifo_empty_r_reg_0 ;
  input s_sc_aclk;

  wire [0:0]E;
  wire areset_r;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1__2_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1__0_n_0 ;
  wire \count_r[5]_i_2__1_n_0 ;
  wire \count_r[5]_i_4__1_n_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_rd.fifo_empty_r_reg_0 ;
  wire \gen_wr.full_r_reg_inv ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [5:0]out;
  wire p_0_in3_in;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[3]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h7F80FF00)) 
    \count_r[4]_i_1__0 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \count_r[5]_i_2__1 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\count_r[5]_i_4__1_n_0 ),
        .O(\count_r[5]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \count_r[5]_i_4__1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(p_0_in3_in),
        .O(\count_r[5]_i_4__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[1]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[4]_i_1__0_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(p_0_in3_in),
        .D(\count_r[5]_i_2__1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_8_n_0 ),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2D222DDDD2DDD222)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(\count_r_reg[5]_0 [4]),
        .I1(\count_r_reg[3]_0 ),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(p_0_in3_in),
        .I4(out[5]),
        .I5(\count_r_reg[5]_0 [5]),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(\count_r_reg[3]_0 ),
        .I1(\count_r_reg[5]_0 [4]),
        .I2(out[4]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(\count_r_reg[1]_0 ),
        .I1(\count_r_reg[5]_0 [2]),
        .I2(out[2]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hE21D1D1D1DE2E2E2)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(out[1]),
        .I1(p_0_in3_in),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(E),
        .I5(\count_r_reg[5]_0 [1]),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h2D2D2DD2D2D22DD2)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(\gen_normal_area.fifo_send_ready ),
        .I1(\gen_rd.fifo_empty_r_reg_0 ),
        .I2(\count_r_reg[5]_0 [0]),
        .I3(out[0]),
        .I4(p_0_in3_in),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\count_r_reg[5]_0 [3]),
        .I2(out[3]),
        .I3(p_0_in3_in),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I2(areset_r),
        .O(\gen_wr.full_r_reg_inv ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_58
   (\gen_rd.fifo_empty_r_reg ,
    \gen_wr.full_r0 ,
    \gen_rd.fifo_empty_r_reg_0 ,
    m_sc_recv,
    out,
    \count_r_reg[5]_0 ,
    E,
    \gen_rd.fifo_empty_r_reg_1 ,
    \count_r_reg[1]_0 ,
    \count_r_reg[2]_0 ,
    \count_r_reg[3]_0 ,
    areset_r_reg,
    s_sc_aclk);
  output \gen_rd.fifo_empty_r_reg ;
  output \gen_wr.full_r0 ;
  input \gen_rd.fifo_empty_r_reg_0 ;
  input [0:0]m_sc_recv;
  input [5:0]out;
  input [5:0]\count_r_reg[5]_0 ;
  input [0:0]E;
  input \gen_rd.fifo_empty_r_reg_1 ;
  input \count_r_reg[1]_0 ;
  input \count_r_reg[2]_0 ;
  input \count_r_reg[3]_0 ;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__2_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire \count_r[5]_i_3__1_n_0 ;
  wire \count_r[5]_i_4_n_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_rd.fifo_empty_r_reg_0 ;
  wire \gen_rd.fifo_empty_r_reg_1 ;
  wire \gen_wr.full_r0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [0:0]m_sc_recv;
  wire [5:0]out;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__2 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [0]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h6A6AA9AAAAAAA9AA)) 
    \count_r[5]_i_2__3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\count_r[5]_i_3__1_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .I5(\count_r[5]_i_4_n_0 ),
        .O(\count_r[5]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \count_r[5]_i_3__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[5]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \count_r[5]_i_4 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[5]_i_4_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__2_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(\count_r_reg[2]_0 ),
        .I1(out[3]),
        .I2(\count_r_reg[5]_0 [3]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h4B4B4BB4B4B44BB4)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(\gen_rd.fifo_empty_r_reg_0 ),
        .I1(m_sc_recv),
        .I2(out[0]),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(E),
        .I5(\gen_wr.wr_addra_p1 [0]),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2D2D2DD2D2D22DD2)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(out[0]),
        .I1(\gen_rd.fifo_empty_r_reg_1 ),
        .I2(out[1]),
        .I3(\count_r_reg[5]_0 [1]),
        .I4(E),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(\count_r_reg[1]_0 ),
        .I1(out[2]),
        .I2(\count_r_reg[5]_0 [2]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h99966696)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[4]),
        .I2(\count_r_reg[5]_0 [4]),
        .I3(E),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h2D222DDDD2DDD222)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(out[4]),
        .I1(\count_r_reg[3]_0 ),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(E),
        .I4(\count_r_reg[5]_0 [5]),
        .I5(out[5]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFFFFFF)) 
    \gen_wr.full_r_inv_i_1__0 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_61
   (\gen_rd.fifo_empty_r_reg_inv ,
    \gen_wr.full_r0 ,
    \gen_wr.afull_r0 ,
    Q,
    out,
    \count_r_reg[3]_0 ,
    \count_r_reg[5]_0 ,
    \grant_i_reg[2] ,
    \count_r_reg[2]_0 ,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    \count_r_reg[1]_0 ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv,
    \grant_i_reg[2]_0 ,
    s_sc_send,
    \count_r_reg[3]_1 ,
    \count_r_reg[2]_1 ,
    \gen_rd.fifo_empty_r_reg ,
    areset_r_reg,
    E,
    s_sc_aclk);
  output \gen_rd.fifo_empty_r_reg_inv ;
  output \gen_wr.full_r0 ;
  output \gen_wr.afull_r0 ;
  output [0:0]Q;
  input [4:0]out;
  input \count_r_reg[3]_0 ;
  input [5:0]\count_r_reg[5]_0 ;
  input \grant_i_reg[2] ;
  input \count_r_reg[2]_0 ;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input \count_r_reg[1]_0 ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;
  input \grant_i_reg[2]_0 ;
  input [0:0]s_sc_send;
  input \count_r_reg[3]_1 ;
  input \count_r_reg[2]_1 ;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r[3]_i_1_n_0 ;
  wire \count_r[4]_i_1_n_0 ;
  wire \count_r[5]_i_1__3_n_0 ;
  wire \count_r[5]_i_2_n_0 ;
  wire \count_r[5]_i_3__0_n_0 ;
  wire \count_r_reg[1]_0 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[2]_1 ;
  wire \count_r_reg[3]_0 ;
  wire \count_r_reg[3]_1 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_rd.fifo_empty_r_reg_inv ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_i_14_n_0 ;
  wire \gen_wr.afull_r_i_16_n_0 ;
  wire \gen_wr.afull_r_i_2_n_0 ;
  wire \gen_wr.afull_r_i_3_n_0 ;
  wire \gen_wr.afull_r_i_4_n_0 ;
  wire \gen_wr.afull_r_i_5_n_0 ;
  wire \gen_wr.afull_r_i_6_n_0 ;
  wire \gen_wr.afull_r_i_7_n_0 ;
  wire \gen_wr.afull_r_i_8_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_inv_i_2_n_0 ;
  wire \gen_wr.full_r_inv_i_3_n_0 ;
  wire \gen_wr.full_r_inv_i_4_n_0 ;
  wire \gen_wr.full_r_inv_i_5_n_0 ;
  wire \gen_wr.full_r_inv_i_6_n_0 ;
  wire \gen_wr.full_r_inv_i_7_n_0 ;
  wire [5:1]\gen_wr.wr_addra_p1 ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire [0:0]m_sc_recv;
  wire [4:0]out;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1 
       (.I0(Q),
        .O(\count_r[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(Q),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(Q),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h78F0)) 
    \count_r[3]_i_1 
       (.I0(Q),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAA9A)) 
    \count_r[4]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\grant_i_reg[2] ),
        .I3(Q),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\count_r[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6A6A6A656A6A6A6A)) 
    \count_r[5]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\count_r[5]_i_2_n_0 ),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_wr.wr_addra_p1 [3]),
        .I5(\count_r[5]_i_3__0_n_0 ),
        .O(\count_r[5]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_r[5]_i_2 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(Q),
        .I3(\grant_i_reg[2]_0 ),
        .I4(s_sc_send),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h0015)) 
    \count_r[5]_i_3__0 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(\grant_i_reg[2]_0 ),
        .I2(s_sc_send),
        .I3(Q),
        .O(\count_r[5]_i_3__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(Q),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \gen_rd.fifo_empty_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(\gen_wr.full_r_inv_i_6_n_0 ),
        .I5(\gen_wr.full_r_inv_i_7_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg_inv ));
  LUT6 #(
    .INIT(64'h4CCC7CCC3C3C3C3C)) 
    \gen_wr.afull_r_i_1 
       (.I0(\gen_wr.afull_r_i_2_n_0 ),
        .I1(\gen_wr.afull_r_i_3_n_0 ),
        .I2(\gen_wr.afull_r_i_4_n_0 ),
        .I3(\gen_wr.afull_r_i_5_n_0 ),
        .I4(\gen_wr.afull_r_i_6_n_0 ),
        .I5(\gen_wr.afull_r_i_7_n_0 ),
        .O(\gen_wr.afull_r0 ));
  LUT6 #(
    .INIT(64'h004B4B4B4B000000)) 
    \gen_wr.afull_r_i_14 
       (.I0(\gen_normal_area.fifo_node_payld_empty ),
        .I1(m_sc_recv),
        .I2(out[0]),
        .I3(\grant_i_reg[2]_0 ),
        .I4(s_sc_send),
        .I5(Q),
        .O(\gen_wr.afull_r_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gen_wr.afull_r_i_16 
       (.I0(\gen_wr.wr_addra_p1 [1]),
        .I1(s_sc_send),
        .I2(\grant_i_reg[2]_0 ),
        .I3(Q),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\gen_wr.afull_r_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h5FF5DFFD05D0CD5C)) 
    \gen_wr.afull_r_i_2 
       (.I0(\gen_wr.afull_r_i_8_n_0 ),
        .I1(\count_r_reg[2]_0 ),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .I5(\count_r_reg[1]_0 ),
        .O(\gen_wr.afull_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    \gen_wr.afull_r_i_3 
       (.I0(out[3]),
        .I1(\count_r_reg[3]_0 ),
        .I2(out[4]),
        .I3(\count_r[5]_i_2_n_0 ),
        .I4(\gen_wr.wr_addra_p1 [4]),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.afull_r_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h9FF9)) 
    \gen_wr.afull_r_i_4 
       (.I0(\count_r[5]_i_2_n_0 ),
        .I1(\gen_wr.wr_addra_p1 [4]),
        .I2(\count_r_reg[3]_0 ),
        .I3(out[3]),
        .O(\gen_wr.afull_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hD0DDEED0D0DDD0DD)) 
    \gen_wr.afull_r_i_5 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\count_r_reg[3]_1 ),
        .I2(\count_r_reg[2]_0 ),
        .I3(\gen_wr.wr_addra_p1 [2]),
        .I4(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I5(\gen_wr.wr_addra_p1 [1]),
        .O(\gen_wr.afull_r_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hD00000D0DD70D0DD)) 
    \gen_wr.afull_r_i_6 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.afull_r_i_14_n_0 ),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(\gen_wr.wr_addra_p1 [1]),
        .I5(\count_r_reg[1]_0 ),
        .O(\gen_wr.afull_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFF9581C3C381FF95)) 
    \gen_wr.afull_r_i_7 
       (.I0(out[3]),
        .I1(\count_r_reg[2]_1 ),
        .I2(out[2]),
        .I3(\gen_wr.wr_addra_p1 [4]),
        .I4(\gen_wr.afull_r_i_16_n_0 ),
        .I5(\gen_wr.wr_addra_p1 [3]),
        .O(\gen_wr.afull_r_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h4BFFFFFFFF4B4B4B)) 
    \gen_wr.afull_r_i_8 
       (.I0(\gen_normal_area.fifo_node_payld_empty ),
        .I1(m_sc_recv),
        .I2(out[0]),
        .I3(\grant_i_reg[2]_0 ),
        .I4(s_sc_send),
        .I5(Q),
        .O(\gen_wr.afull_r_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFFFFFF)) 
    \gen_wr.full_r_inv_i_1 
       (.I0(\gen_wr.full_r_inv_i_2_n_0 ),
        .I1(\gen_wr.full_r_inv_i_3_n_0 ),
        .I2(\gen_wr.full_r_inv_i_4_n_0 ),
        .I3(\gen_wr.full_r_inv_i_5_n_0 ),
        .I4(\gen_wr.full_r_inv_i_6_n_0 ),
        .I5(\gen_wr.full_r_inv_i_7_n_0 ),
        .O(\gen_wr.full_r0 ));
  LUT5 #(
    .INIT(32'h65556AAA)) 
    \gen_wr.full_r_inv_i_2 
       (.I0(\count_r_reg[3]_1 ),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(s_sc_send),
        .I3(\grant_i_reg[2]_0 ),
        .I4(\count_r_reg[5]_0 [3]),
        .O(\gen_wr.full_r_inv_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h47B84747B847B8B8)) 
    \gen_wr.full_r_inv_i_3 
       (.I0(\count_r_reg[5]_0 [0]),
        .I1(\grant_i_reg[2] ),
        .I2(Q),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(m_sc_recv),
        .I5(out[0]),
        .O(\gen_wr.full_r_inv_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2D2D2DD2D2D22DD2)) 
    \gen_wr.full_r_inv_i_4 
       (.I0(out[0]),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .I2(out[1]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\grant_i_reg[2] ),
        .I5(\count_r_reg[5]_0 [1]),
        .O(\gen_wr.full_r_inv_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h65556AAA)) 
    \gen_wr.full_r_inv_i_5 
       (.I0(\count_r_reg[2]_0 ),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(s_sc_send),
        .I3(\grant_i_reg[2]_0 ),
        .I4(\count_r_reg[5]_0 [2]),
        .O(\gen_wr.full_r_inv_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6966666669999999)) 
    \gen_wr.full_r_inv_i_6 
       (.I0(\count_r_reg[3]_0 ),
        .I1(out[3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(s_sc_send),
        .I4(\grant_i_reg[2]_0 ),
        .I5(\count_r_reg[5]_0 [4]),
        .O(\gen_wr.full_r_inv_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8778878787787878)) 
    \gen_wr.full_r_inv_i_7 
       (.I0(out[3]),
        .I1(\count_r_reg[3]_0 ),
        .I2(out[4]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(\grant_i_reg[2] ),
        .I5(\gen_wr.wr_addra_p1 [5]),
        .O(\gen_wr.full_r_inv_i_7_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_8
   (\gen_wr.full_r0 ,
    \gen_rd.fifo_empty_r_reg ,
    out,
    E,
    \count_r_reg[3]_0 ,
    \state_reg[s_ready_i] ,
    \count_r_reg[5]_0 ,
    \count_r_reg[0]_0 ,
    \count_r_reg[0]_1 ,
    \count_r_reg[2]_0 ,
    SR,
    areset_r_reg,
    s_sc_aclk);
  output \gen_wr.full_r0 ;
  output \gen_rd.fifo_empty_r_reg ;
  input [5:0]out;
  input [0:0]E;
  input \count_r_reg[3]_0 ;
  input \state_reg[s_ready_i] ;
  input [5:0]\count_r_reg[5]_0 ;
  input \count_r_reg[0]_0 ;
  input \count_r_reg[0]_1 ;
  input \count_r_reg[2]_0 ;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1__3_n_0 ;
  wire \count_r[2]_i_1__3_n_0 ;
  wire \count_r[3]_i_1__3_n_0 ;
  wire \count_r[4]_i_1__3_n_0 ;
  wire \count_r[5]_i_2__3_n_0 ;
  wire \count_r[5]_i_3__1_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire \count_r_reg[0]_1 ;
  wire \count_r_reg[2]_0 ;
  wire \count_r_reg[3]_0 ;
  wire [5:0]\count_r_reg[5]_0 ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_rd.fifo_empty_r_i_6_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_inv_i_3__0_n_0 ;
  wire \gen_wr.full_r_inv_i_4__0_n_0 ;
  wire [5:0]\gen_wr.wr_addra_p1 ;
  wire [5:0]out;
  wire s_sc_aclk;
  wire \state_reg[s_ready_i] ;

  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \count_r[3]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [3]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \count_r[4]_i_1__3 
       (.I0(\gen_wr.wr_addra_p1 [4]),
        .I1(\gen_wr.wr_addra_p1 [2]),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\gen_wr.wr_addra_p1 [1]),
        .I4(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[4]_i_1__3_n_0 ));
  LUT4 #(
    .INIT(16'h6AA9)) 
    \count_r[5]_i_2__3 
       (.I0(\gen_wr.wr_addra_p1 [5]),
        .I1(\gen_wr.wr_addra_p1 [3]),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r[5]_i_3__1_n_0 ),
        .O(\count_r[5]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h80FF00FE)) 
    \count_r[5]_i_3__1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\gen_wr.wr_addra_p1 [3]),
        .I4(\gen_wr.wr_addra_p1 [2]),
        .O(\count_r[5]_i_3__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[1]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[2]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[3] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[3]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [3]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[4] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[4]_i_1__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [4]),
        .R(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[5] 
       (.C(s_sc_aclk),
        .CE(E),
        .D(\count_r[5]_i_2__3_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [5]),
        .R(areset_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .I2(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I3(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I4(\gen_rd.fifo_empty_r_i_6_n_0 ),
        .I5(SR),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT6 #(
    .INIT(64'hE21D1DE2E21DE21D)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(out[5]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [5]),
        .I3(\count_r_reg[5]_0 [5]),
        .I4(\count_r_reg[2]_0 ),
        .I5(\count_r_reg[5]_0 [4]),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hE21D1DE2)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(out[3]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [3]),
        .I3(\count_r_reg[5]_0 [3]),
        .I4(\count_r_reg[0]_1 ),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h47B8B84700000000)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(out[0]),
        .I3(\state_reg[s_ready_i] ),
        .I4(\count_r_reg[5]_0 [0]),
        .I5(\gen_rd.fifo_empty_r_i_9_n_0 ),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hE21DE21D1DE2E21D)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(out[2]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(\count_r_reg[5]_0 [2]),
        .I4(\count_r_reg[5]_0 [1]),
        .I5(\count_r_reg[0]_0 ),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hE21D1DE2)) 
    \gen_rd.fifo_empty_r_i_6 
       (.I0(out[4]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r_reg[5]_0 [4]),
        .I4(\count_r_reg[2]_0 ),
        .O(\gen_rd.fifo_empty_r_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h1DE2E21DE21DE21D)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(out[1]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(\count_r_reg[5]_0 [1]),
        .I4(\count_r_reg[5]_0 [0]),
        .I5(\state_reg[s_ready_i] ),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF1DE2FFFF)) 
    \gen_wr.full_r_inv_i_1__0 
       (.I0(out[4]),
        .I1(E),
        .I2(\gen_wr.wr_addra_p1 [4]),
        .I3(\count_r_reg[3]_0 ),
        .I4(\gen_wr.full_r_inv_i_3__0_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .O(\gen_wr.full_r0 ));
  LUT6 #(
    .INIT(64'h8228000000000000)) 
    \gen_wr.full_r_inv_i_3__0 
       (.I0(\gen_rd.fifo_empty_r_i_5_n_0 ),
        .I1(\gen_wr.full_r_inv_i_4__0_n_0 ),
        .I2(\state_reg[s_ready_i] ),
        .I3(\count_r_reg[5]_0 [0]),
        .I4(\gen_rd.fifo_empty_r_i_9_n_0 ),
        .I5(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .O(\gen_wr.full_r_inv_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \gen_wr.full_r_inv_i_4__0 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(E),
        .I2(out[0]),
        .O(\gen_wr.full_r_inv_i_4__0_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized3
   (\gen_mem_rep[0].rd_addrb ,
    in0,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    s_axis_arb_tdata,
    \gen_rd.fifo_empty_r_reg ,
    \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ,
    s_axis_arb_tvalid,
    s_sc_send,
    rstb,
    s_sc_aclk);
  output \gen_mem_rep[0].rd_addrb ;
  output [1:0]in0;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]s_axis_arb_tdata;
  input \gen_rd.fifo_empty_r_reg ;
  input \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  input s_axis_arb_tvalid;
  input [0:0]s_sc_send;
  input rstb;
  input s_sc_aclk;

  wire \count_r[0]_i_1_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_mem_rep[0].rd_addrb ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  wire [1:0]in0;
  wire rstb;
  wire [0:0]s_axis_arb_tdata;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;

  LUT6 #(
    .INIT(64'hDFFFFFFF20000000)) 
    \count_r[0]_i_1 
       (.I0(s_axis_arb_tdata),
        .I1(\gen_rd.fifo_empty_r_reg ),
        .I2(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .I3(s_axis_arb_tvalid),
        .I4(s_sc_send),
        .I5(\gen_mem_rep[0].rd_addrb ),
        .O(\count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_r[1]_i_1 
       (.I0(\gen_mem_rep[0].rd_addrb ),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(in0[0]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_r[2]_i_1 
       (.I0(\gen_mem_rep[0].rd_addrb ),
        .I1(in0[0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(in0[1]),
        .O(\count_r[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\count_r[0]_i_1_n_0 ),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(in0[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(in0[1]),
        .R(rstb));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized3_37
   (Q,
    rstb,
    s_sc_req,
    s_sc_aclk);
  output [2:0]Q;
  input rstb;
  input [0:0]s_sc_req;
  input s_sc_aclk;

  wire [2:0]Q;
  wire \count_r[0]_i_1__6_n_0 ;
  wire \count_r[1]_i_1__0_n_0 ;
  wire \count_r[2]_i_1__0_n_0 ;
  wire rstb;
  wire s_sc_aclk;
  wire [0:0]s_sc_req;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__6 
       (.I0(Q[0]),
        .O(\count_r[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_r[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1__0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\count_r[2]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[0]_i_1__6_n_0 ),
        .Q(Q[0]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(rstb));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_counter" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized4
   (\gen_wr.full_r0 ,
    \gen_rd.fifo_empty_r_reg ,
    out,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    s_sc_req,
    \count_r_reg[2]_0 ,
    \count_r_reg[0]_0 ,
    rstb,
    s_sc_aclk);
  output \gen_wr.full_r0 ;
  output \gen_rd.fifo_empty_r_reg ;
  input [2:0]out;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]s_sc_req;
  input [2:0]\count_r_reg[2]_0 ;
  input \count_r_reg[0]_0 ;
  input rstb;
  input s_sc_aclk;

  wire \count_r[0]_i_1__4_n_0 ;
  wire \count_r[1]_i_1_n_0 ;
  wire \count_r[2]_i_1_n_0 ;
  wire \count_r_reg[0]_0 ;
  wire [2:0]\count_r_reg[2]_0 ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_rd.fifo_empty_r_i_2_n_0 ;
  wire \gen_rd.fifo_empty_r_i_3_n_0 ;
  wire \gen_rd.fifo_empty_r_i_4_n_0 ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_wr.full_r0 ;
  wire [2:0]\gen_wr.wr_addra_p1 ;
  wire [2:0]out;
  wire rstb;
  wire s_sc_aclk;
  wire [0:0]s_sc_req;

  LUT1 #(
    .INIT(2'h1)) 
    \count_r[0]_i_1__4 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .O(\count_r[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_r[1]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [0]),
        .I1(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \count_r[2]_i_1 
       (.I0(\gen_wr.wr_addra_p1 [2]),
        .I1(\gen_wr.wr_addra_p1 [0]),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .O(\count_r[2]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_r_reg[0] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[0]_i_1__4_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [0]),
        .S(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[1] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[1]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [1]),
        .R(rstb));
  FDRE #(
    .INIT(1'b0)) 
    \count_r_reg[2] 
       (.C(s_sc_aclk),
        .CE(s_sc_req),
        .D(\count_r[2]_i_1_n_0 ),
        .Q(\gen_wr.wr_addra_p1 [2]),
        .R(rstb));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \gen_rd.fifo_empty_r_i_1 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .O(\gen_rd.fifo_empty_r_reg ));
  LUT6 #(
    .INIT(64'h2882282828828282)) 
    \gen_rd.fifo_empty_r_i_2 
       (.I0(\gen_rd.fifo_empty_r_i_4_n_0 ),
        .I1(out[0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(\gen_wr.wr_addra_p1 [0]),
        .I4(s_sc_req),
        .I5(\count_r_reg[2]_0 [0]),
        .O(\gen_rd.fifo_empty_r_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE21D1DE2E21DE21D)) 
    \gen_rd.fifo_empty_r_i_3 
       (.I0(\count_r_reg[2]_0 [2]),
        .I1(s_sc_req),
        .I2(\gen_wr.wr_addra_p1 [2]),
        .I3(out[2]),
        .I4(\count_r_reg[0]_0 ),
        .I5(out[1]),
        .O(\gen_rd.fifo_empty_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1DE2E21DE21DE21D)) 
    \gen_rd.fifo_empty_r_i_4 
       (.I0(\count_r_reg[2]_0 [1]),
        .I1(s_sc_req),
        .I2(\gen_wr.wr_addra_p1 [1]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(\gen_AB_reg_slice.payld_o_reg[0] ),
        .O(\gen_rd.fifo_empty_r_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'hD)) 
    \gen_wr.full_r_inv_i_1__0 
       (.I0(\gen_rd.fifo_empty_r_i_2_n_0 ),
        .I1(\gen_rd.fifo_empty_r_i_3_n_0 ),
        .O(\gen_wr.full_r0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline
   (s_sc_recv,
    ingress_valid,
    arb_stall,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output ingress_valid;
  input arb_stall;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall;
  wire arb_stall_late;
  wire ingress_valid;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(arb_stall),
        .Q(arb_stall_late),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_w_ch.accum[first_offset][6]_i_2 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .O(ingress_valid));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \s_sc_recv[0]_INST_0 
       (.I0(arb_stall_late),
        .O(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_12
   (s_sc_recv,
    p_0_in3_in,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output p_0_in3_in;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall_late;
  wire \gen_wr.afull_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \inst_mi_handler/ingress_valid ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  LUT1 #(
    .INIT(2'h2)) 
    \count_r[5]_i_1__4 
       (.I0(\inst_mi_handler/ingress_valid ),
        .O(p_0_in3_in));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_3__1 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .O(\inst_mi_handler/ingress_valid ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r ),
        .Q(arb_stall_late),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \s_sc_recv[0]_INST_0 
       (.I0(arb_stall_late),
        .O(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_36
   (\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ,
    \gen_pipe[1].pipe_reg[1][0]_0 ,
    s_sc_recv,
    allow_transfer,
    s_sc_aclk,
    s_sc_send,
    s_axis_arb_tvalid,
    p_0_out,
    s_axis_arb_tdata);
  output \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  output \gen_pipe[1].pipe_reg[1][0]_0 ;
  output [0:0]s_sc_recv;
  input allow_transfer;
  input s_sc_aclk;
  input [0:0]s_sc_send;
  input s_axis_arb_tvalid;
  input p_0_out;
  input [0:0]s_axis_arb_tdata;

  wire allow_transfer;
  wire \gen_pipe[1].pipe_reg[1][0]_0 ;
  wire \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  wire p_0_out;
  wire [0:0]s_axis_arb_tdata;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \count_r[5]_i_1__0 
       (.I0(s_sc_send),
        .I1(s_axis_arb_tvalid),
        .I2(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .I3(p_0_out),
        .I4(s_axis_arb_tdata),
        .O(\gen_pipe[1].pipe_reg[1][0]_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(allow_transfer),
        .Q(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \s_sc_recv[2]_INST_0 
       (.I0(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .I1(s_axis_arb_tvalid),
        .I2(p_0_out),
        .I3(s_axis_arb_tdata),
        .O(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_38
   (E,
    SR,
    p_0_in2_out,
    s_sc_aclk);
  output [0:0]E;
  input [0:0]SR;
  input [0:0]p_0_in2_out;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]SR;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire ingress_valid;
  wire [0:0]p_0_in2_out;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h2)) 
    \count_r[5]_i_1__4 
       (.I0(ingress_valid),
        .O(E));
  (* RTL_MAX_FANOUT = "found" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(p_0_in2_out),
        .Q(ingress_valid),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_4
   (arb_stall_late,
    s_sc_valid,
    s_sc_recv,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output arb_stall_late;
  output s_sc_valid;
  output [0:0]s_sc_recv;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall_late;
  wire \gen_wr.afull_r ;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;
  wire s_sc_valid;

  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_1__0 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .O(s_sc_valid));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r ),
        .Q(arb_stall_late),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \s_sc_recv[0]_INST_0 
       (.I0(arb_stall_late),
        .O(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_46
   (s_sc_recv,
    p_0_in3_in,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_send);
  output [0:0]s_sc_recv;
  output p_0_in3_in;
  input \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]s_sc_send;

  wire arb_stall_late;
  wire \gen_wr.afull_r ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire \inst_mi_handler/ingress_valid ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;
  wire [0:0]s_sc_send;

  LUT1 #(
    .INIT(2'h2)) 
    \count_r[5]_i_1__4 
       (.I0(\inst_mi_handler/ingress_valid ),
        .O(p_0_in3_in));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \count_r[5]_i_3__2 
       (.I0(s_sc_send),
        .I1(arb_stall_late),
        .O(\inst_mi_handler/ingress_valid ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r ),
        .Q(arb_stall_late),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \s_sc_recv[0]_INST_0 
       (.I0(arb_stall_late),
        .O(s_sc_recv));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_5
   (E,
    areset_r_reg,
    s_sc_valid,
    s_sc_aclk);
  output [0:0]E;
  input [0:0]areset_r_reg;
  input s_sc_valid;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire ingress_valid;
  wire s_sc_aclk;
  wire s_sc_valid;

  LUT1 #(
    .INIT(2'h2)) 
    \count_r[5]_i_1__4 
       (.I0(ingress_valid),
        .O(E));
  (* RTL_MAX_FANOUT = "found" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_valid),
        .Q(ingress_valid),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline_55
   (\count_r_reg[5] ,
    areset_r_reg,
    E,
    s_sc_aclk);
  output [0:0]\count_r_reg[5] ;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input s_sc_aclk;

  wire [0:0]E;
  wire [0:0]areset_r_reg;
  wire [0:0]\count_r_reg[5] ;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire ingress_valid;
  wire s_sc_aclk;

  LUT1 #(
    .INIT(2'h2)) 
    \count_r[5]_i_1__4 
       (.I0(ingress_valid),
        .O(\count_r_reg[5] ));
  (* RTL_MAX_FANOUT = "found" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(E),
        .Q(ingress_valid),
        .R(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized11
   (m_sc_payld,
    s_sc_payld,
    m_sc_recv,
    aclk);
  output [138:0]m_sc_payld;
  input [138:0]s_sc_payld;
  input [0:0]m_sc_recv;
  input aclk;

  wire aclk;
  wire [0:0]\gen_mi[0].m_sc_sel_mi_r ;
  wire \gen_pipe[1].pipe[1][100]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][101]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][102]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][103]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][104]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][105]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][106]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][107]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][108]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][109]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][10]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][110]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][111]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][112]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][113]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][114]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][115]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][116]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][117]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][118]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][119]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][11]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][120]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][121]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][122]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][123]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][124]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][125]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][126]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][127]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][128]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][129]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][12]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][130]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][131]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][132]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][133]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][134]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][135]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][136]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][137]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][138]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][139]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][139]_i_2_n_0 ;
  wire \gen_pipe[1].pipe[1][13]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][14]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][15]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][16]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][17]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][18]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][19]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][1]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][20]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][21]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][22]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][23]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][24]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][25]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][26]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][27]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][28]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][29]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][2]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][30]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][31]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][32]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][33]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][34]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][35]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][36]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][37]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][38]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][39]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][3]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][40]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][41]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][42]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][43]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][44]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][45]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][46]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][47]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][48]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][49]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][4]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][50]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][51]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][52]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][53]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][54]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][55]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][56]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][57]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][58]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][59]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][5]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][60]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][61]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][62]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][63]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][64]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][65]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][66]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][67]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][68]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][69]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][6]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][70]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][71]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][72]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][73]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][74]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][75]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][76]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][77]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][78]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][79]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][7]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][80]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][81]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][82]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][83]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][84]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][85]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][86]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][87]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][88]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][89]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][8]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][90]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][91]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][92]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][93]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][94]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][95]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][96]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][97]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][98]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][99]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][9]_i_1_n_0 ;
  wire [138:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [138:0]s_sc_payld;

  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][100]_i_1 
       (.I0(s_sc_payld[99]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][100]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][101]_i_1 
       (.I0(s_sc_payld[100]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][101]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][102]_i_1 
       (.I0(s_sc_payld[101]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][102]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][103]_i_1 
       (.I0(s_sc_payld[102]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][103]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][104]_i_1 
       (.I0(s_sc_payld[103]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][104]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][105]_i_1 
       (.I0(s_sc_payld[104]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][105]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][106]_i_1 
       (.I0(s_sc_payld[105]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][106]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][107]_i_1 
       (.I0(s_sc_payld[106]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][107]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][108]_i_1 
       (.I0(s_sc_payld[107]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][108]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][109]_i_1 
       (.I0(s_sc_payld[108]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][109]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][10]_i_1 
       (.I0(s_sc_payld[9]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][110]_i_1 
       (.I0(s_sc_payld[109]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][110]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][111]_i_1 
       (.I0(s_sc_payld[110]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][111]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][112]_i_1 
       (.I0(s_sc_payld[111]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][112]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][113]_i_1 
       (.I0(s_sc_payld[112]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][113]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][114]_i_1 
       (.I0(s_sc_payld[113]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][114]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][115]_i_1 
       (.I0(s_sc_payld[114]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][115]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][116]_i_1 
       (.I0(s_sc_payld[115]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][116]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][117]_i_1 
       (.I0(s_sc_payld[116]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][117]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][118]_i_1 
       (.I0(s_sc_payld[117]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][118]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][119]_i_1 
       (.I0(s_sc_payld[118]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][119]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][11]_i_1 
       (.I0(s_sc_payld[10]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][120]_i_1 
       (.I0(s_sc_payld[119]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][120]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][121]_i_1 
       (.I0(s_sc_payld[120]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][121]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][122]_i_1 
       (.I0(s_sc_payld[121]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][122]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][123]_i_1 
       (.I0(s_sc_payld[122]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][123]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][124]_i_1 
       (.I0(s_sc_payld[123]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][124]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][125]_i_1 
       (.I0(s_sc_payld[124]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][125]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][126]_i_1 
       (.I0(s_sc_payld[125]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][126]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][127]_i_1 
       (.I0(s_sc_payld[126]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][127]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][128]_i_1 
       (.I0(s_sc_payld[127]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][128]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][129]_i_1 
       (.I0(s_sc_payld[128]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][129]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][12]_i_1 
       (.I0(s_sc_payld[11]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][130]_i_1 
       (.I0(s_sc_payld[129]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][130]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][131]_i_1 
       (.I0(s_sc_payld[130]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][131]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][132]_i_1 
       (.I0(s_sc_payld[131]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][132]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][133]_i_1 
       (.I0(s_sc_payld[132]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][133]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][134]_i_1 
       (.I0(s_sc_payld[133]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][134]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][135]_i_1 
       (.I0(s_sc_payld[134]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][135]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][136]_i_1 
       (.I0(s_sc_payld[135]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][136]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][137]_i_1 
       (.I0(s_sc_payld[136]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][137]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][138]_i_1 
       (.I0(s_sc_payld[137]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][138]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_pipe[1].pipe[1][139]_i_1 
       (.I0(m_sc_recv),
        .O(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][139]_i_2 
       (.I0(s_sc_payld[138]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][139]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h2)) 
    \gen_pipe[1].pipe[1][139]_i_3 
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][13]_i_1 
       (.I0(s_sc_payld[12]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][14]_i_1 
       (.I0(s_sc_payld[13]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][15]_i_1 
       (.I0(s_sc_payld[14]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][16]_i_1 
       (.I0(s_sc_payld[15]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][17]_i_1 
       (.I0(s_sc_payld[16]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][18]_i_1 
       (.I0(s_sc_payld[17]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][19]_i_1 
       (.I0(s_sc_payld[18]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][1]_i_1 
       (.I0(s_sc_payld[0]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][20]_i_1 
       (.I0(s_sc_payld[19]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][21]_i_1 
       (.I0(s_sc_payld[20]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][22]_i_1 
       (.I0(s_sc_payld[21]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][23]_i_1 
       (.I0(s_sc_payld[22]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][24]_i_1 
       (.I0(s_sc_payld[23]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][25]_i_1 
       (.I0(s_sc_payld[24]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][26]_i_1 
       (.I0(s_sc_payld[25]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][27]_i_1 
       (.I0(s_sc_payld[26]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][28]_i_1 
       (.I0(s_sc_payld[27]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][29]_i_1 
       (.I0(s_sc_payld[28]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][2]_i_1 
       (.I0(s_sc_payld[1]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][30]_i_1 
       (.I0(s_sc_payld[29]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][31]_i_1 
       (.I0(s_sc_payld[30]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][32]_i_1 
       (.I0(s_sc_payld[31]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][33]_i_1 
       (.I0(s_sc_payld[32]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][34]_i_1 
       (.I0(s_sc_payld[33]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][35]_i_1 
       (.I0(s_sc_payld[34]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][36]_i_1 
       (.I0(s_sc_payld[35]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][37]_i_1 
       (.I0(s_sc_payld[36]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][38]_i_1 
       (.I0(s_sc_payld[37]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][39]_i_1 
       (.I0(s_sc_payld[38]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][3]_i_1 
       (.I0(s_sc_payld[2]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][40]_i_1 
       (.I0(s_sc_payld[39]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][41]_i_1 
       (.I0(s_sc_payld[40]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][42]_i_1 
       (.I0(s_sc_payld[41]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][43]_i_1 
       (.I0(s_sc_payld[42]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][44]_i_1 
       (.I0(s_sc_payld[43]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][45]_i_1 
       (.I0(s_sc_payld[44]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][46]_i_1 
       (.I0(s_sc_payld[45]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][47]_i_1 
       (.I0(s_sc_payld[46]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][48]_i_1 
       (.I0(s_sc_payld[47]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][49]_i_1 
       (.I0(s_sc_payld[48]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][4]_i_1 
       (.I0(s_sc_payld[3]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][50]_i_1 
       (.I0(s_sc_payld[49]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][51]_i_1 
       (.I0(s_sc_payld[50]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][52]_i_1 
       (.I0(s_sc_payld[51]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][53]_i_1 
       (.I0(s_sc_payld[52]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][54]_i_1 
       (.I0(s_sc_payld[53]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][55]_i_1 
       (.I0(s_sc_payld[54]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][56]_i_1 
       (.I0(s_sc_payld[55]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][57]_i_1 
       (.I0(s_sc_payld[56]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][58]_i_1 
       (.I0(s_sc_payld[57]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][59]_i_1 
       (.I0(s_sc_payld[58]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][5]_i_1 
       (.I0(s_sc_payld[4]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][60]_i_1 
       (.I0(s_sc_payld[59]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][61]_i_1 
       (.I0(s_sc_payld[60]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][62]_i_1 
       (.I0(s_sc_payld[61]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][62]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][63]_i_1 
       (.I0(s_sc_payld[62]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][64]_i_1 
       (.I0(s_sc_payld[63]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][65]_i_1 
       (.I0(s_sc_payld[64]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][66]_i_1 
       (.I0(s_sc_payld[65]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][67]_i_1 
       (.I0(s_sc_payld[66]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][68]_i_1 
       (.I0(s_sc_payld[67]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][68]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][69]_i_1 
       (.I0(s_sc_payld[68]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][69]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][6]_i_1 
       (.I0(s_sc_payld[5]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][70]_i_1 
       (.I0(s_sc_payld[69]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][70]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][71]_i_1 
       (.I0(s_sc_payld[70]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][71]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][72]_i_1 
       (.I0(s_sc_payld[71]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][72]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][73]_i_1 
       (.I0(s_sc_payld[72]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][73]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][74]_i_1 
       (.I0(s_sc_payld[73]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][74]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][75]_i_1 
       (.I0(s_sc_payld[74]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][75]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][76]_i_1 
       (.I0(s_sc_payld[75]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][76]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][77]_i_1 
       (.I0(s_sc_payld[76]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][77]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][78]_i_1 
       (.I0(s_sc_payld[77]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][78]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][79]_i_1 
       (.I0(s_sc_payld[78]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][79]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][7]_i_1 
       (.I0(s_sc_payld[6]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][80]_i_1 
       (.I0(s_sc_payld[79]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][80]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][81]_i_1 
       (.I0(s_sc_payld[80]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][81]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][82]_i_1 
       (.I0(s_sc_payld[81]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][82]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][83]_i_1 
       (.I0(s_sc_payld[82]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][83]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][84]_i_1 
       (.I0(s_sc_payld[83]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][84]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][85]_i_1 
       (.I0(s_sc_payld[84]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][85]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][86]_i_1 
       (.I0(s_sc_payld[85]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][86]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][87]_i_1 
       (.I0(s_sc_payld[86]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][88]_i_1 
       (.I0(s_sc_payld[87]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][88]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][89]_i_1 
       (.I0(s_sc_payld[88]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][89]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][8]_i_1 
       (.I0(s_sc_payld[7]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][90]_i_1 
       (.I0(s_sc_payld[89]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][90]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][91]_i_1 
       (.I0(s_sc_payld[90]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][91]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][92]_i_1 
       (.I0(s_sc_payld[91]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][92]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][93]_i_1 
       (.I0(s_sc_payld[92]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][93]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][94]_i_1 
       (.I0(s_sc_payld[93]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][94]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][95]_i_1 
       (.I0(s_sc_payld[94]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][95]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][96]_i_1 
       (.I0(s_sc_payld[95]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][96]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][97]_i_1 
       (.I0(s_sc_payld[96]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][97]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][98]_i_1 
       (.I0(s_sc_payld[97]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][98]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][99]_i_1 
       (.I0(s_sc_payld[98]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][99]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][9]_i_1 
       (.I0(s_sc_payld[8]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][9]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][100] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][100]_i_1_n_0 ),
        .Q(m_sc_payld[99]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][101] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][101]_i_1_n_0 ),
        .Q(m_sc_payld[100]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][102] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][102]_i_1_n_0 ),
        .Q(m_sc_payld[101]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][103] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][103]_i_1_n_0 ),
        .Q(m_sc_payld[102]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][104] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][104]_i_1_n_0 ),
        .Q(m_sc_payld[103]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][105] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][105]_i_1_n_0 ),
        .Q(m_sc_payld[104]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][106] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][106]_i_1_n_0 ),
        .Q(m_sc_payld[105]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][107] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][107]_i_1_n_0 ),
        .Q(m_sc_payld[106]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][108] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][108]_i_1_n_0 ),
        .Q(m_sc_payld[107]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][109] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][109]_i_1_n_0 ),
        .Q(m_sc_payld[108]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][10] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][10]_i_1_n_0 ),
        .Q(m_sc_payld[9]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][110] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][110]_i_1_n_0 ),
        .Q(m_sc_payld[109]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][111] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][111]_i_1_n_0 ),
        .Q(m_sc_payld[110]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][112] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][112]_i_1_n_0 ),
        .Q(m_sc_payld[111]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][113] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][113]_i_1_n_0 ),
        .Q(m_sc_payld[112]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][114] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][114]_i_1_n_0 ),
        .Q(m_sc_payld[113]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][115] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][115]_i_1_n_0 ),
        .Q(m_sc_payld[114]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][116] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][116]_i_1_n_0 ),
        .Q(m_sc_payld[115]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][117] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][117]_i_1_n_0 ),
        .Q(m_sc_payld[116]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][118] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][118]_i_1_n_0 ),
        .Q(m_sc_payld[117]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][119] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][119]_i_1_n_0 ),
        .Q(m_sc_payld[118]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][11] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][11]_i_1_n_0 ),
        .Q(m_sc_payld[10]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][120] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][120]_i_1_n_0 ),
        .Q(m_sc_payld[119]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][121] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][121]_i_1_n_0 ),
        .Q(m_sc_payld[120]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][122] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][122]_i_1_n_0 ),
        .Q(m_sc_payld[121]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][123] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][123]_i_1_n_0 ),
        .Q(m_sc_payld[122]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][124] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][124]_i_1_n_0 ),
        .Q(m_sc_payld[123]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][125] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][125]_i_1_n_0 ),
        .Q(m_sc_payld[124]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][126] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][126]_i_1_n_0 ),
        .Q(m_sc_payld[125]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][127] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][127]_i_1_n_0 ),
        .Q(m_sc_payld[126]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][128] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][128]_i_1_n_0 ),
        .Q(m_sc_payld[127]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][129] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][129]_i_1_n_0 ),
        .Q(m_sc_payld[128]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][12] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][12]_i_1_n_0 ),
        .Q(m_sc_payld[11]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][130] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][130]_i_1_n_0 ),
        .Q(m_sc_payld[129]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][131] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][131]_i_1_n_0 ),
        .Q(m_sc_payld[130]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][132] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][132]_i_1_n_0 ),
        .Q(m_sc_payld[131]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][133] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][133]_i_1_n_0 ),
        .Q(m_sc_payld[132]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][134] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][134]_i_1_n_0 ),
        .Q(m_sc_payld[133]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][135] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][135]_i_1_n_0 ),
        .Q(m_sc_payld[134]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][136] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][136]_i_1_n_0 ),
        .Q(m_sc_payld[135]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][137] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][137]_i_1_n_0 ),
        .Q(m_sc_payld[136]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][138] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][138]_i_1_n_0 ),
        .Q(m_sc_payld[137]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][139] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][139]_i_2_n_0 ),
        .Q(m_sc_payld[138]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][13] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][13]_i_1_n_0 ),
        .Q(m_sc_payld[12]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][14] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][14]_i_1_n_0 ),
        .Q(m_sc_payld[13]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][15] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][15]_i_1_n_0 ),
        .Q(m_sc_payld[14]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][16] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][16]_i_1_n_0 ),
        .Q(m_sc_payld[15]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][17] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][17]_i_1_n_0 ),
        .Q(m_sc_payld[16]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][18] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][18]_i_1_n_0 ),
        .Q(m_sc_payld[17]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][19] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][19]_i_1_n_0 ),
        .Q(m_sc_payld[18]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][1]_i_1_n_0 ),
        .Q(m_sc_payld[0]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][20] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][20]_i_1_n_0 ),
        .Q(m_sc_payld[19]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][21] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][21]_i_1_n_0 ),
        .Q(m_sc_payld[20]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][22] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][22]_i_1_n_0 ),
        .Q(m_sc_payld[21]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][23] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][23]_i_1_n_0 ),
        .Q(m_sc_payld[22]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][24] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][24]_i_1_n_0 ),
        .Q(m_sc_payld[23]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][25] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][25]_i_1_n_0 ),
        .Q(m_sc_payld[24]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][26] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][26]_i_1_n_0 ),
        .Q(m_sc_payld[25]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][27] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][27]_i_1_n_0 ),
        .Q(m_sc_payld[26]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][28] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][28]_i_1_n_0 ),
        .Q(m_sc_payld[27]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][29] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][29]_i_1_n_0 ),
        .Q(m_sc_payld[28]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][2]_i_1_n_0 ),
        .Q(m_sc_payld[1]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][30] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][30]_i_1_n_0 ),
        .Q(m_sc_payld[29]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][31] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][31]_i_1_n_0 ),
        .Q(m_sc_payld[30]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][32] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][32]_i_1_n_0 ),
        .Q(m_sc_payld[31]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][33] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][33]_i_1_n_0 ),
        .Q(m_sc_payld[32]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][34] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][34]_i_1_n_0 ),
        .Q(m_sc_payld[33]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][35] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][35]_i_1_n_0 ),
        .Q(m_sc_payld[34]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][36] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][36]_i_1_n_0 ),
        .Q(m_sc_payld[35]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][37] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][37]_i_1_n_0 ),
        .Q(m_sc_payld[36]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][38] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][38]_i_1_n_0 ),
        .Q(m_sc_payld[37]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][39] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][39]_i_1_n_0 ),
        .Q(m_sc_payld[38]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][3]_i_1_n_0 ),
        .Q(m_sc_payld[2]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][40] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][40]_i_1_n_0 ),
        .Q(m_sc_payld[39]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][41] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][41]_i_1_n_0 ),
        .Q(m_sc_payld[40]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][42] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][42]_i_1_n_0 ),
        .Q(m_sc_payld[41]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][43] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][43]_i_1_n_0 ),
        .Q(m_sc_payld[42]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][44] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][44]_i_1_n_0 ),
        .Q(m_sc_payld[43]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][45] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][45]_i_1_n_0 ),
        .Q(m_sc_payld[44]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][46] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][46]_i_1_n_0 ),
        .Q(m_sc_payld[45]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][47] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][47]_i_1_n_0 ),
        .Q(m_sc_payld[46]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][48] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][48]_i_1_n_0 ),
        .Q(m_sc_payld[47]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][49] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][49]_i_1_n_0 ),
        .Q(m_sc_payld[48]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][4]_i_1_n_0 ),
        .Q(m_sc_payld[3]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][50] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][50]_i_1_n_0 ),
        .Q(m_sc_payld[49]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][51] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][51]_i_1_n_0 ),
        .Q(m_sc_payld[50]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][52] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][52]_i_1_n_0 ),
        .Q(m_sc_payld[51]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][53] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][53]_i_1_n_0 ),
        .Q(m_sc_payld[52]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][54] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][54]_i_1_n_0 ),
        .Q(m_sc_payld[53]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][55] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][55]_i_1_n_0 ),
        .Q(m_sc_payld[54]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][56] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][56]_i_1_n_0 ),
        .Q(m_sc_payld[55]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][57] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][57]_i_1_n_0 ),
        .Q(m_sc_payld[56]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][58] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][58]_i_1_n_0 ),
        .Q(m_sc_payld[57]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][59] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][59]_i_1_n_0 ),
        .Q(m_sc_payld[58]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][5] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][5]_i_1_n_0 ),
        .Q(m_sc_payld[4]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][60] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][60]_i_1_n_0 ),
        .Q(m_sc_payld[59]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][61] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][61]_i_1_n_0 ),
        .Q(m_sc_payld[60]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][62] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][62]_i_1_n_0 ),
        .Q(m_sc_payld[61]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][63] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][63]_i_1_n_0 ),
        .Q(m_sc_payld[62]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][64] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][64]_i_1_n_0 ),
        .Q(m_sc_payld[63]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][65] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][65]_i_1_n_0 ),
        .Q(m_sc_payld[64]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][66] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][66]_i_1_n_0 ),
        .Q(m_sc_payld[65]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][67] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][67]_i_1_n_0 ),
        .Q(m_sc_payld[66]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][68] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][68]_i_1_n_0 ),
        .Q(m_sc_payld[67]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][69] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][69]_i_1_n_0 ),
        .Q(m_sc_payld[68]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][6] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][6]_i_1_n_0 ),
        .Q(m_sc_payld[5]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][70] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][70]_i_1_n_0 ),
        .Q(m_sc_payld[69]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][71] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][71]_i_1_n_0 ),
        .Q(m_sc_payld[70]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][72] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][72]_i_1_n_0 ),
        .Q(m_sc_payld[71]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][73] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][73]_i_1_n_0 ),
        .Q(m_sc_payld[72]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][74] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][74]_i_1_n_0 ),
        .Q(m_sc_payld[73]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][75] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][75]_i_1_n_0 ),
        .Q(m_sc_payld[74]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][76] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][76]_i_1_n_0 ),
        .Q(m_sc_payld[75]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][77] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][77]_i_1_n_0 ),
        .Q(m_sc_payld[76]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][78] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][78]_i_1_n_0 ),
        .Q(m_sc_payld[77]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][79] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][79]_i_1_n_0 ),
        .Q(m_sc_payld[78]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][7] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][7]_i_1_n_0 ),
        .Q(m_sc_payld[6]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][80] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][80]_i_1_n_0 ),
        .Q(m_sc_payld[79]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][81] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][81]_i_1_n_0 ),
        .Q(m_sc_payld[80]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][82] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][82]_i_1_n_0 ),
        .Q(m_sc_payld[81]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][83] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][83]_i_1_n_0 ),
        .Q(m_sc_payld[82]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][84] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][84]_i_1_n_0 ),
        .Q(m_sc_payld[83]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][85] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][85]_i_1_n_0 ),
        .Q(m_sc_payld[84]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][86] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][86]_i_1_n_0 ),
        .Q(m_sc_payld[85]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][87] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][87]_i_1_n_0 ),
        .Q(m_sc_payld[86]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][88] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][88]_i_1_n_0 ),
        .Q(m_sc_payld[87]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][89] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][89]_i_1_n_0 ),
        .Q(m_sc_payld[88]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][8] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][8]_i_1_n_0 ),
        .Q(m_sc_payld[7]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][90] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][90]_i_1_n_0 ),
        .Q(m_sc_payld[89]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][91] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][91]_i_1_n_0 ),
        .Q(m_sc_payld[90]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][92] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][92]_i_1_n_0 ),
        .Q(m_sc_payld[91]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][93] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][93]_i_1_n_0 ),
        .Q(m_sc_payld[92]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][94] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][94]_i_1_n_0 ),
        .Q(m_sc_payld[93]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][95] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][95]_i_1_n_0 ),
        .Q(m_sc_payld[94]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][96] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][96]_i_1_n_0 ),
        .Q(m_sc_payld[95]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][97] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][97]_i_1_n_0 ),
        .Q(m_sc_payld[96]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][98] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][98]_i_1_n_0 ),
        .Q(m_sc_payld[97]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][99] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][99]_i_1_n_0 ),
        .Q(m_sc_payld[98]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][9] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][9]_i_1_n_0 ),
        .Q(m_sc_payld[8]),
        .R(\gen_pipe[1].pipe[1][139]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized14
   (m_sc_payld,
    out,
    s_sc_payld,
    aclk);
  output [6:0]m_sc_payld;
  input out;
  input [6:0]s_sc_payld;
  input aclk;

  wire aclk;
  wire [6:0]m_sc_payld;
  wire out;
  wire [6:0]s_sc_payld;

  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][1] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[0]),
        .Q(m_sc_payld[0]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][2] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[1]),
        .Q(m_sc_payld[1]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][3] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[2]),
        .Q(m_sc_payld[2]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][4] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[3]),
        .Q(m_sc_payld[3]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][5] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[4]),
        .Q(m_sc_payld[4]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][6] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[5]),
        .Q(m_sc_payld[5]),
        .R(out));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][7] 
       (.C(aclk),
        .CE(1'b1),
        .D(s_sc_payld[6]),
        .Q(m_sc_payld[6]),
        .R(out));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized16
   (m_sc_payld,
    s_sc_payld,
    m_sc_recv,
    aclk);
  output [86:0]m_sc_payld;
  input [86:0]s_sc_payld;
  input [0:0]m_sc_recv;
  input aclk;

  wire aclk;
  wire [0:0]\gen_mi[0].m_sc_sel_mi_r ;
  wire \gen_pipe[1].pipe[1][10]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][11]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][12]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][13]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][14]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][15]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][16]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][17]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][18]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][19]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][1]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][20]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][21]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][22]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][23]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][24]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][25]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][26]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][27]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][28]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][29]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][2]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][30]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][31]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][32]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][33]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][34]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][35]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][36]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][37]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][38]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][39]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][3]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][40]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][41]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][42]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][43]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][44]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][45]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][46]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][47]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][48]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][49]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][4]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][50]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][51]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][52]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][53]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][54]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][55]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][56]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][57]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][58]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][59]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][5]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][60]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][61]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][62]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][63]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][64]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][65]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][66]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][67]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][68]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][69]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][6]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][70]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][71]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][72]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][73]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][74]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][75]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][76]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][77]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][78]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][79]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][7]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][80]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][81]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][82]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][83]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][84]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][85]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][86]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][87]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][87]_i_2_n_0 ;
  wire \gen_pipe[1].pipe[1][8]_i_1_n_0 ;
  wire \gen_pipe[1].pipe[1][9]_i_1_n_0 ;
  wire [86:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [86:0]s_sc_payld;

  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][10]_i_1 
       (.I0(s_sc_payld[9]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][11]_i_1 
       (.I0(s_sc_payld[10]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][12]_i_1 
       (.I0(s_sc_payld[11]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][13]_i_1 
       (.I0(s_sc_payld[12]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][14]_i_1 
       (.I0(s_sc_payld[13]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][15]_i_1 
       (.I0(s_sc_payld[14]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][16]_i_1 
       (.I0(s_sc_payld[15]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][17]_i_1 
       (.I0(s_sc_payld[16]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][18]_i_1 
       (.I0(s_sc_payld[17]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][19]_i_1 
       (.I0(s_sc_payld[18]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][19]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][1]_i_1 
       (.I0(s_sc_payld[0]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][20]_i_1 
       (.I0(s_sc_payld[19]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][21]_i_1 
       (.I0(s_sc_payld[20]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][22]_i_1 
       (.I0(s_sc_payld[21]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][23]_i_1 
       (.I0(s_sc_payld[22]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][24]_i_1 
       (.I0(s_sc_payld[23]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][25]_i_1 
       (.I0(s_sc_payld[24]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][26]_i_1 
       (.I0(s_sc_payld[25]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][27]_i_1 
       (.I0(s_sc_payld[26]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][28]_i_1 
       (.I0(s_sc_payld[27]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][29]_i_1 
       (.I0(s_sc_payld[28]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][2]_i_1 
       (.I0(s_sc_payld[1]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][30]_i_1 
       (.I0(s_sc_payld[29]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][31]_i_1 
       (.I0(s_sc_payld[30]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][32]_i_1 
       (.I0(s_sc_payld[31]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][33]_i_1 
       (.I0(s_sc_payld[32]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][34]_i_1 
       (.I0(s_sc_payld[33]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][35]_i_1 
       (.I0(s_sc_payld[34]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][36]_i_1 
       (.I0(s_sc_payld[35]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][37]_i_1 
       (.I0(s_sc_payld[36]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][38]_i_1 
       (.I0(s_sc_payld[37]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][39]_i_1 
       (.I0(s_sc_payld[38]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][3]_i_1 
       (.I0(s_sc_payld[2]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][40]_i_1 
       (.I0(s_sc_payld[39]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][41]_i_1 
       (.I0(s_sc_payld[40]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][42]_i_1 
       (.I0(s_sc_payld[41]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][43]_i_1 
       (.I0(s_sc_payld[42]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][44]_i_1 
       (.I0(s_sc_payld[43]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][45]_i_1 
       (.I0(s_sc_payld[44]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][46]_i_1 
       (.I0(s_sc_payld[45]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][47]_i_1 
       (.I0(s_sc_payld[46]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][48]_i_1 
       (.I0(s_sc_payld[47]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][49]_i_1 
       (.I0(s_sc_payld[48]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][4]_i_1 
       (.I0(s_sc_payld[3]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][50]_i_1 
       (.I0(s_sc_payld[49]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][51]_i_1 
       (.I0(s_sc_payld[50]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][52]_i_1 
       (.I0(s_sc_payld[51]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][53]_i_1 
       (.I0(s_sc_payld[52]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][54]_i_1 
       (.I0(s_sc_payld[53]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][55]_i_1 
       (.I0(s_sc_payld[54]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][56]_i_1 
       (.I0(s_sc_payld[55]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][57]_i_1 
       (.I0(s_sc_payld[56]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][58]_i_1 
       (.I0(s_sc_payld[57]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][59]_i_1 
       (.I0(s_sc_payld[58]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][5]_i_1 
       (.I0(s_sc_payld[4]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][60]_i_1 
       (.I0(s_sc_payld[59]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][61]_i_1 
       (.I0(s_sc_payld[60]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][62]_i_1 
       (.I0(s_sc_payld[61]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][62]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][63]_i_1 
       (.I0(s_sc_payld[62]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][64]_i_1 
       (.I0(s_sc_payld[63]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][65]_i_1 
       (.I0(s_sc_payld[64]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][66]_i_1 
       (.I0(s_sc_payld[65]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][67]_i_1 
       (.I0(s_sc_payld[66]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][68]_i_1 
       (.I0(s_sc_payld[67]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][68]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][69]_i_1 
       (.I0(s_sc_payld[68]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][69]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][6]_i_1 
       (.I0(s_sc_payld[5]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][70]_i_1 
       (.I0(s_sc_payld[69]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][70]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][71]_i_1 
       (.I0(s_sc_payld[70]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][71]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][72]_i_1 
       (.I0(s_sc_payld[71]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][72]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][73]_i_1 
       (.I0(s_sc_payld[72]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][73]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][74]_i_1 
       (.I0(s_sc_payld[73]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][74]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][75]_i_1 
       (.I0(s_sc_payld[74]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][75]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][76]_i_1 
       (.I0(s_sc_payld[75]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][76]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][77]_i_1 
       (.I0(s_sc_payld[76]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][77]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][78]_i_1 
       (.I0(s_sc_payld[77]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][78]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][79]_i_1 
       (.I0(s_sc_payld[78]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][79]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][7]_i_1 
       (.I0(s_sc_payld[6]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][80]_i_1 
       (.I0(s_sc_payld[79]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][80]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][81]_i_1 
       (.I0(s_sc_payld[80]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][81]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][82]_i_1 
       (.I0(s_sc_payld[81]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][82]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][83]_i_1 
       (.I0(s_sc_payld[82]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][83]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][84]_i_1 
       (.I0(s_sc_payld[83]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][84]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][85]_i_1 
       (.I0(s_sc_payld[84]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][85]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][86]_i_1 
       (.I0(s_sc_payld[85]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][86]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_pipe[1].pipe[1][87]_i_1 
       (.I0(m_sc_recv),
        .O(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][87]_i_2 
       (.I0(s_sc_payld[86]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][87]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h2)) 
    \gen_pipe[1].pipe[1][87]_i_3 
       (.I0(1'b0),
        .O(\gen_mi[0].m_sc_sel_mi_r ));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][8]_i_1 
       (.I0(s_sc_payld[7]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \gen_pipe[1].pipe[1][9]_i_1 
       (.I0(s_sc_payld[8]),
        .I1(\gen_mi[0].m_sc_sel_mi_r ),
        .O(\gen_pipe[1].pipe[1][9]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][10] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][10]_i_1_n_0 ),
        .Q(m_sc_payld[9]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][11] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][11]_i_1_n_0 ),
        .Q(m_sc_payld[10]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][12] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][12]_i_1_n_0 ),
        .Q(m_sc_payld[11]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][13] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][13]_i_1_n_0 ),
        .Q(m_sc_payld[12]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][14] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][14]_i_1_n_0 ),
        .Q(m_sc_payld[13]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][15] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][15]_i_1_n_0 ),
        .Q(m_sc_payld[14]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][16] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][16]_i_1_n_0 ),
        .Q(m_sc_payld[15]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][17] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][17]_i_1_n_0 ),
        .Q(m_sc_payld[16]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][18] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][18]_i_1_n_0 ),
        .Q(m_sc_payld[17]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][19] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][19]_i_1_n_0 ),
        .Q(m_sc_payld[18]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][1] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][1]_i_1_n_0 ),
        .Q(m_sc_payld[0]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][20] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][20]_i_1_n_0 ),
        .Q(m_sc_payld[19]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][21] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][21]_i_1_n_0 ),
        .Q(m_sc_payld[20]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][22] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][22]_i_1_n_0 ),
        .Q(m_sc_payld[21]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][23] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][23]_i_1_n_0 ),
        .Q(m_sc_payld[22]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][24] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][24]_i_1_n_0 ),
        .Q(m_sc_payld[23]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][25] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][25]_i_1_n_0 ),
        .Q(m_sc_payld[24]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][26] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][26]_i_1_n_0 ),
        .Q(m_sc_payld[25]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][27] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][27]_i_1_n_0 ),
        .Q(m_sc_payld[26]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][28] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][28]_i_1_n_0 ),
        .Q(m_sc_payld[27]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][29] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][29]_i_1_n_0 ),
        .Q(m_sc_payld[28]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][2] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][2]_i_1_n_0 ),
        .Q(m_sc_payld[1]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][30] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][30]_i_1_n_0 ),
        .Q(m_sc_payld[29]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][31] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][31]_i_1_n_0 ),
        .Q(m_sc_payld[30]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][32] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][32]_i_1_n_0 ),
        .Q(m_sc_payld[31]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][33] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][33]_i_1_n_0 ),
        .Q(m_sc_payld[32]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][34] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][34]_i_1_n_0 ),
        .Q(m_sc_payld[33]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][35] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][35]_i_1_n_0 ),
        .Q(m_sc_payld[34]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][36] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][36]_i_1_n_0 ),
        .Q(m_sc_payld[35]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][37] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][37]_i_1_n_0 ),
        .Q(m_sc_payld[36]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][38] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][38]_i_1_n_0 ),
        .Q(m_sc_payld[37]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][39] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][39]_i_1_n_0 ),
        .Q(m_sc_payld[38]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][3] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][3]_i_1_n_0 ),
        .Q(m_sc_payld[2]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][40] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][40]_i_1_n_0 ),
        .Q(m_sc_payld[39]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][41] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][41]_i_1_n_0 ),
        .Q(m_sc_payld[40]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][42] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][42]_i_1_n_0 ),
        .Q(m_sc_payld[41]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][43] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][43]_i_1_n_0 ),
        .Q(m_sc_payld[42]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][44] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][44]_i_1_n_0 ),
        .Q(m_sc_payld[43]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][45] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][45]_i_1_n_0 ),
        .Q(m_sc_payld[44]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][46] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][46]_i_1_n_0 ),
        .Q(m_sc_payld[45]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][47] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][47]_i_1_n_0 ),
        .Q(m_sc_payld[46]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][48] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][48]_i_1_n_0 ),
        .Q(m_sc_payld[47]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][49] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][49]_i_1_n_0 ),
        .Q(m_sc_payld[48]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][4] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][4]_i_1_n_0 ),
        .Q(m_sc_payld[3]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][50] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][50]_i_1_n_0 ),
        .Q(m_sc_payld[49]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][51] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][51]_i_1_n_0 ),
        .Q(m_sc_payld[50]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][52] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][52]_i_1_n_0 ),
        .Q(m_sc_payld[51]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][53] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][53]_i_1_n_0 ),
        .Q(m_sc_payld[52]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][54] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][54]_i_1_n_0 ),
        .Q(m_sc_payld[53]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][55] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][55]_i_1_n_0 ),
        .Q(m_sc_payld[54]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][56] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][56]_i_1_n_0 ),
        .Q(m_sc_payld[55]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][57] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][57]_i_1_n_0 ),
        .Q(m_sc_payld[56]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][58] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][58]_i_1_n_0 ),
        .Q(m_sc_payld[57]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][59] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][59]_i_1_n_0 ),
        .Q(m_sc_payld[58]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][5] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][5]_i_1_n_0 ),
        .Q(m_sc_payld[4]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][60] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][60]_i_1_n_0 ),
        .Q(m_sc_payld[59]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][61] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][61]_i_1_n_0 ),
        .Q(m_sc_payld[60]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][62] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][62]_i_1_n_0 ),
        .Q(m_sc_payld[61]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][63] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][63]_i_1_n_0 ),
        .Q(m_sc_payld[62]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][64] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][64]_i_1_n_0 ),
        .Q(m_sc_payld[63]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][65] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][65]_i_1_n_0 ),
        .Q(m_sc_payld[64]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][66] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][66]_i_1_n_0 ),
        .Q(m_sc_payld[65]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][67] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][67]_i_1_n_0 ),
        .Q(m_sc_payld[66]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][68] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][68]_i_1_n_0 ),
        .Q(m_sc_payld[67]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][69] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][69]_i_1_n_0 ),
        .Q(m_sc_payld[68]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][6] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][6]_i_1_n_0 ),
        .Q(m_sc_payld[5]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][70] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][70]_i_1_n_0 ),
        .Q(m_sc_payld[69]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][71] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][71]_i_1_n_0 ),
        .Q(m_sc_payld[70]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][72] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][72]_i_1_n_0 ),
        .Q(m_sc_payld[71]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][73] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][73]_i_1_n_0 ),
        .Q(m_sc_payld[72]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][74] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][74]_i_1_n_0 ),
        .Q(m_sc_payld[73]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][75] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][75]_i_1_n_0 ),
        .Q(m_sc_payld[74]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][76] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][76]_i_1_n_0 ),
        .Q(m_sc_payld[75]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][77] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][77]_i_1_n_0 ),
        .Q(m_sc_payld[76]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][78] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][78]_i_1_n_0 ),
        .Q(m_sc_payld[77]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][79] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][79]_i_1_n_0 ),
        .Q(m_sc_payld[78]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][7] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][7]_i_1_n_0 ),
        .Q(m_sc_payld[6]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][80] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][80]_i_1_n_0 ),
        .Q(m_sc_payld[79]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][81] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][81]_i_1_n_0 ),
        .Q(m_sc_payld[80]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][82] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][82]_i_1_n_0 ),
        .Q(m_sc_payld[81]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][83] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][83]_i_1_n_0 ),
        .Q(m_sc_payld[82]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][84] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][84]_i_1_n_0 ),
        .Q(m_sc_payld[83]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][85] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][85]_i_1_n_0 ),
        .Q(m_sc_payld[84]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][86] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][86]_i_1_n_0 ),
        .Q(m_sc_payld[85]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][87] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][87]_i_2_n_0 ),
        .Q(m_sc_payld[86]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][8] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][8]_i_1_n_0 ),
        .Q(m_sc_payld[7]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][9] 
       (.C(aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][9]_i_1_n_0 ),
        .Q(m_sc_payld[8]),
        .R(\gen_pipe[1].pipe[1][87]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized3
   (dina,
    s_sc_recv,
    s_sc_aclk);
  output [0:0]dina;
  input [0:0]s_sc_recv;
  input s_sc_aclk;

  wire [0:0]dina;
  wire s_sc_aclk;
  wire [0:0]s_sc_recv;

  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_recv),
        .Q(dina),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized3_54
   (dina,
    \grant_i_reg[2] ,
    s_sc_aclk);
  output [0:0]dina;
  input \grant_i_reg[2] ;
  input s_sc_aclk;

  wire [0:0]dina;
  wire \grant_i_reg[2] ;
  wire s_sc_aclk;

  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][2] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\grant_i_reg[2] ),
        .Q(dina),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_pipeline" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_pipeline__parameterized6
   (\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ,
    s_sc_payld,
    s_sc_aclk);
  output [4:0]\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ;
  input [2:0]s_sc_payld;
  input s_sc_aclk;

  wire \gen_pipe[1].pipe[1][3]_i_1_n_0 ;
  wire [4:0]\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 ;
  wire s_sc_aclk;
  wire [2:0]s_sc_payld;

  LUT2 #(
    .INIT(4'h6)) 
    \gen_pipe[1].pipe[1][3]_i_1 
       (.I0(s_sc_payld[1]),
        .I1(s_sc_payld[0]),
        .O(\gen_pipe[1].pipe[1][3]_i_1_n_0 ));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][0] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[2]),
        .Q(\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 [0]),
        .R(1'b0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][11] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[1]),
        .Q(\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 [4]),
        .R(1'b0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][1] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 [1]),
        .R(1'b0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][3] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_pipe[1].pipe[1][3]_i_1_n_0 ),
        .Q(\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 [2]),
        .R(1'b0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gen_pipe[1].pipe_reg[1][4] 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(s_sc_payld[0]),
        .Q(\gen_wr_a.gen_word_narrow.mem_reg_0_31_6_11 [3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl
   (p_14_out,
    shift,
    A,
    aclk);
  output p_14_out;
  input shift;
  input [4:0]A;
  input aclk;

  wire [4:0]A;
  wire aclk;
  wire p_14_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[0].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[0].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(1'b1),
        .Q(p_14_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_20
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_4_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[10]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_4_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[10].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[10].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_4_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_21
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_3_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[11]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_3_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[11].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[11].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_3_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_22
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_2_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[12]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_2_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[12].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[12].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_2_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_23
   (shift,
    D,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    s_axi_awvalid,
    m_axi_awready,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ,
    \gen_pipelined.state_reg[0] );
  output shift;
  output [0:0]D;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input s_axi_awvalid;
  input m_axi_awready;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire m_axi_awready;
  wire p_0_out;
  wire [0:0]s_axi_awaddr;
  wire s_axi_awvalid;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[13]_i_2 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_0_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[13].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[13].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_0_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT5 #(
    .INIT(32'h8000AA00)) 
    \shift_reg_reg[0]_srl1_i_1 
       (.I0(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I1(s_axi_awvalid),
        .I2(m_axi_awready),
        .I3(\gen_no_wsplitter.gen_endpoint_woffset.woffset_vacancy ),
        .I4(\gen_pipelined.state_reg[0] ),
        .O(shift));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_24
   (p_13_out,
    shift,
    A,
    aclk);
  output p_13_out;
  input shift;
  input [4:0]A;
  input aclk;

  wire [4:0]A;
  wire aclk;
  wire p_13_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[1].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[1].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(1'b1),
        .Q(p_13_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_25
   (m_axi_awuser,
    D,
    shift,
    A,
    aclk,
    s_axi_awaddr,
    s_axi_awlen,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]m_axi_awuser;
  output [0:0]D;
  input shift;
  input [4:0]A;
  input aclk;
  input [0:0]s_axi_awaddr;
  input [0:0]s_axi_awlen;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]m_axi_awuser;
  wire p_12_out;
  wire [0:0]s_axi_awaddr;
  wire [0:0]s_axi_awlen;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hF6660666)) 
    \gen_pipelined.mesg_reg[2]_i_1 
       (.I0(s_axi_awaddr),
        .I1(s_axi_awlen),
        .I2(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I3(\gen_pipelined.state_reg[0] ),
        .I4(p_12_out),
        .O(D));
  LUT2 #(
    .INIT(4'h6)) 
    \m_axi_awuser[181]_INST_0 
       (.I0(s_axi_awaddr),
        .I1(s_axi_awlen),
        .O(m_axi_awuser));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[2].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[2].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(m_axi_awuser),
        .Q(p_12_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_26
   (m_axi_awuser,
    D,
    shift,
    A,
    aclk,
    s_axi_awaddr,
    s_axi_awlen,
    \gen_pipelined.state_reg[1] );
  output [0:0]m_axi_awuser;
  output [0:0]D;
  input shift;
  input [4:0]A;
  input aclk;
  input [1:0]s_axi_awaddr;
  input [1:0]s_axi_awlen;
  input \gen_pipelined.state_reg[1] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_pipelined.state_reg[1] ;
  wire [0:0]m_axi_awuser;
  wire p_11_out;
  wire [1:0]s_axi_awaddr;
  wire [1:0]s_axi_awlen;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h956AFFFF956A0000)) 
    \gen_pipelined.mesg_reg[3]_i_1 
       (.I0(s_axi_awaddr[1]),
        .I1(s_axi_awaddr[0]),
        .I2(s_axi_awlen[0]),
        .I3(s_axi_awlen[1]),
        .I4(\gen_pipelined.state_reg[1] ),
        .I5(p_11_out),
        .O(D));
  LUT4 #(
    .INIT(16'h956A)) 
    \m_axi_awuser[182]_INST_0 
       (.I0(s_axi_awaddr[1]),
        .I1(s_axi_awaddr[0]),
        .I2(s_axi_awlen[0]),
        .I3(s_axi_awlen[1]),
        .O(m_axi_awuser));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[3].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[3].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(m_axi_awuser),
        .Q(p_11_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_27
   (m_axi_awuser,
    D,
    shift,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] ,
    s_axi_awaddr,
    s_axi_awlen);
  output [0:0]m_axi_awuser;
  output [0:0]D;
  input shift;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;
  input [2:0]s_axi_awaddr;
  input [2:0]s_axi_awlen;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]m_axi_awuser;
  wire p_10_out;
  wire [2:0]s_axi_awaddr;
  wire [2:0]s_axi_awlen;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[4]_i_1 
       (.I0(m_axi_awuser),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_10_out),
        .O(D));
  LUT6 #(
    .INIT(64'hEA80157F157FEA80)) 
    \m_axi_awuser[183]_INST_0 
       (.I0(s_axi_awaddr[1]),
        .I1(s_axi_awaddr[0]),
        .I2(s_axi_awlen[0]),
        .I3(s_axi_awlen[1]),
        .I4(s_axi_awaddr[2]),
        .I5(s_axi_awlen[2]),
        .O(m_axi_awuser));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[4].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[4].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(m_axi_awuser),
        .Q(p_10_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_28
   (m_axi_awuser,
    D,
    shift,
    A,
    aclk,
    \m_vector_i_reg[1127] ,
    s_axi_awaddr,
    s_axi_awlen,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]m_axi_awuser;
  output [0:0]D;
  input shift;
  input [4:0]A;
  input aclk;
  input \m_vector_i_reg[1127] ;
  input [0:0]s_axi_awaddr;
  input [0:0]s_axi_awlen;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]m_axi_awuser;
  wire \m_vector_i_reg[1127] ;
  wire p_9_out;
  wire [0:0]s_axi_awaddr;
  wire [0:0]s_axi_awlen;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hFF69696900696969)) 
    \gen_pipelined.mesg_reg[5]_i_1 
       (.I0(\m_vector_i_reg[1127] ),
        .I1(s_axi_awaddr),
        .I2(s_axi_awlen),
        .I3(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I4(\gen_pipelined.state_reg[0] ),
        .I5(p_9_out),
        .O(D));
  LUT3 #(
    .INIT(8'h69)) 
    \m_axi_awuser[184]_INST_0 
       (.I0(\m_vector_i_reg[1127] ),
        .I1(s_axi_awaddr),
        .I2(s_axi_awlen),
        .O(m_axi_awuser));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[5].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[5].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(m_axi_awuser),
        .Q(p_9_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_29
   (m_axi_awuser,
    D,
    \gen_pipelined.mesg_reg_reg[5] ,
    shift,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] ,
    s_axi_awaddr,
    s_axi_awlen);
  output [0:0]m_axi_awuser;
  output [0:0]D;
  output \gen_pipelined.mesg_reg_reg[5] ;
  input shift;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;
  input [4:0]s_axi_awaddr;
  input [4:0]s_axi_awlen;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.mesg_reg_reg[5] ;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]m_axi_awuser;
  wire p_8_out;
  wire [4:0]s_axi_awaddr;
  wire [4:0]s_axi_awlen;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[6]_i_1 
       (.I0(m_axi_awuser),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_8_out),
        .O(D));
  LUT5 #(
    .INIT(32'h96996696)) 
    \m_axi_awuser[185]_INST_0 
       (.I0(s_axi_awaddr[4]),
        .I1(s_axi_awlen[4]),
        .I2(s_axi_awlen[3]),
        .I3(\gen_pipelined.mesg_reg_reg[5] ),
        .I4(s_axi_awaddr[3]),
        .O(m_axi_awuser));
  LUT6 #(
    .INIT(64'h1117171717777777)) 
    \m_axi_awuser[185]_INST_0_i_1 
       (.I0(s_axi_awlen[2]),
        .I1(s_axi_awaddr[2]),
        .I2(s_axi_awlen[1]),
        .I3(s_axi_awlen[0]),
        .I4(s_axi_awaddr[0]),
        .I5(s_axi_awaddr[1]),
        .O(\gen_pipelined.mesg_reg_reg[5] ));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[6].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[6].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(m_axi_awuser),
        .Q(p_8_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_30
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_7_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[7]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_7_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[7].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[7].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_7_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_31
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_6_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[8]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_6_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[8].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[8].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_6_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_32
   (D,
    shift,
    s_axi_awaddr,
    A,
    aclk,
    \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]s_axi_awaddr;
  input [4:0]A;
  input aclk;
  input \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]D;
  wire aclk;
  wire \gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ;
  wire \gen_pipelined.state_reg[0] ;
  wire p_5_out;
  wire [0:0]s_axi_awaddr;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hEA2A)) 
    \gen_pipelined.mesg_reg[9]_i_1 
       (.I0(s_axi_awaddr),
        .I1(\gen_no_wsplitter.gen_endpoint_woffset.woffset_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(p_5_out),
        .O(D));
  (* srl_bus_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[9].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\s02_entry_pipeline/s02_si_converter/inst /\splitter_inst/gen_no_wsplitter.gen_endpoint_woffset.gen_wbypass_offset_fifo.wbypass_offset_fifo/gen_srls[9].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(aclk),
        .D(s_axi_awaddr),
        .Q(p_5_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_53
   (\gen_pipelined.mesg_reg_reg[2] ,
    E,
    A,
    s_sc_aclk,
    \gen_pipelined.state_reg[2] ,
    \gen_pipelined.state_reg[1] ,
    \grant_i_reg[2] ,
    s_sc_send,
    \gen_pipelined.state_reg[0] ,
    \grant_i_reg[2]_0 ,
    \gen_pipelined.state_reg[1]_0 ,
    \gen_pipelined.state_reg[0]_0 ,
    m_axis_arb_tready,
    m_axis_arb_tdata);
  output \gen_pipelined.mesg_reg_reg[2] ;
  input [0:0]E;
  input [4:0]A;
  input s_sc_aclk;
  input \gen_pipelined.state_reg[2] ;
  input \gen_pipelined.state_reg[1] ;
  input \grant_i_reg[2] ;
  input [0:0]s_sc_send;
  input \gen_pipelined.state_reg[0] ;
  input \grant_i_reg[2]_0 ;
  input \gen_pipelined.state_reg[1]_0 ;
  input \gen_pipelined.state_reg[0]_0 ;
  input m_axis_arb_tready;
  input [0:0]m_axis_arb_tdata;

  wire [4:0]A;
  wire [0:0]E;
  wire \gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[0]_0 ;
  wire \gen_pipelined.state_reg[1] ;
  wire \gen_pipelined.state_reg[1]_0 ;
  wire \gen_pipelined.state_reg[2] ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire [0:0]m_axis_arb_tdata;
  wire m_axis_arb_tready;
  wire p_14_out;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h55CCF5FF55CC0500)) 
    \gen_pipelined.mesg_reg[2]_i_1 
       (.I0(\grant_i_reg[2]_0 ),
        .I1(p_14_out),
        .I2(\gen_pipelined.state_reg[1]_0 ),
        .I3(\gen_pipelined.state_reg[0]_0 ),
        .I4(m_axis_arb_tready),
        .I5(m_axis_arb_tdata),
        .O(\gen_pipelined.mesg_reg_reg[2] ));
  (* srl_bus_name = "inst/\m00_nodes/m00_aw_node/inst /\inst_si_handler/gen_m_axis_arb_fifo.inst_axis_arb_fifo/gen_srls[2].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_nodes/m00_aw_node/inst /\inst_si_handler/gen_m_axis_arb_fifo.inst_axis_arb_fifo/gen_srls[2].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift),
        .CLK(s_sc_aclk),
        .D(E),
        .Q(p_14_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT5 #(
    .INIT(32'h80008888)) 
    \shift_reg_reg[0]_srl1_i_1 
       (.I0(\gen_pipelined.state_reg[2] ),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(\grant_i_reg[2] ),
        .I3(s_sc_send),
        .I4(\gen_pipelined.state_reg[0] ),
        .O(shift));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_65
   (D,
    shift,
    num_transactions_q,
    Q,
    aclk,
    \USE_WRITE.wr_cmd_b_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]num_transactions_q;
  input [4:0]Q;
  input aclk;
  input \USE_WRITE.wr_cmd_b_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire aclk;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]num_transactions_q;
  wire p_5_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hBF80)) 
    \gen_pipelined.mesg_reg[0]_i_1__0 
       (.I0(p_5_out),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(num_transactions_q),
        .O(D));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[0].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[0].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(num_transactions_q),
        .Q(p_5_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_66
   (D,
    shift,
    num_transactions_q,
    Q,
    aclk,
    \USE_WRITE.wr_cmd_b_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]num_transactions_q;
  input [4:0]Q;
  input aclk;
  input \USE_WRITE.wr_cmd_b_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire aclk;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]num_transactions_q;
  wire p_4_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hBF80)) 
    \gen_pipelined.mesg_reg[1]_i_1__0 
       (.I0(p_4_out),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(num_transactions_q),
        .O(D));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[1].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[1].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(num_transactions_q),
        .Q(p_4_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_67
   (D,
    shift,
    num_transactions_q,
    Q,
    aclk,
    \USE_WRITE.wr_cmd_b_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]num_transactions_q;
  input [4:0]Q;
  input aclk;
  input \USE_WRITE.wr_cmd_b_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire aclk;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]num_transactions_q;
  wire p_3_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hBF80)) 
    \gen_pipelined.mesg_reg[2]_i_1__0 
       (.I0(p_3_out),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(num_transactions_q),
        .O(D));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[2].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[2].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(num_transactions_q),
        .Q(p_3_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_68
   (D,
    shift,
    num_transactions_q,
    Q,
    aclk,
    \USE_WRITE.wr_cmd_b_valid ,
    \gen_pipelined.state_reg[0] );
  output [0:0]D;
  input shift;
  input [0:0]num_transactions_q;
  input [4:0]Q;
  input aclk;
  input \USE_WRITE.wr_cmd_b_valid ;
  input \gen_pipelined.state_reg[0] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire aclk;
  wire \gen_pipelined.state_reg[0] ;
  wire [0:0]num_transactions_q;
  wire p_2_out;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hBF80)) 
    \gen_pipelined.mesg_reg[3]_i_1__0 
       (.I0(p_2_out),
        .I1(\USE_WRITE.wr_cmd_b_valid ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(num_transactions_q),
        .O(D));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[3].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[3].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(num_transactions_q),
        .Q(p_2_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_69
   (shift,
    cmd_b_split_i,
    \gen_pipelined.mesg_reg_reg[4] ,
    D,
    Q,
    aclk,
    cmd_b_push_block_reg,
    \gen_pipelined.state_reg[0] ,
    \gen_pipelined.state_reg[2] ,
    \USE_WRITE.wr_cmd_b_valid ,
    incr_need_to_split_q_reg,
    access_is_incr_q_reg,
    num_transactions_q,
    \pushed_commands_reg[3] );
  output shift;
  output cmd_b_split_i;
  output \gen_pipelined.mesg_reg_reg[4] ;
  output [0:0]D;
  input [4:0]Q;
  input aclk;
  input cmd_b_push_block_reg;
  input \gen_pipelined.state_reg[0] ;
  input \gen_pipelined.state_reg[2] ;
  input \USE_WRITE.wr_cmd_b_valid ;
  input incr_need_to_split_q_reg;
  input access_is_incr_q_reg;
  input [3:0]num_transactions_q;
  input [3:0]\pushed_commands_reg[3] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire \USE_WRITE.wr_cmd_b_valid ;
  wire access_is_incr_q_reg;
  wire aclk;
  wire cmd_b_push_block_reg;
  wire cmd_b_split_i;
  wire \gen_pipelined.mesg_reg_reg[4] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[2] ;
  wire incr_need_to_split_q_reg;
  wire [3:0]num_transactions_q;
  wire p_0_out;
  wire [3:0]\pushed_commands_reg[3] ;
  wire shift;
  wire \shift_reg_reg[0]_srl1_i_3_n_0 ;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'hF0888888)) 
    \gen_pipelined.mesg_reg[4]_i_2 
       (.I0(incr_need_to_split_q_reg),
        .I1(\gen_pipelined.mesg_reg_reg[4] ),
        .I2(p_0_out),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .I4(\gen_pipelined.state_reg[0] ),
        .O(D));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[4].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_B_CHANNEL.cmd_b_queue/gen_srls[4].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(cmd_b_split_i),
        .Q(p_0_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT4 #(
    .INIT(16'h7000)) 
    \shift_reg_reg[0]_srl1_i_1__1 
       (.I0(cmd_b_push_block_reg),
        .I1(\gen_pipelined.state_reg[0] ),
        .I2(\gen_pipelined.state_reg[2] ),
        .I3(\USE_WRITE.wr_cmd_b_valid ),
        .O(shift));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \shift_reg_reg[0]_srl1_i_1__2 
       (.I0(incr_need_to_split_q_reg),
        .I1(\gen_pipelined.mesg_reg_reg[4] ),
        .O(cmd_b_split_i));
  LUT6 #(
    .INIT(64'h8AA8AAAAAAAA8AA8)) 
    \shift_reg_reg[0]_srl1_i_2__1 
       (.I0(access_is_incr_q_reg),
        .I1(\shift_reg_reg[0]_srl1_i_3_n_0 ),
        .I2(num_transactions_q[2]),
        .I3(\pushed_commands_reg[3] [2]),
        .I4(num_transactions_q[0]),
        .I5(\pushed_commands_reg[3] [0]),
        .O(\gen_pipelined.mesg_reg_reg[4] ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \shift_reg_reg[0]_srl1_i_3 
       (.I0(num_transactions_q[3]),
        .I1(\pushed_commands_reg[3] [3]),
        .I2(num_transactions_q[1]),
        .I3(\pushed_commands_reg[3] [1]),
        .O(\shift_reg_reg[0]_srl1_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_70
   (D,
    \gen_pipelined.mesg_reg_reg[0] ,
    shift,
    Q,
    aclk,
    \gen_pipelined.state_reg[1] ,
    \gen_pipelined.state_reg[0] ,
    \S_AXI_ALEN_Q_reg[0] ,
    \pushed_commands_reg[0] ,
    incr_need_to_split_q_reg,
    \pushed_commands_reg[3] );
  output [0:0]D;
  output [0:0]\gen_pipelined.mesg_reg_reg[0] ;
  input shift;
  input [4:0]Q;
  input aclk;
  input \gen_pipelined.state_reg[1] ;
  input \gen_pipelined.state_reg[0] ;
  input [0:0]\S_AXI_ALEN_Q_reg[0] ;
  input \pushed_commands_reg[0] ;
  input incr_need_to_split_q_reg;
  input [3:0]\pushed_commands_reg[3] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire [0:0]\S_AXI_ALEN_Q_reg[0] ;
  wire aclk;
  wire [0:0]\gen_pipelined.mesg_reg_reg[0] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[1] ;
  wire incr_need_to_split_q_reg;
  wire p_6_out;
  wire \pushed_commands_reg[0] ;
  wire [3:0]\pushed_commands_reg[3] ;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hBF80BFBFBF80BF80)) 
    \gen_pipelined.mesg_reg[0]_i_1 
       (.I0(p_6_out),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(\S_AXI_ALEN_Q_reg[0] ),
        .I4(\pushed_commands_reg[0] ),
        .I5(incr_need_to_split_q_reg),
        .O(\gen_pipelined.mesg_reg_reg[0] ));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[0].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[0].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(D),
        .Q(p_6_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \skid_buffer[1125]_i_1 
       (.I0(\S_AXI_ALEN_Q_reg[0] ),
        .I1(\pushed_commands_reg[3] [0]),
        .I2(\pushed_commands_reg[3] [1]),
        .I3(\pushed_commands_reg[3] [3]),
        .I4(\pushed_commands_reg[3] [2]),
        .I5(incr_need_to_split_q_reg),
        .O(D));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_71
   (D,
    \gen_pipelined.mesg_reg_reg[1] ,
    shift,
    Q,
    aclk,
    \gen_pipelined.state_reg[1] ,
    \gen_pipelined.state_reg[0] ,
    \S_AXI_ALEN_Q_reg[1] ,
    \pushed_commands_reg[0] ,
    incr_need_to_split_q_reg,
    \pushed_commands_reg[3] );
  output [0:0]D;
  output [0:0]\gen_pipelined.mesg_reg_reg[1] ;
  input shift;
  input [4:0]Q;
  input aclk;
  input \gen_pipelined.state_reg[1] ;
  input \gen_pipelined.state_reg[0] ;
  input [0:0]\S_AXI_ALEN_Q_reg[1] ;
  input \pushed_commands_reg[0] ;
  input incr_need_to_split_q_reg;
  input [3:0]\pushed_commands_reg[3] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire [0:0]\S_AXI_ALEN_Q_reg[1] ;
  wire aclk;
  wire [0:0]\gen_pipelined.mesg_reg_reg[1] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[1] ;
  wire incr_need_to_split_q_reg;
  wire p_5_out;
  wire \pushed_commands_reg[0] ;
  wire [3:0]\pushed_commands_reg[3] ;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hBF80BFBFBF80BF80)) 
    \gen_pipelined.mesg_reg[1]_i_1 
       (.I0(p_5_out),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(\S_AXI_ALEN_Q_reg[1] ),
        .I4(\pushed_commands_reg[0] ),
        .I5(incr_need_to_split_q_reg),
        .O(\gen_pipelined.mesg_reg_reg[1] ));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[1].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[1].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(D),
        .Q(p_5_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \skid_buffer[1126]_i_1 
       (.I0(\S_AXI_ALEN_Q_reg[1] ),
        .I1(\pushed_commands_reg[3] [0]),
        .I2(\pushed_commands_reg[3] [1]),
        .I3(\pushed_commands_reg[3] [3]),
        .I4(\pushed_commands_reg[3] [2]),
        .I5(incr_need_to_split_q_reg),
        .O(D));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_72
   (D,
    \gen_pipelined.mesg_reg_reg[2] ,
    shift,
    Q,
    aclk,
    \gen_pipelined.state_reg[1] ,
    \gen_pipelined.state_reg[0] ,
    \S_AXI_ALEN_Q_reg[2] ,
    \pushed_commands_reg[0] ,
    incr_need_to_split_q_reg,
    \pushed_commands_reg[3] );
  output [0:0]D;
  output [0:0]\gen_pipelined.mesg_reg_reg[2] ;
  input shift;
  input [4:0]Q;
  input aclk;
  input \gen_pipelined.state_reg[1] ;
  input \gen_pipelined.state_reg[0] ;
  input [0:0]\S_AXI_ALEN_Q_reg[2] ;
  input \pushed_commands_reg[0] ;
  input incr_need_to_split_q_reg;
  input [3:0]\pushed_commands_reg[3] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire [0:0]\S_AXI_ALEN_Q_reg[2] ;
  wire aclk;
  wire [0:0]\gen_pipelined.mesg_reg_reg[2] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[1] ;
  wire incr_need_to_split_q_reg;
  wire p_4_out;
  wire \pushed_commands_reg[0] ;
  wire [3:0]\pushed_commands_reg[3] ;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hBF80BFBFBF80BF80)) 
    \gen_pipelined.mesg_reg[2]_i_1 
       (.I0(p_4_out),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(\S_AXI_ALEN_Q_reg[2] ),
        .I4(\pushed_commands_reg[0] ),
        .I5(incr_need_to_split_q_reg),
        .O(\gen_pipelined.mesg_reg_reg[2] ));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[2].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[2].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(D),
        .Q(p_4_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \skid_buffer[1127]_i_1 
       (.I0(\S_AXI_ALEN_Q_reg[2] ),
        .I1(\pushed_commands_reg[3] [0]),
        .I2(\pushed_commands_reg[3] [1]),
        .I3(\pushed_commands_reg[3] [3]),
        .I4(\pushed_commands_reg[3] [2]),
        .I5(incr_need_to_split_q_reg),
        .O(D));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_73
   (shift,
    D,
    \gen_pipelined.mesg_reg_reg[3] ,
    Q,
    aclk,
    cmd_push_block,
    \USE_B_CHANNEL.s_b_ready ,
    command_ongoing,
    \gen_pipelined.state_reg[0] ,
    \gen_pipelined.state_reg[2] ,
    \gen_pipelined.state_reg[1] ,
    \S_AXI_ALEN_Q_reg[3] ,
    \pushed_commands_reg[0] ,
    incr_need_to_split_q_reg,
    \pushed_commands_reg[3] );
  output shift;
  output [0:0]D;
  output [0:0]\gen_pipelined.mesg_reg_reg[3] ;
  input [4:0]Q;
  input aclk;
  input cmd_push_block;
  input \USE_B_CHANNEL.s_b_ready ;
  input command_ongoing;
  input \gen_pipelined.state_reg[0] ;
  input \gen_pipelined.state_reg[2] ;
  input \gen_pipelined.state_reg[1] ;
  input [0:0]\S_AXI_ALEN_Q_reg[3] ;
  input \pushed_commands_reg[0] ;
  input incr_need_to_split_q_reg;
  input [3:0]\pushed_commands_reg[3] ;

  wire [0:0]D;
  wire [4:0]Q;
  wire [0:0]\S_AXI_ALEN_Q_reg[3] ;
  wire \USE_B_CHANNEL.s_b_ready ;
  wire aclk;
  wire cmd_push_block;
  wire command_ongoing;
  wire [0:0]\gen_pipelined.mesg_reg_reg[3] ;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[1] ;
  wire \gen_pipelined.state_reg[2] ;
  wire incr_need_to_split_q_reg;
  wire p_3_out;
  wire \pushed_commands_reg[0] ;
  wire [3:0]\pushed_commands_reg[3] ;
  wire shift;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hBF80BFBFBF80BF80)) 
    \gen_pipelined.mesg_reg[3]_i_2 
       (.I0(p_3_out),
        .I1(\gen_pipelined.state_reg[1] ),
        .I2(\gen_pipelined.state_reg[0] ),
        .I3(\S_AXI_ALEN_Q_reg[3] ),
        .I4(\pushed_commands_reg[0] ),
        .I5(incr_need_to_split_q_reg),
        .O(\gen_pipelined.mesg_reg_reg[3] ));
  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[3].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\splitter_inst/gen_axi3.axi3_conv_inst/USE_WRITE.write_addr_inst/USE_BURSTS.cmd_queue/gen_srls[3].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(Q),
        .CE(shift),
        .CLK(aclk),
        .D(D),
        .Q(p_3_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT6 #(
    .INIT(64'h40FF000000000000)) 
    \shift_reg_reg[0]_srl1_i_1 
       (.I0(cmd_push_block),
        .I1(\USE_B_CHANNEL.s_b_ready ),
        .I2(command_ongoing),
        .I3(\gen_pipelined.state_reg[0] ),
        .I4(\gen_pipelined.state_reg[2] ),
        .I5(\gen_pipelined.state_reg[1] ),
        .O(shift));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \skid_buffer[1128]_i_1 
       (.I0(\S_AXI_ALEN_Q_reg[3] ),
        .I1(\pushed_commands_reg[3] [0]),
        .I2(\pushed_commands_reg[3] [1]),
        .I3(\pushed_commands_reg[3] [3]),
        .I4(\pushed_commands_reg[3] [2]),
        .I5(incr_need_to_split_q_reg),
        .O(D));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_74
   (p_32_out,
    shift_qual,
    Q,
    A,
    aclk);
  output p_32_out;
  input shift_qual;
  input [0:0]Q;
  input [4:0]A;
  input aclk;

  wire [4:0]A;
  wire [0:0]Q;
  wire aclk;
  wire p_32_out;
  wire shift_qual;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\exit_inst/gen_w_cmd_fifo.w_cmd_fifo/gen_srls[1].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\exit_inst/gen_w_cmd_fifo.w_cmd_fifo/gen_srls[1].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift_qual),
        .CLK(aclk),
        .D(Q),
        .Q(p_32_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_srl_rtl" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_srl_rtl_75
   (p_31_out,
    shift_qual,
    Q,
    A,
    aclk,
    \gen_pipelined.state_reg[1] ,
    \gen_pipelined.state_reg[2] ,
    cmd_push_block_reg,
    \gen_pipelined.state_reg[0] );
  output p_31_out;
  output shift_qual;
  input [0:0]Q;
  input [4:0]A;
  input aclk;
  input \gen_pipelined.state_reg[1] ;
  input \gen_pipelined.state_reg[2] ;
  input cmd_push_block_reg;
  input \gen_pipelined.state_reg[0] ;

  wire [4:0]A;
  wire [0:0]Q;
  wire aclk;
  wire cmd_push_block_reg;
  wire \gen_pipelined.state_reg[0] ;
  wire \gen_pipelined.state_reg[1] ;
  wire \gen_pipelined.state_reg[2] ;
  wire p_31_out;
  wire shift_qual;
  wire \NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ;

  (* srl_bus_name = "inst/\m00_exit_pipeline/m00_exit/inst /\exit_inst/gen_w_cmd_fifo.w_cmd_fifo/gen_srls[2].srl_nx1/shift_reg_reg " *) 
  (* srl_name = "inst/\m00_exit_pipeline/m00_exit/inst /\exit_inst/gen_w_cmd_fifo.w_cmd_fifo/gen_srls[2].srl_nx1/shift_reg_reg[0]_srl1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \shift_reg_reg[0]_srl1 
       (.A(A),
        .CE(shift_qual),
        .CLK(aclk),
        .D(Q),
        .Q(p_31_out),
        .Q31(\NLW_shift_reg_reg[0]_srl1_Q31_UNCONNECTED ));
  LUT4 #(
    .INIT(16'h0888)) 
    \shift_reg_reg[0]_srl1_i_1__0 
       (.I0(\gen_pipelined.state_reg[1] ),
        .I1(\gen_pipelined.state_reg[2] ),
        .I2(cmd_push_block_reg),
        .I3(\gen_pipelined.state_reg[0] ),
        .O(shift_qual));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo
   (\gen_wr.afull_r ,
    s_sc_aclk,
    SR,
    areset_r_reg,
    arb_stall_late,
    s_sc_send,
    \gen_normal_area.m_sc_handshake0 ,
    s_sc_valid,
    m_sc_recv,
    \gen_normal_area.fifo_node_payld_empty );
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input arb_stall_late;
  input [0:0]s_sc_send;
  input \gen_normal_area.m_sc_handshake0 ;
  input s_sc_valid;
  input [0:0]m_sc_recv;
  input \gen_normal_area.fifo_node_payld_empty ;

  wire [0:0]SR;
  wire arb_stall_late;
  wire [0:0]areset_r_reg;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_rd.fifo_empty_r_inv_i_7_n_0 ;
  wire \gen_wr.afull_r ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_i_10_n_0 ;
  wire \gen_wr.afull_r_i_4_n_0 ;
  wire \gen_wr.afull_r_i_8_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_2 ;
  wire [0:0]m_sc_recv;
  wire p_0_in;
  wire rd_enb;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire s_sc_valid;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_9 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_10 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .arb_stall_late(arb_stall_late),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__3 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(1'b1),
        .doutb(\gen_mem_rep[0].inst_xpm_memory_n_0 ),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT3 #(
    .INIT(8'hD2)) 
    \gen_rd.fifo_empty_r_inv_i_2 
       (.I0(\gen_mem_rep[0].rd_addrb [4]),
        .I1(\gen_rd.fifo_empty_r_inv_i_7_n_0 ),
        .I2(\gen_mem_rep[0].rd_addrb [5]),
        .O(p_0_in));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_inv_i_7 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_rd.fifo_empty_r_inv_i_7_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_2 ),
        .Q(rd_enb),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \gen_wr.afull_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_normal_area.fifo_node_payld_empty ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gen_wr.afull_r_i_4 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_normal_area.m_sc_handshake0 ),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].rd_addrb [4]),
        .O(\gen_wr.afull_r_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \gen_wr.afull_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.afull_r_i_8_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.afull_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r0 ),
        .Q(\gen_wr.afull_r ),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_11 \gen_wr.inst_wr_addra_p1 
       (.SR(SR),
        .arb_stall_late(arb_stall_late),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[0]_0 (\gen_wr.afull_r_i_10_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.afull_r_i_8_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.afull_r_i_4_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_2 ),
        .\gen_wr.afull_r0 (\gen_wr.afull_r0 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .out(\gen_mem_rep[0].rd_addrb [1:0]),
        .p_0_in(p_0_in),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send),
        .s_sc_valid(s_sc_valid));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized0
   (m_sc_payld,
    m_sc_send,
    \count_r_reg[0] ,
    \count_r_reg[4] ,
    \count_r_reg[0]_0 ,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    m_sc_recv,
    E);
  output [52:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \count_r_reg[0] ;
  output \count_r_reg[4] ;
  output [0:0]\count_r_reg[0]_0 ;
  input s_sc_aclk;
  input [139:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire \count_r_reg[0] ;
  wire [0:0]\count_r_reg[0]_0 ;
  wire \count_r_reg[4] ;
  wire [139:0]dina;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_100 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_101 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_102 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_103 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_104 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_105 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_106 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_107 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_108 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_109 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_110 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_111 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_112 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_113 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_114 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_115 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_116 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_117 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_118 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_119 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_120 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_121 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_122 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_123 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_124 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_125 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_126 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_127 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_128 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_129 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_130 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_131 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_132 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_133 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_134 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_135 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_136 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_137 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_138 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_139 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_140 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_141 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_142 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_143 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_144 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_145 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_146 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_147 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_148 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_149 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_158 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_16 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_17 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_18 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_30 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_65 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_66 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_67 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_68 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_69 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_70 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_71 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_72 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_73 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_74 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_75 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_76 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_77 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_78 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_79 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_80 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_81 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_82 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_83 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_84 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_85 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_86 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_87 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_88 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_89 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_90 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_91 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_92 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_93 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_94 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_95 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_96 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_97 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_98 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_99 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire [52:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_56 \gen_mem_rep[0].inst_rd_addrb 
       (.E(\count_r_reg[0]_0 ),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\count_r_reg[4]_0 (\count_r_reg[4] ),
        .\gen_rd.fifo_empty_r_reg (\count_r_reg[0] ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_57 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "159" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "5088" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "159" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "159" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized0 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina[139],1'b0,1'b1,1'b1,dina[138:0],1'b0}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,\gen_mem_rep[0].inst_xpm_memory_n_16 ,\gen_mem_rep[0].inst_xpm_memory_n_17 ,\gen_mem_rep[0].inst_xpm_memory_n_18 ,m_sc_payld[52:42],\gen_mem_rep[0].inst_xpm_memory_n_30 ,m_sc_payld[41:8],\gen_mem_rep[0].inst_xpm_memory_n_65 ,\gen_mem_rep[0].inst_xpm_memory_n_66 ,\gen_mem_rep[0].inst_xpm_memory_n_67 ,\gen_mem_rep[0].inst_xpm_memory_n_68 ,\gen_mem_rep[0].inst_xpm_memory_n_69 ,\gen_mem_rep[0].inst_xpm_memory_n_70 ,\gen_mem_rep[0].inst_xpm_memory_n_71 ,\gen_mem_rep[0].inst_xpm_memory_n_72 ,\gen_mem_rep[0].inst_xpm_memory_n_73 ,\gen_mem_rep[0].inst_xpm_memory_n_74 ,\gen_mem_rep[0].inst_xpm_memory_n_75 ,\gen_mem_rep[0].inst_xpm_memory_n_76 ,\gen_mem_rep[0].inst_xpm_memory_n_77 ,\gen_mem_rep[0].inst_xpm_memory_n_78 ,\gen_mem_rep[0].inst_xpm_memory_n_79 ,\gen_mem_rep[0].inst_xpm_memory_n_80 ,\gen_mem_rep[0].inst_xpm_memory_n_81 ,\gen_mem_rep[0].inst_xpm_memory_n_82 ,\gen_mem_rep[0].inst_xpm_memory_n_83 ,\gen_mem_rep[0].inst_xpm_memory_n_84 ,\gen_mem_rep[0].inst_xpm_memory_n_85 ,\gen_mem_rep[0].inst_xpm_memory_n_86 ,\gen_mem_rep[0].inst_xpm_memory_n_87 ,\gen_mem_rep[0].inst_xpm_memory_n_88 ,\gen_mem_rep[0].inst_xpm_memory_n_89 ,\gen_mem_rep[0].inst_xpm_memory_n_90 ,\gen_mem_rep[0].inst_xpm_memory_n_91 ,\gen_mem_rep[0].inst_xpm_memory_n_92 ,\gen_mem_rep[0].inst_xpm_memory_n_93 ,\gen_mem_rep[0].inst_xpm_memory_n_94 ,\gen_mem_rep[0].inst_xpm_memory_n_95 ,\gen_mem_rep[0].inst_xpm_memory_n_96 ,\gen_mem_rep[0].inst_xpm_memory_n_97 ,\gen_mem_rep[0].inst_xpm_memory_n_98 ,\gen_mem_rep[0].inst_xpm_memory_n_99 ,\gen_mem_rep[0].inst_xpm_memory_n_100 ,\gen_mem_rep[0].inst_xpm_memory_n_101 ,\gen_mem_rep[0].inst_xpm_memory_n_102 ,\gen_mem_rep[0].inst_xpm_memory_n_103 ,\gen_mem_rep[0].inst_xpm_memory_n_104 ,\gen_mem_rep[0].inst_xpm_memory_n_105 ,\gen_mem_rep[0].inst_xpm_memory_n_106 ,\gen_mem_rep[0].inst_xpm_memory_n_107 ,\gen_mem_rep[0].inst_xpm_memory_n_108 ,\gen_mem_rep[0].inst_xpm_memory_n_109 ,\gen_mem_rep[0].inst_xpm_memory_n_110 ,\gen_mem_rep[0].inst_xpm_memory_n_111 ,\gen_mem_rep[0].inst_xpm_memory_n_112 ,\gen_mem_rep[0].inst_xpm_memory_n_113 ,\gen_mem_rep[0].inst_xpm_memory_n_114 ,\gen_mem_rep[0].inst_xpm_memory_n_115 ,\gen_mem_rep[0].inst_xpm_memory_n_116 ,\gen_mem_rep[0].inst_xpm_memory_n_117 ,\gen_mem_rep[0].inst_xpm_memory_n_118 ,\gen_mem_rep[0].inst_xpm_memory_n_119 ,\gen_mem_rep[0].inst_xpm_memory_n_120 ,\gen_mem_rep[0].inst_xpm_memory_n_121 ,\gen_mem_rep[0].inst_xpm_memory_n_122 ,\gen_mem_rep[0].inst_xpm_memory_n_123 ,\gen_mem_rep[0].inst_xpm_memory_n_124 ,\gen_mem_rep[0].inst_xpm_memory_n_125 ,\gen_mem_rep[0].inst_xpm_memory_n_126 ,\gen_mem_rep[0].inst_xpm_memory_n_127 ,\gen_mem_rep[0].inst_xpm_memory_n_128 ,\gen_mem_rep[0].inst_xpm_memory_n_129 ,\gen_mem_rep[0].inst_xpm_memory_n_130 ,\gen_mem_rep[0].inst_xpm_memory_n_131 ,\gen_mem_rep[0].inst_xpm_memory_n_132 ,\gen_mem_rep[0].inst_xpm_memory_n_133 ,\gen_mem_rep[0].inst_xpm_memory_n_134 ,\gen_mem_rep[0].inst_xpm_memory_n_135 ,\gen_mem_rep[0].inst_xpm_memory_n_136 ,\gen_mem_rep[0].inst_xpm_memory_n_137 ,\gen_mem_rep[0].inst_xpm_memory_n_138 ,\gen_mem_rep[0].inst_xpm_memory_n_139 ,\gen_mem_rep[0].inst_xpm_memory_n_140 ,\gen_mem_rep[0].inst_xpm_memory_n_141 ,\gen_mem_rep[0].inst_xpm_memory_n_142 ,\gen_mem_rep[0].inst_xpm_memory_n_143 ,\gen_mem_rep[0].inst_xpm_memory_n_144 ,\gen_mem_rep[0].inst_xpm_memory_n_145 ,\gen_mem_rep[0].inst_xpm_memory_n_146 ,\gen_mem_rep[0].inst_xpm_memory_n_147 ,\gen_mem_rep[0].inst_xpm_memory_n_148 ,\gen_mem_rep[0].inst_xpm_memory_n_149 ,m_sc_payld[7:0],\gen_mem_rep[0].inst_xpm_memory_n_158 }),
        .ena(1'b1),
        .enb(m_sc_send),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\count_r_reg[0] ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(m_sc_recv),
        .I3(\count_r_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(\count_r_reg[0] ),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_58 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[1]_0 (\gen_rd.fifo_empty_r_i_9_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_8_n_0 ),
        .\count_r_reg[3]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_0 ),
        .\gen_rd.fifo_empty_r_reg_0 (\count_r_reg[0] ),
        .\gen_rd.fifo_empty_r_reg_1 (\count_r_reg[4] ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .m_sc_recv(m_sc_recv),
        .out(\gen_mem_rep[0].rd_addrb ),
        .s_sc_aclk(s_sc_aclk));
  LUT1 #(
    .INIT(2'h1)) 
    \m_sc_send[0]_INST_0 
       (.I0(\count_r_reg[0] ),
        .O(m_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized1
   (doutb,
    \gen_AB_reg_slice.state_reg[1] ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    \gen_normal_area.fifo_send_ready ,
    p_0_in3_in,
    E);
  output [0:0]doutb;
  output \gen_AB_reg_slice.state_reg[1] ;
  input s_sc_aclk;
  input [0:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input \gen_normal_area.fifo_send_ready ;
  input p_0_in3_in;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire [0:0]doutb;
  wire \gen_AB_reg_slice.state_reg[1] ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_19 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire [1:0]\gen_normal_area.fifo_req_reqsend[req][sc_route] ;
  wire \gen_normal_area.fifo_req_valid ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_11_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire [0:0]s_sc_payld;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_50 \gen_mem_rep[0].inst_rd_addrb 
       (.E(E),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_AB_reg_slice.state_reg[1] ),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_51 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .areset_r(areset_r),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "20" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "640" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "20" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "20" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized1 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_sc_payld,1'b0,1'b0,1'b1}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,doutb,\gen_normal_area.fifo_req_reqsend[req][sc_route] ,\gen_mem_rep[0].inst_xpm_memory_n_19 }),
        .ena(1'b1),
        .enb(\gen_normal_area.fifo_req_valid ),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1 
       (.I0(\gen_AB_reg_slice.state_reg[1] ),
        .O(\gen_normal_area.fifo_req_valid ));
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.state_reg[1] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h08000000)) 
    \gen_rd.fifo_empty_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.state_reg[1] ),
        .I3(\gen_normal_area.fifo_send_ready ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(\gen_AB_reg_slice.state_reg[1] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\gen_AB_reg_slice.state_reg[1] ),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(wr_wea),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_52 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .areset_r(areset_r),
        .\count_r_reg[1]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_11_n_0 ),
        .\count_r_reg[3]_0 (\gen_rd.fifo_empty_r_i_9_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].rd_addrb ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_rd.fifo_empty_r_reg_0 (\gen_AB_reg_slice.state_reg[1] ),
        .\gen_wr.full_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_0 ),
        .out(\gen_mem_rep[0].wr_addra ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized2
   (m_sc_payld,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[2] ,
    p_0_in3_in,
    \gen_AB_reg_slice.payld_o_reg[2]_0 ,
    E);
  output [6:0]m_sc_payld;
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [3:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[2] ;
  input p_0_in3_in;
  input \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_AB_reg_slice.payld_o_reg[2] ;
  wire \gen_AB_reg_slice.payld_o_reg[2]_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_wr.afull_r ;
  wire \gen_wr.afull_r_i_11_n_0 ;
  wire \gen_wr.afull_r_i_14_n_0 ;
  wire \gen_wr.afull_r_i_15_n_0 ;
  wire \gen_wr.afull_r_i_17_n_0 ;
  wire \gen_wr.afull_r_i_18_n_0 ;
  wire \gen_wr.afull_r_i_7_n_0 ;
  wire \gen_wr.full_r_inv_i_8_n_0 ;
  wire \gen_wr.full_r_inv_i_9_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire \gen_wr.inst_wr_addra_p1_n_2 ;
  wire [6:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire p_0_in3_in;
  wire rd_enb;
  wire s_sc_aclk;
  wire [3:0]s_sc_payld;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_47 \gen_mem_rep[0].inst_rd_addrb 
       (.E(E),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_AB_reg_slice.payld_o_reg[2] (\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .\gen_AB_reg_slice.payld_o_reg[2]_0 (\gen_AB_reg_slice.payld_o_reg[2] ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_48 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .areset_r(areset_r),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "8" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "256" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "8" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "8" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized2 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({s_sc_payld,1'b0,1'b0,1'b0,1'b0}),
        .doutb({m_sc_payld,\gen_mem_rep[0].inst_xpm_memory_n_7 }),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_2 ),
        .Q(rd_enb),
        .R(SR));
  LUT3 #(
    .INIT(8'h6A)) 
    \gen_wr.afull_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[2] ),
        .O(\gen_wr.afull_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \gen_wr.afull_r_i_14 
       (.I0(\gen_mem_rep[0].rd_addrb [4]),
        .I1(\gen_mem_rep[0].rd_addrb [2]),
        .I2(\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.afull_r_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gen_wr.afull_r_i_15 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I4(m_sc_recv),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \gen_wr.afull_r_i_17 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I3(m_sc_recv),
        .O(\gen_wr.afull_r_i_17_n_0 ));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gen_wr.afull_r_i_18 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I3(m_sc_recv),
        .O(\gen_wr.afull_r_i_18_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \gen_wr.afull_r_i_7 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.afull_r_i_7_n_0 ));
  FDRE #(
    .INIT(1'b1)) 
    \gen_wr.afull_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\gen_wr.afull_r ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \gen_wr.full_r_inv_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.full_r_inv_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \gen_wr.full_r_inv_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[2] ),
        .I4(m_sc_recv),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.full_r_inv_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(wr_wea),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_49 \gen_wr.inst_wr_addra_p1 
       (.areset_r(areset_r),
        .\count_r_reg[0]_0 (\gen_wr.afull_r_i_11_n_0 ),
        .\count_r_reg[1]_0 (\gen_wr.afull_r_i_18_n_0 ),
        .\count_r_reg[1]_1 (\gen_wr.afull_r_i_17_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.full_r_inv_i_8_n_0 ),
        .\count_r_reg[2]_1 (\gen_wr.afull_r_i_7_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.full_r_inv_i_9_n_0 ),
        .\count_r_reg[3]_1 (\gen_wr.afull_r_i_15_n_0 ),
        .\count_r_reg[4]_0 (\gen_wr.afull_r_i_14_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].rd_addrb ),
        .\gen_AB_reg_slice.payld_o_reg[2] (\gen_AB_reg_slice.payld_o_reg[2] ),
        .\gen_AB_reg_slice.payld_o_reg[2]_0 (\gen_AB_reg_slice.payld_o_reg[2]_0 ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_2 ),
        .\gen_wr.afull_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.full_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_0 ),
        .m_sc_recv(m_sc_recv),
        .out(\gen_mem_rep[0].wr_addra ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3
   (\count_r_reg[0] ,
    s_axis_arb_tready,
    s_sc_aclk,
    s_sc_info,
    rstb,
    s_axis_arb_tdata,
    \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ,
    s_axis_arb_tvalid,
    s_sc_send,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    s_sc_req);
  output \count_r_reg[0] ;
  output s_axis_arb_tready;
  input s_sc_aclk;
  input [0:0]s_sc_info;
  input rstb;
  input [0:0]s_axis_arb_tdata;
  input \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  input s_axis_arb_tvalid;
  input [0:0]s_sc_send;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]s_sc_req;

  wire \count_r_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r_i_5_n_0 ;
  wire \gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire p_1_out;
  wire rd_enb;
  wire rstb;
  wire [0:0]s_axis_arb_tdata;
  wire s_axis_arb_tready;
  wire s_axis_arb_tvalid;
  wire s_sc_aclk;
  wire [0:0]s_sc_info;
  wire [0:0]s_sc_req;
  wire [0:0]s_sc_send;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized3 \gen_mem_rep[0].inst_rd_addrb 
       (.\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_mem_rep[0].rd_addrb (\gen_mem_rep[0].rd_addrb [0]),
        .\gen_rd.fifo_empty_r_reg (\count_r_reg[0] ),
        .\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late (\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .in0(\gen_mem_rep[0].rd_addrb [2:1]),
        .rstb(rstb),
        .s_axis_arb_tdata(s_axis_arb_tdata),
        .s_axis_arb_tvalid(s_axis_arb_tvalid),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized3_37 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .rstb(rstb),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_req(s_sc_req));
  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized3__3 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [1:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [1:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(s_sc_info),
        .doutb(p_1_out),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(rstb),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1 
       (.I0(\count_r_reg[0] ),
        .O(rd_enb));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_5 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(s_axis_arb_tdata),
        .I2(\count_r_reg[0] ),
        .I3(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .I4(s_axis_arb_tvalid),
        .I5(s_sc_send),
        .O(\gen_rd.fifo_empty_r_i_5_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\count_r_reg[0] ),
        .S(rstb));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .S(rstb));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized4 \gen_wr.inst_wr_addra_p1 
       (.\count_r_reg[0]_0 (\gen_rd.fifo_empty_r_i_5_n_0 ),
        .\count_r_reg[2]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .out(\gen_mem_rep[0].rd_addrb ),
        .rstb(rstb),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_req(s_sc_req));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    s_axis_arb_tready_INST_0
       (.I0(s_axis_arb_tdata),
        .I1(\count_r_reg[0] ),
        .I2(\gen_si_handler.gen_axis_packet_slave_normal_area.allow_transfer_late ),
        .I3(s_axis_arb_tvalid),
        .I4(s_sc_send),
        .I5(p_1_out),
        .O(s_axis_arb_tready));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3__xdcDup__1
   (s_sc_aclk,
    rstb);
  input s_sc_aclk;
  input rstb;

  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r0_n_0 ;
  wire \gen_wr.full_r0__0 ;
  wire p_5_out;
  wire rd_enb;
  wire rstb;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized3 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [1:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [1:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(1'b0),
        .doutb(p_5_out),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(rstb),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_rd.fifo_empty_r0 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_mem_rep[0].wr_addra [0]),
        .I2(\gen_mem_rep[0].wr_addra [2]),
        .I3(\gen_mem_rep[0].rd_addrb [2]),
        .I4(\gen_mem_rep[0].wr_addra [1]),
        .I5(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_rd.fifo_empty_r0_n_0 ),
        .Q(rd_enb),
        .R(rstb));
  LUT6 #(
    .INIT(64'hFFFF6FF66FF6FFFF)) 
    \gen_wr.full_r0 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_mem_rep[0].wr_addra [1]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_mem_rep[0].wr_addra [0]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].wr_addra [2]),
        .O(\gen_wr.full_r0__0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0__0 ),
        .Q(wr_wea),
        .S(rstb));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [0]));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized3__xdcDup__2
   (s_sc_aclk,
    rstb);
  input s_sc_aclk;
  input rstb;

  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [2:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r0_n_0 ;
  wire \gen_wr.full_r_inv_i_1__1_n_0 ;
  wire p_3_out;
  wire rd_enb;
  wire rstb;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  (* ADDR_WIDTH_A = "2" *) 
  (* ADDR_WIDTH_B = "2" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized3__4 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [1:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [1:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(1'b0),
        .doutb(p_3_out),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(rstb),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_rd.fifo_empty_r0 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_mem_rep[0].wr_addra [0]),
        .I2(\gen_mem_rep[0].wr_addra [2]),
        .I3(\gen_mem_rep[0].rd_addrb [2]),
        .I4(\gen_mem_rep[0].wr_addra [1]),
        .I5(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_rd.fifo_empty_r0_n_0 ),
        .Q(rd_enb),
        .R(rstb));
  LUT6 #(
    .INIT(64'hFFFF6FF66FF6FFFF)) 
    \gen_wr.full_r_inv_i_1__1 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_mem_rep[0].wr_addra [1]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_mem_rep[0].wr_addra [0]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].wr_addra [2]),
        .O(\gen_wr.full_r_inv_i_1__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r_inv_i_1__1_n_0 ),
        .Q(wr_wea),
        .S(rstb));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(\gen_mem_rep[0].rd_addrb [0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(\gen_mem_rep[0].wr_addra [0]));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized4
   (m_sc_payld,
    m_sc_send,
    \count_r_reg[0] ,
    \count_r_reg[0]_0 ,
    s_sc_aclk,
    dina,
    m_sc_areset_r,
    SR,
    m_sc_recv,
    E);
  output [71:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \count_r_reg[0] ;
  output [0:0]\count_r_reg[0]_0 ;
  input s_sc_aclk;
  input [87:0]dina;
  input m_sc_areset_r;
  input [0:0]SR;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire \count_r_reg[0] ;
  wire [0:0]\count_r_reg[0]_0 ;
  wire [87:0]dina;
  wire \gen_mem_rep[0].inst_xpm_memory_i_1__0_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_100 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_101 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_102 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_103 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_104 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_105 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_106 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_16 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_17 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_18 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_91 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_92 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_93 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_94 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_95 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_96 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_97 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_98 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_99 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire m_sc_areset_r;
  wire [71:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_39 \gen_mem_rep[0].inst_rd_addrb 
       (.E(\count_r_reg[0]_0 ),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .\gen_rd.fifo_empty_r_reg (\count_r_reg[0] ),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_40 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .SR(SR),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "107" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "3424" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "107" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "107" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized4 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina[87],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina[86],\gen_mem_rep[0].inst_xpm_memory_i_1__0_n_0 ,dina[85],1'b0,1'b1,dina[84:12],dina[84],dina[11:6],dina[87],dina[5:0],dina[86],1'b0}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,\gen_mem_rep[0].inst_xpm_memory_n_16 ,\gen_mem_rep[0].inst_xpm_memory_n_17 ,\gen_mem_rep[0].inst_xpm_memory_n_18 ,m_sc_payld,\gen_mem_rep[0].inst_xpm_memory_n_91 ,\gen_mem_rep[0].inst_xpm_memory_n_92 ,\gen_mem_rep[0].inst_xpm_memory_n_93 ,\gen_mem_rep[0].inst_xpm_memory_n_94 ,\gen_mem_rep[0].inst_xpm_memory_n_95 ,\gen_mem_rep[0].inst_xpm_memory_n_96 ,\gen_mem_rep[0].inst_xpm_memory_n_97 ,\gen_mem_rep[0].inst_xpm_memory_n_98 ,\gen_mem_rep[0].inst_xpm_memory_n_99 ,\gen_mem_rep[0].inst_xpm_memory_n_100 ,\gen_mem_rep[0].inst_xpm_memory_n_101 ,\gen_mem_rep[0].inst_xpm_memory_n_102 ,\gen_mem_rep[0].inst_xpm_memory_n_103 ,\gen_mem_rep[0].inst_xpm_memory_n_104 ,\gen_mem_rep[0].inst_xpm_memory_n_105 ,\gen_mem_rep[0].inst_xpm_memory_n_106 }),
        .ena(1'b1),
        .enb(m_sc_send),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(m_sc_areset_r),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT2 #(
    .INIT(4'h6)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1__0 
       (.I0(dina[87]),
        .I1(dina[86]),
        .O(\gen_mem_rep[0].inst_xpm_memory_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\count_r_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(m_sc_recv),
        .I2(\count_r_reg[0] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(\count_r_reg[0] ),
        .S(m_sc_areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(SR));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_41 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .SR(SR),
        .\count_r_reg[0]_0 (\gen_rd.fifo_empty_r_i_8_n_0 ),
        .\count_r_reg[1]_0 (\gen_rd.fifo_empty_r_i_9_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].rd_addrb ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_0 ),
        .\gen_rd.fifo_empty_r_reg_0 (\count_r_reg[0]_0 ),
        .\gen_rd.fifo_empty_r_reg_1 (\count_r_reg[0] ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .m_sc_recv(m_sc_recv),
        .out(\gen_mem_rep[0].wr_addra ),
        .s_sc_aclk(s_sc_aclk));
  LUT1 #(
    .INIT(2'h1)) 
    \m_sc_send[0]_INST_0 
       (.I0(\count_r_reg[0] ),
        .O(m_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized5
   (\gen_AB_reg_slice.state_reg[0] ,
    s_sc_aclk,
    SR,
    areset_r,
    \gen_normal_area.fifo_send_ready ,
    p_0_in3_in,
    E);
  output \gen_AB_reg_slice.state_reg[0] ;
  input s_sc_aclk;
  input [0:0]SR;
  input areset_r;
  input \gen_normal_area.fifo_send_ready ;
  input p_0_in3_in;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_AB_reg_slice.state_reg[0] ;
  wire \gen_mem_rep[0].inst_rd_addrb_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_16 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_17 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_req_valid ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_11_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire p_0_in3_in;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_17 \gen_mem_rep[0].inst_rd_addrb 
       (.E(E),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\count_r_reg[4]_0 (\gen_mem_rep[0].inst_rd_addrb_n_6 ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_AB_reg_slice.state_reg[0] ),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_18 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .areset_r(areset_r),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "18" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "576" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "18" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "18" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized5 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b1}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,\gen_mem_rep[0].inst_xpm_memory_n_16 ,\gen_mem_rep[0].inst_xpm_memory_n_17 }),
        .ena(1'b1),
        .enb(\gen_normal_area.fifo_req_valid ),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1 
       (.I0(\gen_AB_reg_slice.state_reg[0] ),
        .O(\gen_normal_area.fifo_req_valid ));
  LUT4 #(
    .INIT(16'h2000)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_AB_reg_slice.state_reg[0] ),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \gen_rd.fifo_empty_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(\gen_AB_reg_slice.state_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_AB_reg_slice.state_reg[0] ),
        .I3(\gen_normal_area.fifo_send_ready ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\gen_AB_reg_slice.state_reg[0] ),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(wr_wea),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_19 \gen_wr.inst_wr_addra_p1 
       (.areset_r(areset_r),
        .\count_r_reg[1]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_11_n_0 ),
        .\count_r_reg[3]_0 (\gen_rd.fifo_empty_r_i_9_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_rd.fifo_empty_r_reg_0 (\gen_AB_reg_slice.state_reg[0] ),
        .\gen_rd.fifo_empty_r_reg_1 (\gen_mem_rep[0].inst_rd_addrb_n_6 ),
        .\gen_wr.full_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_0 ),
        .out(\gen_mem_rep[0].rd_addrb ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized6
   (m_sc_payld,
    \gen_wr.afull_r ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r,
    m_sc_recv,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    p_0_in3_in,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    E);
  output [138:0]m_sc_payld;
  output \gen_wr.afull_r ;
  input s_sc_aclk;
  input [64:0]s_sc_payld;
  input [0:0]SR;
  input areset_r;
  input [0:0]m_sc_recv;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input p_0_in3_in;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire areset_r;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_139 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_wr.afull_r ;
  wire \gen_wr.afull_r_i_11_n_0 ;
  wire \gen_wr.afull_r_i_14_n_0 ;
  wire \gen_wr.afull_r_i_15_n_0 ;
  wire \gen_wr.afull_r_i_16_n_0 ;
  wire \gen_wr.afull_r_i_18_n_0 ;
  wire \gen_wr.afull_r_i_8_n_0 ;
  wire \gen_wr.full_r_inv_i_6_n_0 ;
  wire \gen_wr.full_r_inv_i_9_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire \gen_wr.inst_wr_addra_p1_n_2 ;
  wire [138:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire p_0_in3_in;
  wire rd_enb;
  wire s_sc_aclk;
  wire [64:0]s_sc_payld;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_14 \gen_mem_rep[0].inst_rd_addrb 
       (.E(E),
        .Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_AB_reg_slice.payld_o_reg[0] ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_15 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .areset_r(areset_r),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "140" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "4480" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "140" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "140" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized6 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({s_sc_payld[64:21],1'b1,1'b0,1'b0,s_sc_payld[20:16],1'b1,1'b1,1'b0,1'b0,s_sc_payld[15:8],1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_sc_payld[7:0],1'b0}),
        .doutb({m_sc_payld,\gen_mem_rep[0].inst_xpm_memory_n_139 }),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_2 ),
        .Q(rd_enb),
        .R(SR));
  LUT3 #(
    .INIT(8'h6A)) 
    \gen_wr.afull_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .O(\gen_wr.afull_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \gen_wr.afull_r_i_14 
       (.I0(\gen_mem_rep[0].rd_addrb [4]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.afull_r_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gen_wr.afull_r_i_15 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [2]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(m_sc_recv),
        .I5(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.afull_r_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gen_wr.afull_r_i_16 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.afull_r_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h9555)) 
    \gen_wr.afull_r_i_18 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_wr.afull_r_i_18_n_0 ));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gen_wr.afull_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_i_8_n_0 ));
  FDRE #(
    .INIT(1'b1)) 
    \gen_wr.afull_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\gen_wr.afull_r ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h9555555555555555)) 
    \gen_wr.full_r_inv_i_6 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [2]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(m_sc_recv),
        .I5(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.full_r_inv_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \gen_wr.full_r_inv_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.full_r_inv_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(wr_wea),
        .R(1'b0));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_16 \gen_wr.inst_wr_addra_p1 
       (.areset_r(areset_r),
        .\count_r_reg[0]_0 (\gen_wr.afull_r_i_11_n_0 ),
        .\count_r_reg[0]_1 (\gen_wr.afull_r_i_16_n_0 ),
        .\count_r_reg[1]_0 (\gen_wr.afull_r_i_18_n_0 ),
        .\count_r_reg[1]_1 (\gen_wr.afull_r_i_8_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.full_r_inv_i_9_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.afull_r_i_15_n_0 ),
        .\count_r_reg[3]_1 (\gen_wr.full_r_inv_i_6_n_0 ),
        .\count_r_reg[4]_0 (\gen_wr.afull_r_i_14_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_2 ),
        .\gen_wr.afull_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.full_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_0 ),
        .m_sc_recv(m_sc_recv),
        .out(\gen_mem_rep[0].rd_addrb ),
        .p_0_in3_in(p_0_in3_in),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized7
   (m_sc_payld,
    m_sc_send,
    \count_r_reg[0] ,
    \count_r_reg[0]_0 ,
    s_sc_aclk,
    s_sc_payld,
    SR,
    areset_r_reg,
    m_sc_recv,
    E);
  output [1:0]m_sc_payld;
  output [0:0]m_sc_send;
  output \count_r_reg[0] ;
  output [0:0]\count_r_reg[0]_0 ;
  input s_sc_aclk;
  input [6:0]s_sc_payld;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]m_sc_recv;
  input [0:0]E;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire \count_r_reg[0] ;
  wire [0:0]\count_r_reg[0]_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_16 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_17 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_20 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_21 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_22 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_23 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_24 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_25 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_7_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_inv_i_2__0_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire [1:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire [0:0]m_sc_send;
  wire s_sc_aclk;
  wire [6:0]s_sc_payld;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_6 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\count_r_reg[0]_0 (\count_r_reg[0]_0 ),
        .\gen_rd.fifo_empty_r_reg (\count_r_reg[0] ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_7 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "26" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "832" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "26" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "26" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized7 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b1,s_sc_payld[6:2],1'b0,s_sc_payld[1:0]}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,\gen_mem_rep[0].inst_xpm_memory_n_16 ,\gen_mem_rep[0].inst_xpm_memory_n_17 ,m_sc_payld,\gen_mem_rep[0].inst_xpm_memory_n_20 ,\gen_mem_rep[0].inst_xpm_memory_n_21 ,\gen_mem_rep[0].inst_xpm_memory_n_22 ,\gen_mem_rep[0].inst_xpm_memory_n_23 ,\gen_mem_rep[0].inst_xpm_memory_n_24 ,\gen_mem_rep[0].inst_xpm_memory_n_25 }),
        .ena(1'b1),
        .enb(m_sc_send),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT3 #(
    .INIT(8'hDF)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_7 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\count_r_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_rd.fifo_empty_r_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\count_r_reg[0] ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  FDRE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(\count_r_reg[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gen_wr.full_r_inv_i_2__0 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\count_r_reg[0]_0 ),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].rd_addrb [4]),
        .O(\gen_wr.full_r_inv_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_8 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .SR(SR),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[0]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[0]_1 (\gen_rd.fifo_empty_r_i_8_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_7_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.full_r_inv_i_2__0_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].rd_addrb ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .out(\gen_mem_rep[0].wr_addra ),
        .s_sc_aclk(s_sc_aclk),
        .\state_reg[s_ready_i] (\count_r_reg[0]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_sc_send[0]_INST_0 
       (.I0(\count_r_reg[0] ),
        .O(m_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized8
   (m_sc_info,
    \gen_AB_reg_slice.state_reg[0] ,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    E,
    \gen_normal_area.fifo_send_ready ,
    \gen_AB_reg_slice.state_reg[1] );
  output [0:0]m_sc_info;
  output \gen_AB_reg_slice.state_reg[0] ;
  input s_sc_aclk;
  input [4:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input [0:0]E;
  input \gen_normal_area.fifo_send_ready ;
  input [0:0]\gen_AB_reg_slice.state_reg[1] ;

  wire [0:0]E;
  wire [0:0]SR;
  wire [0:0]areset_r_reg;
  wire [4:0]dina;
  wire \gen_AB_reg_slice.state_reg[0] ;
  wire [0:0]\gen_AB_reg_slice.state_reg[1] ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_1 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_10 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_11 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_12 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_13 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_14 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_15 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_16 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_2 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_3 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_4 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_5 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_6 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_7 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_8 ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_9 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_req_valid ;
  wire \gen_normal_area.fifo_send_ready ;
  wire \gen_rd.fifo_empty_r_i_10_n_0 ;
  wire \gen_rd.fifo_empty_r_i_8_n_0 ;
  wire \gen_rd.fifo_empty_r_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire [0:0]m_sc_info;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_1 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_AB_reg_slice.state_reg[1] (\gen_AB_reg_slice.state_reg[1] ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_AB_reg_slice.state_reg[0] ),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_2 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "18" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "576" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "18" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "18" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized5__1 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina[4],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina[3:2],1'b0,dina[1:0]}),
        .doutb({\gen_mem_rep[0].inst_xpm_memory_n_0 ,\gen_mem_rep[0].inst_xpm_memory_n_1 ,\gen_mem_rep[0].inst_xpm_memory_n_2 ,\gen_mem_rep[0].inst_xpm_memory_n_3 ,\gen_mem_rep[0].inst_xpm_memory_n_4 ,\gen_mem_rep[0].inst_xpm_memory_n_5 ,\gen_mem_rep[0].inst_xpm_memory_n_6 ,\gen_mem_rep[0].inst_xpm_memory_n_7 ,\gen_mem_rep[0].inst_xpm_memory_n_8 ,\gen_mem_rep[0].inst_xpm_memory_n_9 ,\gen_mem_rep[0].inst_xpm_memory_n_10 ,\gen_mem_rep[0].inst_xpm_memory_n_11 ,\gen_mem_rep[0].inst_xpm_memory_n_12 ,\gen_mem_rep[0].inst_xpm_memory_n_13 ,\gen_mem_rep[0].inst_xpm_memory_n_14 ,\gen_mem_rep[0].inst_xpm_memory_n_15 ,\gen_mem_rep[0].inst_xpm_memory_n_16 ,m_sc_info}),
        .ena(1'b1),
        .enb(\gen_normal_area.fifo_req_valid ),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1 
       (.I0(\gen_AB_reg_slice.state_reg[0] ),
        .O(\gen_normal_area.fifo_req_valid ));
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_rd.fifo_empty_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_normal_area.fifo_send_ready ),
        .I2(\gen_AB_reg_slice.state_reg[0] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_rd.fifo_empty_r_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \gen_rd.fifo_empty_r_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_normal_area.fifo_send_ready ),
        .I3(\gen_AB_reg_slice.state_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_rd.fifo_empty_r_i_8_n_0 ));
  LUT5 #(
    .INIT(32'hF7FFFFFF)) 
    \gen_rd.fifo_empty_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.state_reg[0] ),
        .I3(\gen_normal_area.fifo_send_ready ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_rd.fifo_empty_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_rd.fifo_empty_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(\gen_AB_reg_slice.state_reg[0] ),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_3 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[1]_0 (\gen_rd.fifo_empty_r_i_10_n_0 ),
        .\count_r_reg[2]_0 (\gen_rd.fifo_empty_r_i_9_n_0 ),
        .\count_r_reg[3]_0 (\gen_rd.fifo_empty_r_i_8_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].rd_addrb ),
        .\gen_AB_reg_slice.state_reg[1] (\gen_AB_reg_slice.state_reg[1] ),
        .\gen_normal_area.fifo_send_ready (\gen_normal_area.fifo_send_ready ),
        .\gen_rd.fifo_empty_r_reg (\gen_wr.inst_wr_addra_p1_n_0 ),
        .\gen_rd.fifo_empty_r_reg_0 (\gen_AB_reg_slice.state_reg[0] ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .out(\gen_mem_rep[0].wr_addra ),
        .s_sc_aclk(s_sc_aclk));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__parameterized9
   (m_sc_payld,
    allow_transfer_r_reg,
    s_sc_aclk,
    dina,
    SR,
    areset_r_reg,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    m_sc_recv,
    allow_transfer_r,
    \gen_delay.delay_reg ,
    E,
    \gen_AB_reg_slice.payld_o_reg[0]_0 ,
    \gen_AB_reg_slice.payld_o_reg[0]_1 );
  output [86:0]m_sc_payld;
  output allow_transfer_r_reg;
  input s_sc_aclk;
  input [86:0]dina;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input [0:0]m_sc_recv;
  input allow_transfer_r;
  input \gen_delay.delay_reg ;
  input [0:0]E;
  input \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  input [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;

  wire [0:0]E;
  wire [0:0]SR;
  wire allow_transfer_r;
  wire allow_transfer_r_reg;
  wire [0:0]areset_r_reg;
  wire [86:0]dina;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_AB_reg_slice.payld_o_reg[0]_0 ;
  wire [0:0]\gen_AB_reg_slice.payld_o_reg[0]_1 ;
  wire \gen_delay.delay_reg ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_87 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_node_payld_full_i ;
  wire \gen_normal_area.fifo_node_payld_prog_full_i ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.full_r_i_11_n_0 ;
  wire \gen_wr.full_r_i_12_n_0 ;
  wire \gen_wr.full_r_i_14_n_0 ;
  wire \gen_wr.full_r_i_3_n_0 ;
  wire \gen_wr.full_r_i_5_n_0 ;
  wire \gen_wr.full_r_i_9_n_0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire \gen_wr.prog_full_r0 ;
  wire \gen_wr.prog_full_r_i_10_n_0 ;
  wire \gen_wr.prog_full_r_i_9_n_0 ;
  wire [86:0]m_sc_payld;
  wire [0:0]m_sc_recv;
  wire rd_enb;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT5 #(
    .INIT(32'h00015555)) 
    allow_transfer_r_i_1
       (.I0(\gen_normal_area.fifo_node_payld_full_i ),
        .I1(allow_transfer_r),
        .I2(\gen_delay.delay_reg ),
        .I3(E),
        .I4(\gen_normal_area.fifo_node_payld_prog_full_i ),
        .O(allow_transfer_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .\gen_AB_reg_slice.payld_o_reg[0]_0 (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_AB_reg_slice.payld_o_reg[0]_1 (\gen_AB_reg_slice.payld_o_reg[0]_1 ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_0 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .areset_r_reg(areset_r_reg),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "88" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "2816" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "88" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "88" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__parameterized8 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina({dina,1'b0}),
        .doutb({m_sc_payld,\gen_mem_rep[0].inst_xpm_memory_n_87 }),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gen_mem_rep[0].inst_xpm_memory_i_1__0 
       (.I0(\gen_normal_area.fifo_node_payld_full_i ),
        .O(wr_wea));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(rd_enb),
        .R(SR));
  LUT3 #(
    .INIT(8'h6A)) 
    \gen_wr.full_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(m_sc_recv),
        .O(\gen_wr.full_r_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \gen_wr.full_r_i_12 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(m_sc_recv),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_wr.full_r_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gen_wr.full_r_i_14 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.full_r_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \gen_wr.full_r_i_3 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.full_r_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \gen_wr.full_r_i_5 
       (.I0(\gen_mem_rep[0].rd_addrb [4]),
        .I1(\gen_mem_rep[0].rd_addrb [2]),
        .I2(\gen_mem_rep[0].rd_addrb [0]),
        .I3(\gen_AB_reg_slice.payld_o_reg[0]_0 ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.full_r_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \gen_wr.full_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.full_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.full_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(\gen_normal_area.fifo_node_payld_full_i ),
        .S(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[0]_0 (\gen_wr.prog_full_r_i_9_n_0 ),
        .\count_r_reg[0]_1 (\gen_wr.full_r_i_11_n_0 ),
        .\count_r_reg[1]_0 (\gen_wr.full_r_i_12_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.full_r_i_9_n_0 ),
        .\count_r_reg[2]_1 (\gen_wr.prog_full_r_i_10_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.full_r_i_3_n_0 ),
        .\count_r_reg[3]_1 (\gen_wr.full_r_i_14_n_0 ),
        .\count_r_reg[4]_0 (\gen_wr.full_r_i_5_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .\gen_wr.prog_full_r0 (\gen_wr.prog_full_r0 ),
        .m_sc_recv(m_sc_recv),
        .out(\gen_mem_rep[0].rd_addrb ),
        .s_sc_aclk(s_sc_aclk));
  LUT5 #(
    .INIT(32'h80000000)) 
    \gen_wr.prog_full_r_i_10 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.prog_full_r_i_10_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \gen_wr.prog_full_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_AB_reg_slice.payld_o_reg[0] ),
        .I2(m_sc_recv),
        .O(\gen_wr.prog_full_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.prog_full_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.prog_full_r0 ),
        .Q(\gen_normal_area.fifo_node_payld_prog_full_i ),
        .S(areset_r_reg));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__xdcDup__1
   (\gen_wr.afull_r ,
    Q,
    s_sc_aclk,
    SR,
    areset_r_reg,
    \grant_i_reg[2] ,
    \gen_AB_reg_slice.payld_o_reg[0] ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv,
    \grant_i_reg[2]_0 ,
    s_sc_send,
    \gen_rd.fifo_empty_r_reg ,
    E,
    S_AXI_AREADY_I_reg);
  output \gen_wr.afull_r ;
  output [0:0]Q;
  input s_sc_aclk;
  input [0:0]SR;
  input [0:0]areset_r_reg;
  input \grant_i_reg[2] ;
  input \gen_AB_reg_slice.payld_o_reg[0] ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;
  input \grant_i_reg[2]_0 ;
  input [0:0]s_sc_send;
  input \gen_rd.fifo_empty_r_reg ;
  input [0:0]E;
  input [0:0]S_AXI_AREADY_I_reg;

  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]S_AXI_AREADY_I_reg;
  wire [0:0]areset_r_reg;
  wire \gen_AB_reg_slice.payld_o_reg[0] ;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_rd.fifo_empty_r_reg ;
  wire \gen_wr.afull_r ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_i_11_n_0 ;
  wire \gen_wr.afull_r_i_12_n_0 ;
  wire \gen_wr.afull_r_i_13_n_0 ;
  wire \gen_wr.afull_r_i_15_n_0 ;
  wire \gen_wr.afull_r_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_0 ;
  wire \grant_i_reg[2] ;
  wire \grant_i_reg[2]_0 ;
  wire [0:0]m_sc_recv;
  wire rd_enb;
  wire s_sc_aclk;
  wire [0:0]s_sc_send;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_59 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .SR(SR),
        .S_AXI_AREADY_I_reg(S_AXI_AREADY_I_reg),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_rd.fifo_empty_r_reg (\gen_rd.fifo_empty_r_reg ),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_60 \gen_mem_rep[0].inst_wr_addra 
       (.E(E),
        .Q(\gen_mem_rep[0].wr_addra ),
        .areset_r_reg(areset_r_reg),
        .\grant_i_reg[2] (\grant_i_reg[2]_0 ),
        .\grant_i_reg[2]_0 (\grant_i_reg[2] ),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(1'b1),
        .doutb(\gen_mem_rep[0].inst_xpm_memory_n_0 ),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(SR),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_0 ),
        .Q(rd_enb),
        .R(SR));
  LUT4 #(
    .INIT(16'h9AAA)) 
    \gen_wr.afull_r_i_11 
       (.I0(\gen_mem_rep[0].rd_addrb [1]),
        .I1(\gen_normal_area.fifo_node_payld_empty ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [0]),
        .O(\gen_wr.afull_r_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \gen_wr.afull_r_i_12 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_normal_area.fifo_node_payld_empty ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \gen_wr.afull_r_i_13 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(\gen_normal_area.fifo_node_payld_empty ),
        .I3(m_sc_recv),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_i_13_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \gen_wr.afull_r_i_15 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.afull_r_i_15_n_0 ));
  LUT5 #(
    .INIT(32'hAA6AAAAA)) 
    \gen_wr.afull_r_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [1]),
        .O(\gen_wr.afull_r_i_9_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_wr.afull_r_reg 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r0 ),
        .Q(\gen_wr.afull_r ),
        .S(areset_r_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r_reg));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_61 \gen_wr.inst_wr_addra_p1 
       (.E(E),
        .Q(Q),
        .areset_r_reg(areset_r_reg),
        .\count_r_reg[1]_0 (\gen_wr.afull_r_i_11_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.afull_r_i_9_n_0 ),
        .\count_r_reg[2]_1 (\gen_wr.afull_r_i_15_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.afull_r_i_12_n_0 ),
        .\count_r_reg[3]_1 (\gen_wr.afull_r_i_13_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_AB_reg_slice.payld_o_reg[0] (\gen_AB_reg_slice.payld_o_reg[0] ),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_rd.fifo_empty_r_reg (\gen_rd.fifo_empty_r_reg ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_0 ),
        .\gen_wr.afull_r0 (\gen_wr.afull_r0 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .\grant_i_reg[2] (\grant_i_reg[2] ),
        .\grant_i_reg[2]_0 (\grant_i_reg[2]_0 ),
        .m_sc_recv(m_sc_recv),
        .out({\gen_mem_rep[0].rd_addrb [5:3],\gen_mem_rep[0].rd_addrb [1:0]}),
        .s_sc_aclk(s_sc_aclk),
        .s_sc_send(s_sc_send));
endmodule

(* ORIG_REF_NAME = "sc_util_v1_0_2_xpm_memory_fifo" *) 
module ADC_axi_smc_0_sc_util_v1_0_2_xpm_memory_fifo__xdcDup__2
   (allow_transfer,
    s_sc_aclk,
    m_sc_areset_r,
    areset_r,
    p_0_in2_out,
    \gen_normal_area.m_sc_handshake0 ,
    \gen_normal_area.fifo_node_payld_empty ,
    m_sc_recv);
  output allow_transfer;
  input s_sc_aclk;
  input m_sc_areset_r;
  input areset_r;
  input [0:0]p_0_in2_out;
  input \gen_normal_area.m_sc_handshake0 ;
  input \gen_normal_area.fifo_node_payld_empty ;
  input [0:0]m_sc_recv;

  wire allow_transfer;
  wire areset_r;
  wire \gen_mem_rep[0].inst_xpm_memory_n_0 ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].rd_addrb ;
  (* RTL_KEEP = "alse" *) wire [5:0]\gen_mem_rep[0].wr_addra ;
  wire \gen_normal_area.fifo_node_payld_empty ;
  wire \gen_normal_area.m_sc_handshake0 ;
  wire \gen_wr.afull_r0 ;
  wire \gen_wr.afull_r_inv_i_12_n_0 ;
  wire \gen_wr.afull_r_inv_i_5_n_0 ;
  wire \gen_wr.afull_r_inv_i_8_n_0 ;
  wire \gen_wr.afull_r_inv_i_9_n_0 ;
  wire \gen_wr.full_r0 ;
  wire \gen_wr.inst_wr_addra_p1_n_1 ;
  wire m_sc_areset_r;
  wire [0:0]m_sc_recv;
  wire [0:0]p_0_in2_out;
  wire rd_enb;
  wire s_sc_aclk;
  wire wr_wea;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ;

  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_42 \gen_mem_rep[0].inst_rd_addrb 
       (.Q(\gen_mem_rep[0].rd_addrb ),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .m_sc_areset_r(m_sc_areset_r),
        .m_sc_recv(m_sc_recv),
        .s_sc_aclk(s_sc_aclk));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized0_43 \gen_mem_rep[0].inst_wr_addra 
       (.Q(\gen_mem_rep[0].wr_addra ),
        .areset_r(areset_r),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk));
  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "1" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "1" *) 
  (* MEMORY_SIZE = "32" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* P_CLOCKING_MODE = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_MEMORY_OPTIMIZATION = "1" *) 
  (* P_MEMORY_PRIMITIVE = "1" *) 
  (* P_WAKEUP_TIME = "0" *) 
  (* P_WRITE_MODE_B = "1" *) 
  (* READ_DATA_WIDTH_B = "1" *) 
  (* READ_LATENCY_B = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  ADC_axi_smc_0_xpm_memory_sdpram__4 \gen_mem_rep[0].inst_xpm_memory 
       (.addra(\gen_mem_rep[0].wr_addra [4:0]),
        .addrb(\gen_mem_rep[0].rd_addrb [4:0]),
        .clka(s_sc_aclk),
        .clkb(s_sc_aclk),
        .dbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_dbiterrb_UNCONNECTED ),
        .dina(1'b1),
        .doutb(\gen_mem_rep[0].inst_xpm_memory_n_0 ),
        .ena(1'b1),
        .enb(rd_enb),
        .injectdbiterra(1'b0),
        .injectsbiterra(1'b0),
        .regceb(1'b1),
        .rstb(m_sc_areset_r),
        .sbiterrb(\NLW_gen_mem_rep[0].inst_xpm_memory_sbiterrb_UNCONNECTED ),
        .sleep(1'b0),
        .wea(wr_wea));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rd.fifo_empty_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.inst_wr_addra_p1_n_1 ),
        .Q(rd_enb),
        .R(m_sc_areset_r));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \gen_wr.afull_r_inv_i_12 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.afull_r_inv_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gen_wr.afull_r_inv_i_5 
       (.I0(\gen_mem_rep[0].rd_addrb [3]),
        .I1(\gen_mem_rep[0].rd_addrb [0]),
        .I2(\gen_normal_area.m_sc_handshake0 ),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .I5(\gen_mem_rep[0].rd_addrb [4]),
        .O(\gen_wr.afull_r_inv_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \gen_wr.afull_r_inv_i_8 
       (.I0(\gen_mem_rep[0].rd_addrb [0]),
        .I1(\gen_normal_area.fifo_node_payld_empty ),
        .I2(m_sc_recv),
        .I3(\gen_mem_rep[0].rd_addrb [1]),
        .I4(\gen_mem_rep[0].rd_addrb [2]),
        .O(\gen_wr.afull_r_inv_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \gen_wr.afull_r_inv_i_9 
       (.I0(\gen_mem_rep[0].rd_addrb [2]),
        .I1(\gen_mem_rep[0].rd_addrb [1]),
        .I2(m_sc_recv),
        .I3(\gen_normal_area.fifo_node_payld_empty ),
        .I4(\gen_mem_rep[0].rd_addrb [0]),
        .I5(\gen_mem_rep[0].rd_addrb [3]),
        .O(\gen_wr.afull_r_inv_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.afull_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.afull_r0 ),
        .Q(allow_transfer),
        .R(areset_r));
  FDRE #(
    .INIT(1'b0)) 
    \gen_wr.full_r_reg_inv 
       (.C(s_sc_aclk),
        .CE(1'b1),
        .D(\gen_wr.full_r0 ),
        .Q(wr_wea),
        .R(areset_r));
  ADC_axi_smc_0_sc_util_v1_0_2_counter__parameterized1_44 \gen_wr.inst_wr_addra_p1 
       (.areset_r(areset_r),
        .\count_r_reg[0]_0 (\gen_wr.afull_r_inv_i_8_n_0 ),
        .\count_r_reg[2]_0 (\gen_wr.afull_r_inv_i_9_n_0 ),
        .\count_r_reg[2]_1 (\gen_wr.afull_r_inv_i_12_n_0 ),
        .\count_r_reg[3]_0 (\gen_wr.afull_r_inv_i_5_n_0 ),
        .\count_r_reg[5]_0 (\gen_mem_rep[0].wr_addra ),
        .\gen_normal_area.fifo_node_payld_empty (\gen_normal_area.fifo_node_payld_empty ),
        .\gen_normal_area.m_sc_handshake0 (\gen_normal_area.m_sc_handshake0 ),
        .\gen_rd.fifo_empty_r_reg_inv (\gen_wr.inst_wr_addra_p1_n_1 ),
        .\gen_wr.afull_r0 (\gen_wr.afull_r0 ),
        .\gen_wr.full_r0 (\gen_wr.full_r0 ),
        .m_sc_recv(m_sc_recv),
        .out({\gen_mem_rep[0].rd_addrb [5:4],\gen_mem_rep[0].rd_addrb [1:0]}),
        .p_0_in2_out(p_0_in2_out),
        .s_sc_aclk(s_sc_aclk));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
